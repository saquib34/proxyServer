;(function(){'use strict';
const $LOG_NAMES$$module$src$const$$ = [[1, ""], [2, "CPU"], [32768, "DISK"], [4, "FPU"], [8, "MEM"], [16, "DMA"], [32, "IO"], [64, "PS2"], [128, "PIC"], [256, "VGA"], [512, "PIT"], [1024, "MOUS"], [2048, "PCI"], [4096, "BIOS"], [8192, "FLOP"], [16384, "SERI"], [65536, "RTC"], [262144, "ACPI"], [524288, "APIC"], [1048576, "NET"], [2097152, "VIO"], [4194304, "9P"], [8388608, "SB16"], [16777216, "FETC"], ];
function $pads$$module$src$lib$$($str$jscomp$6$$, $len$$) {
  return ($str$jscomp$6$$ || 0 === $str$jscomp$6$$ ? $str$jscomp$6$$ + "" : "").padEnd($len$$, " ");
}
function $pad0$$module$src$lib$$($str$jscomp$7$$, $len$jscomp$1$$) {
  return ($str$jscomp$7$$ || 0 === $str$jscomp$7$$ ? $str$jscomp$7$$ + "" : "").padStart($len$jscomp$1$$, "0");
}
function $view$$module$src$lib$$($constructor$$, $memory$$, $offset$jscomp$26$$, $length$jscomp$17$$) {
  $dbg_assert$$module$src$log$$(0 <= $offset$jscomp$26$$);
  return new Proxy({}, {get:function($b$jscomp$1_target$jscomp$91$$, $property$jscomp$5$$) {
    $b$jscomp$1_target$jscomp$91$$ = new $constructor$$($memory$$.buffer, $offset$jscomp$26$$, $length$jscomp$17$$);
    const $x$jscomp$88$$ = $b$jscomp$1_target$jscomp$91$$[$property$jscomp$5$$];
    if ("function" === typeof $x$jscomp$88$$) {
      return $x$jscomp$88$$.bind($b$jscomp$1_target$jscomp$91$$);
    }
    $dbg_assert$$module$src$log$$(/^\d+$/.test($property$jscomp$5$$) || "buffer" === $property$jscomp$5$$ || "length" === $property$jscomp$5$$ || "BYTES_PER_ELEMENT" === $property$jscomp$5$$ || "byteOffset" === $property$jscomp$5$$);
    return $x$jscomp$88$$;
  }, set:function($target$jscomp$92$$, $property$jscomp$6$$, $value$jscomp$91$$) {
    $dbg_assert$$module$src$log$$(/^\d+$/.test($property$jscomp$6$$));
    (new $constructor$$($memory$$.buffer, $offset$jscomp$26$$, $length$jscomp$17$$))[$property$jscomp$6$$] = $value$jscomp$91$$;
    return !0;
  }, });
}
function $h$$module$src$lib$$($n$jscomp$2_str$jscomp$8$$, $len$jscomp$2$$) {
  $n$jscomp$2_str$jscomp$8$$ = $n$jscomp$2_str$jscomp$8$$ ? $n$jscomp$2_str$jscomp$8$$.toString(16) : "";
  return "0x" + $pad0$$module$src$lib$$($n$jscomp$2_str$jscomp$8$$.toUpperCase(), $len$jscomp$2$$ || 1);
}
var $get_rand_int$$module$src$lib$$;
if ("undefined" !== typeof crypto && crypto.getRandomValues) {
  const $rand_data$$ = new Int32Array(1);
  $get_rand_int$$module$src$lib$$ = function() {
    crypto.getRandomValues($rand_data$$);
    return $rand_data$$[0];
  };
} else {
  if ("undefined" !== typeof require) {
    const $crypto$jscomp$1$$ = require("crypto");
    $get_rand_int$$module$src$lib$$ = function() {
      return $crypto$jscomp$1$$.randomBytes(4).readInt32LE(0);
    };
  } else {
    "undefined" !== typeof process ? import("node:crypto").then($crypto$jscomp$2$$ => {
      $get_rand_int$$module$src$lib$$ = function() {
        return $crypto$jscomp$2$$.randomBytes(4).readInt32LE(0);
      };
    }) : $dbg_assert$$module$src$log$$(!1, "Unsupported platform: No cryptographic random values");
  }
}
var $int_log2$$module$src$lib$$;
if ("function" === typeof Math.clz32) {
  $int_log2$$module$src$lib$$ = function($x$jscomp$91$$) {
    $dbg_assert$$module$src$log$$(0 < $x$jscomp$91$$);
    return 31 - Math.clz32($x$jscomp$91$$);
  };
} else {
  for (var $int_log2_table$$module$src$lib$$ = new Int8Array(256), $i$$module$src$lib$$ = 0, $b$$module$src$lib$$ = -2; 256 > $i$$module$src$lib$$; $i$$module$src$lib$$++) {
    $i$$module$src$lib$$ & $i$$module$src$lib$$ - 1 || $b$$module$src$lib$$++, $int_log2_table$$module$src$lib$$[$i$$module$src$lib$$] = $b$$module$src$lib$$;
  }
  $int_log2$$module$src$lib$$ = function($x$jscomp$92$$) {
    $x$jscomp$92$$ >>>= 0;
    $dbg_assert$$module$src$log$$(0 < $x$jscomp$92$$);
    var $tt$$ = $x$jscomp$92$$ >>> 16;
    if ($tt$$) {
      var $t$$ = $tt$$ >>> 8;
      return $t$$ ? 24 + $int_log2_table$$module$src$lib$$[$t$$] : 16 + $int_log2_table$$module$src$lib$$[$tt$$];
    }
    return ($t$$ = $x$jscomp$92$$ >>> 8) ? 8 + $int_log2_table$$module$src$lib$$[$t$$] : $int_log2_table$$module$src$lib$$[$x$jscomp$92$$];
  };
}
function $round_up_to_next_power_of_2$$module$src$lib$$($x$jscomp$93$$) {
  $dbg_assert$$module$src$log$$(0 <= $x$jscomp$93$$);
  return 1 >= $x$jscomp$93$$ ? 1 : 1 << 1 + $int_log2$$module$src$lib$$($x$jscomp$93$$ - 1);
}
$dbg_assert$$module$src$log$$(0 === $int_log2$$module$src$lib$$(1));
$dbg_assert$$module$src$log$$(1 === $int_log2$$module$src$lib$$(2));
$dbg_assert$$module$src$log$$(2 === $int_log2$$module$src$lib$$(7));
$dbg_assert$$module$src$log$$(3 === $int_log2$$module$src$lib$$(8));
$dbg_assert$$module$src$log$$(26 === $int_log2$$module$src$lib$$(123456789));
$dbg_assert$$module$src$log$$(1 === $round_up_to_next_power_of_2$$module$src$lib$$(0));
$dbg_assert$$module$src$log$$(1 === $round_up_to_next_power_of_2$$module$src$lib$$(1));
$dbg_assert$$module$src$log$$(2 === $round_up_to_next_power_of_2$$module$src$lib$$(2));
$dbg_assert$$module$src$log$$(8 === $round_up_to_next_power_of_2$$module$src$lib$$(7));
$dbg_assert$$module$src$log$$(8 === $round_up_to_next_power_of_2$$module$src$lib$$(8));
$dbg_assert$$module$src$log$$(134217728 === $round_up_to_next_power_of_2$$module$src$lib$$(123456789));
function $ByteQueue$$module$src$lib$$($size$jscomp$21$$) {
  var $data$jscomp$79$$ = new Uint8Array($size$jscomp$21$$), $start$jscomp$13$$, $end$jscomp$9$$;
  $dbg_assert$$module$src$log$$(0 === ($size$jscomp$21$$ & $size$jscomp$21$$ - 1));
  this.length = 0;
  this.push = function($item$jscomp$1$$) {
    this.length !== $size$jscomp$21$$ && this.length++;
    $data$jscomp$79$$[$end$jscomp$9$$] = $item$jscomp$1$$;
    $end$jscomp$9$$ = $end$jscomp$9$$ + 1 & $size$jscomp$21$$ - 1;
  };
  this.shift = function() {
    if (this.length) {
      var $item$jscomp$2$$ = $data$jscomp$79$$[$start$jscomp$13$$];
      $start$jscomp$13$$ = $start$jscomp$13$$ + 1 & $size$jscomp$21$$ - 1;
      this.length--;
      return $item$jscomp$2$$;
    }
    return -1;
  };
  this.peek = function() {
    return this.length ? $data$jscomp$79$$[$start$jscomp$13$$] : -1;
  };
  this.clear = function() {
    this.length = $end$jscomp$9$$ = $start$jscomp$13$$ = 0;
  };
  this.clear();
}
function $FloatQueue$$module$src$lib$$($size$jscomp$22$$) {
  this.size = $size$jscomp$22$$;
  this.data = new Float32Array($size$jscomp$22$$);
  this.length = this.end = this.start = 0;
  $dbg_assert$$module$src$log$$(0 === ($size$jscomp$22$$ & $size$jscomp$22$$ - 1));
}
$FloatQueue$$module$src$lib$$.prototype.push = function($item$jscomp$3$$) {
  this.length === this.size ? this.start = this.start + 1 & this.size - 1 : this.length++;
  this.data[this.end] = $item$jscomp$3$$;
  this.end = this.end + 1 & this.size - 1;
};
$FloatQueue$$module$src$lib$$.prototype.shift = function() {
  if (this.length) {
    var $item$jscomp$4$$ = this.data[this.start];
    this.start = this.start + 1 & this.size - 1;
    this.length--;
    return $item$jscomp$4$$;
  }
};
$FloatQueue$$module$src$lib$$.prototype.shift_block = function($count$jscomp$39$$) {
  var $slice$$ = new Float32Array($count$jscomp$39$$);
  $count$jscomp$39$$ > this.length && ($count$jscomp$39$$ = this.length);
  var $slice_end$$ = this.start + $count$jscomp$39$$, $partial$$ = this.data.subarray(this.start, $slice_end$$);
  $slice$$.set($partial$$);
  $slice_end$$ >= this.size && ($slice_end$$ -= this.size, $slice$$.set(this.data.subarray(0, $slice_end$$), $partial$$.length));
  this.start = $slice_end$$;
  this.length -= $count$jscomp$39$$;
  return $slice$$;
};
$FloatQueue$$module$src$lib$$.prototype.peek = function() {
  if (this.length) {
    return this.data[this.start];
  }
};
$FloatQueue$$module$src$lib$$.prototype.clear = function() {
  this.length = this.end = this.start = 0;
};
function $dump_file$$module$src$lib$$($a$jscomp$inline_288_ab$$, $ev$jscomp$inline_289_name$jscomp$74$$) {
  Array.isArray($a$jscomp$inline_288_ab$$) || ($a$jscomp$inline_288_ab$$ = [$a$jscomp$inline_288_ab$$]);
  var $file_or_blob$jscomp$inline_286$$ = new Blob($a$jscomp$inline_288_ab$$);
  $a$jscomp$inline_288_ab$$ = document.createElement("a");
  $a$jscomp$inline_288_ab$$.download = $ev$jscomp$inline_289_name$jscomp$74$$;
  $a$jscomp$inline_288_ab$$.href = window.URL.createObjectURL($file_or_blob$jscomp$inline_286$$);
  $a$jscomp$inline_288_ab$$.dataset.downloadurl = ["application/octet-stream", $a$jscomp$inline_288_ab$$.download, $a$jscomp$inline_288_ab$$.href].join(":");
  document.createEvent ? ($ev$jscomp$inline_289_name$jscomp$74$$ = document.createEvent("MouseEvent"), $ev$jscomp$inline_289_name$jscomp$74$$.initMouseEvent("click", !0, !0, window, 0, 0, 0, 0, 0, !1, !1, !1, !1, 0, null), $a$jscomp$inline_288_ab$$.dispatchEvent($ev$jscomp$inline_289_name$jscomp$74$$)) : $a$jscomp$inline_288_ab$$.click();
  window.URL.revokeObjectURL($a$jscomp$inline_288_ab$$.href);
}
function $Bitmap$$module$src$lib$$($length_or_buffer$$) {
  "number" === typeof $length_or_buffer$$ ? this.view = new Uint8Array($length_or_buffer$$ + 7 >> 3) : $length_or_buffer$$ instanceof ArrayBuffer ? this.view = new Uint8Array($length_or_buffer$$) : $dbg_assert$$module$src$log$$(!1, "Bitmap: Invalid argument");
}
$Bitmap$$module$src$lib$$.prototype.set = function($bit_mask_index$jscomp$73$$, $value$jscomp$92$$) {
  const $byte_index$$ = $bit_mask_index$jscomp$73$$ >> 3;
  $bit_mask_index$jscomp$73$$ = 1 << ($bit_mask_index$jscomp$73$$ & 7);
  this.view[$byte_index$$] = $value$jscomp$92$$ ? this.view[$byte_index$$] | $bit_mask_index$jscomp$73$$ : this.view[$byte_index$$] & ~$bit_mask_index$jscomp$73$$;
};
$Bitmap$$module$src$lib$$.prototype.get = function($index$jscomp$74$$) {
  return this.view[$index$jscomp$74$$ >> 3] >> ($index$jscomp$74$$ & 7) & 1;
};
$Bitmap$$module$src$lib$$.prototype.get_buffer = function() {
  return this.view.buffer;
};
var $load_file$$module$src$lib$$, $get_file_size$$module$src$lib$$;
if ("undefined" === typeof XMLHttpRequest || "undefined" !== typeof process && process.versions && process.versions.node) {
  let $fs$$;
  $load_file$$module$src$lib$$ = async function($fd_filename$jscomp$2$$, $options$jscomp$34$$) {
    $fs$$ || ($fs$$ = await import("node:fs/promises"));
    if ($options$jscomp$34$$.range) {
      $dbg_assert$$module$src$log$$(!$options$jscomp$34$$.as_json);
      $fd_filename$jscomp$2$$ = await $fs$$.open($fd_filename$jscomp$2$$, "r");
      const $length$jscomp$18$$ = $options$jscomp$34$$.range.length, $buffer$jscomp$17$$ = Buffer.allocUnsafe($length$jscomp$18$$);
      try {
        var $data$jscomp$80_result$jscomp$2_result$jscomp$3$$ = await $fd_filename$jscomp$2$$.read({buffer:$buffer$jscomp$17$$, position:$options$jscomp$34$$.range.start});
        $dbg_assert$$module$src$log$$($data$jscomp$80_result$jscomp$2_result$jscomp$3$$.bytesRead === $length$jscomp$18$$);
      } finally {
        await $fd_filename$jscomp$2$$.close();
      }
      $options$jscomp$34$$.done && $options$jscomp$34$$.done(new Uint8Array($buffer$jscomp$17$$));
    } else {
      $data$jscomp$80_result$jscomp$2_result$jscomp$3$$ = await $fs$$.readFile($fd_filename$jscomp$2$$, {encoding:$options$jscomp$34$$.as_json ? "utf-8" : null, }), $data$jscomp$80_result$jscomp$2_result$jscomp$3$$ = $options$jscomp$34$$.as_json ? JSON.parse($data$jscomp$80_result$jscomp$2_result$jscomp$3$$) : (new Uint8Array($data$jscomp$80_result$jscomp$2_result$jscomp$3$$)).buffer, $options$jscomp$34$$.done($data$jscomp$80_result$jscomp$2_result$jscomp$3$$);
    }
  };
  $get_file_size$$module$src$lib$$ = async function($path$jscomp$5$$) {
    $fs$$ || ($fs$$ = await import("node:fs/promises"));
    return (await $fs$$.stat($path$jscomp$5$$)).size;
  };
} else {
  $load_file$$module$src$lib$$ = async function($filename$jscomp$3$$, $options$jscomp$35$$, $n_tries$jscomp$1$$) {
    function $retry$$() {
      const $number_of_tries$$ = $n_tries$jscomp$1$$ || 0;
      setTimeout(() => {
        $load_file$$module$src$lib$$($filename$jscomp$3$$, $options$jscomp$35$$, $number_of_tries$$ + 1);
      }, 1000 * ([1, 1, 2, 3, 5, 8, 13, 21][$number_of_tries$$] || 34));
    }
    var $http$$ = new XMLHttpRequest;
    $http$$.open($options$jscomp$35$$.method || "get", $filename$jscomp$3$$, !0);
    $http$$.responseType = $options$jscomp$35$$.as_json ? "json" : "arraybuffer";
    if ($options$jscomp$35$$.headers) {
      for (var $header_names_start$jscomp$14$$ = Object.keys($options$jscomp$35$$.headers), $i$jscomp$3$$ = 0; $i$jscomp$3$$ < $header_names_start$jscomp$14$$.length; $i$jscomp$3$$++) {
        var $name$jscomp$76$$ = $header_names_start$jscomp$14$$[$i$jscomp$3$$];
        $http$$.setRequestHeader($name$jscomp$76$$, $options$jscomp$35$$.headers[$name$jscomp$76$$]);
      }
    }
    $options$jscomp$35$$.range && ($header_names_start$jscomp$14$$ = $options$jscomp$35$$.range.start, $http$$.setRequestHeader("Range", "bytes=" + $header_names_start$jscomp$14$$ + "-" + ($header_names_start$jscomp$14$$ + $options$jscomp$35$$.range.length - 1)), $http$$.setRequestHeader("X-Accept-Encoding", "identity"), $http$$.onreadystatechange = function() {
      200 === $http$$.status && (console.error("Server sent full file in response to ranged request, aborting", {filename:$filename$jscomp$3$$}), $http$$.abort());
    });
    $http$$.onload = function() {
      if (4 === $http$$.readyState) {
        if (200 !== $http$$.status && 206 !== $http$$.status) {
          console.error("Loading the image " + $filename$jscomp$3$$ + " failed (status %d)", $http$$.status), 500 <= $http$$.status && 600 > $http$$.status && $retry$$();
        } else {
          if ($http$$.response) {
            if ($options$jscomp$35$$.range) {
              const $enc$$ = $http$$.getResponseHeader("Content-Encoding");
              $enc$$ && "identity" !== $enc$$ && console.error("Server sent Content-Encoding in response to ranged request", {filename:$filename$jscomp$3$$, enc:$enc$$});
            }
            $options$jscomp$35$$.done && $options$jscomp$35$$.done($http$$.response, $http$$);
          }
        }
      }
    };
    $http$$.onerror = function($e$jscomp$8$$) {
      console.error("Loading the image " + $filename$jscomp$3$$ + " failed", $e$jscomp$8$$);
      $retry$$();
    };
    $options$jscomp$35$$.progress && ($http$$.onprogress = function($e$jscomp$9$$) {
      $options$jscomp$35$$.progress($e$jscomp$9$$);
    });
    $http$$.send(null);
  }, $get_file_size$$module$src$lib$$ = async function($url$jscomp$22$$) {
    return new Promise(($resolve$$, $reject$$) => {
      $load_file$$module$src$lib$$($url$jscomp$22$$, {done:($buffer$jscomp$18_header$jscomp$2$$, $http$jscomp$1_match$$) => {
        $buffer$jscomp$18_header$jscomp$2$$ = $http$jscomp$1_match$$.getResponseHeader("Content-Range") || "";
        ($http$jscomp$1_match$$ = $buffer$jscomp$18_header$jscomp$2$$.match(/\/(\d+)\s*$/)) ? $resolve$$(+$http$jscomp$1_match$$[1]) : $reject$$(Error("`Range: bytes=...` header not supported (Got `" + $buffer$jscomp$18_header$jscomp$2$$ + "`)"));
      }, headers:{Range:"bytes=0-0", "X-Accept-Encoding":"identity"}});
    });
  };
}
;var $LOG_LEVEL$$module$src$log$$ = -15786961;
const $dbg_log$$module$src$log$$ = function() {
  const $dbg_names$$ = $LOG_NAMES$$module$src$const$$.reduce(function($a$jscomp$2$$, $x$jscomp$94$$) {
    $a$jscomp$2$$[$x$jscomp$94$$[0]] = $x$jscomp$94$$[1];
    return $a$jscomp$2$$;
  }, {});
  var $log_last_message$$ = "", $log_message_repetitions$$ = 0;
  return function($message$jscomp$29_stuff$$, $level$jscomp$20_now_time_str$$) {
    $level$jscomp$20_now_time_str$$ = $level$jscomp$20_now_time_str$$ || 1;
    if ($level$jscomp$20_now_time_str$$ & $LOG_LEVEL$$module$src$log$$) {
      $message$jscomp$29_stuff$$ = "[" + $pads$$module$src$lib$$($dbg_names$$[$level$jscomp$20_now_time_str$$] || "", 4) + "] " + $message$jscomp$29_stuff$$;
      if ($message$jscomp$29_stuff$$ === $log_last_message$$ && ($log_message_repetitions$$++, 2048 > $log_message_repetitions$$)) {
        return;
      }
      $level$jscomp$20_now_time_str$$ = new Date;
      $level$jscomp$20_now_time_str$$ = $pad0$$module$src$lib$$($level$jscomp$20_now_time_str$$.getHours(), 2) + ":" + $pad0$$module$src$lib$$($level$jscomp$20_now_time_str$$.getMinutes(), 2) + ":" + $pad0$$module$src$lib$$($level$jscomp$20_now_time_str$$.getSeconds(), 2) + "+" + $pad0$$module$src$lib$$($level$jscomp$20_now_time_str$$.getMilliseconds(), 3) + " ";
      $log_message_repetitions$$ && (1 === $log_message_repetitions$$ ? console.log($level$jscomp$20_now_time_str$$ + $log_last_message$$) : console.log("Previous message repeated " + $log_message_repetitions$$ + " times"), $log_message_repetitions$$ = 0);
      console.log($level$jscomp$20_now_time_str$$ + $message$jscomp$29_stuff$$);
      $log_last_message$$ = $message$jscomp$29_stuff$$;
    }
  };
}();
function $dbg_assert$$module$src$log$$($cond$$, $msg$$) {
  if (!$cond$$) {
    debugger;
    console.trace();
    if ($msg$$) {
      throw "Assert failed: " + $msg$$;
    }
    throw "Assert failed";
  }
}
;function $ScreenAdapter$$module$src$browser$screen$$($options$jscomp$36$$, $screen_fill_buffer$$) {
  function $number_as_color$$($n$jscomp$4$$) {
    $n$jscomp$4$$ = $n$jscomp$4$$.toString(16);
    return "#" + "0".repeat(6 - $n$jscomp$4$$.length) + $n$jscomp$4$$;
  }
  function $render_font_bitmap$$($vga_bitmap$$) {
    var $bitmap_width_dst_inc_col$$ = 256 * $font_width$$, $bitmap_height_put_bit$$ = 8 * $font_height$$, $font_canvas_vga_inc_chr$$ = $font_context$$ ? $font_context$$.canvas : null;
    $font_canvas_vga_inc_chr$$ && $font_canvas_vga_inc_chr$$.width === $bitmap_width_dst_inc_col$$ && $font_canvas_vga_inc_chr$$.height === $bitmap_height_put_bit$$ || ($font_canvas_vga_inc_chr$$ ? ($font_canvas_vga_inc_chr$$.width = $bitmap_width_dst_inc_col$$, $font_canvas_vga_inc_chr$$.height = $bitmap_height_put_bit$$) : ($font_canvas_vga_inc_chr$$ = new OffscreenCanvas($bitmap_width_dst_inc_col$$, $bitmap_height_put_bit$$), $font_context$$ = $font_canvas_vga_inc_chr$$.getContext("2d")), $font_image_data$$ = 
    $font_context$$.createImageData($bitmap_width_dst_inc_col$$, $bitmap_height_put_bit$$));
    const $font_bitmap$$ = $font_image_data$$.data;
    let $i_dst$$ = 0, $is_visible$$;
    $bitmap_height_put_bit$$ = $font_width_dbl$$ ? function($value$jscomp$93$$) {
      $is_visible$$ = $is_visible$$ || $value$jscomp$93$$;
      $font_bitmap$$[$i_dst$$ + 3] = $value$jscomp$93$$;
      $font_bitmap$$[$i_dst$$ + 7] = $value$jscomp$93$$;
      $i_dst$$ += 8;
    } : function($value$jscomp$94$$) {
      $is_visible$$ = $is_visible$$ || $value$jscomp$94$$;
      $font_bitmap$$[$i_dst$$ + 3] = $value$jscomp$94$$;
      $i_dst$$ += 4;
    };
    $font_canvas_vga_inc_chr$$ = 32 - $font_height$$;
    const $dst_inc_row$$ = $bitmap_width_dst_inc_col$$ * ($font_height$$ - 1) * 4;
    $bitmap_width_dst_inc_col$$ = 4 * ($font_width$$ - $bitmap_width_dst_inc_col$$ * $font_height$$);
    const $dst_inc_line$$ = 1020 * $font_width$$;
    for (let $i_chr_all$$ = 0, $i_vga$$ = 0; 2048 > $i_chr_all$$; ++$i_chr_all$$, $i_vga$$ += $font_canvas_vga_inc_chr$$, $i_dst$$ += $bitmap_width_dst_inc_col$$) {
      const $i_chr$$ = $i_chr_all$$ % 256;
      $i_chr_all$$ && !$i_chr$$ && ($i_dst$$ += $dst_inc_row$$);
      $is_visible$$ = !1;
      for (let $i_line$$ = 0; $i_line$$ < $font_height$$; ++$i_line$$, ++$i_vga$$, $i_dst$$ += $dst_inc_line$$) {
        const $line_bits$$ = $vga_bitmap$$[$i_vga$$];
        for (let $i_bit$$ = 128; 0 < $i_bit$$; $i_bit$$ >>= 1) {
          $bitmap_height_put_bit$$($line_bits$$ & $i_bit$$ ? 255 : 0);
        }
        $font_width_9px$$ && $bitmap_height_put_bit$$($font_copy_8th_col$$ && 192 <= $i_chr$$ && 223 >= $i_chr$$ && $line_bits$$ & 1 ? 255 : 0);
      }
      $font_is_visible$$[$i_chr_all$$] = $is_visible$$ ? 1 : 0;
    }
    $font_context$$.putImageData($font_image_data$$, 0, 0);
  }
  function $elem_set_scale$$($elem$jscomp$1$$, $scale_x$jscomp$1$$, $scale_y$jscomp$1$$, $device_pixel_ratio_use_scale$$) {
    if ($scale_x$jscomp$1$$ && $scale_y$jscomp$1$$) {
      $elem$jscomp$1$$.style.width = "";
      $elem$jscomp$1$$.style.height = "";
      $device_pixel_ratio_use_scale$$ && ($elem$jscomp$1$$.style.transform = "");
      var $rectangle$$ = $elem$jscomp$1$$.getBoundingClientRect();
      $device_pixel_ratio_use_scale$$ ? $elem$jscomp$1$$.style.transform = (1 === $scale_x$jscomp$1$$ ? "" : " scaleX(" + $scale_x$jscomp$1$$ + ")") + (1 === $scale_y$jscomp$1$$ ? "" : " scaleY(" + $scale_y$jscomp$1$$ + ")") : (0 === $scale_x$jscomp$1$$ % 1 && 0 === $scale_y$jscomp$1$$ % 1 ? ($graphic_screen$$.style.imageRendering = "crisp-edges", $graphic_screen$$.style.imageRendering = "pixelated", $graphic_screen$$.style["-ms-interpolation-mode"] = "nearest-neighbor") : ($graphic_screen$$.style.imageRendering = 
      "", $graphic_screen$$.style["-ms-interpolation-mode"] = ""), $device_pixel_ratio_use_scale$$ = window.devicePixelRatio || 1, 0 !== $device_pixel_ratio_use_scale$$ % 1 && ($scale_x$jscomp$1$$ /= $device_pixel_ratio_use_scale$$, $scale_y$jscomp$1$$ /= $device_pixel_ratio_use_scale$$));
      1 !== $scale_x$jscomp$1$$ && ($elem$jscomp$1$$.style.width = $rectangle$$.width * $scale_x$jscomp$1$$ + "px");
      1 !== $scale_y$jscomp$1$$ && ($elem$jscomp$1$$.style.height = $rectangle$$.height * $scale_y$jscomp$1$$ + "px");
    }
  }
  const $screen_container$$ = $options$jscomp$36$$.container;
  this.screen_fill_buffer = $screen_fill_buffer$$;
  console.assert($screen_container$$, "options.container must be provided");
  this.FLAG_BLINKING = 1;
  this.FLAG_FONT_PAGE_B = 2;
  var $graphic_screen$$ = $screen_container$$.getElementsByTagName("canvas")[0], $graphic_context$$ = $graphic_screen$$.getContext("2d", {alpha:!1}), $text_screen$$ = $screen_container$$.getElementsByTagName("div")[0], $cursor_element$$ = document.createElement("div"), $cursor_row$$, $cursor_col$$, $scale_x$$ = void 0 !== $options$jscomp$36$$.scale ? $options$jscomp$36$$.scale : 1, $scale_y$$ = void 0 !== $options$jscomp$36$$.scale ? $options$jscomp$36$$.scale : 1, $base_scale$$ = 1, $changed_rows$$, 
  $mode$jscomp$15$$, $text_mode_data$$, $text_mode_width$$, $text_mode_height$$, $offscreen_context$$, $offscreen_extra_context$$, $font_context$$, $font_image_data$$, $font_is_visible$$ = new Int8Array(2048), $font_height$$, $font_width$$, $font_width_9px$$, $font_width_dbl$$, $font_copy_8th_col$$, $font_page_a$$ = 0, $font_page_b$$ = 0, $blink_visible$$, $tm_last_update$$ = 0, $cursor_start$$, $cursor_end$$, $cursor_enabled$$, $charmap_default$$ = [], $charmap$$ = $charmap_default$$, $timer_id$$ = 
  0, $paused$$ = !1;
  this.init = function() {
    const $charmap_low$$ = new Uint16Array([32, 9786, 9787, 9829, 9830, 9827, 9824, 8226, 9688, 9675, 9689, 9794, 9792, 9834, 9835, 9788, 9658, 9668, 8597, 8252, 182, 167, 9644, 8616, 8593, 8595, 8594, 8592, 8735, 8596, 9650, 9660]), $charmap_high$$ = new Uint16Array([8962, 199, 252, 233, 226, 228, 224, 229, 231, 234, 235, 232, 239, 238, 236, 196, 197, 201, 230, 198, 244, 246, 242, 251, 249, 255, 214, 220, 162, 163, 165, 8359, 402, 225, 237, 243, 250, 241, 209, 170, 186, 191, 8976, 172, 189, 188, 
    161, 171, 187, 9617, 9618, 9619, 9474, 9508, 9569, 9570, 9558, 9557, 9571, 9553, 9559, 9565, 9564, 9563, 9488, 9492, 9524, 9516, 9500, 9472, 9532, 9566, 9567, 9562, 9556, 9577, 9574, 9568, 9552, 9580, 9575, 9576, 9572, 9573, 9561, 9560, 9554, 9555, 9579, 9578, 9496, 9484, 9608, 9604, 9612, 9616, 9600, 945, 223, 915, 960, 931, 963, 181, 964, 934, 920, 937, 948, 8734, 966, 949, 8745, 8801, 177, 8805, 8804, 8992, 8993, 247, 8776, 176, 8729, 183, 8730, 8319, 178, 9632, 160]);
    for (var $i$jscomp$4$$ = 0, $chr$jscomp$1$$; 256 > $i$jscomp$4$$; $i$jscomp$4$$++) {
      $chr$jscomp$1$$ = 126 < $i$jscomp$4$$ ? $charmap_high$$[$i$jscomp$4$$ - 127] : 32 > $i$jscomp$4$$ ? $charmap_low$$[$i$jscomp$4$$] : $i$jscomp$4$$, $charmap_default$$.push(String.fromCharCode($chr$jscomp$1$$));
    }
    $cursor_element$$.classList.add("cursor");
    $cursor_element$$.style.position = "absolute";
    $cursor_element$$.style.backgroundColor = "#ccc";
    $cursor_element$$.style.width = "7px";
    $cursor_element$$.style.display = "inline-block";
    this.set_mode(!1);
    this.set_size_text(80, 25);
    2 === $mode$jscomp$15$$ && this.set_size_graphical(720, 400, 720, 400);
    this.set_scale($scale_x$$, $scale_y$$);
    this.timer();
  };
  this.make_screenshot = function() {
    const $image$jscomp$3$$ = new Image;
    if (1 === $mode$jscomp$15$$ || 2 === $mode$jscomp$15$$) {
      $image$jscomp$3$$.src = $graphic_screen$$.toDataURL("image/png");
    } else {
      const $char_size$$ = [9, 16], $canvas$$ = document.createElement("canvas");
      $canvas$$.width = $text_mode_width$$ * $char_size$$[0];
      $canvas$$.height = $text_mode_height$$ * $char_size$$[1];
      const $context$jscomp$2$$ = $canvas$$.getContext("2d");
      $context$jscomp$2$$.imageSmoothingEnabled = !1;
      $context$jscomp$2$$.font = window.getComputedStyle($text_screen$$).font;
      $context$jscomp$2$$.textBaseline = "top";
      for (let $y$jscomp$73$$ = 0; $y$jscomp$73$$ < $text_mode_height$$; $y$jscomp$73$$++) {
        for (let $x$jscomp$95$$ = 0; $x$jscomp$95$$ < $text_mode_width$$; $x$jscomp$95$$++) {
          const $index$jscomp$75$$ = 4 * ($y$jscomp$73$$ * $text_mode_width$$ + $x$jscomp$95$$), $character$$ = $text_mode_data$$[$index$jscomp$75$$ + 0], $fg_color$$ = $text_mode_data$$[$index$jscomp$75$$ + 3];
          $context$jscomp$2$$.fillStyle = $number_as_color$$($text_mode_data$$[$index$jscomp$75$$ + 2]);
          $context$jscomp$2$$.fillRect($x$jscomp$95$$ * $char_size$$[0], $y$jscomp$73$$ * $char_size$$[1], $char_size$$[0], $char_size$$[1]);
          $context$jscomp$2$$.fillStyle = $number_as_color$$($fg_color$$);
          $context$jscomp$2$$.fillText($charmap$$[$character$$], $x$jscomp$95$$ * $char_size$$[0], $y$jscomp$73$$ * $char_size$$[1]);
        }
      }
      "none" !== $cursor_element$$.style.display && $cursor_row$$ < $text_mode_height$$ && $cursor_col$$ < $text_mode_width$$ && ($context$jscomp$2$$.fillStyle = $cursor_element$$.style.backgroundColor, $context$jscomp$2$$.fillRect($cursor_col$$ * $char_size$$[0], $cursor_row$$ * $char_size$$[1] + parseInt($cursor_element$$.style.marginTop, 10), parseInt($cursor_element$$.style.width, 10), parseInt($cursor_element$$.style.height, 10)));
      $image$jscomp$3$$.src = $canvas$$.toDataURL("image/png");
    }
    return $image$jscomp$3$$;
  };
  this.put_char = function($row$$, $col_p$$, $chr$jscomp$2$$, $flags$jscomp$5$$, $bg_color$jscomp$1$$, $fg_color$jscomp$1$$) {
    $dbg_assert$$module$src$log$$(0 <= $row$$ && $row$$ < $text_mode_height$$);
    $dbg_assert$$module$src$log$$(0 <= $col_p$$ && $col_p$$ < $text_mode_width$$);
    $dbg_assert$$module$src$log$$(0 <= $chr$jscomp$2$$ && 256 > $chr$jscomp$2$$);
    $col_p$$ = 4 * ($row$$ * $text_mode_width$$ + $col_p$$);
    $text_mode_data$$[$col_p$$ + 0] = $chr$jscomp$2$$;
    $text_mode_data$$[$col_p$$ + 1] = $flags$jscomp$5$$;
    $text_mode_data$$[$col_p$$ + 2] = $bg_color$jscomp$1$$;
    $text_mode_data$$[$col_p$$ + 3] = $fg_color$jscomp$1$$;
    $changed_rows$$[$row$$] = 1;
  };
  this.timer = function() {
    $timer_id$$ = requestAnimationFrame(() => this.update_screen());
  };
  this.update_screen = function() {
    $paused$$ || (0 === $mode$jscomp$15$$ ? this.update_text() : 1 === $mode$jscomp$15$$ ? this.update_graphical() : this.update_graphical_text());
    this.timer();
  };
  this.update_text = function() {
    for (var $i$jscomp$5$$ = 0; $i$jscomp$5$$ < $text_mode_height$$; $i$jscomp$5$$++) {
      $changed_rows$$[$i$jscomp$5$$] && (this.text_update_row($i$jscomp$5$$), $changed_rows$$[$i$jscomp$5$$] = 0);
    }
  };
  this.update_graphical = function() {
    this.screen_fill_buffer();
  };
  this.update_graphical_text = function() {
    if ($offscreen_context$$) {
      var $font_canvas$jscomp$inline_19_tm_now$$ = performance.now();
      if (266 < $font_canvas$jscomp$inline_19_tm_now$$ - $tm_last_update$$) {
        $blink_visible$$ = !$blink_visible$$;
        $cursor_enabled$$ && ($changed_rows$$[$cursor_row$$] = 1);
        $offscreen_extra_canvas$jscomp$inline_20_txt_row_size$jscomp$inline_14$$ = 4 * $text_mode_width$$;
        for (let $row_i$jscomp$inline_15$$ = 0, $txt_i$jscomp$inline_16$$ = 0; $row_i$jscomp$inline_15$$ < $text_mode_height$$; ++$row_i$jscomp$inline_15$$) {
          if ($changed_rows$$[$row_i$jscomp$inline_15$$]) {
            $txt_i$jscomp$inline_16$$ += $offscreen_extra_canvas$jscomp$inline_20_txt_row_size$jscomp$inline_14$$;
          } else {
            for ($col_i$jscomp$inline_17_txt_row_size$jscomp$inline_21$$ = 0; $col_i$jscomp$inline_17_txt_row_size$jscomp$inline_21$$ < $text_mode_width$$; ++$col_i$jscomp$inline_17_txt_row_size$jscomp$inline_21$$, $txt_i$jscomp$inline_16$$ += 4) {
              if ($text_mode_data$$[$txt_i$jscomp$inline_16$$ + 1] & 1) {
                $changed_rows$$[$row_i$jscomp$inline_15$$] = 1;
                $txt_i$jscomp$inline_16$$ += $offscreen_extra_canvas$jscomp$inline_20_txt_row_size$jscomp$inline_14$$ - 4 * $col_i$jscomp$inline_17_txt_row_size$jscomp$inline_21$$;
                break;
              }
            }
          }
        }
        $tm_last_update$$ = $font_canvas$jscomp$inline_19_tm_now$$;
      }
      $font_canvas$jscomp$inline_19_tm_now$$ = $font_context$$.canvas;
      var $offscreen_extra_canvas$jscomp$inline_20_txt_row_size$jscomp$inline_14$$ = $offscreen_extra_context$$.canvas, $col_i$jscomp$inline_17_txt_row_size$jscomp$inline_21$$ = 4 * $text_mode_width$$;
      const $gfx_width$jscomp$inline_22$$ = $text_mode_width$$ * $font_width$$, $row_extra_2_y$jscomp$inline_24$$ = $font_height$$;
      let $n_rows_rendered$jscomp$inline_25$$ = 0;
      for (let $row_i$jscomp$inline_26$$ = 0, $row_y$jscomp$inline_27$$ = 0, $txt_i$jscomp$inline_28$$ = 0; $row_i$jscomp$inline_26$$ < $text_mode_height$$; ++$row_i$jscomp$inline_26$$, $row_y$jscomp$inline_27$$ += $font_height$$) {
        if (!$changed_rows$$[$row_i$jscomp$inline_26$$]) {
          $txt_i$jscomp$inline_28$$ += $col_i$jscomp$inline_17_txt_row_size$jscomp$inline_21$$;
          continue;
        }
        ++$n_rows_rendered$jscomp$inline_25$$;
        $offscreen_extra_context$$.clearRect(0, $row_extra_2_y$jscomp$inline_24$$, $gfx_width$jscomp$inline_22$$, $font_height$$);
        let $fg_rgba$jscomp$inline_29$$, $fg_x$jscomp$inline_30$$, $bg_rgba$jscomp$inline_31$$, $bg_x$jscomp$inline_32$$;
        for (let $col_x$jscomp$inline_33$$ = 0; $col_x$jscomp$inline_33$$ < $gfx_width$jscomp$inline_22$$; $col_x$jscomp$inline_33$$ += $font_width$$, $txt_i$jscomp$inline_28$$ += 4) {
          const $chr$jscomp$inline_34$$ = $text_mode_data$$[$txt_i$jscomp$inline_28$$ + 0];
          var $chr_flags$jscomp$inline_35_chr_visible$jscomp$inline_39$$ = $text_mode_data$$[$txt_i$jscomp$inline_28$$ + 1];
          const $chr_bg_rgba$jscomp$inline_36$$ = $text_mode_data$$[$txt_i$jscomp$inline_28$$ + 2], $chr_fg_rgba$jscomp$inline_37$$ = $text_mode_data$$[$txt_i$jscomp$inline_28$$ + 3], $chr_font_page$jscomp$inline_38$$ = $chr_flags$jscomp$inline_35_chr_visible$jscomp$inline_39$$ & 2 ? $font_page_b$$ : $font_page_a$$;
          $chr_flags$jscomp$inline_35_chr_visible$jscomp$inline_39$$ = (!($chr_flags$jscomp$inline_35_chr_visible$jscomp$inline_39$$ & 1) || $blink_visible$$) && $font_is_visible$$[($chr_font_page$jscomp$inline_38$$ << 8) + $chr$jscomp$inline_34$$];
          $bg_rgba$jscomp$inline_31$$ !== $chr_bg_rgba$jscomp$inline_36$$ && (void 0 !== $bg_rgba$jscomp$inline_31$$ && ($offscreen_context$$.fillStyle = $number_as_color$$($bg_rgba$jscomp$inline_31$$), $offscreen_context$$.fillRect($bg_x$jscomp$inline_32$$, $row_y$jscomp$inline_27$$, $col_x$jscomp$inline_33$$ - $bg_x$jscomp$inline_32$$, $font_height$$)), $bg_rgba$jscomp$inline_31$$ = $chr_bg_rgba$jscomp$inline_36$$, $bg_x$jscomp$inline_32$$ = $col_x$jscomp$inline_33$$);
          $fg_rgba$jscomp$inline_29$$ !== $chr_fg_rgba$jscomp$inline_37$$ && (void 0 !== $fg_rgba$jscomp$inline_29$$ && ($offscreen_extra_context$$.fillStyle = $number_as_color$$($fg_rgba$jscomp$inline_29$$), $offscreen_extra_context$$.fillRect($fg_x$jscomp$inline_30$$, 0, $col_x$jscomp$inline_33$$ - $fg_x$jscomp$inline_30$$, $font_height$$)), $fg_rgba$jscomp$inline_29$$ = $chr_fg_rgba$jscomp$inline_37$$, $fg_x$jscomp$inline_30$$ = $col_x$jscomp$inline_33$$);
          $chr_flags$jscomp$inline_35_chr_visible$jscomp$inline_39$$ && $offscreen_extra_context$$.drawImage($font_canvas$jscomp$inline_19_tm_now$$, $chr$jscomp$inline_34$$ * $font_width$$, $chr_font_page$jscomp$inline_38$$ * $font_height$$, $font_width$$, $font_height$$, $col_x$jscomp$inline_33$$, $row_extra_2_y$jscomp$inline_24$$, $font_width$$, $font_height$$);
        }
        $offscreen_extra_context$$.fillStyle = $number_as_color$$($fg_rgba$jscomp$inline_29$$);
        $offscreen_extra_context$$.fillRect($fg_x$jscomp$inline_30$$, 0, $gfx_width$jscomp$inline_22$$ - $fg_x$jscomp$inline_30$$, $font_height$$);
        $offscreen_extra_context$$.globalCompositeOperation = "destination-in";
        $offscreen_extra_context$$.drawImage($offscreen_extra_canvas$jscomp$inline_20_txt_row_size$jscomp$inline_14$$, 0, $row_extra_2_y$jscomp$inline_24$$, $gfx_width$jscomp$inline_22$$, $font_height$$, 0, 0, $gfx_width$jscomp$inline_22$$, $font_height$$);
        $offscreen_extra_context$$.globalCompositeOperation = "source-over";
        $offscreen_context$$.fillStyle = $number_as_color$$($bg_rgba$jscomp$inline_31$$);
        $offscreen_context$$.fillRect($bg_x$jscomp$inline_32$$, $row_y$jscomp$inline_27$$, $gfx_width$jscomp$inline_22$$ - $bg_x$jscomp$inline_32$$, $font_height$$);
        $offscreen_context$$.drawImage($offscreen_extra_canvas$jscomp$inline_20_txt_row_size$jscomp$inline_14$$, 0, 0, $gfx_width$jscomp$inline_22$$, $font_height$$, 0, $row_y$jscomp$inline_27$$, $gfx_width$jscomp$inline_22$$, $font_height$$);
      }
      $n_rows_rendered$jscomp$inline_25$$ && ($blink_visible$$ && $cursor_enabled$$ && $changed_rows$$[$cursor_row$$] && ($offscreen_context$$.fillStyle = $number_as_color$$($text_mode_data$$[4 * ($cursor_row$$ * $text_mode_width$$ + $cursor_col$$) + 3]), $offscreen_context$$.fillRect($cursor_col$$ * $font_width$$, $cursor_row$$ * $font_height$$ + $cursor_start$$, $font_width$$, $cursor_end$$ - $cursor_start$$ + 1)), $changed_rows$$.fill(0));
      $n_rows_rendered$jscomp$inline_25$$ && $graphic_context$$.drawImage($offscreen_context$$.canvas, 0, 0);
    }
  };
  this.destroy = function() {
    $timer_id$$ && (cancelAnimationFrame($timer_id$$), $timer_id$$ = 0);
  };
  this.pause = function() {
    $paused$$ = !0;
    $cursor_element$$.classList.remove("blinking-cursor");
  };
  this.continue = function() {
    $paused$$ = !1;
    $cursor_element$$.classList.add("blinking-cursor");
  };
  this.set_mode = function($graphical$$) {
    $mode$jscomp$15$$ = $graphical$$ ? 1 : $options$jscomp$36$$.use_graphical_text ? 2 : 0;
    0 === $mode$jscomp$15$$ ? ($text_screen$$.style.display = "block", $graphic_screen$$.style.display = "none") : ($text_screen$$.style.display = "none", $graphic_screen$$.style.display = "block", 2 === $mode$jscomp$15$$ && $changed_rows$$ && $changed_rows$$.fill(1));
  };
  this.set_font_bitmap = function($height$jscomp$25$$, $width_9px$$, $width_dbl$$, $copy_8th_col$$, $vga_bitmap$jscomp$1$$, $size_changed_vga_bitmap_changed$$) {
    const $width$jscomp$28$$ = $width_dbl$$ ? 16 : $width_9px$$ ? 9 : 8;
    if ($font_height$$ !== $height$jscomp$25$$ || $font_width$$ !== $width$jscomp$28$$ || $font_width_9px$$ !== $width_9px$$ || $font_width_dbl$$ !== $width_dbl$$ || $font_copy_8th_col$$ !== $copy_8th_col$$ || $size_changed_vga_bitmap_changed$$) {
      $size_changed_vga_bitmap_changed$$ = $font_width$$ !== $width$jscomp$28$$ || $font_height$$ !== $height$jscomp$25$$, $font_height$$ = $height$jscomp$25$$, $font_width$$ = $width$jscomp$28$$, $font_width_9px$$ = $width_9px$$, $font_width_dbl$$ = $width_dbl$$, $font_copy_8th_col$$ = $copy_8th_col$$, 2 === $mode$jscomp$15$$ && ($render_font_bitmap$$($vga_bitmap$jscomp$1$$), $changed_rows$$.fill(1), $size_changed_vga_bitmap_changed$$ && this.set_size_graphical_text());
    }
  };
  this.set_font_page = function($page_a$$, $page_b$$) {
    if ($font_page_a$$ !== $page_a$$ || $font_page_b$$ !== $page_b$$) {
      $font_page_a$$ = $page_a$$, $font_page_b$$ = $page_b$$, $changed_rows$$.fill(1);
    }
  };
  this.clear_screen = function() {
    $graphic_context$$.fillStyle = "#000";
    $graphic_context$$.fillRect(0, 0, $graphic_screen$$.width, $graphic_screen$$.height);
  };
  this.set_size_graphical_text = function() {
    if ($font_context$$) {
      var $gfx_width$jscomp$1$$ = $font_width$$ * $text_mode_width$$, $gfx_height$$ = $font_height$$ * $text_mode_height$$, $offscreen_extra_height$$ = 2 * $font_height$$;
      $offscreen_context$$ && $offscreen_context$$.canvas.width === $gfx_width$jscomp$1$$ && $offscreen_context$$.canvas.height === $gfx_height$$ && $offscreen_extra_context$$.canvas.height === $offscreen_extra_height$$ || ($offscreen_context$$ ? ($offscreen_context$$.canvas.width = $gfx_width$jscomp$1$$, $offscreen_context$$.canvas.height = $gfx_height$$, $offscreen_extra_context$$.canvas.width = $gfx_width$jscomp$1$$, $offscreen_extra_context$$.canvas.height = $offscreen_extra_height$$) : ($offscreen_context$$ = 
      (new OffscreenCanvas($gfx_width$jscomp$1$$, $gfx_height$$)).getContext("2d", {alpha:!1}), $offscreen_extra_context$$ = (new OffscreenCanvas($gfx_width$jscomp$1$$, $offscreen_extra_height$$)).getContext("2d")), this.set_size_graphical($gfx_width$jscomp$1$$, $gfx_height$$, $gfx_width$jscomp$1$$, $gfx_height$$), $changed_rows$$.fill(1));
    }
  };
  this.set_size_text = function($cols_i$jscomp$6$$, $rows$$) {
    if ($cols_i$jscomp$6$$ !== $text_mode_width$$ || $rows$$ !== $text_mode_height$$) {
      if ($changed_rows$$ = new Int8Array($rows$$), $text_mode_data$$ = new Int32Array($cols_i$jscomp$6$$ * $rows$$ * 4), $text_mode_width$$ = $cols_i$jscomp$6$$, $text_mode_height$$ = $rows$$, 0 === $mode$jscomp$15$$) {
        for (; $text_screen$$.childNodes.length > $rows$$;) {
          $text_screen$$.removeChild($text_screen$$.firstChild);
        }
        for (; $text_screen$$.childNodes.length < $rows$$;) {
          $text_screen$$.appendChild(document.createElement("div"));
        }
        for ($cols_i$jscomp$6$$ = 0; $cols_i$jscomp$6$$ < $rows$$; $cols_i$jscomp$6$$++) {
          this.text_update_row($cols_i$jscomp$6$$);
        }
        $elem_set_scale$$($text_screen$$, $scale_x$$, $scale_y$$, !0);
      } else {
        2 === $mode$jscomp$15$$ && this.set_size_graphical_text();
      }
    }
  };
  this.set_size_graphical = function($width$jscomp$29$$, $height$jscomp$26$$) {
    $graphic_screen$$.style.display = "block";
    $graphic_screen$$.width = $width$jscomp$29$$;
    $graphic_screen$$.height = $height$jscomp$26$$;
    $graphic_context$$.imageSmoothingEnabled = !1;
    $base_scale$$ = 640 >= $width$jscomp$29$$ && 2 * $width$jscomp$29$$ < window.innerWidth * window.devicePixelRatio && 2 * $height$jscomp$26$$ < window.innerHeight * window.devicePixelRatio ? 2 : 1;
    $elem_set_scale$$($graphic_screen$$, $scale_x$$ * $base_scale$$, $scale_y$$ * $base_scale$$, !1);
  };
  this.set_charmap = function($text_charmap$$) {
    $charmap$$ = $text_charmap$$ || $charmap_default$$;
  };
  this.set_scale = function($s_x$$, $s_y$$) {
    $scale_x$$ = $s_x$$;
    $scale_y$$ = $s_y$$;
    $elem_set_scale$$($text_screen$$, $scale_x$$, $scale_y$$, !0);
    $elem_set_scale$$($graphic_screen$$, $scale_x$$ * $base_scale$$, $scale_y$$ * $base_scale$$, !1);
  };
  this.update_cursor_scanline = function($start$jscomp$15$$, $end$jscomp$11$$, $enabled$$) {
    if ($start$jscomp$15$$ !== $cursor_start$$ || $end$jscomp$11$$ !== $cursor_end$$ || $enabled$$ !== $cursor_enabled$$) {
      0 === $mode$jscomp$15$$ ? $enabled$$ ? ($cursor_element$$.style.display = "inline", $cursor_element$$.style.height = $end$jscomp$11$$ - $start$jscomp$15$$ + "px", $cursor_element$$.style.marginTop = $start$jscomp$15$$ + "px") : $cursor_element$$.style.display = "none" : 2 === $mode$jscomp$15$$ && $cursor_row$$ < $text_mode_height$$ && ($changed_rows$$[$cursor_row$$] = 1), $cursor_start$$ = $start$jscomp$15$$, $cursor_end$$ = $end$jscomp$11$$, $cursor_enabled$$ = $enabled$$;
    }
  };
  this.update_cursor = function($row$jscomp$1$$, $col$jscomp$1$$) {
    if ($row$jscomp$1$$ !== $cursor_row$$ || $col$jscomp$1$$ !== $cursor_col$$) {
      $row$jscomp$1$$ < $text_mode_height$$ && ($changed_rows$$[$row$jscomp$1$$] = 1), $cursor_row$$ < $text_mode_height$$ && ($changed_rows$$[$cursor_row$$] = 1), $cursor_row$$ = $row$jscomp$1$$, $cursor_col$$ = $col$jscomp$1$$;
    }
  };
  this.text_update_row = function($row$jscomp$2$$) {
    var $offset$jscomp$29$$ = 4 * $row$jscomp$2$$ * $text_mode_width$$, $text$jscomp$10$$;
    var $row_element$$ = $text_screen$$.childNodes[$row$jscomp$2$$];
    var $fragment$$ = document.createElement("div");
    for (var $i$jscomp$7$$ = 0; $i$jscomp$7$$ < $text_mode_width$$;) {
      var $color_element$$ = document.createElement("span");
      var $blinking$$ = $text_mode_data$$[$offset$jscomp$29$$ + 1] & 1;
      var $bg_color$jscomp$2$$ = $text_mode_data$$[$offset$jscomp$29$$ + 2];
      var $fg_color$jscomp$2$$ = $text_mode_data$$[$offset$jscomp$29$$ + 3];
      $blinking$$ && $color_element$$.classList.add("blink");
      $color_element$$.style.backgroundColor = $number_as_color$$($bg_color$jscomp$2$$);
      $color_element$$.style.color = $number_as_color$$($fg_color$jscomp$2$$);
      for ($text$jscomp$10$$ = ""; $i$jscomp$7$$ < $text_mode_width$$ && ($text_mode_data$$[$offset$jscomp$29$$ + 1] & 1) === $blinking$$ && $text_mode_data$$[$offset$jscomp$29$$ + 2] === $bg_color$jscomp$2$$ && $text_mode_data$$[$offset$jscomp$29$$ + 3] === $fg_color$jscomp$2$$;) {
        var $ascii$$ = $text_mode_data$$[$offset$jscomp$29$$ + 0];
        $text$jscomp$10$$ += $charmap$$[$ascii$$];
        $dbg_assert$$module$src$log$$($charmap$$[$ascii$$]);
        $i$jscomp$7$$++;
        $offset$jscomp$29$$ += 4;
        if ($row$jscomp$2$$ === $cursor_row$$) {
          if ($i$jscomp$7$$ === $cursor_col$$) {
            break;
          } else {
            if ($i$jscomp$7$$ === $cursor_col$$ + 1) {
              $cursor_element$$.style.backgroundColor = $color_element$$.style.color;
              $fragment$$.appendChild($cursor_element$$);
              break;
            }
          }
        }
      }
      $color_element$$.textContent = $text$jscomp$10$$;
      $fragment$$.appendChild($color_element$$);
    }
    $row_element$$.parentNode.replaceChild($fragment$$, $row_element$$);
  };
  this.update_buffer = function($layers$$) {
    for (const $layer$jscomp$3$$ of $layers$$) {
      $graphic_context$$.putImageData($layer$jscomp$3$$.image_data, $layer$jscomp$3$$.screen_x - $layer$jscomp$3$$.buffer_x, $layer$jscomp$3$$.screen_y - $layer$jscomp$3$$.buffer_y, $layer$jscomp$3$$.buffer_x, $layer$jscomp$3$$.buffer_y, $layer$jscomp$3$$.buffer_width, $layer$jscomp$3$$.buffer_height);
    }
  };
  this.get_text_screen = function() {
    for (var $screen$jscomp$1$$ = [], $i$jscomp$8$$ = 0; $i$jscomp$8$$ < $text_mode_height$$; $i$jscomp$8$$++) {
      $screen$jscomp$1$$.push(this.get_text_row($i$jscomp$8$$));
    }
    return $screen$jscomp$1$$;
  };
  this.get_text_row = function($y$jscomp$74$$) {
    let $result$jscomp$4$$ = "";
    for (let $x$jscomp$96$$ = 0; $x$jscomp$96$$ < $text_mode_width$$; $x$jscomp$96$$++) {
      $result$jscomp$4$$ += $charmap$$[$text_mode_data$$[4 * ($y$jscomp$74$$ * $text_mode_width$$ + $x$jscomp$96$$)]];
    }
    return $result$jscomp$4$$;
  };
  this.init();
}
;function $SyncBuffer$$module$src$buffer$$($buffer$jscomp$19$$) {
  $dbg_assert$$module$src$log$$($buffer$jscomp$19$$ instanceof ArrayBuffer);
  this.buffer = $buffer$jscomp$19$$;
  this.byteLength = $buffer$jscomp$19$$.byteLength;
  this.onprogress = this.onload = void 0;
}
$SyncBuffer$$module$src$buffer$$.prototype.load = function() {
  this.onload && this.onload({buffer:this.buffer});
};
$SyncBuffer$$module$src$buffer$$.prototype.get = function($start$jscomp$16$$, $len$jscomp$5$$, $fn$$) {
  $dbg_assert$$module$src$log$$($start$jscomp$16$$ + $len$jscomp$5$$ <= this.byteLength);
  $fn$$(new Uint8Array(this.buffer, $start$jscomp$16$$, $len$jscomp$5$$));
};
$SyncBuffer$$module$src$buffer$$.prototype.set = function($start$jscomp$17$$, $slice$jscomp$1$$, $fn$jscomp$1$$) {
  $dbg_assert$$module$src$log$$($start$jscomp$17$$ + $slice$jscomp$1$$.byteLength <= this.byteLength);
  (new Uint8Array(this.buffer, $start$jscomp$17$$, $slice$jscomp$1$$.byteLength)).set($slice$jscomp$1$$);
  $fn$jscomp$1$$();
};
$SyncBuffer$$module$src$buffer$$.prototype.get_buffer = function($fn$jscomp$2$$) {
  $fn$jscomp$2$$(this.buffer);
};
$SyncBuffer$$module$src$buffer$$.prototype.get_state = function() {
  const $state$$ = [];
  $state$$[0] = this.byteLength;
  $state$$[1] = new Uint8Array(this.buffer);
  return $state$$;
};
$SyncBuffer$$module$src$buffer$$.prototype.set_state = function($state$jscomp$1$$) {
  this.byteLength = $state$jscomp$1$$[0];
  this.buffer = $state$jscomp$1$$[1].slice().buffer;
};
function $AsyncXHRBuffer$$module$src$buffer$$($filename$jscomp$4$$, $size$jscomp$24$$, $fixed_chunk_size$$) {
  this.filename = $filename$jscomp$4$$;
  this.byteLength = $size$jscomp$24$$;
  this.block_cache = new Map;
  this.block_cache_is_write = new Set;
  this.fixed_chunk_size = $fixed_chunk_size$$;
  this.cache_reads = !!$fixed_chunk_size$$;
  this.onprogress = this.onload = void 0;
}
$AsyncXHRBuffer$$module$src$buffer$$.prototype.load = async function() {
  void 0 === this.byteLength && (this.byteLength = await $get_file_size$$module$src$lib$$(this.filename));
  this.onload && this.onload(Object.create(null));
};
$AsyncXHRBuffer$$module$src$buffer$$.prototype.get_from_cache = function($block_index_offset$jscomp$30$$, $len$jscomp$6_result$jscomp$5$$) {
  var $number_of_blocks$$ = $len$jscomp$6_result$jscomp$5$$ / 256;
  $block_index_offset$jscomp$30$$ /= 256;
  for (var $i$jscomp$9$$ = 0; $i$jscomp$9$$ < $number_of_blocks$$; $i$jscomp$9$$++) {
    if (!this.block_cache.get($block_index_offset$jscomp$30$$ + $i$jscomp$9$$)) {
      return;
    }
  }
  if (1 === $number_of_blocks$$) {
    return this.block_cache.get($block_index_offset$jscomp$30$$);
  }
  $len$jscomp$6_result$jscomp$5$$ = new Uint8Array($len$jscomp$6_result$jscomp$5$$);
  for ($i$jscomp$9$$ = 0; $i$jscomp$9$$ < $number_of_blocks$$; $i$jscomp$9$$++) {
    $len$jscomp$6_result$jscomp$5$$.set(this.block_cache.get($block_index_offset$jscomp$30$$ + $i$jscomp$9$$), 256 * $i$jscomp$9$$);
  }
  return $len$jscomp$6_result$jscomp$5$$;
};
$AsyncXHRBuffer$$module$src$buffer$$.prototype.get = function($offset$jscomp$31$$, $len$jscomp$7$$, $fn$jscomp$3$$) {
  $dbg_assert$$module$src$log$$($offset$jscomp$31$$ + $len$jscomp$7$$ <= this.byteLength);
  $dbg_assert$$module$src$log$$(0 === $offset$jscomp$31$$ % 256);
  $dbg_assert$$module$src$log$$(0 === $len$jscomp$7$$ % 256);
  $dbg_assert$$module$src$log$$($len$jscomp$7$$);
  var $block$jscomp$1$$ = this.get_from_cache($offset$jscomp$31$$, $len$jscomp$7$$);
  if ($block$jscomp$1$$) {
    $fn$jscomp$3$$($block$jscomp$1$$);
  } else {
    var $requested_start$$ = $offset$jscomp$31$$, $requested_length$$ = $len$jscomp$7$$;
    this.fixed_chunk_size && ($requested_start$$ = $offset$jscomp$31$$ - $offset$jscomp$31$$ % this.fixed_chunk_size, $requested_length$$ = Math.ceil(($offset$jscomp$31$$ - $requested_start$$ + $len$jscomp$7$$) / this.fixed_chunk_size) * this.fixed_chunk_size);
    $load_file$$module$src$lib$$(this.filename, {done:function($block$jscomp$2_buffer$jscomp$20$$) {
      $block$jscomp$2_buffer$jscomp$20$$ = new Uint8Array($block$jscomp$2_buffer$jscomp$20$$);
      this.handle_read($requested_start$$, $requested_length$$, $block$jscomp$2_buffer$jscomp$20$$);
      $requested_start$$ === $offset$jscomp$31$$ && $requested_length$$ === $len$jscomp$7$$ ? $fn$jscomp$3$$($block$jscomp$2_buffer$jscomp$20$$) : $fn$jscomp$3$$($block$jscomp$2_buffer$jscomp$20$$.subarray($offset$jscomp$31$$ - $requested_start$$, $offset$jscomp$31$$ - $requested_start$$ + $len$jscomp$7$$));
    }.bind(this), range:{start:$requested_start$$, length:$requested_length$$}, });
  }
};
$AsyncXHRBuffer$$module$src$buffer$$.prototype.set = function($start$jscomp$18_start_block$$, $data$jscomp$81$$, $fn$jscomp$4$$) {
  var $block_count_len$jscomp$8$$ = $data$jscomp$81$$.length;
  $dbg_assert$$module$src$log$$($start$jscomp$18_start_block$$ + $data$jscomp$81$$.byteLength <= this.byteLength);
  $dbg_assert$$module$src$log$$(0 === $start$jscomp$18_start_block$$ % 256);
  $dbg_assert$$module$src$log$$(0 === $block_count_len$jscomp$8$$ % 256);
  $dbg_assert$$module$src$log$$($block_count_len$jscomp$8$$);
  $start$jscomp$18_start_block$$ /= 256;
  $block_count_len$jscomp$8$$ /= 256;
  for (var $i$jscomp$10$$ = 0; $i$jscomp$10$$ < $block_count_len$jscomp$8$$; $i$jscomp$10$$++) {
    var $block$jscomp$3_data_slice$$ = this.block_cache.get($start$jscomp$18_start_block$$ + $i$jscomp$10$$);
    if (void 0 === $block$jscomp$3_data_slice$$) {
      $block$jscomp$3_data_slice$$ = $data$jscomp$81$$.slice(256 * $i$jscomp$10$$, 256 * ($i$jscomp$10$$ + 1)), this.block_cache.set($start$jscomp$18_start_block$$ + $i$jscomp$10$$, $block$jscomp$3_data_slice$$);
    } else {
      const $data_slice$jscomp$1$$ = $data$jscomp$81$$.subarray(256 * $i$jscomp$10$$, 256 * ($i$jscomp$10$$ + 1));
      $dbg_assert$$module$src$log$$($block$jscomp$3_data_slice$$.byteLength === $data_slice$jscomp$1$$.length);
      $block$jscomp$3_data_slice$$.set($data_slice$jscomp$1$$);
    }
    this.block_cache_is_write.add($start$jscomp$18_start_block$$ + $i$jscomp$10$$);
  }
  $fn$jscomp$4$$();
};
$AsyncXHRBuffer$$module$src$buffer$$.prototype.handle_read = function($offset$jscomp$32_start_block$jscomp$1$$, $block_count$jscomp$1_len$jscomp$9$$, $block$jscomp$4$$) {
  $offset$jscomp$32_start_block$jscomp$1$$ /= 256;
  $block_count$jscomp$1_len$jscomp$9$$ /= 256;
  for (var $i$jscomp$11$$ = 0; $i$jscomp$11$$ < $block_count$jscomp$1_len$jscomp$9$$; $i$jscomp$11$$++) {
    const $cached_block$$ = this.block_cache.get($offset$jscomp$32_start_block$jscomp$1$$ + $i$jscomp$11$$);
    $cached_block$$ ? $block$jscomp$4$$.set($cached_block$$, 256 * $i$jscomp$11$$) : this.cache_reads && this.block_cache.set($offset$jscomp$32_start_block$jscomp$1$$ + $i$jscomp$11$$, $block$jscomp$4$$.slice(256 * $i$jscomp$11$$, 256 * ($i$jscomp$11$$ + 1)));
  }
};
$AsyncXHRBuffer$$module$src$buffer$$.prototype.get_buffer = function($fn$jscomp$5$$) {
  $fn$jscomp$5$$();
};
$AsyncXHRBuffer$$module$src$buffer$$.prototype.get_state = function() {
  const $state$jscomp$2$$ = [], $block_cache$$ = [];
  for (const [$index$jscomp$77$$, $block$jscomp$5$$] of this.block_cache) {
    $dbg_assert$$module$src$log$$(isFinite($index$jscomp$77$$)), this.block_cache_is_write.has($index$jscomp$77$$) && $block_cache$$.push([$index$jscomp$77$$, $block$jscomp$5$$]);
  }
  $state$jscomp$2$$[0] = $block_cache$$;
  return $state$jscomp$2$$;
};
$AsyncXHRBuffer$$module$src$buffer$$.prototype.set_state = function($block_cache$jscomp$1_state$jscomp$3$$) {
  $block_cache$jscomp$1_state$jscomp$3$$ = $block_cache$jscomp$1_state$jscomp$3$$[0];
  this.block_cache.clear();
  this.block_cache_is_write.clear();
  for (const [$index$jscomp$78$$, $block$jscomp$6$$] of $block_cache$jscomp$1_state$jscomp$3$$) {
    $dbg_assert$$module$src$log$$(isFinite($index$jscomp$78$$)), this.block_cache.set($index$jscomp$78$$, $block$jscomp$6$$), this.block_cache_is_write.add($index$jscomp$78$$);
  }
};
function $AsyncXHRPartfileBuffer$$module$src$buffer$$($filename$jscomp$5$$, $size$jscomp$26$$, $fixed_chunk_size$jscomp$1$$, $partfile_alt_format$$, $zstd_decompress$$) {
  const $parts$$ = $filename$jscomp$5$$.match(/\.[^\.]+(\.zst)?$/);
  this.extension = $parts$$ ? $parts$$[0] : "";
  this.basename = $filename$jscomp$5$$.substring(0, $filename$jscomp$5$$.length - this.extension.length);
  this.is_zstd = this.extension.endsWith(".zst");
  this.basename.endsWith("/") || (this.basename += "-");
  this.block_cache = new Map;
  this.block_cache_is_write = new Set;
  this.byteLength = $size$jscomp$26$$;
  this.fixed_chunk_size = $fixed_chunk_size$jscomp$1$$;
  this.partfile_alt_format = !!$partfile_alt_format$$;
  this.zstd_decompress = $zstd_decompress$$;
  this.cache_reads = !!$fixed_chunk_size$jscomp$1$$;
  this.onprogress = this.onload = void 0;
}
$AsyncXHRPartfileBuffer$$module$src$buffer$$.prototype.load = function() {
  void 0 === this.byteLength && $dbg_assert$$module$src$log$$(!1);
  this.onload && this.onload(Object.create(null));
};
$AsyncXHRPartfileBuffer$$module$src$buffer$$.prototype.get = function($offset$jscomp$33$$, $len$jscomp$10$$, $fn$jscomp$6$$) {
  $dbg_assert$$module$src$log$$($offset$jscomp$33$$ + $len$jscomp$10$$ <= this.byteLength);
  $dbg_assert$$module$src$log$$(0 === $offset$jscomp$33$$ % 256);
  $dbg_assert$$module$src$log$$(0 === $len$jscomp$10$$ % 256);
  $dbg_assert$$module$src$log$$($len$jscomp$10$$);
  var $block$jscomp$7_part_filename$$ = this.get_from_cache($offset$jscomp$33$$, $len$jscomp$10$$);
  if ($block$jscomp$7_part_filename$$) {
    $fn$jscomp$6$$($block$jscomp$7_part_filename$$);
  } else {
    if (this.fixed_chunk_size) {
      const $start_index$$ = Math.floor($offset$jscomp$33$$ / this.fixed_chunk_size), $m_offset$$ = $offset$jscomp$33$$ - $start_index$$ * this.fixed_chunk_size;
      $dbg_assert$$module$src$log$$(0 <= $m_offset$$);
      const $total_count$$ = Math.ceil(($m_offset$$ + $len$jscomp$10$$) / this.fixed_chunk_size), $blocks$$ = new Uint8Array($total_count$$ * this.fixed_chunk_size);
      let $finished$$ = 0;
      for (let $i$jscomp$12$$ = 0; $i$jscomp$12$$ < $total_count$$; $i$jscomp$12$$++) {
        var $block$jscomp$8_offset$jscomp$34$$ = ($start_index$$ + $i$jscomp$12$$) * this.fixed_chunk_size;
        $block$jscomp$7_part_filename$$ = this.partfile_alt_format ? this.basename + ($start_index$$ + $i$jscomp$12$$ + "").padStart(8, "0") + this.extension : this.basename + $block$jscomp$8_offset$jscomp$34$$ + "-" + ($block$jscomp$8_offset$jscomp$34$$ + this.fixed_chunk_size) + this.extension;
        ($block$jscomp$8_offset$jscomp$34$$ = this.get_from_cache($block$jscomp$8_offset$jscomp$34$$, this.fixed_chunk_size)) ? ($blocks$$.set($block$jscomp$8_offset$jscomp$34$$, $i$jscomp$12$$ * this.fixed_chunk_size), $finished$$++, $finished$$ === $total_count$$ && $fn$jscomp$6$$($blocks$$.subarray($m_offset$$, $m_offset$$ + $len$jscomp$10$$))) : $load_file$$module$src$lib$$($block$jscomp$7_part_filename$$, {done:async function($block$jscomp$9_buffer$jscomp$21_decompressed$$) {
          $block$jscomp$9_buffer$jscomp$21_decompressed$$ = new Uint8Array($block$jscomp$9_buffer$jscomp$21_decompressed$$);
          this.is_zstd && ($block$jscomp$9_buffer$jscomp$21_decompressed$$ = await this.zstd_decompress(this.fixed_chunk_size, $block$jscomp$9_buffer$jscomp$21_decompressed$$), $block$jscomp$9_buffer$jscomp$21_decompressed$$ = new Uint8Array($block$jscomp$9_buffer$jscomp$21_decompressed$$));
          $blocks$$.set($block$jscomp$9_buffer$jscomp$21_decompressed$$, $i$jscomp$12$$ * this.fixed_chunk_size);
          this.handle_read(($start_index$$ + $i$jscomp$12$$) * this.fixed_chunk_size, this.fixed_chunk_size | 0, $block$jscomp$9_buffer$jscomp$21_decompressed$$);
          $finished$$++;
          $finished$$ === $total_count$$ && $fn$jscomp$6$$($blocks$$.subarray($m_offset$$, $m_offset$$ + $len$jscomp$10$$));
        }.bind(this), });
      }
    } else {
      $load_file$$module$src$lib$$(this.basename + $offset$jscomp$33$$ + "-" + ($offset$jscomp$33$$ + $len$jscomp$10$$) + this.extension, {done:function($block$jscomp$10_buffer$jscomp$22$$) {
        $dbg_assert$$module$src$log$$($block$jscomp$10_buffer$jscomp$22$$.byteLength === $len$jscomp$10$$);
        $block$jscomp$10_buffer$jscomp$22$$ = new Uint8Array($block$jscomp$10_buffer$jscomp$22$$);
        this.handle_read($offset$jscomp$33$$, $len$jscomp$10$$, $block$jscomp$10_buffer$jscomp$22$$);
        $fn$jscomp$6$$($block$jscomp$10_buffer$jscomp$22$$);
      }.bind(this), });
    }
  }
};
$AsyncXHRPartfileBuffer$$module$src$buffer$$.prototype.get_from_cache = $AsyncXHRBuffer$$module$src$buffer$$.prototype.get_from_cache;
$AsyncXHRPartfileBuffer$$module$src$buffer$$.prototype.set = $AsyncXHRBuffer$$module$src$buffer$$.prototype.set;
$AsyncXHRPartfileBuffer$$module$src$buffer$$.prototype.handle_read = $AsyncXHRBuffer$$module$src$buffer$$.prototype.handle_read;
$AsyncXHRPartfileBuffer$$module$src$buffer$$.prototype.get_state = $AsyncXHRBuffer$$module$src$buffer$$.prototype.get_state;
$AsyncXHRPartfileBuffer$$module$src$buffer$$.prototype.set_state = $AsyncXHRBuffer$$module$src$buffer$$.prototype.set_state;
function $SyncFileBuffer$$module$src$buffer$$($file$$) {
  this.file = $file$$;
  this.byteLength = $file$$.size;
  1073741824 < $file$$.size && console.warn("SyncFileBuffer: Allocating buffer of " + ($file$$.size >> 20) + " MB ...");
  this.buffer = new ArrayBuffer($file$$.size);
  this.onprogress = this.onload = void 0;
}
$SyncFileBuffer$$module$src$buffer$$.prototype.load = function() {
  this.load_next(0);
};
$SyncFileBuffer$$module$src$buffer$$.prototype.load_next = function($start$jscomp$19$$) {
  var $filereader$$ = new FileReader;
  $filereader$$.onload = function($buffer$jscomp$23_e$jscomp$10$$) {
    $buffer$jscomp$23_e$jscomp$10$$ = new Uint8Array($buffer$jscomp$23_e$jscomp$10$$.target.result);
    (new Uint8Array(this.buffer, $start$jscomp$19$$)).set($buffer$jscomp$23_e$jscomp$10$$);
    this.load_next($start$jscomp$19$$ + 4194304);
  }.bind(this);
  if (this.onprogress) {
    this.onprogress({loaded:$start$jscomp$19$$, total:this.byteLength, lengthComputable:!0, });
  }
  if ($start$jscomp$19$$ < this.byteLength) {
    var $slice$jscomp$2$$ = this.file.slice($start$jscomp$19$$, Math.min($start$jscomp$19$$ + 4194304, this.byteLength));
    $filereader$$.readAsArrayBuffer($slice$jscomp$2$$);
  } else {
    this.file = void 0, this.onload && this.onload({buffer:this.buffer});
  }
};
$SyncFileBuffer$$module$src$buffer$$.prototype.get = $SyncBuffer$$module$src$buffer$$.prototype.get;
$SyncFileBuffer$$module$src$buffer$$.prototype.set = $SyncBuffer$$module$src$buffer$$.prototype.set;
$SyncFileBuffer$$module$src$buffer$$.prototype.get_buffer = $SyncBuffer$$module$src$buffer$$.prototype.get_buffer;
$SyncFileBuffer$$module$src$buffer$$.prototype.get_state = $SyncBuffer$$module$src$buffer$$.prototype.get_state;
$SyncFileBuffer$$module$src$buffer$$.prototype.set_state = $SyncBuffer$$module$src$buffer$$.prototype.set_state;
function $AsyncFileBuffer$$module$src$buffer$$($file$jscomp$1$$) {
  this.file = $file$jscomp$1$$;
  this.byteLength = $file$jscomp$1$$.size;
  this.block_cache = new Map;
  this.block_cache_is_write = new Set;
  this.onprogress = this.onload = void 0;
}
$AsyncFileBuffer$$module$src$buffer$$.prototype.load = function() {
  this.onload && this.onload(Object.create(null));
};
$AsyncFileBuffer$$module$src$buffer$$.prototype.get = function($offset$jscomp$35$$, $len$jscomp$11$$, $fn$jscomp$7$$) {
  $dbg_assert$$module$src$log$$(0 === $offset$jscomp$35$$ % 256);
  $dbg_assert$$module$src$log$$(0 === $len$jscomp$11$$ % 256);
  $dbg_assert$$module$src$log$$($len$jscomp$11$$);
  var $block$jscomp$11_fr$$ = this.get_from_cache($offset$jscomp$35$$, $len$jscomp$11$$);
  $block$jscomp$11_fr$$ ? $fn$jscomp$7$$($block$jscomp$11_fr$$) : ($block$jscomp$11_fr$$ = new FileReader, $block$jscomp$11_fr$$.onload = function($block$jscomp$12_e$jscomp$11$$) {
    $block$jscomp$12_e$jscomp$11$$ = new Uint8Array($block$jscomp$12_e$jscomp$11$$.target.result);
    this.handle_read($offset$jscomp$35$$, $len$jscomp$11$$, $block$jscomp$12_e$jscomp$11$$);
    $fn$jscomp$7$$($block$jscomp$12_e$jscomp$11$$);
  }.bind(this), $block$jscomp$11_fr$$.readAsArrayBuffer(this.file.slice($offset$jscomp$35$$, $offset$jscomp$35$$ + $len$jscomp$11$$)));
};
$AsyncFileBuffer$$module$src$buffer$$.prototype.get_from_cache = $AsyncXHRBuffer$$module$src$buffer$$.prototype.get_from_cache;
$AsyncFileBuffer$$module$src$buffer$$.prototype.set = $AsyncXHRBuffer$$module$src$buffer$$.prototype.set;
$AsyncFileBuffer$$module$src$buffer$$.prototype.handle_read = $AsyncXHRBuffer$$module$src$buffer$$.prototype.handle_read;
$AsyncFileBuffer$$module$src$buffer$$.prototype.get_state = $AsyncXHRBuffer$$module$src$buffer$$.prototype.get_state;
$AsyncFileBuffer$$module$src$buffer$$.prototype.set_state = $AsyncXHRBuffer$$module$src$buffer$$.prototype.set_state;
$AsyncFileBuffer$$module$src$buffer$$.prototype.get_buffer = function($fn$jscomp$8$$) {
  $fn$jscomp$8$$();
};
$AsyncFileBuffer$$module$src$buffer$$.prototype.get_as_file = function($file$jscomp$2_name$jscomp$77$$) {
  for (var $parts$jscomp$1$$ = [], $existing_blocks$$ = Array.from(this.block_cache.keys()).sort(function($x$jscomp$97$$, $y$jscomp$75$$) {
    return $x$jscomp$97$$ - $y$jscomp$75$$;
  }), $current_offset$$ = 0, $i$jscomp$13$$ = 0; $i$jscomp$13$$ < $existing_blocks$$.length; $i$jscomp$13$$++) {
    var $block_index$jscomp$1_start$jscomp$20$$ = $existing_blocks$$[$i$jscomp$13$$], $block$jscomp$13$$ = this.block_cache.get($block_index$jscomp$1_start$jscomp$20$$);
    $block_index$jscomp$1_start$jscomp$20$$ *= 256;
    $dbg_assert$$module$src$log$$($block_index$jscomp$1_start$jscomp$20$$ >= $current_offset$$);
    $block_index$jscomp$1_start$jscomp$20$$ !== $current_offset$$ && ($parts$jscomp$1$$.push(this.file.slice($current_offset$$, $block_index$jscomp$1_start$jscomp$20$$)), $current_offset$$ = $block_index$jscomp$1_start$jscomp$20$$);
    $parts$jscomp$1$$.push($block$jscomp$13$$);
    $current_offset$$ += $block$jscomp$13$$.length;
  }
  $current_offset$$ !== this.file.size && $parts$jscomp$1$$.push(this.file.slice($current_offset$$));
  $file$jscomp$2_name$jscomp$77$$ = new File($parts$jscomp$1$$, $file$jscomp$2_name$jscomp$77$$);
  $dbg_assert$$module$src$log$$($file$jscomp$2_name$jscomp$77$$.size === this.file.size);
  return $file$jscomp$2_name$jscomp$77$$;
};
function $buffer_from_object$$module$src$buffer$$($obj$jscomp$26$$, $is_async_zstd_decompress_worker$$) {
  if ($obj$jscomp$26$$.buffer instanceof ArrayBuffer) {
    return new $SyncBuffer$$module$src$buffer$$($obj$jscomp$26$$.buffer);
  }
  if ("undefined" !== typeof File && $obj$jscomp$26$$.buffer instanceof File) {
    return $is_async_zstd_decompress_worker$$ = $obj$jscomp$26$$.async, void 0 === $is_async_zstd_decompress_worker$$ && ($is_async_zstd_decompress_worker$$ = 268435456 <= $obj$jscomp$26$$.buffer.size), $is_async_zstd_decompress_worker$$ ? new $AsyncFileBuffer$$module$src$buffer$$($obj$jscomp$26$$.buffer) : new $SyncFileBuffer$$module$src$buffer$$($obj$jscomp$26$$.buffer);
  }
  if ($obj$jscomp$26$$.url) {
    return $obj$jscomp$26$$.use_parts ? new $AsyncXHRPartfileBuffer$$module$src$buffer$$($obj$jscomp$26$$.url, $obj$jscomp$26$$.size, $obj$jscomp$26$$.fixed_chunk_size, !1, $is_async_zstd_decompress_worker$$) : new $AsyncXHRBuffer$$module$src$buffer$$($obj$jscomp$26$$.url, $obj$jscomp$26$$.size, $obj$jscomp$26$$.fixed_chunk_size);
  }
  $dbg_log$$module$src$log$$("Ignored file: url=" + $obj$jscomp$26$$.url + " buffer=" + $obj$jscomp$26$$.buffer);
}
;function $DMA$$module$src$dma$$($cpu_io$$) {
  this.cpu = $cpu_io$$;
  this.channel_page = new Uint8Array(8);
  this.channel_pagehi = new Uint8Array(8);
  this.channel_addr = new Uint16Array(8);
  this.channel_addr_init = new Uint16Array(8);
  this.channel_count = new Uint16Array(8);
  this.channel_count_init = new Uint16Array(8);
  this.channel_mask = new Uint8Array(8);
  this.channel_mode = new Uint8Array(8);
  this.unmask_listeners = [];
  this.lsb_msb_flipflop = 0;
  $cpu_io$$ = $cpu_io$$.io;
  $cpu_io$$.register_write(0, this, this.port_addr_write.bind(this, 0));
  $cpu_io$$.register_write(2, this, this.port_addr_write.bind(this, 1));
  $cpu_io$$.register_write(4, this, this.port_addr_write.bind(this, 2));
  $cpu_io$$.register_write(6, this, this.port_addr_write.bind(this, 3));
  $cpu_io$$.register_write(1, this, this.port_count_write.bind(this, 0));
  $cpu_io$$.register_write(3, this, this.port_count_write.bind(this, 1));
  $cpu_io$$.register_write(5, this, this.port_count_write.bind(this, 2));
  $cpu_io$$.register_write(7, this, this.port_count_write.bind(this, 3));
  $cpu_io$$.register_read(0, this, this.port_addr_read.bind(this, 0));
  $cpu_io$$.register_read(2, this, this.port_addr_read.bind(this, 1));
  $cpu_io$$.register_read(4, this, this.port_addr_read.bind(this, 2));
  $cpu_io$$.register_read(6, this, this.port_addr_read.bind(this, 3));
  $cpu_io$$.register_read(1, this, this.port_count_read.bind(this, 0));
  $cpu_io$$.register_read(3, this, this.port_count_read.bind(this, 1));
  $cpu_io$$.register_read(5, this, this.port_count_read.bind(this, 2));
  $cpu_io$$.register_read(7, this, this.port_count_read.bind(this, 3));
  $cpu_io$$.register_write(192, this, this.port_addr_write.bind(this, 4));
  $cpu_io$$.register_write(196, this, this.port_addr_write.bind(this, 5));
  $cpu_io$$.register_write(200, this, this.port_addr_write.bind(this, 6));
  $cpu_io$$.register_write(204, this, this.port_addr_write.bind(this, 7));
  $cpu_io$$.register_write(194, this, this.port_count_write.bind(this, 4));
  $cpu_io$$.register_write(198, this, this.port_count_write.bind(this, 5));
  $cpu_io$$.register_write(202, this, this.port_count_write.bind(this, 6));
  $cpu_io$$.register_write(206, this, this.port_count_write.bind(this, 7));
  $cpu_io$$.register_read(192, this, this.port_addr_read.bind(this, 4));
  $cpu_io$$.register_read(196, this, this.port_addr_read.bind(this, 5));
  $cpu_io$$.register_read(200, this, this.port_addr_read.bind(this, 6));
  $cpu_io$$.register_read(204, this, this.port_addr_read.bind(this, 7));
  $cpu_io$$.register_read(194, this, this.port_count_read.bind(this, 4));
  $cpu_io$$.register_read(198, this, this.port_count_read.bind(this, 5));
  $cpu_io$$.register_read(202, this, this.port_count_read.bind(this, 6));
  $cpu_io$$.register_read(206, this, this.port_count_read.bind(this, 7));
  $cpu_io$$.register_write(135, this, this.port_page_write.bind(this, 0));
  $cpu_io$$.register_write(131, this, this.port_page_write.bind(this, 1));
  $cpu_io$$.register_write(129, this, this.port_page_write.bind(this, 2));
  $cpu_io$$.register_write(130, this, this.port_page_write.bind(this, 3));
  $cpu_io$$.register_write(143, this, this.port_page_write.bind(this, 4));
  $cpu_io$$.register_write(139, this, this.port_page_write.bind(this, 5));
  $cpu_io$$.register_write(137, this, this.port_page_write.bind(this, 6));
  $cpu_io$$.register_write(138, this, this.port_page_write.bind(this, 7));
  $cpu_io$$.register_read(135, this, this.port_page_read.bind(this, 0));
  $cpu_io$$.register_read(131, this, this.port_page_read.bind(this, 1));
  $cpu_io$$.register_read(129, this, this.port_page_read.bind(this, 2));
  $cpu_io$$.register_read(130, this, this.port_page_read.bind(this, 3));
  $cpu_io$$.register_read(143, this, this.port_page_read.bind(this, 4));
  $cpu_io$$.register_read(139, this, this.port_page_read.bind(this, 5));
  $cpu_io$$.register_read(137, this, this.port_page_read.bind(this, 6));
  $cpu_io$$.register_read(138, this, this.port_page_read.bind(this, 7));
  $cpu_io$$.register_write(1159, this, this.port_pagehi_write.bind(this, 0));
  $cpu_io$$.register_write(1155, this, this.port_pagehi_write.bind(this, 1));
  $cpu_io$$.register_write(1153, this, this.port_pagehi_write.bind(this, 2));
  $cpu_io$$.register_write(1154, this, this.port_pagehi_write.bind(this, 3));
  $cpu_io$$.register_write(1163, this, this.port_pagehi_write.bind(this, 5));
  $cpu_io$$.register_write(1161, this, this.port_pagehi_write.bind(this, 6));
  $cpu_io$$.register_write(1162, this, this.port_pagehi_write.bind(this, 7));
  $cpu_io$$.register_read(1159, this, this.port_pagehi_read.bind(this, 0));
  $cpu_io$$.register_read(1155, this, this.port_pagehi_read.bind(this, 1));
  $cpu_io$$.register_read(1153, this, this.port_pagehi_read.bind(this, 2));
  $cpu_io$$.register_read(1154, this, this.port_pagehi_read.bind(this, 3));
  $cpu_io$$.register_read(1163, this, this.port_pagehi_read.bind(this, 5));
  $cpu_io$$.register_read(1161, this, this.port_pagehi_read.bind(this, 6));
  $cpu_io$$.register_read(1162, this, this.port_pagehi_read.bind(this, 7));
  $cpu_io$$.register_write(10, this, this.port_singlemask_write.bind(this, 0));
  $cpu_io$$.register_write(212, this, this.port_singlemask_write.bind(this, 4));
  $cpu_io$$.register_write(15, this, this.port_multimask_write.bind(this, 0));
  $cpu_io$$.register_write(222, this, this.port_multimask_write.bind(this, 4));
  $cpu_io$$.register_read(15, this, this.port_multimask_read.bind(this, 0));
  $cpu_io$$.register_read(222, this, this.port_multimask_read.bind(this, 4));
  $cpu_io$$.register_write(11, this, this.port_mode_write.bind(this, 0));
  $cpu_io$$.register_write(214, this, this.port_mode_write.bind(this, 4));
  $cpu_io$$.register_write(12, this, this.portC_write);
  $cpu_io$$.register_write(216, this, this.portC_write);
}
$DMA$$module$src$dma$$.prototype.get_state = function() {
  return [this.channel_page, this.channel_pagehi, this.channel_addr, this.channel_addr_init, this.channel_count, this.channel_count_init, this.channel_mask, this.channel_mode, this.lsb_msb_flipflop, ];
};
$DMA$$module$src$dma$$.prototype.set_state = function($state$jscomp$4$$) {
  this.channel_page = $state$jscomp$4$$[0];
  this.channel_pagehi = $state$jscomp$4$$[1];
  this.channel_addr = $state$jscomp$4$$[2];
  this.channel_addr_init = $state$jscomp$4$$[3];
  this.channel_count = $state$jscomp$4$$[4];
  this.channel_count_init = $state$jscomp$4$$[5];
  this.channel_mask = $state$jscomp$4$$[6];
  this.channel_mode = $state$jscomp$4$$[7];
  this.lsb_msb_flipflop = $state$jscomp$4$$[8];
};
$DMA$$module$src$dma$$.prototype.port_count_write = function($channel$jscomp$1$$, $data_byte$$) {
  $dbg_log$$module$src$log$$("count write [" + $channel$jscomp$1$$ + "] = " + $h$$module$src$lib$$($data_byte$$), 16);
  this.channel_count[$channel$jscomp$1$$] = this.flipflop_get(this.channel_count[$channel$jscomp$1$$], $data_byte$$, !1);
  this.channel_count_init[$channel$jscomp$1$$] = this.flipflop_get(this.channel_count_init[$channel$jscomp$1$$], $data_byte$$, !0);
};
$DMA$$module$src$dma$$.prototype.port_count_read = function($channel$jscomp$2$$) {
  $dbg_log$$module$src$log$$("count read [" + $channel$jscomp$2$$ + "] -> " + $h$$module$src$lib$$(this.channel_count[$channel$jscomp$2$$]), 16);
  return this.flipflop_read(this.channel_count[$channel$jscomp$2$$]);
};
$DMA$$module$src$dma$$.prototype.port_addr_write = function($channel$jscomp$3$$, $data_byte$jscomp$1$$) {
  $dbg_log$$module$src$log$$("addr write [" + $channel$jscomp$3$$ + "] = " + $h$$module$src$lib$$($data_byte$jscomp$1$$), 16);
  this.channel_addr[$channel$jscomp$3$$] = this.flipflop_get(this.channel_addr[$channel$jscomp$3$$], $data_byte$jscomp$1$$, !1);
  this.channel_addr_init[$channel$jscomp$3$$] = this.flipflop_get(this.channel_addr_init[$channel$jscomp$3$$], $data_byte$jscomp$1$$, !0);
};
$DMA$$module$src$dma$$.prototype.port_addr_read = function($channel$jscomp$4$$) {
  $dbg_log$$module$src$log$$("addr read [" + $channel$jscomp$4$$ + "] -> " + $h$$module$src$lib$$(this.channel_addr[$channel$jscomp$4$$]), 16);
  return this.flipflop_read(this.channel_addr[$channel$jscomp$4$$]);
};
$DMA$$module$src$dma$$.prototype.port_pagehi_write = function($channel$jscomp$5$$, $data_byte$jscomp$2$$) {
  $dbg_log$$module$src$log$$("pagehi write [" + $channel$jscomp$5$$ + "] = " + $h$$module$src$lib$$($data_byte$jscomp$2$$), 16);
  this.channel_pagehi[$channel$jscomp$5$$] = $data_byte$jscomp$2$$;
};
$DMA$$module$src$dma$$.prototype.port_pagehi_read = function($channel$jscomp$6$$) {
  $dbg_log$$module$src$log$$("pagehi read [" + $channel$jscomp$6$$ + "]", 16);
  return this.channel_pagehi[$channel$jscomp$6$$];
};
$DMA$$module$src$dma$$.prototype.port_page_write = function($channel$jscomp$7$$, $data_byte$jscomp$3$$) {
  $dbg_log$$module$src$log$$("page write [" + $channel$jscomp$7$$ + "] = " + $h$$module$src$lib$$($data_byte$jscomp$3$$), 16);
  this.channel_page[$channel$jscomp$7$$] = $data_byte$jscomp$3$$;
};
$DMA$$module$src$dma$$.prototype.port_page_read = function($channel$jscomp$8$$) {
  $dbg_log$$module$src$log$$("page read [" + $channel$jscomp$8$$ + "]", 16);
  return this.channel_page[$channel$jscomp$8$$];
};
$DMA$$module$src$dma$$.prototype.port_singlemask_write = function($channel$jscomp$9_channel_offset$$, $data_byte$jscomp$4_value$jscomp$95$$) {
  $channel$jscomp$9_channel_offset$$ = ($data_byte$jscomp$4_value$jscomp$95$$ & 3) + $channel$jscomp$9_channel_offset$$;
  $data_byte$jscomp$4_value$jscomp$95$$ = $data_byte$jscomp$4_value$jscomp$95$$ & 4 ? 1 : 0;
  $dbg_log$$module$src$log$$("singlechannel mask write [" + $channel$jscomp$9_channel_offset$$ + "] = " + $data_byte$jscomp$4_value$jscomp$95$$, 16);
  this.update_mask($channel$jscomp$9_channel_offset$$, $data_byte$jscomp$4_value$jscomp$95$$);
};
$DMA$$module$src$dma$$.prototype.port_multimask_write = function($channel_offset$jscomp$1$$, $data_byte$jscomp$5$$) {
  $dbg_log$$module$src$log$$("multichannel mask write: " + $h$$module$src$lib$$($data_byte$jscomp$5$$), 16);
  for (var $i$jscomp$14$$ = 0; 4 > $i$jscomp$14$$; $i$jscomp$14$$++) {
    this.update_mask($channel_offset$jscomp$1$$ + $i$jscomp$14$$, $data_byte$jscomp$5$$ & 1 << $i$jscomp$14$$);
  }
};
$DMA$$module$src$dma$$.prototype.port_multimask_read = function($channel_offset$jscomp$2$$) {
  var $value$jscomp$96$$ = 0 | this.channel_mask[$channel_offset$jscomp$2$$ + 0];
  $value$jscomp$96$$ |= this.channel_mask[$channel_offset$jscomp$2$$ + 1] << 1;
  $value$jscomp$96$$ |= this.channel_mask[$channel_offset$jscomp$2$$ + 2] << 2;
  $value$jscomp$96$$ |= this.channel_mask[$channel_offset$jscomp$2$$ + 3] << 3;
  $dbg_log$$module$src$log$$("multichannel mask read: " + $h$$module$src$lib$$($value$jscomp$96$$), 16);
  return $value$jscomp$96$$;
};
$DMA$$module$src$dma$$.prototype.port_mode_write = function($channel$jscomp$10_channel_offset$jscomp$3$$, $data_byte$jscomp$6$$) {
  $channel$jscomp$10_channel_offset$jscomp$3$$ = ($data_byte$jscomp$6$$ & 3) + $channel$jscomp$10_channel_offset$jscomp$3$$;
  $dbg_log$$module$src$log$$("mode write [" + $channel$jscomp$10_channel_offset$jscomp$3$$ + "] = " + $h$$module$src$lib$$($data_byte$jscomp$6$$), 16);
  this.channel_mode[$channel$jscomp$10_channel_offset$jscomp$3$$] = $data_byte$jscomp$6$$;
};
$DMA$$module$src$dma$$.prototype.portC_write = function() {
  $dbg_log$$module$src$log$$("flipflop reset", 16);
  this.lsb_msb_flipflop = 0;
};
$DMA$$module$src$dma$$.prototype.on_unmask = function($fn$jscomp$9$$, $this_value$$) {
  this.unmask_listeners.push({fn:$fn$jscomp$9$$, this_value:$this_value$$, });
};
$DMA$$module$src$dma$$.prototype.update_mask = function($channel$jscomp$11$$, $i$jscomp$15_value$jscomp$97$$) {
  if (this.channel_mask[$channel$jscomp$11$$] !== $i$jscomp$15_value$jscomp$97$$ && (this.channel_mask[$channel$jscomp$11$$] = $i$jscomp$15_value$jscomp$97$$, !$i$jscomp$15_value$jscomp$97$$)) {
    for ($dbg_log$$module$src$log$$("firing on_unmask(" + $channel$jscomp$11$$ + ")", 16), $i$jscomp$15_value$jscomp$97$$ = 0; $i$jscomp$15_value$jscomp$97$$ < this.unmask_listeners.length; $i$jscomp$15_value$jscomp$97$$++) {
      this.unmask_listeners[$i$jscomp$15_value$jscomp$97$$].fn.call(this.unmask_listeners[$i$jscomp$15_value$jscomp$97$$].this_value, $channel$jscomp$11$$);
    }
  }
};
$DMA$$module$src$dma$$.prototype.do_read = function($buffer$jscomp$25$$, $start$jscomp$21$$, $len$jscomp$12$$, $channel$jscomp$12$$, $fn$jscomp$10$$) {
  var $read_count$$ = this.count_get_8bit($channel$jscomp$12$$), $addr$$ = this.address_get_8bit($channel$jscomp$12$$);
  $dbg_log$$module$src$log$$("DMA write channel " + $channel$jscomp$12$$, 16);
  $dbg_log$$module$src$log$$("to " + $h$$module$src$lib$$($addr$$) + " len " + $h$$module$src$lib$$($read_count$$), 16);
  $len$jscomp$12$$ < $read_count$$ && $dbg_log$$module$src$log$$("DMA should read more than provided: " + $h$$module$src$lib$$($len$jscomp$12$$) + " " + $h$$module$src$lib$$($read_count$$), 16);
  if ($start$jscomp$21$$ + $read_count$$ > $buffer$jscomp$25$$.byteLength) {
    $dbg_log$$module$src$log$$("DMA read outside of buffer", 16), $fn$jscomp$10$$(!0);
  } else {
    var $cpu$jscomp$1$$ = this.cpu;
    this.channel_addr[$channel$jscomp$12$$] += $read_count$$;
    $buffer$jscomp$25$$.get($start$jscomp$21$$, $read_count$$, function($data$jscomp$82$$) {
      $cpu$jscomp$1$$.write_blob($data$jscomp$82$$, $addr$$);
      $fn$jscomp$10$$(!1);
    });
  }
};
$DMA$$module$src$dma$$.prototype.do_write = function($buffer$jscomp$26$$, $start$jscomp$22$$, $len$jscomp$13$$, $channel$jscomp$13$$, $fn$jscomp$11$$) {
  var $read_count$jscomp$1$$ = this.channel_count[$channel$jscomp$13$$] + 1 & 65535, $bytes_per_count$$ = 5 <= $channel$jscomp$13$$ ? 2 : 1, $read_bytes$$ = $read_count$jscomp$1$$ * $bytes_per_count$$, $addr$jscomp$1$$ = this.address_get_8bit($channel$jscomp$13$$), $unfinished$$ = !1, $want_more$$ = !1, $autoinit$$ = this.channel_mode[$channel$jscomp$13$$] & 16;
  $dbg_log$$module$src$log$$("DMA write channel " + $channel$jscomp$13$$, 16);
  $dbg_log$$module$src$log$$("to " + $h$$module$src$lib$$($addr$jscomp$1$$) + " len " + $h$$module$src$lib$$($read_bytes$$), 16);
  $len$jscomp$13$$ < $read_bytes$$ ? ($dbg_log$$module$src$log$$("DMA should read more than provided", 16), $read_count$jscomp$1$$ = Math.floor($len$jscomp$13$$ / $bytes_per_count$$), $read_bytes$$ = $read_count$jscomp$1$$ * $bytes_per_count$$, $unfinished$$ = !0) : $len$jscomp$13$$ > $read_bytes$$ && ($dbg_log$$module$src$log$$("DMA attempted to read more than provided", 16), $want_more$$ = !0);
  $start$jscomp$22$$ + $read_bytes$$ > $buffer$jscomp$26$$.byteLength ? ($dbg_log$$module$src$log$$("DMA write outside of buffer", 16), $fn$jscomp$11$$(!0)) : (this.channel_addr[$channel$jscomp$13$$] += $read_count$jscomp$1$$, this.channel_count[$channel$jscomp$13$$] -= $read_count$jscomp$1$$, !$unfinished$$ && $autoinit$$ && ($dbg_log$$module$src$log$$("DMA autoinit", 16), this.channel_addr[$channel$jscomp$13$$] = this.channel_addr_init[$channel$jscomp$13$$], this.channel_count[$channel$jscomp$13$$] = 
  this.channel_count_init[$channel$jscomp$13$$]), $buffer$jscomp$26$$.set($start$jscomp$22$$, this.cpu.mem8.subarray($addr$jscomp$1$$, $addr$jscomp$1$$ + $read_bytes$$), () => {
    $want_more$$ && $autoinit$$ ? ($dbg_log$$module$src$log$$("DMA continuing from start", 16), this.do_write($buffer$jscomp$26$$, $start$jscomp$22$$ + $read_bytes$$, $len$jscomp$13$$ - $read_bytes$$, $channel$jscomp$13$$, $fn$jscomp$11$$)) : $fn$jscomp$11$$(!1);
  }));
};
$DMA$$module$src$dma$$.prototype.address_get_8bit = function($channel$jscomp$14$$) {
  var $addr$jscomp$2$$ = this.channel_addr[$channel$jscomp$14$$];
  5 <= $channel$jscomp$14$$ && ($addr$jscomp$2$$ <<= 1);
  $addr$jscomp$2$$ = $addr$jscomp$2$$ & 65535 | this.channel_page[$channel$jscomp$14$$] << 16;
  return $addr$jscomp$2$$ |= this.channel_pagehi[$channel$jscomp$14$$] << 24;
};
$DMA$$module$src$dma$$.prototype.count_get_8bit = function($channel$jscomp$15$$) {
  var $count$jscomp$40$$ = this.channel_count[$channel$jscomp$15$$] + 1;
  5 <= $channel$jscomp$15$$ && ($count$jscomp$40$$ *= 2);
  return $count$jscomp$40$$;
};
$DMA$$module$src$dma$$.prototype.flipflop_get = function($old_dword$$, $new_byte$$, $continuing$$) {
  $continuing$$ || (this.lsb_msb_flipflop ^= 1);
  return this.lsb_msb_flipflop ? $old_dword$$ & -256 | $new_byte$$ : $old_dword$$ & -65281 | $new_byte$$ << 8;
};
$DMA$$module$src$dma$$.prototype.flipflop_read = function($dword$$) {
  return (this.lsb_msb_flipflop ^= 1) ? $dword$$ & 255 : $dword$$ >> 8 & 255;
};
function $IO$$module$src$io$$($cpu$jscomp$2$$) {
  this.ports = [];
  this.cpu = $cpu$jscomp$2$$;
  for (var $i$jscomp$16$$ = 0; 65536 > $i$jscomp$16$$; $i$jscomp$16$$++) {
    this.ports[$i$jscomp$16$$] = this.create_empty_entry();
  }
  var $memory_size$$ = $cpu$jscomp$2$$.memory_size[0];
  for ($i$jscomp$16$$ = 0; $i$jscomp$16$$ << 17 < $memory_size$$; $i$jscomp$16$$++) {
    $cpu$jscomp$2$$.memory_map_read8[$i$jscomp$16$$] = $cpu$jscomp$2$$.memory_map_write8[$i$jscomp$16$$] = void 0, $cpu$jscomp$2$$.memory_map_read32[$i$jscomp$16$$] = $cpu$jscomp$2$$.memory_map_write32[$i$jscomp$16$$] = void 0;
  }
  this.mmap_register($memory_size$$, 4294967296 - $memory_size$$, function($addr$jscomp$3$$) {
    $dbg_log$$module$src$log$$("Read from unmapped memory space, addr=" + $h$$module$src$lib$$($addr$jscomp$3$$ >>> 0, 8), 32);
    return 255;
  }, function($addr$jscomp$4$$, $value$jscomp$98$$) {
    $dbg_log$$module$src$log$$("Write to unmapped memory space, addr=" + $h$$module$src$lib$$($addr$jscomp$4$$ >>> 0, 8) + " value=" + $h$$module$src$lib$$($value$jscomp$98$$, 2), 32);
  }, function($addr$jscomp$5$$) {
    $dbg_log$$module$src$log$$("Read from unmapped memory space, addr=" + $h$$module$src$lib$$($addr$jscomp$5$$ >>> 0, 8), 32);
    return -1;
  }, function($addr$jscomp$6$$, $value$jscomp$99$$) {
    $dbg_log$$module$src$log$$("Write to unmapped memory space, addr=" + $h$$module$src$lib$$($addr$jscomp$6$$ >>> 0, 8) + " value=" + $h$$module$src$lib$$($value$jscomp$99$$ >>> 0, 8), 32);
  });
}
$IO$$module$src$io$$.prototype.create_empty_entry = function() {
  return {read8:this.empty_port_read8, read16:this.empty_port_read16, read32:this.empty_port_read32, write8:this.empty_port_write, write16:this.empty_port_write, write32:this.empty_port_write, device:void 0, };
};
$IO$$module$src$io$$.prototype.empty_port_read8 = function() {
  return 255;
};
$IO$$module$src$io$$.prototype.empty_port_read16 = function() {
  return 65535;
};
$IO$$module$src$io$$.prototype.empty_port_read32 = function() {
  return -1;
};
$IO$$module$src$io$$.prototype.empty_port_write = function() {
};
$IO$$module$src$io$$.prototype.register_read = function($port_addr$$, $device$$, $r8$$, $r16$$, $r32$$) {
  function $fail$jscomp$2$$($n$jscomp$5$$) {
    $dbg_assert$$module$src$log$$(!1, "Overlapped read" + $n$jscomp$5$$ + " " + $h$$module$src$lib$$($port_addr$$, 4) + " (" + $device$$.name + ")");
    return -1 >>> 32 - $n$jscomp$5$$ | 0;
  }
  $dbg_assert$$module$src$log$$("number" === typeof $port_addr$$);
  $dbg_assert$$module$src$log$$("object" === typeof $device$$);
  $dbg_assert$$module$src$log$$(!$r8$$ || "function" === typeof $r8$$);
  $dbg_assert$$module$src$log$$(!$r16$$ || "function" === typeof $r16$$);
  $dbg_assert$$module$src$log$$(!$r32$$ || "function" === typeof $r32$$);
  $dbg_assert$$module$src$log$$($r8$$ || $r16$$ || $r32$$);
  $r8$$ || ($r8$$ = $fail$jscomp$2$$.bind(this, 8));
  $r16$$ || ($r16$$ = $fail$jscomp$2$$.bind(this, 16));
  $r32$$ || ($r32$$ = $fail$jscomp$2$$.bind(this, 32));
  $r8$$ && (this.ports[$port_addr$$].read8 = $r8$$);
  $r16$$ && (this.ports[$port_addr$$].read16 = $r16$$);
  $r32$$ && (this.ports[$port_addr$$].read32 = $r32$$);
  this.ports[$port_addr$$].device = $device$$;
};
$IO$$module$src$io$$.prototype.register_write = function($port_addr$jscomp$1$$, $device$jscomp$1$$, $w8$$, $w16$$, $w32$$) {
  function $fail$jscomp$3$$($n$jscomp$6$$) {
    $dbg_assert$$module$src$log$$(!1, "Overlapped write" + $n$jscomp$6$$ + " " + $h$$module$src$lib$$($port_addr$jscomp$1$$) + " (" + $device$jscomp$1$$.name + ")");
  }
  $dbg_assert$$module$src$log$$("number" === typeof $port_addr$jscomp$1$$);
  $dbg_assert$$module$src$log$$("object" === typeof $device$jscomp$1$$);
  $dbg_assert$$module$src$log$$(!$w8$$ || "function" === typeof $w8$$);
  $dbg_assert$$module$src$log$$(!$w16$$ || "function" === typeof $w16$$);
  $dbg_assert$$module$src$log$$(!$w32$$ || "function" === typeof $w32$$);
  $dbg_assert$$module$src$log$$($w8$$ || $w16$$ || $w32$$);
  $w8$$ || ($w8$$ = $fail$jscomp$3$$.bind(this, 8));
  $w16$$ || ($w16$$ = $fail$jscomp$3$$.bind(this, 16));
  $w32$$ || ($w32$$ = $fail$jscomp$3$$.bind(this, 32));
  $w8$$ && (this.ports[$port_addr$jscomp$1$$].write8 = $w8$$);
  $w16$$ && (this.ports[$port_addr$jscomp$1$$].write16 = $w16$$);
  $w32$$ && (this.ports[$port_addr$jscomp$1$$].write32 = $w32$$);
  this.ports[$port_addr$jscomp$1$$].device = $device$jscomp$1$$;
};
$IO$$module$src$io$$.prototype.register_read_consecutive = function($port_addr$jscomp$2$$, $device$jscomp$2$$, $r8_1$$, $r8_2$$, $r8_3$$, $r8_4$$) {
  function $r16_1$$() {
    return $r8_1$$.call(this) | $r8_2$$.call(this) << 8;
  }
  function $r16_2$$() {
    return $r8_3$$.call(this) | $r8_4$$.call(this) << 8;
  }
  function $r32$jscomp$1$$() {
    return $r8_1$$.call(this) | $r8_2$$.call(this) << 8 | $r8_3$$.call(this) << 16 | $r8_4$$.call(this) << 24;
  }
  $dbg_assert$$module$src$log$$(4 === arguments.length || 6 === arguments.length);
  $r8_3$$ && $r8_4$$ ? (this.register_read($port_addr$jscomp$2$$, $device$jscomp$2$$, $r8_1$$, $r16_1$$, $r32$jscomp$1$$), this.register_read($port_addr$jscomp$2$$ + 1, $device$jscomp$2$$, $r8_2$$), this.register_read($port_addr$jscomp$2$$ + 2, $device$jscomp$2$$, $r8_3$$, $r16_2$$), this.register_read($port_addr$jscomp$2$$ + 3, $device$jscomp$2$$, $r8_4$$)) : (this.register_read($port_addr$jscomp$2$$, $device$jscomp$2$$, $r8_1$$, $r16_1$$), this.register_read($port_addr$jscomp$2$$ + 1, $device$jscomp$2$$, 
  $r8_2$$));
};
$IO$$module$src$io$$.prototype.register_write_consecutive = function($port_addr$jscomp$3$$, $device$jscomp$3$$, $w8_1$$, $w8_2$$, $w8_3$$, $w8_4$$) {
  function $w16_1$$($data$jscomp$83$$) {
    $w8_1$$.call(this, $data$jscomp$83$$ & 255);
    $w8_2$$.call(this, $data$jscomp$83$$ >> 8 & 255);
  }
  function $w16_2$$($data$jscomp$84$$) {
    $w8_3$$.call(this, $data$jscomp$84$$ & 255);
    $w8_4$$.call(this, $data$jscomp$84$$ >> 8 & 255);
  }
  function $w32$jscomp$1$$($data$jscomp$85$$) {
    $w8_1$$.call(this, $data$jscomp$85$$ & 255);
    $w8_2$$.call(this, $data$jscomp$85$$ >> 8 & 255);
    $w8_3$$.call(this, $data$jscomp$85$$ >> 16 & 255);
    $w8_4$$.call(this, $data$jscomp$85$$ >>> 24);
  }
  $dbg_assert$$module$src$log$$(4 === arguments.length || 6 === arguments.length);
  $w8_3$$ && $w8_4$$ ? (this.register_write($port_addr$jscomp$3$$, $device$jscomp$3$$, $w8_1$$, $w16_1$$, $w32$jscomp$1$$), this.register_write($port_addr$jscomp$3$$ + 1, $device$jscomp$3$$, $w8_2$$), this.register_write($port_addr$jscomp$3$$ + 2, $device$jscomp$3$$, $w8_3$$, $w16_2$$), this.register_write($port_addr$jscomp$3$$ + 3, $device$jscomp$3$$, $w8_4$$)) : (this.register_write($port_addr$jscomp$3$$, $device$jscomp$3$$, $w8_1$$, $w16_1$$), this.register_write($port_addr$jscomp$3$$ + 1, $device$jscomp$3$$, 
  $w8_2$$));
};
$IO$$module$src$io$$.prototype.mmap_read32_shim = function($addr$jscomp$7$$) {
  var $fn$jscomp$12$$ = this.cpu.memory_map_read8[$addr$jscomp$7$$ >>> 17];
  return $fn$jscomp$12$$($addr$jscomp$7$$) | $fn$jscomp$12$$($addr$jscomp$7$$ + 1) << 8 | $fn$jscomp$12$$($addr$jscomp$7$$ + 2) << 16 | $fn$jscomp$12$$($addr$jscomp$7$$ + 3) << 24;
};
$IO$$module$src$io$$.prototype.mmap_write32_shim = function($addr$jscomp$8$$, $value$jscomp$100$$) {
  var $fn$jscomp$13$$ = this.cpu.memory_map_write8[$addr$jscomp$8$$ >>> 17];
  $fn$jscomp$13$$($addr$jscomp$8$$, $value$jscomp$100$$ & 255);
  $fn$jscomp$13$$($addr$jscomp$8$$ + 1, $value$jscomp$100$$ >> 8 & 255);
  $fn$jscomp$13$$($addr$jscomp$8$$ + 2, $value$jscomp$100$$ >> 16 & 255);
  $fn$jscomp$13$$($addr$jscomp$8$$ + 3, $value$jscomp$100$$ >>> 24);
};
$IO$$module$src$io$$.prototype.mmap_register = function($addr$jscomp$9_aligned_addr$jscomp$2$$, $size$jscomp$27$$, $read_func8$$, $write_func8$$, $read_func32$$, $write_func32$$) {
  $dbg_log$$module$src$log$$("mmap_register addr=" + $h$$module$src$lib$$($addr$jscomp$9_aligned_addr$jscomp$2$$ >>> 0, 8) + " size=" + $h$$module$src$lib$$($size$jscomp$27$$, 8), 32);
  $dbg_assert$$module$src$log$$(0 === ($addr$jscomp$9_aligned_addr$jscomp$2$$ & 131071));
  $dbg_assert$$module$src$log$$($size$jscomp$27$$ && 0 === ($size$jscomp$27$$ & 131071));
  $read_func32$$ || ($read_func32$$ = this.mmap_read32_shim.bind(this));
  $write_func32$$ || ($write_func32$$ = this.mmap_write32_shim.bind(this));
  for ($addr$jscomp$9_aligned_addr$jscomp$2$$ >>>= 17; 0 < $size$jscomp$27$$; $addr$jscomp$9_aligned_addr$jscomp$2$$++) {
    this.cpu.memory_map_read8[$addr$jscomp$9_aligned_addr$jscomp$2$$] = $read_func8$$, this.cpu.memory_map_write8[$addr$jscomp$9_aligned_addr$jscomp$2$$] = $write_func8$$, this.cpu.memory_map_read32[$addr$jscomp$9_aligned_addr$jscomp$2$$] = $read_func32$$, this.cpu.memory_map_write32[$addr$jscomp$9_aligned_addr$jscomp$2$$] = $write_func32$$, $size$jscomp$27$$ -= 131072;
  }
};
$IO$$module$src$io$$.prototype.port_write8 = function($port_addr$jscomp$4$$, $data$jscomp$86$$) {
  var $entry$$ = this.ports[$port_addr$jscomp$4$$];
  $entry$$.write8 === this.empty_port_write && $dbg_log$$module$src$log$$("write8 port #" + $h$$module$src$lib$$($port_addr$jscomp$4$$, 4) + " <- " + $h$$module$src$lib$$($data$jscomp$86$$, 2) + this.get_port_description($port_addr$jscomp$4$$), 32);
  return $entry$$.write8.call($entry$$.device, $data$jscomp$86$$);
};
$IO$$module$src$io$$.prototype.port_write16 = function($port_addr$jscomp$5$$, $data$jscomp$87$$) {
  var $entry$jscomp$1$$ = this.ports[$port_addr$jscomp$5$$];
  $entry$jscomp$1$$.write16 === this.empty_port_write && $dbg_log$$module$src$log$$("write16 port #" + $h$$module$src$lib$$($port_addr$jscomp$5$$, 4) + " <- " + $h$$module$src$lib$$($data$jscomp$87$$, 4) + this.get_port_description($port_addr$jscomp$5$$), 32);
  return $entry$jscomp$1$$.write16.call($entry$jscomp$1$$.device, $data$jscomp$87$$);
};
$IO$$module$src$io$$.prototype.port_write32 = function($port_addr$jscomp$6$$, $data$jscomp$88$$) {
  var $entry$jscomp$2$$ = this.ports[$port_addr$jscomp$6$$];
  $entry$jscomp$2$$.write32 === this.empty_port_write && $dbg_log$$module$src$log$$("write32 port #" + $h$$module$src$lib$$($port_addr$jscomp$6$$, 4) + " <- " + $h$$module$src$lib$$($data$jscomp$88$$ >>> 0, 8) + this.get_port_description($port_addr$jscomp$6$$), 32);
  return $entry$jscomp$2$$.write32.call($entry$jscomp$2$$.device, $data$jscomp$88$$);
};
$IO$$module$src$io$$.prototype.port_read8 = function($port_addr$jscomp$7$$) {
  var $entry$jscomp$3_value$jscomp$101$$ = this.ports[$port_addr$jscomp$7$$];
  $entry$jscomp$3_value$jscomp$101$$.read8 === this.empty_port_read8 && $dbg_log$$module$src$log$$("read8 port  #" + $h$$module$src$lib$$($port_addr$jscomp$7$$, 4) + this.get_port_description($port_addr$jscomp$7$$), 32);
  $entry$jscomp$3_value$jscomp$101$$ = $entry$jscomp$3_value$jscomp$101$$.read8.call($entry$jscomp$3_value$jscomp$101$$.device, $port_addr$jscomp$7$$);
  $dbg_assert$$module$src$log$$("number" === typeof $entry$jscomp$3_value$jscomp$101$$);
  $dbg_assert$$module$src$log$$(256 > $entry$jscomp$3_value$jscomp$101$$ && 0 <= $entry$jscomp$3_value$jscomp$101$$, "8 bit port returned large value: " + $h$$module$src$lib$$($port_addr$jscomp$7$$));
  return $entry$jscomp$3_value$jscomp$101$$;
};
$IO$$module$src$io$$.prototype.port_read16 = function($port_addr$jscomp$8$$) {
  var $entry$jscomp$4_value$jscomp$102$$ = this.ports[$port_addr$jscomp$8$$];
  $entry$jscomp$4_value$jscomp$102$$.read16 === this.empty_port_read16 && $dbg_log$$module$src$log$$("read16 port  #" + $h$$module$src$lib$$($port_addr$jscomp$8$$, 4) + this.get_port_description($port_addr$jscomp$8$$), 32);
  $entry$jscomp$4_value$jscomp$102$$ = $entry$jscomp$4_value$jscomp$102$$.read16.call($entry$jscomp$4_value$jscomp$102$$.device, $port_addr$jscomp$8$$);
  $dbg_assert$$module$src$log$$("number" === typeof $entry$jscomp$4_value$jscomp$102$$);
  $dbg_assert$$module$src$log$$(65536 > $entry$jscomp$4_value$jscomp$102$$ && 0 <= $entry$jscomp$4_value$jscomp$102$$, "16 bit port returned large value: " + $h$$module$src$lib$$($port_addr$jscomp$8$$));
  return $entry$jscomp$4_value$jscomp$102$$;
};
$IO$$module$src$io$$.prototype.port_read32 = function($port_addr$jscomp$9_value$jscomp$103$$) {
  var $entry$jscomp$5$$ = this.ports[$port_addr$jscomp$9_value$jscomp$103$$];
  $entry$jscomp$5$$.read32 === this.empty_port_read32 && $dbg_log$$module$src$log$$("read32 port  #" + $h$$module$src$lib$$($port_addr$jscomp$9_value$jscomp$103$$, 4) + this.get_port_description($port_addr$jscomp$9_value$jscomp$103$$), 32);
  $port_addr$jscomp$9_value$jscomp$103$$ = $entry$jscomp$5$$.read32.call($entry$jscomp$5$$.device, $port_addr$jscomp$9_value$jscomp$103$$);
  $dbg_assert$$module$src$log$$(($port_addr$jscomp$9_value$jscomp$103$$ | 0) === $port_addr$jscomp$9_value$jscomp$103$$);
  return $port_addr$jscomp$9_value$jscomp$103$$;
};
var $debug_port_list$$module$src$io$$ = {4:"PORT_DMA_ADDR_2", 5:"PORT_DMA_CNT_2", 10:"PORT_DMA1_MASK_REG", 11:"PORT_DMA1_MODE_REG", 12:"PORT_DMA1_CLEAR_FF_REG", 13:"PORT_DMA1_MASTER_CLEAR", 32:"PORT_PIC1_CMD", 33:"PORT_PIC1_DATA", 64:"PORT_PIT_COUNTER0", 65:"PORT_PIT_COUNTER1", 66:"PORT_PIT_COUNTER2", 67:"PORT_PIT_MODE", 96:"PORT_PS2_DATA", 97:"PORT_PS2_CTRLB", 100:"PORT_PS2_STATUS", 112:"PORT_CMOS_INDEX", 113:"PORT_CMOS_DATA", 128:"PORT_DIAG", 129:"PORT_DMA_PAGE_2", 146:"PORT_A20", 160:"PORT_PIC2_CMD", 
161:"PORT_PIC2_DATA", 178:"PORT_SMI_CMD", 179:"PORT_SMI_STATUS", 212:"PORT_DMA2_MASK_REG", 214:"PORT_DMA2_MODE_REG", 218:"PORT_DMA2_MASTER_CLEAR", 240:"PORT_MATH_CLEAR", 368:"PORT_ATA2_CMD_BASE", 496:"PORT_ATA1_CMD_BASE", 632:"PORT_LPT2", 744:"PORT_SERIAL4", 760:"PORT_SERIAL2", 884:"PORT_ATA2_CTRL_BASE", 888:"PORT_LPT1", 1E3:"PORT_SERIAL3", 1008:"PORT_FD_BASE", 1010:"PORT_FD_DOR", 1012:"PORT_FD_STATUS", 1013:"PORT_FD_DATA", 1014:"PORT_HD_DATA", 1015:"PORT_FD_DIR", 1016:"PORT_SERIAL1", 3320:"PORT_PCI_CMD", 
3321:"PORT_PCI_REBOOT", 3324:"PORT_PCI_DATA", 1026:"PORT_BIOS_DEBUG", 1296:"PORT_QEMU_CFG_CTL", 1297:"PORT_QEMU_CFG_DATA", 45056:"PORT_ACPI_PM_BASE", 45312:"PORT_SMB_BASE", 35072:"PORT_BIOS_APM"};
$IO$$module$src$io$$.prototype.get_port_description = function($addr$jscomp$10$$) {
  return $debug_port_list$$module$src$io$$[$addr$jscomp$10$$] ? "  (" + $debug_port_list$$module$src$io$$[$addr$jscomp$10$$] + ")" : "";
};
var $Bus$$module$src$bus$$ = {};
function $BusConnector$$module$src$bus$$() {
  this.listeners = {};
  this.pair = void 0;
}
$BusConnector$$module$src$bus$$.prototype.register = function($name$jscomp$78$$, $fn$jscomp$14$$, $this_value$jscomp$1$$) {
  var $listeners$$ = this.listeners[$name$jscomp$78$$];
  void 0 === $listeners$$ && ($listeners$$ = this.listeners[$name$jscomp$78$$] = []);
  $listeners$$.push({fn:$fn$jscomp$14$$, this_value:$this_value$jscomp$1$$, });
};
$BusConnector$$module$src$bus$$.prototype.unregister = function($name$jscomp$79$$, $fn$jscomp$15$$) {
  var $listeners$jscomp$1$$ = this.listeners[$name$jscomp$79$$];
  void 0 !== $listeners$jscomp$1$$ && (this.listeners[$name$jscomp$79$$] = $listeners$jscomp$1$$.filter(function($l$$) {
    return $l$$.fn !== $fn$jscomp$15$$;
  }));
};
$BusConnector$$module$src$bus$$.prototype.send = function($listeners$jscomp$2_name$jscomp$80$$, $value$jscomp$104$$) {
  if (this.pair && ($listeners$jscomp$2_name$jscomp$80$$ = this.pair.listeners[$listeners$jscomp$2_name$jscomp$80$$], void 0 !== $listeners$jscomp$2_name$jscomp$80$$)) {
    for (var $i$jscomp$17$$ = 0; $i$jscomp$17$$ < $listeners$jscomp$2_name$jscomp$80$$.length; $i$jscomp$17$$++) {
      var $listener$jscomp$64$$ = $listeners$jscomp$2_name$jscomp$80$$[$i$jscomp$17$$];
      $listener$jscomp$64$$.fn.call($listener$jscomp$64$$.this_value, $value$jscomp$104$$);
    }
  }
};
$BusConnector$$module$src$bus$$.prototype.send_async = function($name$jscomp$81$$, $value$jscomp$105$$) {
  $dbg_assert$$module$src$log$$(1 === arguments.length || 2 === arguments.length);
  setTimeout(this.send.bind(this, $name$jscomp$81$$, $value$jscomp$105$$), 0);
};
$Bus$$module$src$bus$$.create = function() {
  var $c0$$ = new $BusConnector$$module$src$bus$$, $c1$$ = new $BusConnector$$module$src$bus$$;
  $c0$$.pair = $c1$$;
  $c1$$.pair = $c0$$;
  return [$c0$$, $c1$$];
};
var $DSP_COMMAND_SIZES$$module$src$sb16$$ = new Uint8Array(256), $DSP_COMMAND_HANDLERS$$module$src$sb16$$ = [], $MIXER_READ_HANDLERS$$module$src$sb16$$ = [], $MIXER_WRITE_HANDLERS$$module$src$sb16$$ = [], $MIXER_REGISTER_IS_LEGACY$$module$src$sb16$$ = new Uint8Array(256), $FM_HANDLERS$$module$src$sb16$$ = [];
function $SB16$$module$src$sb16$$($cpu$jscomp$3$$, $bus$$) {
  this.cpu = $cpu$jscomp$3$$;
  this.bus = $bus$$;
  this.write_buffer = new $ByteQueue$$module$src$lib$$(64);
  this.read_buffer = new $ByteQueue$$module$src$lib$$(64);
  this.mixer_current_address = this.command_size = this.command = this.read_buffer_lastvalue = 0;
  this.mixer_registers = new Uint8Array(256);
  this.mixer_reset();
  this.dummy_speaker_enabled = !1;
  this.test_register = 0;
  this.dsp_signed = this.dsp_16bit = this.dsp_stereo = this.dsp_highspeed = !1;
  this.dac_buffers = [new $FloatQueue$$module$src$lib$$(65536), new $FloatQueue$$module$src$lib$$(65536), ];
  this.dma = $cpu$jscomp$3$$.devices.dma;
  this.dma_channel = this.dma_irq = this.dma_bytes_block = this.dma_bytes_left = this.dma_bytes_count = this.dma_sample_count = 0;
  this.dma_channel_8bit = 1;
  this.dma_channel_16bit = 5;
  this.dma_autoinit = !1;
  this.dma_buffer = new ArrayBuffer(65536);
  this.dma_buffer_int8 = new Int8Array(this.dma_buffer);
  this.dma_buffer_uint8 = new Uint8Array(this.dma_buffer);
  this.dma_buffer_int16 = new Int16Array(this.dma_buffer);
  this.dma_buffer_uint16 = new Uint16Array(this.dma_buffer);
  this.dma_syncbuffer = new $SyncBuffer$$module$src$buffer$$(this.dma_buffer);
  this.dma_paused = this.dma_waiting_transfer = !1;
  this.sampling_rate = 22050;
  $bus$$.send("dac-tell-sampling-rate", this.sampling_rate);
  this.bytes_per_sample = 1;
  this.e2_value = 170;
  this.e2_count = 0;
  this.asp_registers = new Uint8Array(256);
  this.mpu_read_buffer = new $ByteQueue$$module$src$lib$$(64);
  this.fm_current_address1 = this.fm_current_address0 = this.mpu_read_buffer_lastvalue = 0;
  this.fm_waveform_select_enable = !1;
  this.irq = 5;
  this.irq_triggered = new Uint8Array(16);
  $cpu$jscomp$3$$.io.register_read_consecutive(544, this, this.port2x0_read, this.port2x1_read, this.port2x2_read, this.port2x3_read);
  $cpu$jscomp$3$$.io.register_read_consecutive(904, this, this.port2x0_read, this.port2x1_read);
  $cpu$jscomp$3$$.io.register_read_consecutive(548, this, this.port2x4_read, this.port2x5_read);
  $cpu$jscomp$3$$.io.register_read(550, this, this.port2x6_read);
  $cpu$jscomp$3$$.io.register_read(551, this, this.port2x7_read);
  $cpu$jscomp$3$$.io.register_read(552, this, this.port2x8_read);
  $cpu$jscomp$3$$.io.register_read(553, this, this.port2x9_read);
  $cpu$jscomp$3$$.io.register_read(554, this, this.port2xA_read);
  $cpu$jscomp$3$$.io.register_read(555, this, this.port2xB_read);
  $cpu$jscomp$3$$.io.register_read(556, this, this.port2xC_read);
  $cpu$jscomp$3$$.io.register_read(557, this, this.port2xD_read);
  $cpu$jscomp$3$$.io.register_read_consecutive(558, this, this.port2xE_read, this.port2xF_read);
  $cpu$jscomp$3$$.io.register_write_consecutive(544, this, this.port2x0_write, this.port2x1_write, this.port2x2_write, this.port2x3_write);
  $cpu$jscomp$3$$.io.register_write_consecutive(904, this, this.port2x0_write, this.port2x1_write);
  $cpu$jscomp$3$$.io.register_write_consecutive(548, this, this.port2x4_write, this.port2x5_write);
  $cpu$jscomp$3$$.io.register_write(550, this, this.port2x6_write);
  $cpu$jscomp$3$$.io.register_write(551, this, this.port2x7_write);
  $cpu$jscomp$3$$.io.register_write_consecutive(552, this, this.port2x8_write, this.port2x9_write);
  $cpu$jscomp$3$$.io.register_write(554, this, this.port2xA_write);
  $cpu$jscomp$3$$.io.register_write(555, this, this.port2xB_write);
  $cpu$jscomp$3$$.io.register_write(556, this, this.port2xC_write);
  $cpu$jscomp$3$$.io.register_write(557, this, this.port2xD_write);
  $cpu$jscomp$3$$.io.register_write(558, this, this.port2xE_write);
  $cpu$jscomp$3$$.io.register_write(559, this, this.port2xF_write);
  $cpu$jscomp$3$$.io.register_read_consecutive(816, this, this.port3x0_read, this.port3x1_read);
  $cpu$jscomp$3$$.io.register_write_consecutive(816, this, this.port3x0_write, this.port3x1_write);
  this.dma.on_unmask(this.dma_on_unmask, this);
  $bus$$.register("dac-request-data", function() {
    this.dac_handle_request();
  }, this);
  $bus$$.register("speaker-has-initialized", function() {
    this.mixer_reset();
  }, this);
  $bus$$.send("speaker-confirm-initialized");
  this.dsp_reset();
}
$SB16$$module$src$sb16$$.prototype.dsp_reset = function() {
  this.write_buffer.clear();
  this.read_buffer.clear();
  this.command_size = this.command = 0;
  this.dummy_speaker_enabled = !1;
  this.test_register = 0;
  this.dsp_signed = this.dsp_16bit = this.dsp_stereo = this.dsp_highspeed = !1;
  this.dac_buffers[0].clear();
  this.dac_buffers[1].clear();
  this.dma_channel = this.dma_irq = this.dma_bytes_block = this.dma_bytes_left = this.dma_bytes_count = this.dma_sample_count = 0;
  this.dma_autoinit = !1;
  this.dma_buffer_uint8.fill(0);
  this.dma_paused = this.dma_waiting_transfer = !1;
  this.e2_value = 170;
  this.e2_count = 0;
  this.sampling_rate = 22050;
  this.bytes_per_sample = 1;
  this.lower_irq(1);
  this.irq_triggered.fill(0);
  this.asp_registers.fill(0);
  this.asp_registers[5] = 1;
  this.asp_registers[9] = 248;
};
$SB16$$module$src$sb16$$.prototype.get_state = function() {
  var $state$jscomp$5$$ = [];
  $state$jscomp$5$$[2] = this.read_buffer_lastvalue;
  $state$jscomp$5$$[3] = this.command;
  $state$jscomp$5$$[4] = this.command_size;
  $state$jscomp$5$$[5] = this.mixer_current_address;
  $state$jscomp$5$$[6] = this.mixer_registers;
  $state$jscomp$5$$[7] = this.dummy_speaker_enabled;
  $state$jscomp$5$$[8] = this.test_register;
  $state$jscomp$5$$[9] = this.dsp_highspeed;
  $state$jscomp$5$$[10] = this.dsp_stereo;
  $state$jscomp$5$$[11] = this.dsp_16bit;
  $state$jscomp$5$$[12] = this.dsp_signed;
  $state$jscomp$5$$[15] = this.dma_sample_count;
  $state$jscomp$5$$[16] = this.dma_bytes_count;
  $state$jscomp$5$$[17] = this.dma_bytes_left;
  $state$jscomp$5$$[18] = this.dma_bytes_block;
  $state$jscomp$5$$[19] = this.dma_irq;
  $state$jscomp$5$$[20] = this.dma_channel;
  $state$jscomp$5$$[21] = this.dma_channel_8bit;
  $state$jscomp$5$$[22] = this.dma_channel_16bit;
  $state$jscomp$5$$[23] = this.dma_autoinit;
  $state$jscomp$5$$[24] = this.dma_buffer_uint8;
  $state$jscomp$5$$[25] = this.dma_waiting_transfer;
  $state$jscomp$5$$[26] = this.dma_paused;
  $state$jscomp$5$$[27] = this.sampling_rate;
  $state$jscomp$5$$[28] = this.bytes_per_sample;
  $state$jscomp$5$$[29] = this.e2_value;
  $state$jscomp$5$$[30] = this.e2_count;
  $state$jscomp$5$$[31] = this.asp_registers;
  $state$jscomp$5$$[33] = this.mpu_read_buffer_last_value;
  $state$jscomp$5$$[34] = this.irq;
  $state$jscomp$5$$[35] = this.irq_triggered;
  return $state$jscomp$5$$;
};
$SB16$$module$src$sb16$$.prototype.set_state = function($state$jscomp$6$$) {
  this.read_buffer_lastvalue = $state$jscomp$6$$[2];
  this.command = $state$jscomp$6$$[3];
  this.command_size = $state$jscomp$6$$[4];
  this.mixer_current_address = $state$jscomp$6$$[5];
  this.mixer_registers = $state$jscomp$6$$[6];
  this.mixer_full_update();
  this.dummy_speaker_enabled = $state$jscomp$6$$[7];
  this.test_register = $state$jscomp$6$$[8];
  this.dsp_highspeed = $state$jscomp$6$$[9];
  this.dsp_stereo = $state$jscomp$6$$[10];
  this.dsp_16bit = $state$jscomp$6$$[11];
  this.dsp_signed = $state$jscomp$6$$[12];
  this.dma_sample_count = $state$jscomp$6$$[15];
  this.dma_bytes_count = $state$jscomp$6$$[16];
  this.dma_bytes_left = $state$jscomp$6$$[17];
  this.dma_bytes_block = $state$jscomp$6$$[18];
  this.dma_irq = $state$jscomp$6$$[19];
  this.dma_channel = $state$jscomp$6$$[20];
  this.dma_channel_8bit = $state$jscomp$6$$[21];
  this.dma_channel_16bit = $state$jscomp$6$$[22];
  this.dma_autoinit = $state$jscomp$6$$[23];
  this.dma_buffer_uint8 = $state$jscomp$6$$[24];
  this.dma_waiting_transfer = $state$jscomp$6$$[25];
  this.dma_paused = $state$jscomp$6$$[26];
  this.sampling_rate = $state$jscomp$6$$[27];
  this.bytes_per_sample = $state$jscomp$6$$[28];
  this.e2_value = $state$jscomp$6$$[29];
  this.e2_count = $state$jscomp$6$$[30];
  this.asp_registers = $state$jscomp$6$$[31];
  this.mpu_read_buffer_last_value = $state$jscomp$6$$[33];
  this.irq = $state$jscomp$6$$[34];
  this.irq_triggered = $state$jscomp$6$$[35];
  this.dma_buffer = this.dma_buffer_uint8.buffer;
  this.dma_buffer_int8 = new Int8Array(this.dma_buffer);
  this.dma_buffer_int16 = new Int16Array(this.dma_buffer);
  this.dma_buffer_uint16 = new Uint16Array(this.dma_buffer);
  this.dma_syncbuffer = new $SyncBuffer$$module$src$buffer$$(this.dma_buffer);
  this.dma_paused ? this.bus.send("dac-disable") : this.bus.send("dac-enable");
};
$SB16$$module$src$sb16$$.prototype.port2x0_read = function() {
  $dbg_log$$module$src$log$$("220 read: fm music status port (unimplemented)", 8388608);
  return 255;
};
$SB16$$module$src$sb16$$.prototype.port2x1_read = function() {
  $dbg_log$$module$src$log$$("221 read: fm music data port (write only)", 8388608);
  return 255;
};
$SB16$$module$src$sb16$$.prototype.port2x2_read = function() {
  $dbg_log$$module$src$log$$("222 read: advanced fm music status port (unimplemented)", 8388608);
  return 255;
};
$SB16$$module$src$sb16$$.prototype.port2x3_read = function() {
  $dbg_log$$module$src$log$$("223 read: advanced music data port (write only)", 8388608);
  return 255;
};
$SB16$$module$src$sb16$$.prototype.port2x4_read = function() {
  $dbg_log$$module$src$log$$("224 read: mixer address port", 8388608);
  return this.mixer_current_address;
};
$SB16$$module$src$sb16$$.prototype.port2x5_read = function() {
  $dbg_log$$module$src$log$$("225 read: mixer data port", 8388608);
  return this.mixer_read(this.mixer_current_address);
};
$SB16$$module$src$sb16$$.prototype.port2x6_read = function() {
  $dbg_log$$module$src$log$$("226 read: (write only)", 8388608);
  return 255;
};
$SB16$$module$src$sb16$$.prototype.port2x7_read = function() {
  $dbg_log$$module$src$log$$("227 read: undocumented", 8388608);
  return 255;
};
$SB16$$module$src$sb16$$.prototype.port2x8_read = function() {
  $dbg_log$$module$src$log$$("228 read: fm music status port (unimplemented)", 8388608);
  return 255;
};
$SB16$$module$src$sb16$$.prototype.port2x9_read = function() {
  $dbg_log$$module$src$log$$("229 read: fm music data port (write only)", 8388608);
  return 255;
};
$SB16$$module$src$sb16$$.prototype.port2xA_read = function() {
  $dbg_log$$module$src$log$$("22A read: read data", 8388608);
  this.read_buffer.length && (this.read_buffer_lastvalue = this.read_buffer.shift());
  $dbg_log$$module$src$log$$(" <- " + this.read_buffer_lastvalue + " " + $h$$module$src$lib$$(this.read_buffer_lastvalue) + " '" + String.fromCharCode(this.read_buffer_lastvalue) + "'", 8388608);
  return this.read_buffer_lastvalue;
};
$SB16$$module$src$sb16$$.prototype.port2xB_read = function() {
  $dbg_log$$module$src$log$$("22B read: undocumented", 8388608);
  return 255;
};
$SB16$$module$src$sb16$$.prototype.port2xC_read = function() {
  $dbg_log$$module$src$log$$("22C read: write-buffer status", 8388608);
  return 127;
};
$SB16$$module$src$sb16$$.prototype.port2xD_read = function() {
  $dbg_log$$module$src$log$$("22D read: undocumented", 8388608);
  return 255;
};
$SB16$$module$src$sb16$$.prototype.port2xE_read = function() {
  $dbg_log$$module$src$log$$("22E read: read-buffer status / irq 8bit ack.", 8388608);
  this.irq_triggered[1] && this.lower_irq(1);
  return (this.read_buffer.length && !this.dsp_highspeed) << 7 | 127;
};
$SB16$$module$src$sb16$$.prototype.port2xF_read = function() {
  $dbg_log$$module$src$log$$("22F read: irq 16bit ack", 8388608);
  this.lower_irq(2);
  return 0;
};
$SB16$$module$src$sb16$$.prototype.port2x0_write = function($value$jscomp$106$$) {
  $dbg_log$$module$src$log$$("220 write: (unimplemented) fm register 0 address = " + $h$$module$src$lib$$($value$jscomp$106$$), 8388608);
  this.fm_current_address0 = 0;
};
$SB16$$module$src$sb16$$.prototype.port2x1_write = function($value$jscomp$107$$) {
  $dbg_log$$module$src$log$$("221 write: (unimplemented) fm register 0 data = " + $h$$module$src$lib$$($value$jscomp$107$$), 8388608);
  var $handler$jscomp$3$$ = $FM_HANDLERS$$module$src$sb16$$[this.fm_current_address0];
  $handler$jscomp$3$$ || ($handler$jscomp$3$$ = this.fm_default_write);
  $handler$jscomp$3$$.call(this, $value$jscomp$107$$, 0, this.fm_current_address0);
};
$SB16$$module$src$sb16$$.prototype.port2x2_write = function($value$jscomp$108$$) {
  $dbg_log$$module$src$log$$("222 write: (unimplemented) fm register 1 address = " + $h$$module$src$lib$$($value$jscomp$108$$), 8388608);
  this.fm_current_address1 = 0;
};
$SB16$$module$src$sb16$$.prototype.port2x3_write = function($value$jscomp$109$$) {
  $dbg_log$$module$src$log$$("223 write: (unimplemented) fm register 1 data =" + $h$$module$src$lib$$($value$jscomp$109$$), 8388608);
  var $handler$jscomp$4$$ = $FM_HANDLERS$$module$src$sb16$$[this.fm_current_address1];
  $handler$jscomp$4$$ || ($handler$jscomp$4$$ = this.fm_default_write);
  $handler$jscomp$4$$.call(this, $value$jscomp$109$$, 1, this.fm_current_address1);
};
$SB16$$module$src$sb16$$.prototype.port2x4_write = function($value$jscomp$110$$) {
  $dbg_log$$module$src$log$$("224 write: mixer address = " + $h$$module$src$lib$$($value$jscomp$110$$), 8388608);
  this.mixer_current_address = $value$jscomp$110$$;
};
$SB16$$module$src$sb16$$.prototype.port2x5_write = function($value$jscomp$111$$) {
  $dbg_log$$module$src$log$$("225 write: mixer data = " + $h$$module$src$lib$$($value$jscomp$111$$), 8388608);
  this.mixer_write(this.mixer_current_address, $value$jscomp$111$$);
};
$SB16$$module$src$sb16$$.prototype.port2x6_write = function($yesplease$$) {
  $dbg_log$$module$src$log$$("226 write: reset = " + $h$$module$src$lib$$($yesplease$$), 8388608);
  this.dsp_highspeed ? ($dbg_log$$module$src$log$$(" -> exit highspeed", 8388608), this.dsp_highspeed = !1) : $yesplease$$ && ($dbg_log$$module$src$log$$(" -> reset", 8388608), this.dsp_reset());
  this.read_buffer.clear();
  this.read_buffer.push(170);
};
$SB16$$module$src$sb16$$.prototype.port2x7_write = function() {
  $dbg_log$$module$src$log$$("227 write: undocumented", 8388608);
};
$SB16$$module$src$sb16$$.prototype.port2x8_write = function() {
  $dbg_log$$module$src$log$$("228 write: fm music register port (unimplemented)", 8388608);
};
$SB16$$module$src$sb16$$.prototype.port2x9_write = function() {
  $dbg_log$$module$src$log$$("229 write: fm music data port (unimplemented)", 8388608);
};
$SB16$$module$src$sb16$$.prototype.port2xA_write = function() {
  $dbg_log$$module$src$log$$("22A write: dsp read data port (read only)", 8388608);
};
$SB16$$module$src$sb16$$.prototype.port2xB_write = function() {
  $dbg_log$$module$src$log$$("22B write: undocumented", 8388608);
};
$SB16$$module$src$sb16$$.prototype.port2xC_write = function($value$jscomp$117$$) {
  $dbg_log$$module$src$log$$("22C write: write command/data", 8388608);
  0 === this.command ? ($dbg_log$$module$src$log$$("22C write: command = " + $h$$module$src$lib$$($value$jscomp$117$$), 8388608), this.command = $value$jscomp$117$$, this.write_buffer.clear(), this.command_size = $DSP_COMMAND_SIZES$$module$src$sb16$$[$value$jscomp$117$$]) : ($dbg_log$$module$src$log$$("22C write: data: " + $h$$module$src$lib$$($value$jscomp$117$$), 8388608), this.write_buffer.push($value$jscomp$117$$));
  this.write_buffer.length >= this.command_size && this.command_do();
};
$SB16$$module$src$sb16$$.prototype.port2xD_write = function() {
  $dbg_log$$module$src$log$$("22D write: undocumented", 8388608);
};
$SB16$$module$src$sb16$$.prototype.port2xE_write = function() {
  $dbg_log$$module$src$log$$("22E write: dsp read buffer status (read only)", 8388608);
};
$SB16$$module$src$sb16$$.prototype.port2xF_write = function() {
  $dbg_log$$module$src$log$$("22F write: undocumented", 8388608);
};
$SB16$$module$src$sb16$$.prototype.port3x0_read = function() {
  $dbg_log$$module$src$log$$("330 read: mpu data", 8388608);
  this.mpu_read_buffer.length && (this.mpu_read_buffer_lastvalue = this.mpu_read_buffer.shift());
  $dbg_log$$module$src$log$$(" <- " + $h$$module$src$lib$$(this.mpu_read_buffer_lastvalue), 8388608);
  return this.mpu_read_buffer_lastvalue;
};
$SB16$$module$src$sb16$$.prototype.port3x0_write = function($value$jscomp$121$$) {
  $dbg_log$$module$src$log$$("330 write: mpu data (unimplemented) : " + $h$$module$src$lib$$($value$jscomp$121$$), 8388608);
};
$SB16$$module$src$sb16$$.prototype.port3x1_read = function() {
  $dbg_log$$module$src$log$$("331 read: mpu status", 8388608);
  return 0 | 128 * !this.mpu_read_buffer.length;
};
$SB16$$module$src$sb16$$.prototype.port3x1_write = function($value$jscomp$122$$) {
  $dbg_log$$module$src$log$$("331 write: mpu command: " + $h$$module$src$lib$$($value$jscomp$122$$), 8388608);
  255 === $value$jscomp$122$$ && (this.mpu_read_buffer.clear(), this.mpu_read_buffer.push(254));
};
$SB16$$module$src$sb16$$.prototype.command_do = function() {
  var $handler$jscomp$5$$ = $DSP_COMMAND_HANDLERS$$module$src$sb16$$[this.command];
  $handler$jscomp$5$$ || ($handler$jscomp$5$$ = this.dsp_default_handler);
  $handler$jscomp$5$$.call(this);
  this.command_size = this.command = 0;
  this.write_buffer.clear();
};
$SB16$$module$src$sb16$$.prototype.dsp_default_handler = function() {
  $dbg_log$$module$src$log$$("Unhandled command: " + $h$$module$src$lib$$(this.command), 8388608);
};
function $register_dsp_command$$module$src$sb16$$($commands$$, $size$jscomp$28$$, $handler$jscomp$6$$) {
  $handler$jscomp$6$$ || ($handler$jscomp$6$$ = $SB16$$module$src$sb16$$.prototype.dsp_default_handler);
  for (var $i$jscomp$18$$ = 0; $i$jscomp$18$$ < $commands$$.length; $i$jscomp$18$$++) {
    $DSP_COMMAND_SIZES$$module$src$sb16$$[$commands$$[$i$jscomp$18$$]] = $size$jscomp$28$$, $DSP_COMMAND_HANDLERS$$module$src$sb16$$[$commands$$[$i$jscomp$18$$]] = $handler$jscomp$6$$;
  }
}
function $any_first_digit$$module$src$sb16$$($base$jscomp$3$$) {
  for (var $commands$jscomp$1$$ = [], $i$jscomp$19$$ = 0; 16 > $i$jscomp$19$$; $i$jscomp$19$$++) {
    $commands$jscomp$1$$.push($base$jscomp$3$$ + $i$jscomp$19$$);
  }
  return $commands$jscomp$1$$;
}
$register_dsp_command$$module$src$sb16$$([14], 2, function() {
  this.asp_registers[this.write_buffer.shift()] = this.write_buffer.shift();
});
$register_dsp_command$$module$src$sb16$$([15], 1, function() {
  this.read_buffer.clear();
  this.read_buffer.push(this.asp_registers[this.write_buffer.shift()]);
});
$register_dsp_command$$module$src$sb16$$([16], 1, function() {
  var $value$jscomp$123_value$jscomp$inline_47$$ = this.write_buffer.shift();
  $value$jscomp$123_value$jscomp$inline_47$$ = $audio_clip$$module$src$sb16$$($value$jscomp$123_value$jscomp$inline_47$$ / 127.5 + -1, -1, 1);
  this.dac_buffers[0].push($value$jscomp$123_value$jscomp$inline_47$$);
  this.dac_buffers[1].push($value$jscomp$123_value$jscomp$inline_47$$);
  this.bus.send("dac-enable");
});
$register_dsp_command$$module$src$sb16$$([20, 21], 2, function() {
  this.dma_irq = 1;
  this.dma_channel = this.dma_channel_8bit;
  this.dsp_highspeed = this.dsp_16bit = this.dsp_signed = this.dma_autoinit = !1;
  this.dma_transfer_size_set();
  this.dma_transfer_start();
});
$register_dsp_command$$module$src$sb16$$([22], 2);
$register_dsp_command$$module$src$sb16$$([23], 2);
$register_dsp_command$$module$src$sb16$$([28], 0, function() {
  this.dma_irq = 1;
  this.dma_channel = this.dma_channel_8bit;
  this.dma_autoinit = !0;
  this.dsp_highspeed = this.dsp_16bit = this.dsp_signed = !1;
  this.dma_transfer_start();
});
$register_dsp_command$$module$src$sb16$$([31], 0);
$register_dsp_command$$module$src$sb16$$([32], 0, function() {
  this.read_buffer.clear();
  this.read_buffer.push(127);
});
$register_dsp_command$$module$src$sb16$$([36], 2);
$register_dsp_command$$module$src$sb16$$([44], 0);
$register_dsp_command$$module$src$sb16$$([48], 0);
$register_dsp_command$$module$src$sb16$$([49], 0);
$register_dsp_command$$module$src$sb16$$([52], 0);
$register_dsp_command$$module$src$sb16$$([53], 0);
$register_dsp_command$$module$src$sb16$$([54], 0);
$register_dsp_command$$module$src$sb16$$([55], 0);
$register_dsp_command$$module$src$sb16$$([56], 0);
$register_dsp_command$$module$src$sb16$$([64], 1, function() {
  this.sampling_rate_change(1000000 / (256 - this.write_buffer.shift()) / this.get_channel_count());
});
$register_dsp_command$$module$src$sb16$$([65, 66], 2, function() {
  this.sampling_rate_change(this.write_buffer.shift() << 8 | this.write_buffer.shift());
});
$register_dsp_command$$module$src$sb16$$([72], 2, function() {
  this.dma_transfer_size_set();
});
$register_dsp_command$$module$src$sb16$$([116], 2);
$register_dsp_command$$module$src$sb16$$([117], 2);
$register_dsp_command$$module$src$sb16$$([118], 2);
$register_dsp_command$$module$src$sb16$$([119], 2);
$register_dsp_command$$module$src$sb16$$([125], 0);
$register_dsp_command$$module$src$sb16$$([127], 0);
$register_dsp_command$$module$src$sb16$$([128], 2);
$register_dsp_command$$module$src$sb16$$([144], 0, function() {
  this.dma_irq = 1;
  this.dma_channel = this.dma_channel_8bit;
  this.dma_autoinit = !0;
  this.dsp_signed = !1;
  this.dsp_highspeed = !0;
  this.dsp_16bit = !1;
  this.dma_transfer_start();
});
$register_dsp_command$$module$src$sb16$$([145], 0);
$register_dsp_command$$module$src$sb16$$([152], 0);
$register_dsp_command$$module$src$sb16$$([153], 0);
$register_dsp_command$$module$src$sb16$$([160], 0);
$register_dsp_command$$module$src$sb16$$([168], 0);
$register_dsp_command$$module$src$sb16$$($any_first_digit$$module$src$sb16$$(176), 3, function() {
  if (this.command & 8) {
    this.dsp_default_handler();
  } else {
    var $mode$jscomp$16$$ = this.write_buffer.shift();
    this.dma_irq = 2;
    this.dma_channel = this.dma_channel_16bit;
    this.dma_autoinit = !!(this.command & 4);
    this.dsp_signed = !!($mode$jscomp$16$$ & 16);
    this.dsp_stereo = !!($mode$jscomp$16$$ & 32);
    this.dsp_16bit = !0;
    this.dma_transfer_size_set();
    this.dma_transfer_start();
  }
});
$register_dsp_command$$module$src$sb16$$($any_first_digit$$module$src$sb16$$(192), 3, function() {
  if (this.command & 8) {
    this.dsp_default_handler();
  } else {
    var $mode$jscomp$17$$ = this.write_buffer.shift();
    this.dma_irq = 1;
    this.dma_channel = this.dma_channel_8bit;
    this.dma_autoinit = !!(this.command & 4);
    this.dsp_signed = !!($mode$jscomp$17$$ & 16);
    this.dsp_stereo = !!($mode$jscomp$17$$ & 32);
    this.dsp_16bit = !1;
    this.dma_transfer_size_set();
    this.dma_transfer_start();
  }
});
$register_dsp_command$$module$src$sb16$$([208], 0, function() {
  this.dma_paused = !0;
  this.bus.send("dac-disable");
});
$register_dsp_command$$module$src$sb16$$([209], 0, function() {
  this.dummy_speaker_enabled = !0;
});
$register_dsp_command$$module$src$sb16$$([211], 0, function() {
  this.dummy_speaker_enabled = !1;
});
$register_dsp_command$$module$src$sb16$$([212], 0, function() {
  this.dma_paused = !1;
  this.bus.send("dac-enable");
});
$register_dsp_command$$module$src$sb16$$([213], 0, function() {
  this.dma_paused = !0;
  this.bus.send("dac-disable");
});
$register_dsp_command$$module$src$sb16$$([214], 0, function() {
  this.dma_paused = !1;
  this.bus.send("dac-enable");
});
$register_dsp_command$$module$src$sb16$$([216], 0, function() {
  this.read_buffer.clear();
  this.read_buffer.push(255 * this.dummy_speaker_enabled);
});
$register_dsp_command$$module$src$sb16$$([217, 218], 0, function() {
  this.dma_autoinit = !1;
});
$register_dsp_command$$module$src$sb16$$([224], 1, function() {
  this.read_buffer.clear();
  this.read_buffer.push(~this.write_buffer.shift());
});
$register_dsp_command$$module$src$sb16$$([225], 0, function() {
  this.read_buffer.clear();
  this.read_buffer.push(4);
  this.read_buffer.push(5);
});
$register_dsp_command$$module$src$sb16$$([226], 1);
$register_dsp_command$$module$src$sb16$$([227], 0, function() {
  this.read_buffer.clear();
  for (var $i$jscomp$20$$ = 0; 44 > $i$jscomp$20$$; $i$jscomp$20$$++) {
    this.read_buffer.push("COPYRIGHT (C) CREATIVE TECHNOLOGY LTD, 1992.".charCodeAt($i$jscomp$20$$));
  }
  this.read_buffer.push(0);
});
$register_dsp_command$$module$src$sb16$$([228], 1, function() {
  this.test_register = this.write_buffer.shift();
});
$register_dsp_command$$module$src$sb16$$([232], 0, function() {
  this.read_buffer.clear();
  this.read_buffer.push(this.test_register);
});
$register_dsp_command$$module$src$sb16$$([242, 243], 0, function() {
  this.raise_irq();
});
var $SB_F9$$module$src$sb16$$ = new Uint8Array(256);
$SB_F9$$module$src$sb16$$[14] = 255;
$SB_F9$$module$src$sb16$$[15] = 7;
$SB_F9$$module$src$sb16$$[55] = 56;
$register_dsp_command$$module$src$sb16$$([249], 1, function() {
  var $input$jscomp$9$$ = this.write_buffer.shift();
  $dbg_log$$module$src$log$$("dsp 0xf9: unknown function. input: " + $input$jscomp$9$$, 8388608);
  this.read_buffer.clear();
  this.read_buffer.push($SB_F9$$module$src$sb16$$[$input$jscomp$9$$]);
});
$SB16$$module$src$sb16$$.prototype.mixer_read = function($address$$) {
  var $data$jscomp$89_handler$jscomp$7$$ = $MIXER_READ_HANDLERS$$module$src$sb16$$[$address$$];
  $data$jscomp$89_handler$jscomp$7$$ ? $data$jscomp$89_handler$jscomp$7$$ = $data$jscomp$89_handler$jscomp$7$$.call(this) : ($data$jscomp$89_handler$jscomp$7$$ = this.mixer_registers[$address$$], $dbg_log$$module$src$log$$("unhandled mixer register read. addr:" + $h$$module$src$lib$$($address$$) + " data:" + $h$$module$src$lib$$($data$jscomp$89_handler$jscomp$7$$), 8388608));
  return $data$jscomp$89_handler$jscomp$7$$;
};
$SB16$$module$src$sb16$$.prototype.mixer_write = function($address$jscomp$1$$, $data$jscomp$90$$) {
  var $handler$jscomp$8$$ = $MIXER_WRITE_HANDLERS$$module$src$sb16$$[$address$jscomp$1$$];
  $handler$jscomp$8$$ ? $handler$jscomp$8$$.call(this, $data$jscomp$90$$) : $dbg_log$$module$src$log$$("unhandled mixer register write. addr:" + $h$$module$src$lib$$($address$jscomp$1$$) + " data:" + $h$$module$src$lib$$($data$jscomp$90$$), 8388608);
};
$SB16$$module$src$sb16$$.prototype.mixer_default_read = function() {
  $dbg_log$$module$src$log$$("mixer register read. addr:" + $h$$module$src$lib$$(this.mixer_current_address), 8388608);
  return this.mixer_registers[this.mixer_current_address];
};
$SB16$$module$src$sb16$$.prototype.mixer_default_write = function($data$jscomp$91$$) {
  $dbg_log$$module$src$log$$("mixer register write. addr:" + $h$$module$src$lib$$(this.mixer_current_address) + " data:" + $h$$module$src$lib$$($data$jscomp$91$$), 8388608);
  this.mixer_registers[this.mixer_current_address] = $data$jscomp$91$$;
};
$SB16$$module$src$sb16$$.prototype.mixer_reset = function() {
  this.mixer_registers[4] = 204;
  this.mixer_registers[34] = 204;
  this.mixer_registers[38] = 204;
  this.mixer_registers[40] = 0;
  this.mixer_registers[46] = 0;
  this.mixer_registers[10] = 0;
  this.mixer_registers[48] = 192;
  this.mixer_registers[49] = 192;
  this.mixer_registers[50] = 192;
  this.mixer_registers[51] = 192;
  this.mixer_registers[52] = 192;
  this.mixer_registers[53] = 192;
  this.mixer_registers[54] = 0;
  this.mixer_registers[55] = 0;
  this.mixer_registers[56] = 0;
  this.mixer_registers[57] = 0;
  this.mixer_registers[59] = 0;
  this.mixer_registers[60] = 31;
  this.mixer_registers[61] = 21;
  this.mixer_registers[62] = 11;
  this.mixer_registers[63] = 0;
  this.mixer_registers[64] = 0;
  this.mixer_registers[65] = 0;
  this.mixer_registers[66] = 0;
  this.mixer_registers[67] = 0;
  this.mixer_registers[68] = 128;
  this.mixer_registers[69] = 128;
  this.mixer_registers[70] = 128;
  this.mixer_registers[71] = 128;
  this.mixer_full_update();
};
$SB16$$module$src$sb16$$.prototype.mixer_full_update = function() {
  for (var $i$jscomp$21$$ = 1; $i$jscomp$21$$ < this.mixer_registers.length; $i$jscomp$21$$++) {
    $MIXER_REGISTER_IS_LEGACY$$module$src$sb16$$[$i$jscomp$21$$] || this.mixer_write($i$jscomp$21$$, this.mixer_registers[$i$jscomp$21$$]);
  }
};
function $register_mixer_read$$module$src$sb16$$($address$jscomp$2$$, $handler$jscomp$9$$) {
  $handler$jscomp$9$$ || ($handler$jscomp$9$$ = $SB16$$module$src$sb16$$.prototype.mixer_default_read);
  $MIXER_READ_HANDLERS$$module$src$sb16$$[$address$jscomp$2$$] = $handler$jscomp$9$$;
}
function $register_mixer_write$$module$src$sb16$$($address$jscomp$3$$, $handler$jscomp$10$$) {
  $handler$jscomp$10$$ || ($handler$jscomp$10$$ = $SB16$$module$src$sb16$$.prototype.mixer_default_write);
  $MIXER_WRITE_HANDLERS$$module$src$sb16$$[$address$jscomp$3$$] = $handler$jscomp$10$$;
}
function $register_mixer_legacy$$module$src$sb16$$($address_old$$, $address_new_left$$, $address_new_right$$) {
  $MIXER_REGISTER_IS_LEGACY$$module$src$sb16$$[$address_old$$] = 1;
  $MIXER_READ_HANDLERS$$module$src$sb16$$[$address_old$$] = function() {
    return this.mixer_registers[$address_new_left$$] & 240 | this.mixer_registers[$address_new_right$$] >>> 4;
  };
  $MIXER_WRITE_HANDLERS$$module$src$sb16$$[$address_old$$] = function($data$jscomp$92$$) {
    this.mixer_registers[$address_old$$] = $data$jscomp$92$$;
    var $right$jscomp$3$$ = $data$jscomp$92$$ << 4 & 240 | this.mixer_registers[$address_new_right$$] & 15;
    this.mixer_write($address_new_left$$, $data$jscomp$92$$ & 240 | this.mixer_registers[$address_new_left$$] & 15);
    this.mixer_write($address_new_right$$, $right$jscomp$3$$);
  };
}
function $register_mixer_volume$$module$src$sb16$$($address$jscomp$4$$, $mixer_source$$, $channel$jscomp$16$$) {
  $MIXER_READ_HANDLERS$$module$src$sb16$$[$address$jscomp$4$$] = $SB16$$module$src$sb16$$.prototype.mixer_default_read;
  $MIXER_WRITE_HANDLERS$$module$src$sb16$$[$address$jscomp$4$$] = function($data$jscomp$93$$) {
    this.mixer_registers[$address$jscomp$4$$] = $data$jscomp$93$$;
    this.bus.send("mixer-volume", [$mixer_source$$, $channel$jscomp$16$$, ($data$jscomp$93$$ >>> 2) - 62]);
  };
}
$register_mixer_read$$module$src$sb16$$(0, function() {
  this.mixer_reset();
  return 0;
});
$register_mixer_write$$module$src$sb16$$(0);
$register_mixer_legacy$$module$src$sb16$$(4, 50, 51);
$register_mixer_legacy$$module$src$sb16$$(34, 48, 49);
$register_mixer_legacy$$module$src$sb16$$(38, 52, 53);
$register_mixer_legacy$$module$src$sb16$$(40, 54, 55);
$register_mixer_legacy$$module$src$sb16$$(46, 56, 57);
$register_mixer_volume$$module$src$sb16$$(48, 0, 0);
$register_mixer_volume$$module$src$sb16$$(49, 0, 1);
$register_mixer_volume$$module$src$sb16$$(50, 2, 0);
$register_mixer_volume$$module$src$sb16$$(51, 2, 1);
$register_mixer_read$$module$src$sb16$$(59);
$register_mixer_write$$module$src$sb16$$(59, function($data$jscomp$94$$) {
  this.mixer_registers[59] = $data$jscomp$94$$;
  this.bus.send("mixer-volume", [1, 2, 6 * ($data$jscomp$94$$ >>> 6) - 18]);
});
$register_mixer_read$$module$src$sb16$$(65);
$register_mixer_write$$module$src$sb16$$(65, function($data$jscomp$95$$) {
  this.mixer_registers[65] = $data$jscomp$95$$;
  this.bus.send("mixer-gain-left", 6 * ($data$jscomp$95$$ >>> 6));
});
$register_mixer_read$$module$src$sb16$$(66);
$register_mixer_write$$module$src$sb16$$(66, function($data$jscomp$96$$) {
  this.mixer_registers[66] = $data$jscomp$96$$;
  this.bus.send("mixer-gain-right", 6 * ($data$jscomp$96$$ >>> 6));
});
$register_mixer_read$$module$src$sb16$$(68);
$register_mixer_write$$module$src$sb16$$(68, function($data$jscomp$97$$) {
  this.mixer_registers[68] = $data$jscomp$97$$;
  $data$jscomp$97$$ >>>= 3;
  this.bus.send("mixer-treble-left", $data$jscomp$97$$ - (16 > $data$jscomp$97$$ ? 14 : 16));
});
$register_mixer_read$$module$src$sb16$$(69);
$register_mixer_write$$module$src$sb16$$(69, function($data$jscomp$98$$) {
  this.mixer_registers[69] = $data$jscomp$98$$;
  $data$jscomp$98$$ >>>= 3;
  this.bus.send("mixer-treble-right", $data$jscomp$98$$ - (16 > $data$jscomp$98$$ ? 14 : 16));
});
$register_mixer_read$$module$src$sb16$$(70);
$register_mixer_write$$module$src$sb16$$(70, function($data$jscomp$99$$) {
  this.mixer_registers[70] = $data$jscomp$99$$;
  $data$jscomp$99$$ >>>= 3;
  this.bus.send("mixer-bass-right", $data$jscomp$99$$ - (16 > $data$jscomp$99$$ ? 14 : 16));
});
$register_mixer_read$$module$src$sb16$$(71);
$register_mixer_write$$module$src$sb16$$(71, function($data$jscomp$100$$) {
  this.mixer_registers[71] = $data$jscomp$100$$;
  $data$jscomp$100$$ >>>= 3;
  this.bus.send("mixer-bass-right", $data$jscomp$100$$ - (16 > $data$jscomp$100$$ ? 14 : 16));
});
$register_mixer_read$$module$src$sb16$$(128, function() {
  switch(this.irq) {
    case 2:
      return 1;
    case 5:
      return 2;
    case 7:
      return 4;
    case 10:
      return 8;
    default:
      return 0;
  }
});
$register_mixer_write$$module$src$sb16$$(128, function($bits$$) {
  $bits$$ & 1 && (this.irq = 2);
  $bits$$ & 2 && (this.irq = 5);
  $bits$$ & 4 && (this.irq = 7);
  $bits$$ & 8 && (this.irq = 10);
});
$register_mixer_read$$module$src$sb16$$(129, function() {
  var $ret$$ = 0;
  switch(this.dma_channel_8bit) {
    case 0:
      $ret$$ |= 1;
      break;
    case 1:
      $ret$$ |= 2;
      break;
    case 3:
      $ret$$ |= 8;
  }
  switch(this.dma_channel_16bit) {
    case 5:
      $ret$$ |= 32;
      break;
    case 6:
      $ret$$ |= 64;
      break;
    case 7:
      $ret$$ |= 128;
  }
  return $ret$$;
});
$register_mixer_write$$module$src$sb16$$(129, function($bits$jscomp$1$$) {
  $bits$jscomp$1$$ & 1 && (this.dma_channel_8bit = 0);
  $bits$jscomp$1$$ & 2 && (this.dma_channel_8bit = 1);
  $bits$jscomp$1$$ & 8 && (this.dma_channel_8bit = 3);
  $bits$jscomp$1$$ & 32 && (this.dma_channel_16bit = 5);
  $bits$jscomp$1$$ & 64 && (this.dma_channel_16bit = 6);
  $bits$jscomp$1$$ & 128 && (this.dma_channel_16bit = 7);
});
$register_mixer_read$$module$src$sb16$$(130, function() {
  for (var $ret$jscomp$1$$ = 32, $i$jscomp$22$$ = 0; 16 > $i$jscomp$22$$; $i$jscomp$22$$++) {
    $ret$jscomp$1$$ |= $i$jscomp$22$$ * this.irq_triggered[$i$jscomp$22$$];
  }
  return $ret$jscomp$1$$;
});
$SB16$$module$src$sb16$$.prototype.fm_default_write = function($data$jscomp$101$$, $register$$, $address$jscomp$5$$) {
  $dbg_log$$module$src$log$$("unhandled fm register write. addr:" + $register$$ + "|" + $h$$module$src$lib$$($address$jscomp$5$$) + " data:" + $h$$module$src$lib$$($data$jscomp$101$$), 8388608);
};
function $register_fm_write$$module$src$sb16$$($addresses$$, $handler$jscomp$11$$) {
  $handler$jscomp$11$$ || ($handler$jscomp$11$$ = $SB16$$module$src$sb16$$.prototype.fm_default_write);
  for (var $i$jscomp$23$$ = 0; $i$jscomp$23$$ < $addresses$$.length; $i$jscomp$23$$++) {
    $FM_HANDLERS$$module$src$sb16$$[$addresses$$[$i$jscomp$23$$]] = $handler$jscomp$11$$;
  }
}
function $between$$module$src$sb16$$($i$jscomp$24_start$jscomp$23$$, $end$jscomp$13$$) {
  for (var $a$jscomp$3$$ = []; $i$jscomp$24_start$jscomp$23$$ <= $end$jscomp$13$$; $i$jscomp$24_start$jscomp$23$$++) {
    $a$jscomp$3$$.push($i$jscomp$24_start$jscomp$23$$);
  }
  return $a$jscomp$3$$;
}
const $SB_FM_OPERATORS_BY_OFFSET$$module$src$sb16$$ = new Uint8Array(32);
$SB_FM_OPERATORS_BY_OFFSET$$module$src$sb16$$[0] = 0;
$SB_FM_OPERATORS_BY_OFFSET$$module$src$sb16$$[1] = 1;
$SB_FM_OPERATORS_BY_OFFSET$$module$src$sb16$$[2] = 2;
$SB_FM_OPERATORS_BY_OFFSET$$module$src$sb16$$[3] = 3;
$SB_FM_OPERATORS_BY_OFFSET$$module$src$sb16$$[4] = 4;
$SB_FM_OPERATORS_BY_OFFSET$$module$src$sb16$$[5] = 5;
$SB_FM_OPERATORS_BY_OFFSET$$module$src$sb16$$[8] = 6;
$SB_FM_OPERATORS_BY_OFFSET$$module$src$sb16$$[9] = 7;
$SB_FM_OPERATORS_BY_OFFSET$$module$src$sb16$$[10] = 8;
$SB_FM_OPERATORS_BY_OFFSET$$module$src$sb16$$[11] = 9;
$SB_FM_OPERATORS_BY_OFFSET$$module$src$sb16$$[12] = 10;
$SB_FM_OPERATORS_BY_OFFSET$$module$src$sb16$$[13] = 11;
$SB_FM_OPERATORS_BY_OFFSET$$module$src$sb16$$[16] = 12;
$SB_FM_OPERATORS_BY_OFFSET$$module$src$sb16$$[17] = 13;
$SB_FM_OPERATORS_BY_OFFSET$$module$src$sb16$$[18] = 14;
$SB_FM_OPERATORS_BY_OFFSET$$module$src$sb16$$[19] = 15;
$SB_FM_OPERATORS_BY_OFFSET$$module$src$sb16$$[20] = 16;
$SB_FM_OPERATORS_BY_OFFSET$$module$src$sb16$$[21] = 17;
$register_fm_write$$module$src$sb16$$([1], function($bits$jscomp$2$$, $register$jscomp$2$$) {
  this.fm_waveform_select_enable[$register$jscomp$2$$] = $bits$jscomp$2$$ & 1;
  this.fm_update_waveforms();
});
$register_fm_write$$module$src$sb16$$([2]);
$register_fm_write$$module$src$sb16$$([3]);
$register_fm_write$$module$src$sb16$$([4], function() {
});
$register_fm_write$$module$src$sb16$$([5], function($bits$jscomp$4$$, $register$jscomp$4$$, $address$jscomp$8$$) {
  0 === $register$jscomp$4$$ && this.fm_default_write($bits$jscomp$4$$, $register$jscomp$4$$, $address$jscomp$8$$);
});
$register_fm_write$$module$src$sb16$$([8], function() {
});
$register_fm_write$$module$src$sb16$$($between$$module$src$sb16$$(32, 53), function() {
});
$register_fm_write$$module$src$sb16$$($between$$module$src$sb16$$(64, 85), function() {
});
$register_fm_write$$module$src$sb16$$($between$$module$src$sb16$$(96, 117), function() {
});
$register_fm_write$$module$src$sb16$$($between$$module$src$sb16$$(128, 149), function() {
});
$register_fm_write$$module$src$sb16$$($between$$module$src$sb16$$(160, 168), function() {
});
$register_fm_write$$module$src$sb16$$($between$$module$src$sb16$$(176, 184), function() {
});
$register_fm_write$$module$src$sb16$$([189], function() {
});
$register_fm_write$$module$src$sb16$$($between$$module$src$sb16$$(192, 200), function() {
});
$register_fm_write$$module$src$sb16$$($between$$module$src$sb16$$(224, 245), function() {
});
$SB16$$module$src$sb16$$.prototype.fm_update_waveforms = function() {
};
$SB16$$module$src$sb16$$.prototype.sampling_rate_change = function($rate$jscomp$1$$) {
  this.sampling_rate = $rate$jscomp$1$$;
  this.bus.send("dac-tell-sampling-rate", $rate$jscomp$1$$);
};
$SB16$$module$src$sb16$$.prototype.get_channel_count = function() {
  return this.dsp_stereo ? 2 : 1;
};
$SB16$$module$src$sb16$$.prototype.dma_transfer_size_set = function() {
  this.dma_sample_count = 1 + (this.write_buffer.shift() << 0) + (this.write_buffer.shift() << 8);
};
$SB16$$module$src$sb16$$.prototype.dma_transfer_start = function() {
  $dbg_log$$module$src$log$$("begin dma transfer", 8388608);
  this.bytes_per_sample = 1;
  this.dsp_16bit && (this.bytes_per_sample *= 2);
  this.dma_bytes_count = this.dma_sample_count * this.bytes_per_sample;
  this.dma_bytes_block = 1024 * this.bytes_per_sample;
  this.dma_bytes_block = Math.min(Math.max(this.dma_bytes_count >> 2 & -4, 32), this.dma_bytes_block);
  this.dma_waiting_transfer = !0;
  this.dma.channel_mask[this.dma_channel] || this.dma_on_unmask(this.dma_channel);
};
$SB16$$module$src$sb16$$.prototype.dma_on_unmask = function($channel$jscomp$18$$) {
  $channel$jscomp$18$$ === this.dma_channel && this.dma_waiting_transfer && (this.dma_waiting_transfer = !1, this.dma_bytes_left = this.dma_bytes_count, this.dma_paused = !1, this.bus.send("dac-enable"));
};
$SB16$$module$src$sb16$$.prototype.dma_transfer_next = function() {
  $dbg_log$$module$src$log$$("dma transfering next block", 8388608);
  var $size$jscomp$29$$ = Math.min(this.dma_bytes_left, this.dma_bytes_block), $samples$jscomp$2$$ = Math.floor($size$jscomp$29$$ / this.bytes_per_sample);
  this.dma.do_write(this.dma_syncbuffer, 0, $size$jscomp$29$$, this.dma_channel, $error$jscomp$3$$ => {
    $dbg_log$$module$src$log$$("dma block transfer " + ($error$jscomp$3$$ ? "unsuccessful" : "successful"), 8388608);
    $error$jscomp$3$$ || (this.dma_to_dac($samples$jscomp$2$$), this.dma_bytes_left -= $size$jscomp$29$$, this.dma_bytes_left || (this.raise_irq(this.dma_irq), this.dma_autoinit && (this.dma_bytes_left = this.dma_bytes_count)));
  });
};
$SB16$$module$src$sb16$$.prototype.dma_to_dac = function($sample_count$$) {
  var $amplitude$$ = this.dsp_16bit ? 32767.5 : 127.5, $offset$jscomp$37$$ = this.dsp_signed ? 0 : -1, $repeats$$ = this.dsp_stereo ? 1 : 2;
  var $buffer$jscomp$27$$ = this.dsp_16bit ? this.dsp_signed ? this.dma_buffer_int16 : this.dma_buffer_uint16 : this.dsp_signed ? this.dma_buffer_int8 : this.dma_buffer_uint8;
  for (var $channel$jscomp$19$$ = 0, $i$jscomp$25$$ = 0; $i$jscomp$25$$ < $sample_count$$; $i$jscomp$25$$++) {
    for (var $sample$$ = $audio_clip$$module$src$sb16$$($buffer$jscomp$27$$[$i$jscomp$25$$] / $amplitude$$ + $offset$jscomp$37$$, -1, 1), $j$jscomp$3$$ = 0; $j$jscomp$3$$ < $repeats$$; $j$jscomp$3$$++) {
      this.dac_buffers[$channel$jscomp$19$$].push($sample$$), $channel$jscomp$19$$ ^= 1;
    }
  }
  this.dac_send();
};
$SB16$$module$src$sb16$$.prototype.dac_handle_request = function() {
  !this.dma_bytes_left || this.dma_paused ? this.dac_send() : this.dma_transfer_next();
};
$SB16$$module$src$sb16$$.prototype.dac_send = function() {
  if (this.dac_buffers[0].length) {
    var $out0$$ = this.dac_buffers[0].shift_block(this.dac_buffers[0].length), $out1$$ = this.dac_buffers[1].shift_block(this.dac_buffers[1].length);
    this.bus.send("dac-send-data", [$out0$$, $out1$$], [$out0$$.buffer, $out1$$.buffer]);
  }
};
$SB16$$module$src$sb16$$.prototype.raise_irq = function($type$jscomp$148$$) {
  $dbg_log$$module$src$log$$("raise irq", 8388608);
  this.irq_triggered[$type$jscomp$148$$] = 1;
  this.cpu.device_raise_irq(this.irq);
};
$SB16$$module$src$sb16$$.prototype.lower_irq = function($type$jscomp$149$$) {
  $dbg_log$$module$src$log$$("lower irq", 8388608);
  this.irq_triggered[$type$jscomp$149$$] = 0;
  this.cpu.device_lower_irq(this.irq);
};
function $audio_clip$$module$src$sb16$$($value$jscomp$125$$, $low$$, $high$$) {
  return ($value$jscomp$125$$ < $low$$) * $low$$ + ($value$jscomp$125$$ > $high$$) * $high$$ + ($low$$ <= $value$jscomp$125$$ && $value$jscomp$125$$ <= $high$$) * $value$jscomp$125$$;
}
;function $StateLoadError$$module$src$state$$($msg$jscomp$2$$) {
  this.message = $msg$jscomp$2$$;
}
$StateLoadError$$module$src$state$$.prototype = Error();
const $CONSTRUCTOR_TABLE$$module$src$state$$ = {Uint8Array, Int8Array, Uint16Array, Int16Array, Uint32Array, Int32Array, Float32Array, Float64Array, };
function $save_object$$module$src$state$$($constructor$jscomp$1_obj$jscomp$27_result$jscomp$6$$, $saved_buffers$$) {
  if ("object" !== typeof $constructor$jscomp$1_obj$jscomp$27_result$jscomp$6$$ || null === $constructor$jscomp$1_obj$jscomp$27_result$jscomp$6$$) {
    return $dbg_assert$$module$src$log$$("function" !== typeof $constructor$jscomp$1_obj$jscomp$27_result$jscomp$6$$), $constructor$jscomp$1_obj$jscomp$27_result$jscomp$6$$;
  }
  if (Array.isArray($constructor$jscomp$1_obj$jscomp$27_result$jscomp$6$$)) {
    return $constructor$jscomp$1_obj$jscomp$27_result$jscomp$6$$.map($x$jscomp$99$$ => $save_object$$module$src$state$$($x$jscomp$99$$, $saved_buffers$$));
  }
  $constructor$jscomp$1_obj$jscomp$27_result$jscomp$6$$.constructor === Object && (console.log($constructor$jscomp$1_obj$jscomp$27_result$jscomp$6$$), $dbg_assert$$module$src$log$$($constructor$jscomp$1_obj$jscomp$27_result$jscomp$6$$.constructor !== Object, "Expected non-object"));
  if ($constructor$jscomp$1_obj$jscomp$27_result$jscomp$6$$.BYTES_PER_ELEMENT) {
    var $buffer$jscomp$28_state$jscomp$7$$ = new Uint8Array($constructor$jscomp$1_obj$jscomp$27_result$jscomp$6$$.buffer, $constructor$jscomp$1_obj$jscomp$27_result$jscomp$6$$.byteOffset, $constructor$jscomp$1_obj$jscomp$27_result$jscomp$6$$.length * $constructor$jscomp$1_obj$jscomp$27_result$jscomp$6$$.BYTES_PER_ELEMENT);
    $constructor$jscomp$1_obj$jscomp$27_result$jscomp$6$$ = $constructor$jscomp$1_obj$jscomp$27_result$jscomp$6$$.constructor.name.replace("bound ", "");
    $dbg_assert$$module$src$log$$($CONSTRUCTOR_TABLE$$module$src$state$$[$constructor$jscomp$1_obj$jscomp$27_result$jscomp$6$$]);
    return {__state_type__:$constructor$jscomp$1_obj$jscomp$27_result$jscomp$6$$, buffer_id:$saved_buffers$$.push($buffer$jscomp$28_state$jscomp$7$$) - 1, };
  }
  !$constructor$jscomp$1_obj$jscomp$27_result$jscomp$6$$.get_state && console.log("Object without get_state: ", $constructor$jscomp$1_obj$jscomp$27_result$jscomp$6$$);
  $buffer$jscomp$28_state$jscomp$7$$ = $constructor$jscomp$1_obj$jscomp$27_result$jscomp$6$$.get_state();
  $constructor$jscomp$1_obj$jscomp$27_result$jscomp$6$$ = [];
  for (var $i$jscomp$26$$ = 0; $i$jscomp$26$$ < $buffer$jscomp$28_state$jscomp$7$$.length; $i$jscomp$26$$++) {
    var $value$jscomp$126$$ = $buffer$jscomp$28_state$jscomp$7$$[$i$jscomp$26$$];
    $dbg_assert$$module$src$log$$("function" !== typeof $value$jscomp$126$$);
    $constructor$jscomp$1_obj$jscomp$27_result$jscomp$6$$[$i$jscomp$26$$] = $save_object$$module$src$state$$($value$jscomp$126$$, $saved_buffers$$);
  }
  return $constructor$jscomp$1_obj$jscomp$27_result$jscomp$6$$;
}
function $restore_buffers$$module$src$state$$($obj$jscomp$28$$, $buffers$jscomp$2$$) {
  if ("object" !== typeof $obj$jscomp$28$$ || null === $obj$jscomp$28$$) {
    return $dbg_assert$$module$src$log$$("function" !== typeof $obj$jscomp$28$$), $obj$jscomp$28$$;
  }
  if (Array.isArray($obj$jscomp$28$$)) {
    for ($i$jscomp$27_type$jscomp$150$$ = 0; $i$jscomp$27_type$jscomp$150$$ < $obj$jscomp$28$$.length; $i$jscomp$27_type$jscomp$150$$++) {
      $obj$jscomp$28$$[$i$jscomp$27_type$jscomp$150$$] = $restore_buffers$$module$src$state$$($obj$jscomp$28$$[$i$jscomp$27_type$jscomp$150$$], $buffers$jscomp$2$$);
    }
    return $obj$jscomp$28$$;
  }
  var $i$jscomp$27_type$jscomp$150$$ = $obj$jscomp$28$$.__state_type__;
  $dbg_assert$$module$src$log$$(void 0 !== $i$jscomp$27_type$jscomp$150$$);
  const $constructor$jscomp$2$$ = $CONSTRUCTOR_TABLE$$module$src$state$$[$i$jscomp$27_type$jscomp$150$$];
  $dbg_assert$$module$src$log$$($constructor$jscomp$2$$, "Unkown type: " + $i$jscomp$27_type$jscomp$150$$);
  return new $constructor$jscomp$2$$($buffers$jscomp$2$$[$obj$jscomp$28$$.buffer_id]);
}
function $restore_state$$module$src$state$$($cpu$jscomp$5$$, $state$jscomp$9$$) {
  function $read_state_header$$($header_block$jscomp$1_state$jscomp$10$$, $check_length$$) {
    const $len$jscomp$15$$ = $header_block$jscomp$1_state$jscomp$10$$.length;
    if (16 > $len$jscomp$15$$) {
      throw new $StateLoadError$$module$src$state$$("Invalid length: " + $len$jscomp$15$$);
    }
    $header_block$jscomp$1_state$jscomp$10$$ = new Int32Array($header_block$jscomp$1_state$jscomp$10$$.buffer, $header_block$jscomp$1_state$jscomp$10$$.byteOffset, 4);
    if (-2039052682 !== $header_block$jscomp$1_state$jscomp$10$$[0]) {
      throw new $StateLoadError$$module$src$state$$("Invalid header: " + $h$$module$src$lib$$($header_block$jscomp$1_state$jscomp$10$$[0] >>> 0));
    }
    if (6 !== $header_block$jscomp$1_state$jscomp$10$$[1]) {
      throw new $StateLoadError$$module$src$state$$("Version mismatch: dump=" + $header_block$jscomp$1_state$jscomp$10$$[1] + " we=6");
    }
    if ($check_length$$ && $header_block$jscomp$1_state$jscomp$10$$[2] !== $len$jscomp$15$$) {
      throw new $StateLoadError$$module$src$state$$("Length doesn't match header: real=" + $len$jscomp$15$$ + " header=" + $header_block$jscomp$1_state$jscomp$10$$[2]);
    }
    return $header_block$jscomp$1_state$jscomp$10$$[3];
  }
  function $read_info_block$$($info_block$jscomp$1_info_block_buffer$$) {
    $info_block$jscomp$1_info_block_buffer$$ = (new TextDecoder).decode($info_block$jscomp$1_info_block_buffer$$);
    return JSON.parse($info_block$jscomp$1_info_block_buffer$$);
  }
  $state$jscomp$9$$ = new Uint8Array($state$jscomp$9$$);
  if (4247762216 === (new Uint32Array($state$jscomp$9$$.buffer, 0, 1))[0]) {
    var $buffers$jscomp$4_ctx_info_block_len$jscomp$1$$ = $cpu$jscomp$5$$.zstd_create_ctx($state$jscomp$9$$.length);
    (new Uint8Array($cpu$jscomp$5$$.wasm_memory.buffer, $cpu$jscomp$5$$.zstd_get_src_ptr($buffers$jscomp$4_ctx_info_block_len$jscomp$1$$), $state$jscomp$9$$.length)).set($state$jscomp$9$$);
    var $buffer_infos$jscomp$2_info_block_obj$jscomp$1_ptr_state_object$$ = $cpu$jscomp$5$$.zstd_read($buffers$jscomp$4_ctx_info_block_len$jscomp$1$$, 16), $buffers$jscomp$3_header_block$jscomp$2_info_block_buffer$jscomp$1_info_block_obj$$ = new Uint8Array($cpu$jscomp$5$$.wasm_memory.buffer, $buffer_infos$jscomp$2_info_block_obj$jscomp$1_ptr_state_object$$, 16), $info_block_len_position$jscomp$1$$ = $read_state_header$$($buffers$jscomp$3_header_block$jscomp$2_info_block_buffer$jscomp$1_info_block_obj$$, 
    !1);
    $cpu$jscomp$5$$.zstd_read_free($buffer_infos$jscomp$2_info_block_obj$jscomp$1_ptr_state_object$$, 16);
    $buffer_infos$jscomp$2_info_block_obj$jscomp$1_ptr_state_object$$ = $cpu$jscomp$5$$.zstd_read($buffers$jscomp$4_ctx_info_block_len$jscomp$1$$, $info_block_len_position$jscomp$1$$);
    $buffers$jscomp$3_header_block$jscomp$2_info_block_buffer$jscomp$1_info_block_obj$$ = new Uint8Array($cpu$jscomp$5$$.wasm_memory.buffer, $buffer_infos$jscomp$2_info_block_obj$jscomp$1_ptr_state_object$$, $info_block_len_position$jscomp$1$$);
    $buffers$jscomp$3_header_block$jscomp$2_info_block_buffer$jscomp$1_info_block_obj$$ = $read_info_block$$($buffers$jscomp$3_header_block$jscomp$2_info_block_buffer$jscomp$1_info_block_obj$$);
    $cpu$jscomp$5$$.zstd_read_free($buffer_infos$jscomp$2_info_block_obj$jscomp$1_ptr_state_object$$, $info_block_len_position$jscomp$1$$);
    $buffer_infos$jscomp$2_info_block_obj$jscomp$1_ptr_state_object$$ = $buffers$jscomp$3_header_block$jscomp$2_info_block_buffer$jscomp$1_info_block_obj$$.state;
    var $buffer_infos$jscomp$1_front_padding$$ = $buffers$jscomp$3_header_block$jscomp$2_info_block_buffer$jscomp$1_info_block_obj$$.buffer_infos;
    $buffers$jscomp$3_header_block$jscomp$2_info_block_buffer$jscomp$1_info_block_obj$$ = [];
    $info_block_len_position$jscomp$1$$ = 16 + $info_block_len_position$jscomp$1$$;
    for (var $buffer_info_info_block_buffer$jscomp$2_state_object$jscomp$1$$ of $buffer_infos$jscomp$1_front_padding$$) {
      $buffer_infos$jscomp$1_front_padding$$ = ($info_block_len_position$jscomp$1$$ + 3 & -4) - $info_block_len_position$jscomp$1$$;
      if (1048576 < $buffer_info_info_block_buffer$jscomp$2_state_object$jscomp$1$$.length) {
        var $buffer$jscomp$31_ptr$jscomp$1_ptr$jscomp$3$$ = $cpu$jscomp$5$$.zstd_read($buffers$jscomp$4_ctx_info_block_len$jscomp$1$$, $buffer_infos$jscomp$1_front_padding$$);
        $cpu$jscomp$5$$.zstd_read_free($buffer$jscomp$31_ptr$jscomp$1_ptr$jscomp$3$$, $buffer_infos$jscomp$1_front_padding$$);
        $buffer$jscomp$31_ptr$jscomp$1_ptr$jscomp$3$$ = new Uint8Array($buffer_info_info_block_buffer$jscomp$2_state_object$jscomp$1$$.length);
        $buffers$jscomp$3_header_block$jscomp$2_info_block_buffer$jscomp$1_info_block_obj$$.push($buffer$jscomp$31_ptr$jscomp$1_ptr$jscomp$3$$.buffer);
        for (var $have_offset$jscomp$39$$ = 0; $have_offset$jscomp$39$$ < $buffer_info_info_block_buffer$jscomp$2_state_object$jscomp$1$$.length;) {
          var $remaining_to_read$$ = $buffer_info_info_block_buffer$jscomp$2_state_object$jscomp$1$$.length - $have_offset$jscomp$39$$;
          $dbg_assert$$module$src$log$$(0 <= $remaining_to_read$$);
          $remaining_to_read$$ = Math.min($remaining_to_read$$, 1048576);
          const $ptr$jscomp$2$$ = $cpu$jscomp$5$$.zstd_read($buffers$jscomp$4_ctx_info_block_len$jscomp$1$$, $remaining_to_read$$);
          $buffer$jscomp$31_ptr$jscomp$1_ptr$jscomp$3$$.set(new Uint8Array($cpu$jscomp$5$$.wasm_memory.buffer, $ptr$jscomp$2$$, $remaining_to_read$$), $have_offset$jscomp$39$$);
          $cpu$jscomp$5$$.zstd_read_free($ptr$jscomp$2$$, $remaining_to_read$$);
          $have_offset$jscomp$39$$ += $remaining_to_read$$;
        }
      } else {
        $buffer$jscomp$31_ptr$jscomp$1_ptr$jscomp$3$$ = $cpu$jscomp$5$$.zstd_read($buffers$jscomp$4_ctx_info_block_len$jscomp$1$$, $buffer_infos$jscomp$1_front_padding$$ + $buffer_info_info_block_buffer$jscomp$2_state_object$jscomp$1$$.length), $have_offset$jscomp$39$$ = $buffer$jscomp$31_ptr$jscomp$1_ptr$jscomp$3$$ + $buffer_infos$jscomp$1_front_padding$$, $buffers$jscomp$3_header_block$jscomp$2_info_block_buffer$jscomp$1_info_block_obj$$.push($cpu$jscomp$5$$.wasm_memory.buffer.slice($have_offset$jscomp$39$$, 
        $have_offset$jscomp$39$$ + $buffer_info_info_block_buffer$jscomp$2_state_object$jscomp$1$$.length)), $cpu$jscomp$5$$.zstd_read_free($buffer$jscomp$31_ptr$jscomp$1_ptr$jscomp$3$$, $buffer_infos$jscomp$1_front_padding$$ + $buffer_info_info_block_buffer$jscomp$2_state_object$jscomp$1$$.length);
      }
      $info_block_len_position$jscomp$1$$ += $buffer_infos$jscomp$1_front_padding$$ + $buffer_info_info_block_buffer$jscomp$2_state_object$jscomp$1$$.length;
    }
    $buffer_infos$jscomp$2_info_block_obj$jscomp$1_ptr_state_object$$ = $restore_buffers$$module$src$state$$($buffer_infos$jscomp$2_info_block_obj$jscomp$1_ptr_state_object$$, $buffers$jscomp$3_header_block$jscomp$2_info_block_buffer$jscomp$1_info_block_obj$$);
    $cpu$jscomp$5$$.set_state($buffer_infos$jscomp$2_info_block_obj$jscomp$1_ptr_state_object$$);
    $cpu$jscomp$5$$.zstd_free_ctx($buffers$jscomp$4_ctx_info_block_len$jscomp$1$$);
  } else {
    $buffers$jscomp$4_ctx_info_block_len$jscomp$1$$ = $read_state_header$$($state$jscomp$9$$, !0);
    if (0 > $buffers$jscomp$4_ctx_info_block_len$jscomp$1$$ || $buffers$jscomp$4_ctx_info_block_len$jscomp$1$$ + 12 >= $state$jscomp$9$$.length) {
      throw new $StateLoadError$$module$src$state$$("Invalid info block length: " + $buffers$jscomp$4_ctx_info_block_len$jscomp$1$$);
    }
    $buffer_info_info_block_buffer$jscomp$2_state_object$jscomp$1$$ = $state$jscomp$9$$.subarray(16, 16 + $buffers$jscomp$4_ctx_info_block_len$jscomp$1$$);
    $buffer_infos$jscomp$2_info_block_obj$jscomp$1_ptr_state_object$$ = $read_info_block$$($buffer_info_info_block_buffer$jscomp$2_state_object$jscomp$1$$);
    $buffer_info_info_block_buffer$jscomp$2_state_object$jscomp$1$$ = $buffer_infos$jscomp$2_info_block_obj$jscomp$1_ptr_state_object$$.state;
    $buffer_infos$jscomp$2_info_block_obj$jscomp$1_ptr_state_object$$ = $buffer_infos$jscomp$2_info_block_obj$jscomp$1_ptr_state_object$$.buffer_infos;
    let $buffer_block_start$jscomp$1$$ = 16 + $buffers$jscomp$4_ctx_info_block_len$jscomp$1$$;
    $buffer_block_start$jscomp$1$$ = $buffer_block_start$jscomp$1$$ + 3 & -4;
    $buffers$jscomp$4_ctx_info_block_len$jscomp$1$$ = $buffer_infos$jscomp$2_info_block_obj$jscomp$1_ptr_state_object$$.map($buffer_info$jscomp$1$$ => {
      const $offset$jscomp$40$$ = $buffer_block_start$jscomp$1$$ + $buffer_info$jscomp$1$$.offset;
      return $state$jscomp$9$$.buffer.slice($offset$jscomp$40$$, $offset$jscomp$40$$ + $buffer_info$jscomp$1$$.length);
    });
    $buffer_info_info_block_buffer$jscomp$2_state_object$jscomp$1$$ = $restore_buffers$$module$src$state$$($buffer_info_info_block_buffer$jscomp$2_state_object$jscomp$1$$, $buffers$jscomp$4_ctx_info_block_len$jscomp$1$$);
    $cpu$jscomp$5$$.set_state($buffer_info_info_block_buffer$jscomp$2_state_object$jscomp$1$$);
  }
}
;function $print_instruction_counts_offset$$module$src$browser$print_stats$$($cpu$jscomp$9_total$$, $compiled_per_opcode0f_prefixes$$, $jit_exit_per_opcode$$, $max_count_pad_length_unguarded_register$$, $i$jscomp$30_wasm_size$$) {
  let $text$jscomp$12$$ = "";
  var $counts_opcode_description_top_counts$$ = [], $i$jscomp$31_label$jscomp$9$$ = $compiled_per_opcode0f_prefixes$$ ? "compiled" : $jit_exit_per_opcode$$ ? "jit exit" : $max_count_pad_length_unguarded_register$$ ? "unguarded register" : $i$jscomp$30_wasm_size$$ ? "wasm size" : "executed";
  for (let $opcode$$ = 0; 256 > $opcode$$; $opcode$$++) {
    for (let $fixed_g$$ = 0; 8 > $fixed_g$$; $fixed_g$$++) {
      for (const $is_mem$$ of [!1, !0]) {
        var $count$jscomp$41_count_0f$$ = $cpu$jscomp$9_total$$.wm.exports.get_opstats_buffer($compiled_per_opcode0f_prefixes$$, $jit_exit_per_opcode$$, $max_count_pad_length_unguarded_register$$, $i$jscomp$30_wasm_size$$, $opcode$$, !1, $is_mem$$, $fixed_g$$);
        $counts_opcode_description_top_counts$$.push({opcode:$opcode$$, count:$count$jscomp$41_count_0f$$, is_mem:$is_mem$$, fixed_g:$fixed_g$$});
        $count$jscomp$41_count_0f$$ = $cpu$jscomp$9_total$$.wm.exports.get_opstats_buffer($compiled_per_opcode0f_prefixes$$, $jit_exit_per_opcode$$, $max_count_pad_length_unguarded_register$$, $i$jscomp$30_wasm_size$$, $opcode$$, !0, $is_mem$$, $fixed_g$$);
        $counts_opcode_description_top_counts$$.push({opcode:3840 | $opcode$$, count:$count$jscomp$41_count_0f$$, is_mem:$is_mem$$, fixed_g:$fixed_g$$});
      }
    }
  }
  $cpu$jscomp$9_total$$ = 0;
  $compiled_per_opcode0f_prefixes$$ = new Set([38, 46, 54, 62, 100, 101, 102, 103, 240, 242, 243, ]);
  for (const {count:$count$jscomp$42$$, opcode:$opcode$jscomp$1$$} of $counts_opcode_description_top_counts$$) {
    $compiled_per_opcode0f_prefixes$$.has($opcode$jscomp$1$$) || ($cpu$jscomp$9_total$$ += $count$jscomp$42$$);
  }
  if (0 === $cpu$jscomp$9_total$$) {
    return "";
  }
  $jit_exit_per_opcode$$ = new Uint32Array(256);
  $compiled_per_opcode0f_prefixes$$ = new Uint32Array(256);
  for (const {opcode:$opcode$jscomp$2$$, count:$count$jscomp$43$$} of $counts_opcode_description_top_counts$$) {
    3840 === ($opcode$jscomp$2$$ & 65280) ? $compiled_per_opcode0f_prefixes$$[$opcode$jscomp$2$$ & 255] += $count$jscomp$43$$ : $jit_exit_per_opcode$$[$opcode$jscomp$2$$ & 255] += $count$jscomp$43$$;
  }
  $text$jscomp$12$$ = $text$jscomp$12$$ + "------------------\nTotal: " + ($cpu$jscomp$9_total$$ + "\n");
  const $factor$jscomp$1$$ = 1e7 < $cpu$jscomp$9_total$$ ? 1000 : 1;
  $max_count_pad_length_unguarded_register$$ = Math.max.apply(Math, $counts_opcode_description_top_counts$$.map(({count:$count$jscomp$44$$}) => Math.round($count$jscomp$44$$ / $factor$jscomp$1$$)));
  $max_count_pad_length_unguarded_register$$ = String($max_count_pad_length_unguarded_register$$).length;
  $text$jscomp$12$$ += `Instruction counts ${$i$jscomp$31_label$jscomp$9$$} (in ${$factor$jscomp$1$$}):\n`;
  for ($i$jscomp$30_wasm_size$$ = 0; 256 > $i$jscomp$30_wasm_size$$; $i$jscomp$30_wasm_size$$++) {
    $text$jscomp$12$$ += $i$jscomp$30_wasm_size$$.toString(16).padStart(2, "0") + ":" + $pads$$module$src$lib$$(Math.round($jit_exit_per_opcode$$[$i$jscomp$30_wasm_size$$] / $factor$jscomp$1$$), $max_count_pad_length_unguarded_register$$), $text$jscomp$12$$ = 15 === $i$jscomp$30_wasm_size$$ % 16 ? $text$jscomp$12$$ + "\n" : $text$jscomp$12$$ + " ";
  }
  $text$jscomp$12$$ = $text$jscomp$12$$ + "\n" + `Instruction counts ${$i$jscomp$31_label$jscomp$9$$} (0f, in ${$factor$jscomp$1$$}):\n`;
  for ($i$jscomp$31_label$jscomp$9$$ = 0; 256 > $i$jscomp$31_label$jscomp$9$$; $i$jscomp$31_label$jscomp$9$$++) {
    $text$jscomp$12$$ += ($i$jscomp$31_label$jscomp$9$$ & 255).toString(16).padStart(2, "0") + ":" + $pads$$module$src$lib$$(Math.round($compiled_per_opcode0f_prefixes$$[$i$jscomp$31_label$jscomp$9$$] / $factor$jscomp$1$$), $max_count_pad_length_unguarded_register$$), $text$jscomp$12$$ = 15 === $i$jscomp$31_label$jscomp$9$$ % 16 ? $text$jscomp$12$$ + "\n" : $text$jscomp$12$$ + " ";
  }
  $text$jscomp$12$$ += "\n";
  $counts_opcode_description_top_counts$$ = $counts_opcode_description_top_counts$$.filter(({count:$count$jscomp$45$$}) => $count$jscomp$45$$).sort(({count:$count1$$}, {count:$count2$$}) => $count2$$ - $count1$$);
  for (const {opcode:$opcode$jscomp$3$$, is_mem:$is_mem$jscomp$1$$, fixed_g:$fixed_g$jscomp$1$$, count:$count$jscomp$46$$} of $counts_opcode_description_top_counts$$.slice(0, 200)) {
    $counts_opcode_description_top_counts$$ = $opcode$jscomp$3$$.toString(16) + "_" + $fixed_g$jscomp$1$$ + ($is_mem$jscomp$1$$ ? "_m" : "_r"), $text$jscomp$12$$ += $counts_opcode_description_top_counts$$ + ":" + ($count$jscomp$46$$ / $cpu$jscomp$9_total$$ * 100).toFixed(2) + " ";
  }
  return $text$jscomp$12$$ + "\n";
}
;function $RTC$$module$src$rtc$$($cpu$jscomp$10$$) {
  this.cpu = $cpu$jscomp$10$$;
  this.cmos_index = 0;
  this.cmos_data = new Uint8Array(128);
  this.last_update = this.rtc_time = Date.now();
  this.next_interrupt_alarm = this.next_interrupt = 0;
  this.periodic_interrupt = !1;
  this.periodic_interrupt_time = .9765625;
  this.cmos_a = 38;
  this.cmos_b = 2;
  this.nmi_disabled = this.cmos_c = 0;
  this.update_interrupt = !1;
  this.update_interrupt_time = 0;
  $cpu$jscomp$10$$.io.register_write(112, this, function($out_byte$$) {
    this.cmos_index = $out_byte$$ & 127;
    this.nmi_disabled = $out_byte$$ >> 7;
  });
  $cpu$jscomp$10$$.io.register_write(113, this, this.cmos_port_write);
  $cpu$jscomp$10$$.io.register_read(113, this, this.cmos_port_read);
}
$RTC$$module$src$rtc$$.prototype.get_state = function() {
  var $state$jscomp$11$$ = [];
  $state$jscomp$11$$[0] = this.cmos_index;
  $state$jscomp$11$$[1] = this.cmos_data;
  $state$jscomp$11$$[2] = this.rtc_time;
  $state$jscomp$11$$[3] = this.last_update;
  $state$jscomp$11$$[4] = this.next_interrupt;
  $state$jscomp$11$$[5] = this.next_interrupt_alarm;
  $state$jscomp$11$$[6] = this.periodic_interrupt;
  $state$jscomp$11$$[7] = this.periodic_interrupt_time;
  $state$jscomp$11$$[8] = this.cmos_a;
  $state$jscomp$11$$[9] = this.cmos_b;
  $state$jscomp$11$$[10] = this.cmos_c;
  $state$jscomp$11$$[11] = this.nmi_disabled;
  $state$jscomp$11$$[12] = this.update_interrupt;
  $state$jscomp$11$$[13] = this.update_interrupt_time;
  return $state$jscomp$11$$;
};
$RTC$$module$src$rtc$$.prototype.set_state = function($state$jscomp$12$$) {
  this.cmos_index = $state$jscomp$12$$[0];
  this.cmos_data = $state$jscomp$12$$[1];
  this.rtc_time = $state$jscomp$12$$[2];
  this.last_update = $state$jscomp$12$$[3];
  this.next_interrupt = $state$jscomp$12$$[4];
  this.next_interrupt_alarm = $state$jscomp$12$$[5];
  this.periodic_interrupt = $state$jscomp$12$$[6];
  this.periodic_interrupt_time = $state$jscomp$12$$[7];
  this.cmos_a = $state$jscomp$12$$[8];
  this.cmos_b = $state$jscomp$12$$[9];
  this.cmos_c = $state$jscomp$12$$[10];
  this.nmi_disabled = $state$jscomp$12$$[11];
  this.update_interrupt = $state$jscomp$12$$[12] || !1;
  this.update_interrupt_time = $state$jscomp$12$$[13] || 0;
};
$RTC$$module$src$rtc$$.prototype.timer = function($time$$) {
  $time$$ = Date.now();
  this.rtc_time += $time$$ - this.last_update;
  this.last_update = $time$$;
  this.periodic_interrupt && this.next_interrupt < $time$$ ? (this.cpu.device_raise_irq(8), this.cmos_c |= 192, this.next_interrupt += this.periodic_interrupt_time * Math.ceil(($time$$ - this.next_interrupt) / this.periodic_interrupt_time)) : this.next_interrupt_alarm && this.next_interrupt_alarm < $time$$ ? (this.cpu.device_raise_irq(8), this.cmos_c |= 160, this.next_interrupt_alarm = 0) : this.update_interrupt && this.update_interrupt_time < $time$$ && (this.cpu.device_raise_irq(8), this.cmos_c |= 
  144, this.update_interrupt_time = $time$$ + 1000);
  let $t$jscomp$1$$ = 100;
  this.periodic_interrupt && this.next_interrupt && ($t$jscomp$1$$ = Math.min($t$jscomp$1$$, Math.max(0, this.next_interrupt - $time$$)));
  this.next_interrupt_alarm && ($t$jscomp$1$$ = Math.min($t$jscomp$1$$, Math.max(0, this.next_interrupt_alarm - $time$$)));
  this.update_interrupt && ($t$jscomp$1$$ = Math.min($t$jscomp$1$$, Math.max(0, this.update_interrupt_time - $time$$)));
  return $t$jscomp$1$$;
};
$RTC$$module$src$rtc$$.prototype.bcd_pack = function($n$jscomp$7$$) {
  for (var $i$jscomp$32$$ = 0, $result$jscomp$8$$ = 0, $digit$$; $n$jscomp$7$$;) {
    $digit$$ = $n$jscomp$7$$ % 10, $result$jscomp$8$$ |= $digit$$ << 4 * $i$jscomp$32$$, $i$jscomp$32$$++, $n$jscomp$7$$ = ($n$jscomp$7$$ - $digit$$) / 10;
  }
  return $result$jscomp$8$$;
};
$RTC$$module$src$rtc$$.prototype.bcd_unpack = function($n$jscomp$8$$) {
  const $low$jscomp$1$$ = $n$jscomp$8$$ & 15, $high$jscomp$1$$ = $n$jscomp$8$$ >> 4 & 15;
  $dbg_assert$$module$src$log$$(256 > $n$jscomp$8$$);
  $dbg_assert$$module$src$log$$(10 > $low$jscomp$1$$);
  $dbg_assert$$module$src$log$$(10 > $high$jscomp$1$$);
  return $low$jscomp$1$$ + 10 * $high$jscomp$1$$;
};
$RTC$$module$src$rtc$$.prototype.encode_time = function($t$jscomp$2$$) {
  return this.cmos_b & 4 ? $t$jscomp$2$$ : this.bcd_pack($t$jscomp$2$$);
};
$RTC$$module$src$rtc$$.prototype.decode_time = function($t$jscomp$3$$) {
  return this.cmos_b & 4 ? $t$jscomp$3$$ : this.bcd_unpack($t$jscomp$3$$);
};
$RTC$$module$src$rtc$$.prototype.cmos_port_read = function() {
  var $c_index$jscomp$79$$ = this.cmos_index;
  switch($c_index$jscomp$79$$) {
    case 0:
      return $dbg_log$$module$src$log$$("read second: " + $h$$module$src$lib$$(this.encode_time((new Date(this.rtc_time)).getUTCSeconds())), 65536), this.encode_time((new Date(this.rtc_time)).getUTCSeconds());
    case 2:
      return $dbg_log$$module$src$log$$("read minute: " + $h$$module$src$lib$$(this.encode_time((new Date(this.rtc_time)).getUTCMinutes())), 65536), this.encode_time((new Date(this.rtc_time)).getUTCMinutes());
    case 4:
      return $dbg_log$$module$src$log$$("read hour: " + $h$$module$src$lib$$(this.encode_time((new Date(this.rtc_time)).getUTCHours())), 65536), this.encode_time((new Date(this.rtc_time)).getUTCHours());
    case 6:
      return $dbg_log$$module$src$log$$("read day: " + $h$$module$src$lib$$(this.encode_time((new Date(this.rtc_time)).getUTCDay() + 1)), 65536), this.encode_time((new Date(this.rtc_time)).getUTCDay() + 1);
    case 7:
      return $dbg_log$$module$src$log$$("read day of month: " + $h$$module$src$lib$$(this.encode_time((new Date(this.rtc_time)).getUTCDate())), 65536), this.encode_time((new Date(this.rtc_time)).getUTCDate());
    case 8:
      return $dbg_log$$module$src$log$$("read month: " + $h$$module$src$lib$$(this.encode_time((new Date(this.rtc_time)).getUTCMonth() + 1)), 65536), this.encode_time((new Date(this.rtc_time)).getUTCMonth() + 1);
    case 9:
      return $dbg_log$$module$src$log$$("read year: " + $h$$module$src$lib$$(this.encode_time((new Date(this.rtc_time)).getUTCFullYear() % 100)), 65536), this.encode_time((new Date(this.rtc_time)).getUTCFullYear() % 100);
    case 10:
      return 999 <= $v86$$module$src$main$$.microtick() % 1000 ? this.cmos_a | 128 : this.cmos_a;
    case 11:
      return this.cmos_b;
    case 12:
      return this.cpu.device_lower_irq(8), $dbg_log$$module$src$log$$("cmos reg C read", 65536), $c_index$jscomp$79$$ = this.cmos_c, this.cmos_c &= -241, $c_index$jscomp$79$$;
    case 13:
      return 0;
    case 50:
    case 55:
      return $dbg_log$$module$src$log$$("read century: " + $h$$module$src$lib$$(this.encode_time((new Date(this.rtc_time)).getUTCFullYear() / 100 | 0)), 65536), this.encode_time((new Date(this.rtc_time)).getUTCFullYear() / 100 | 0);
    default:
      return $dbg_log$$module$src$log$$("cmos read from index " + $h$$module$src$lib$$($c_index$jscomp$79$$), 65536), this.cmos_data[this.cmos_index];
  }
};
$RTC$$module$src$rtc$$.prototype.cmos_port_write = function($data_byte$jscomp$8_now$jscomp$1$$) {
  switch(this.cmos_index) {
    case 10:
      this.cmos_a = $data_byte$jscomp$8_now$jscomp$1$$ & 127;
      this.periodic_interrupt_time = 1000 / (32768 >> (this.cmos_a & 15) - 1);
      $dbg_log$$module$src$log$$("Periodic interrupt, a=" + $h$$module$src$lib$$(this.cmos_a, 2) + " t=" + this.periodic_interrupt_time, 65536);
      break;
    case 11:
      this.cmos_b = $data_byte$jscomp$8_now$jscomp$1$$;
      this.cmos_b & 128 && (this.cmos_b &= 239);
      this.cmos_b & 64 && (this.next_interrupt = Date.now());
      if (this.cmos_b & 32) {
        $data_byte$jscomp$8_now$jscomp$1$$ = new Date;
        const $seconds$$ = this.decode_time(this.cmos_data[1]), $minutes$$ = this.decode_time(this.cmos_data[3]), $hours$$ = this.decode_time(this.cmos_data[5]), $alarm_date$$ = new Date(Date.UTC($data_byte$jscomp$8_now$jscomp$1$$.getUTCFullYear(), $data_byte$jscomp$8_now$jscomp$1$$.getUTCMonth(), $data_byte$jscomp$8_now$jscomp$1$$.getUTCDate(), $hours$$, $minutes$$, $seconds$$));
        $dbg_log$$module$src$log$$("RTC alarm scheduled for " + $alarm_date$$ + " hh:mm:ss=" + $hours$$ + ":" + $minutes$$ + ":" + $seconds$$ + " ms_from_now=" + ($alarm_date$$ - $data_byte$jscomp$8_now$jscomp$1$$), 65536);
        this.next_interrupt_alarm = +$alarm_date$$;
      }
      this.cmos_b & 16 && ($dbg_log$$module$src$log$$("update interrupt", 65536), this.update_interrupt_time = Date.now());
      $dbg_log$$module$src$log$$("cmos b=" + $h$$module$src$lib$$(this.cmos_b, 2), 65536);
      break;
    case 1:
    case 3:
    case 5:
      this.cmos_write(this.cmos_index, $data_byte$jscomp$8_now$jscomp$1$$);
      break;
    default:
      $dbg_log$$module$src$log$$("cmos write index " + $h$$module$src$lib$$(this.cmos_index) + ": " + $h$$module$src$lib$$($data_byte$jscomp$8_now$jscomp$1$$), 65536);
  }
  this.update_interrupt = 16 === (this.cmos_b & 16) && 0 < (this.cmos_a & 15);
  this.periodic_interrupt = 64 === (this.cmos_b & 64) && 0 < (this.cmos_a & 15);
};
$RTC$$module$src$rtc$$.prototype.cmos_read = function($index$jscomp$80$$) {
  $dbg_assert$$module$src$log$$(128 > $index$jscomp$80$$);
  return this.cmos_data[$index$jscomp$80$$];
};
$RTC$$module$src$rtc$$.prototype.cmos_write = function($index$jscomp$81$$, $value$jscomp$128$$) {
  $dbg_log$$module$src$log$$("cmos " + $h$$module$src$lib$$($index$jscomp$81$$) + " <- " + $h$$module$src$lib$$($value$jscomp$128$$), 65536);
  $dbg_assert$$module$src$log$$(128 > $index$jscomp$81$$);
  this.cmos_data[$index$jscomp$81$$] = $value$jscomp$128$$;
};
function $PIT$$module$src$pit$$($cpu$jscomp$11$$, $bus$jscomp$1$$) {
  this.cpu = $cpu$jscomp$11$$;
  this.bus = $bus$jscomp$1$$;
  this.counter_start_time = new Float64Array(3);
  this.counter_start_value = new Uint16Array(3);
  this.counter_next_low = new Uint8Array(4);
  this.counter_enabled = new Uint8Array(4);
  this.counter_mode = new Uint8Array(4);
  this.counter_read_mode = new Uint8Array(4);
  this.counter_latch = new Uint8Array(4);
  this.counter_latch_value = new Uint16Array(3);
  this.counter_reload = new Uint16Array(3);
  $cpu$jscomp$11$$.io.register_read(97, this, function() {
    var $counter2_out_now$jscomp$2$$ = $v86$$module$src$main$$.microtick(), $ref_toggle$$ = 66.66666666666667 * $counter2_out_now$jscomp$2$$ & 1;
    $counter2_out_now$jscomp$2$$ = this.did_rollover(2, $counter2_out_now$jscomp$2$$);
    return $ref_toggle$$ << 4 | $counter2_out_now$jscomp$2$$ << 5;
  });
  $cpu$jscomp$11$$.io.register_write(97, this, function($data$jscomp$102$$) {
    $data$jscomp$102$$ & 1 ? this.bus.send("pcspeaker-enable") : this.bus.send("pcspeaker-disable");
  });
  $cpu$jscomp$11$$.io.register_read(64, this, function() {
    return this.counter_read(0);
  });
  $cpu$jscomp$11$$.io.register_read(65, this, function() {
    return this.counter_read(1);
  });
  $cpu$jscomp$11$$.io.register_read(66, this, function() {
    return this.counter_read(2);
  });
  $cpu$jscomp$11$$.io.register_write(64, this, function($data$jscomp$103$$) {
    this.counter_write(0, $data$jscomp$103$$);
  });
  $cpu$jscomp$11$$.io.register_write(65, this, function($data$jscomp$104$$) {
    this.counter_write(1, $data$jscomp$104$$);
  });
  $cpu$jscomp$11$$.io.register_write(66, this, function($data$jscomp$105$$) {
    this.counter_write(2, $data$jscomp$105$$);
    this.bus.send("pcspeaker-update", [this.counter_mode[2], this.counter_reload[2]]);
  });
  $cpu$jscomp$11$$.io.register_write(67, this, this.port43_write);
}
$PIT$$module$src$pit$$.prototype.get_state = function() {
  var $state$jscomp$13$$ = [];
  $state$jscomp$13$$[0] = this.counter_next_low;
  $state$jscomp$13$$[1] = this.counter_enabled;
  $state$jscomp$13$$[2] = this.counter_mode;
  $state$jscomp$13$$[3] = this.counter_read_mode;
  $state$jscomp$13$$[4] = this.counter_latch;
  $state$jscomp$13$$[5] = this.counter_latch_value;
  $state$jscomp$13$$[6] = this.counter_reload;
  $state$jscomp$13$$[7] = this.counter_start_time;
  $state$jscomp$13$$[8] = this.counter_start_value;
  return $state$jscomp$13$$;
};
$PIT$$module$src$pit$$.prototype.set_state = function($state$jscomp$14$$) {
  this.counter_next_low = $state$jscomp$14$$[0];
  this.counter_enabled = $state$jscomp$14$$[1];
  this.counter_mode = $state$jscomp$14$$[2];
  this.counter_read_mode = $state$jscomp$14$$[3];
  this.counter_latch = $state$jscomp$14$$[4];
  this.counter_latch_value = $state$jscomp$14$$[5];
  this.counter_reload = $state$jscomp$14$$[6];
  this.counter_start_time = $state$jscomp$14$$[7];
  this.counter_start_value = $state$jscomp$14$$[8];
};
$PIT$$module$src$pit$$.prototype.timer = function($now$jscomp$3$$, $no_irq$$) {
  var $time_to_next_interrupt$$ = 100;
  $no_irq$$ || (this.counter_enabled[0] && this.did_rollover(0, $now$jscomp$3$$) ? (this.counter_start_value[0] = this.get_counter_value(0, $now$jscomp$3$$), this.counter_start_time[0] = $now$jscomp$3$$, $dbg_log$$module$src$log$$("pit interrupt. new value: " + this.counter_start_value[0], 512), this.cpu.device_lower_irq(0), this.cpu.device_raise_irq(0), 0 === this.counter_mode[0] && (this.counter_enabled[0] = 0)) : this.cpu.device_lower_irq(0), this.counter_enabled[0] && ($time_to_next_interrupt$$ = 
  (this.counter_start_value[0] - Math.floor(1193.1816666 * ($now$jscomp$3$$ - this.counter_start_time[0]))) / 1193.1816666));
  return $time_to_next_interrupt$$;
};
$PIT$$module$src$pit$$.prototype.get_counter_value = function($i$jscomp$33$$, $now$jscomp$4_value$jscomp$129$$) {
  if (!this.counter_enabled[$i$jscomp$33$$]) {
    return 0;
  }
  var $diff$jscomp$1_reload$$ = $now$jscomp$4_value$jscomp$129$$ - this.counter_start_time[$i$jscomp$33$$], $diff_in_ticks$jscomp$1$$ = Math.floor(1193.1816666 * $diff$jscomp$1_reload$$);
  $now$jscomp$4_value$jscomp$129$$ = this.counter_start_value[$i$jscomp$33$$] - $diff_in_ticks$jscomp$1$$;
  $dbg_log$$module$src$log$$("diff=" + $diff$jscomp$1_reload$$ + " dticks=" + $diff_in_ticks$jscomp$1$$ + " value=" + $now$jscomp$4_value$jscomp$129$$ + " reload=" + this.counter_reload[$i$jscomp$33$$], 512);
  $diff$jscomp$1_reload$$ = this.counter_reload[$i$jscomp$33$$];
  $now$jscomp$4_value$jscomp$129$$ >= $diff$jscomp$1_reload$$ ? ($dbg_log$$module$src$log$$("Warning: Counter" + $i$jscomp$33$$ + " value " + $now$jscomp$4_value$jscomp$129$$ + " is larger than reload " + $diff$jscomp$1_reload$$, 512), $now$jscomp$4_value$jscomp$129$$ %= $diff$jscomp$1_reload$$) : 0 > $now$jscomp$4_value$jscomp$129$$ && ($now$jscomp$4_value$jscomp$129$$ = $now$jscomp$4_value$jscomp$129$$ % $diff$jscomp$1_reload$$ + $diff$jscomp$1_reload$$);
  return $now$jscomp$4_value$jscomp$129$$;
};
$PIT$$module$src$pit$$.prototype.did_rollover = function($i$jscomp$34$$, $diff$jscomp$2_now$jscomp$5$$) {
  $diff$jscomp$2_now$jscomp$5$$ -= this.counter_start_time[$i$jscomp$34$$];
  return 0 > $diff$jscomp$2_now$jscomp$5$$ ? ($dbg_log$$module$src$log$$("Warning: PIT timer difference is negative, resetting (timer " + $i$jscomp$34$$ + ")"), !0) : this.counter_start_value[$i$jscomp$34$$] < Math.floor(1193.1816666 * $diff$jscomp$2_now$jscomp$5$$);
};
$PIT$$module$src$pit$$.prototype.counter_read = function($i$jscomp$35_value$jscomp$130$$) {
  var $latch_next_low$$ = this.counter_latch[$i$jscomp$35_value$jscomp$130$$];
  if ($latch_next_low$$) {
    return this.counter_latch[$i$jscomp$35_value$jscomp$130$$]--, 2 === $latch_next_low$$ ? this.counter_latch_value[$i$jscomp$35_value$jscomp$130$$] & 255 : this.counter_latch_value[$i$jscomp$35_value$jscomp$130$$] >> 8;
  }
  $latch_next_low$$ = this.counter_next_low[$i$jscomp$35_value$jscomp$130$$];
  3 === this.counter_mode[$i$jscomp$35_value$jscomp$130$$] && (this.counter_next_low[$i$jscomp$35_value$jscomp$130$$] ^= 1);
  $i$jscomp$35_value$jscomp$130$$ = this.get_counter_value($i$jscomp$35_value$jscomp$130$$, $v86$$module$src$main$$.microtick());
  return $latch_next_low$$ ? $i$jscomp$35_value$jscomp$130$$ & 255 : $i$jscomp$35_value$jscomp$130$$ >> 8;
};
$PIT$$module$src$pit$$.prototype.counter_write = function($i$jscomp$36$$, $value$jscomp$131$$) {
  this.counter_reload[$i$jscomp$36$$] = this.counter_next_low[$i$jscomp$36$$] ? this.counter_reload[$i$jscomp$36$$] & -256 | $value$jscomp$131$$ : this.counter_reload[$i$jscomp$36$$] & 255 | $value$jscomp$131$$ << 8;
  3 === this.counter_read_mode[$i$jscomp$36$$] && this.counter_next_low[$i$jscomp$36$$] || (this.counter_reload[$i$jscomp$36$$] || (this.counter_reload[$i$jscomp$36$$] = 65535), this.counter_start_value[$i$jscomp$36$$] = this.counter_reload[$i$jscomp$36$$], this.counter_enabled[$i$jscomp$36$$] = !0, this.counter_start_time[$i$jscomp$36$$] = $v86$$module$src$main$$.microtick(), $dbg_log$$module$src$log$$("counter" + $i$jscomp$36$$ + " reload=" + $h$$module$src$lib$$(this.counter_reload[$i$jscomp$36$$]) + 
  " tick=" + (this.counter_reload[$i$jscomp$36$$] || 65536) / 1193.1816666 + "ms", 512));
  3 === this.counter_read_mode[$i$jscomp$36$$] && (this.counter_next_low[$i$jscomp$36$$] ^= 1);
};
$PIT$$module$src$pit$$.prototype.port43_write = function($read_mode_reg_byte$$) {
  var $mode$jscomp$19_value$jscomp$132$$ = $read_mode_reg_byte$$ >> 1 & 7, $binary_mode$$ = $read_mode_reg_byte$$ & 1, $i$jscomp$37$$ = $read_mode_reg_byte$$ >> 6 & 3;
  $read_mode_reg_byte$$ = $read_mode_reg_byte$$ >> 4 & 3;
  1 === $i$jscomp$37$$ && $dbg_log$$module$src$log$$("Unimplemented timer1", 512);
  3 === $i$jscomp$37$$ ? $dbg_log$$module$src$log$$("Unimplemented read back", 512) : 0 === $read_mode_reg_byte$$ ? (this.counter_latch[$i$jscomp$37$$] = 2, $mode$jscomp$19_value$jscomp$132$$ = this.get_counter_value($i$jscomp$37$$, $v86$$module$src$main$$.microtick()), $dbg_log$$module$src$log$$("latch: " + $mode$jscomp$19_value$jscomp$132$$, 512), this.counter_latch_value[$i$jscomp$37$$] = $mode$jscomp$19_value$jscomp$132$$ ? $mode$jscomp$19_value$jscomp$132$$ - 1 : 0) : (6 <= $mode$jscomp$19_value$jscomp$132$$ && 
  ($mode$jscomp$19_value$jscomp$132$$ &= -5), $dbg_log$$module$src$log$$("Control: mode=" + $mode$jscomp$19_value$jscomp$132$$ + " ctr=" + $i$jscomp$37$$ + " read_mode=" + $read_mode_reg_byte$$ + " bcd=" + $binary_mode$$, 512), this.counter_next_low[$i$jscomp$37$$] = 1 === $read_mode_reg_byte$$ ? 0 : 1, 0 === $i$jscomp$37$$ && this.cpu.device_lower_irq(0), 0 !== $mode$jscomp$19_value$jscomp$132$$ && 3 !== $mode$jscomp$19_value$jscomp$132$$ && 2 !== $mode$jscomp$19_value$jscomp$132$$ && $dbg_log$$module$src$log$$("Unimplemented counter mode: " + 
  $h$$module$src$lib$$($mode$jscomp$19_value$jscomp$132$$), 512), this.counter_mode[$i$jscomp$37$$] = $mode$jscomp$19_value$jscomp$132$$, this.counter_read_mode[$i$jscomp$37$$] = $read_mode_reg_byte$$, 2 === $i$jscomp$37$$ && this.bus.send("pcspeaker-update", [this.counter_mode[2], this.counter_reload[2]]));
};
$PIT$$module$src$pit$$.prototype.dump = function() {
  const $reload$jscomp$1$$ = this.counter_reload[0];
  $dbg_log$$module$src$log$$("counter0 ticks every " + ($reload$jscomp$1$$ || 65536) / 1193.1816666 + "ms (reload=" + $reload$jscomp$1$$ + ")");
};
function $SpeakerAdapter$$module$src$browser$speaker$$($bus$jscomp$2$$) {
  if ("undefined" !== typeof window) {
    if (window.AudioContext || window.webkitAudioContext) {
      var $SpeakerDAC$$ = window.AudioWorklet ? $SpeakerWorkletDAC$$module$src$browser$speaker$$ : $SpeakerBufferSourceDAC$$module$src$browser$speaker$$;
      this.bus = $bus$jscomp$2$$;
      this.audio_context = window.AudioContext ? new AudioContext : new webkitAudioContext;
      this.mixer = new $SpeakerMixer$$module$src$browser$speaker$$($bus$jscomp$2$$, this.audio_context);
      this.pcspeaker = new $PCSpeaker$$module$src$browser$speaker$$($bus$jscomp$2$$, this.audio_context, this.mixer);
      this.dac = new $SpeakerDAC$$($bus$jscomp$2$$, this.audio_context, this.mixer);
      this.pcspeaker.start();
      $bus$jscomp$2$$.register("emulator-stopped", function() {
        this.audio_context.suspend();
      }, this);
      $bus$jscomp$2$$.register("emulator-started", function() {
        this.audio_context.resume();
      }, this);
      $bus$jscomp$2$$.register("speaker-confirm-initialized", function() {
        $bus$jscomp$2$$.send("speaker-has-initialized");
      }, this);
      $bus$jscomp$2$$.send("speaker-has-initialized");
    } else {
      console.warn("Web browser doesn't support Web Audio API");
    }
  }
}
$SpeakerAdapter$$module$src$browser$speaker$$.prototype.destroy = function() {
  this.audio_context && this.audio_context.close();
  this.audio_context = null;
  this.dac && this.dac.node_processor && this.dac.node_processor.port.close();
  this.dac = null;
};
function $SpeakerMixer$$module$src$browser$speaker$$($bus$jscomp$3$$, $audio_context$$) {
  function $create_gain_handler$$($audio_node$$) {
    return function($decibels$jscomp$3$$) {
      $audio_node$$.gain.setValueAtTime($decibels$jscomp$3$$, this.audio_context.currentTime);
    };
  }
  this.audio_context = $audio_context$$;
  this.sources = new Map;
  this.gain_right = this.gain_left = this.volume_right = this.volume_left = this.volume_both = 1;
  this.node_treble_left = this.audio_context.createBiquadFilter();
  this.node_treble_right = this.audio_context.createBiquadFilter();
  this.node_treble_left.type = "highshelf";
  this.node_treble_right.type = "highshelf";
  this.node_treble_left.frequency.setValueAtTime(2000, this.audio_context.currentTime);
  this.node_treble_right.frequency.setValueAtTime(2000, this.audio_context.currentTime);
  this.node_bass_left = this.audio_context.createBiquadFilter();
  this.node_bass_right = this.audio_context.createBiquadFilter();
  this.node_bass_left.type = "lowshelf";
  this.node_bass_right.type = "lowshelf";
  this.node_bass_left.frequency.setValueAtTime(200, this.audio_context.currentTime);
  this.node_bass_right.frequency.setValueAtTime(200, this.audio_context.currentTime);
  this.node_gain_left = this.audio_context.createGain();
  this.node_gain_right = this.audio_context.createGain();
  this.node_merger = this.audio_context.createChannelMerger(2);
  this.input_left = this.node_treble_left;
  this.input_right = this.node_treble_right;
  this.node_treble_left.connect(this.node_bass_left);
  this.node_bass_left.connect(this.node_gain_left);
  this.node_gain_left.connect(this.node_merger, 0, 0);
  this.node_treble_right.connect(this.node_bass_right);
  this.node_bass_right.connect(this.node_gain_right);
  this.node_gain_right.connect(this.node_merger, 0, 1);
  this.node_merger.connect(this.audio_context.destination);
  $bus$jscomp$3$$.register("mixer-connect", function($data$jscomp$106$$) {
    this.connect_source($data$jscomp$106$$[0], $data$jscomp$106$$[1]);
  }, this);
  $bus$jscomp$3$$.register("mixer-disconnect", function($data$jscomp$107$$) {
    this.disconnect_source($data$jscomp$107$$[0], $data$jscomp$107$$[1]);
  }, this);
  $bus$jscomp$3$$.register("mixer-volume", function($data$jscomp$108_gain$$) {
    var $source_id$jscomp$2$$ = $data$jscomp$108_gain$$[0], $channel$jscomp$22$$ = $data$jscomp$108_gain$$[1];
    $data$jscomp$108_gain$$ = Math.pow(10, $data$jscomp$108_gain$$[2] / 20);
    var $source$jscomp$16$$ = 0 === $source_id$jscomp$2$$ ? this : this.sources.get($source_id$jscomp$2$$);
    void 0 === $source$jscomp$16$$ ? $dbg_assert$$module$src$log$$(!1, "Mixer set volume - cannot set volume for undefined source: " + $source_id$jscomp$2$$) : $source$jscomp$16$$.set_volume($data$jscomp$108_gain$$, $channel$jscomp$22$$);
  }, this);
  $bus$jscomp$3$$.register("mixer-gain-left", function($decibels$jscomp$1$$) {
    this.gain_left = Math.pow(10, $decibels$jscomp$1$$ / 20);
    this.update();
  }, this);
  $bus$jscomp$3$$.register("mixer-gain-right", function($decibels$jscomp$2$$) {
    this.gain_right = Math.pow(10, $decibels$jscomp$2$$ / 20);
    this.update();
  }, this);
  $bus$jscomp$3$$.register("mixer-treble-left", $create_gain_handler$$(this.node_treble_left), this);
  $bus$jscomp$3$$.register("mixer-treble-right", $create_gain_handler$$(this.node_treble_right), this);
  $bus$jscomp$3$$.register("mixer-bass-left", $create_gain_handler$$(this.node_bass_left), this);
  $bus$jscomp$3$$.register("mixer-bass-right", $create_gain_handler$$(this.node_bass_right), this);
}
$SpeakerMixer$$module$src$browser$speaker$$.prototype.add_source = function($source$jscomp$17_source_node$$, $source_id$jscomp$3$$) {
  $source$jscomp$17_source_node$$ = new $SpeakerMixerSource$$module$src$browser$speaker$$(this.audio_context, $source$jscomp$17_source_node$$, this.input_left, this.input_right);
  $dbg_assert$$module$src$log$$(!this.sources.has($source_id$jscomp$3$$), "Mixer add source - overwritting source: " + $source_id$jscomp$3$$);
  this.sources.set($source_id$jscomp$3$$, $source$jscomp$17_source_node$$);
  return $source$jscomp$17_source_node$$;
};
$SpeakerMixer$$module$src$browser$speaker$$.prototype.connect_source = function($source_id$jscomp$4$$, $channel$jscomp$23$$) {
  var $source$jscomp$18$$ = this.sources.get($source_id$jscomp$4$$);
  void 0 === $source$jscomp$18$$ ? $dbg_assert$$module$src$log$$(!1, "Mixer connect - cannot connect undefined source: " + $source_id$jscomp$4$$) : $source$jscomp$18$$.connect($channel$jscomp$23$$);
};
$SpeakerMixer$$module$src$browser$speaker$$.prototype.disconnect_source = function($source_id$jscomp$5$$, $channel$jscomp$24$$) {
  var $source$jscomp$19$$ = this.sources.get($source_id$jscomp$5$$);
  void 0 === $source$jscomp$19$$ ? $dbg_assert$$module$src$log$$(!1, "Mixer disconnect - cannot disconnect undefined source: " + $source_id$jscomp$5$$) : $source$jscomp$19$$.disconnect($channel$jscomp$24$$);
};
$SpeakerMixer$$module$src$browser$speaker$$.prototype.set_volume = function($value$jscomp$133$$, $channel$jscomp$25$$) {
  void 0 === $channel$jscomp$25$$ && ($channel$jscomp$25$$ = 2);
  switch($channel$jscomp$25$$) {
    case 0:
      this.volume_left = $value$jscomp$133$$;
      break;
    case 1:
      this.volume_right = $value$jscomp$133$$;
      break;
    case 2:
      this.volume_both = $value$jscomp$133$$;
      break;
    default:
      $dbg_assert$$module$src$log$$(!1, "Mixer set master volume - unknown channel: " + $channel$jscomp$25$$);
      return;
  }
  this.update();
};
$SpeakerMixer$$module$src$browser$speaker$$.prototype.update = function() {
  var $net_gain_right$$ = this.volume_both * this.volume_right * this.gain_right;
  this.node_gain_left.gain.setValueAtTime(this.volume_both * this.volume_left * this.gain_left, this.audio_context.currentTime);
  this.node_gain_right.gain.setValueAtTime($net_gain_right$$, this.audio_context.currentTime);
};
function $SpeakerMixerSource$$module$src$browser$speaker$$($audio_context$jscomp$1$$, $source_node$jscomp$1$$, $destination_left$$, $destination_right$$) {
  this.audio_context = $audio_context$jscomp$1$$;
  this.connected_right = this.connected_left = !0;
  this.volume_right = this.volume_left = this.volume_both = this.gain_hidden = 1;
  this.node_splitter = $audio_context$jscomp$1$$.createChannelSplitter(2);
  this.node_gain_left = $audio_context$jscomp$1$$.createGain();
  this.node_gain_right = $audio_context$jscomp$1$$.createGain();
  $source_node$jscomp$1$$.connect(this.node_splitter);
  this.node_splitter.connect(this.node_gain_left, 0);
  this.node_gain_left.connect($destination_left$$);
  this.node_splitter.connect(this.node_gain_right, 1);
  this.node_gain_right.connect($destination_right$$);
}
$SpeakerMixerSource$$module$src$browser$speaker$$.prototype.update = function() {
  var $net_gain_right$jscomp$1$$ = this.connected_right * this.gain_hidden * this.volume_both * this.volume_right;
  this.node_gain_left.gain.setValueAtTime(this.connected_left * this.gain_hidden * this.volume_both * this.volume_left, this.audio_context.currentTime);
  this.node_gain_right.gain.setValueAtTime($net_gain_right$jscomp$1$$, this.audio_context.currentTime);
};
$SpeakerMixerSource$$module$src$browser$speaker$$.prototype.connect = function($channel$jscomp$26$$) {
  var $both$$ = !$channel$jscomp$26$$ || 2 === $channel$jscomp$26$$;
  if ($both$$ || 0 === $channel$jscomp$26$$) {
    this.connected_left = !0;
  }
  if ($both$$ || 1 === $channel$jscomp$26$$) {
    this.connected_right = !0;
  }
  this.update();
};
$SpeakerMixerSource$$module$src$browser$speaker$$.prototype.disconnect = function($channel$jscomp$27$$) {
  var $both$jscomp$1$$ = !$channel$jscomp$27$$ || 2 === $channel$jscomp$27$$;
  if ($both$jscomp$1$$ || 0 === $channel$jscomp$27$$) {
    this.connected_left = !1;
  }
  if ($both$jscomp$1$$ || 1 === $channel$jscomp$27$$) {
    this.connected_right = !1;
  }
  this.update();
};
$SpeakerMixerSource$$module$src$browser$speaker$$.prototype.set_volume = function($value$jscomp$134$$, $channel$jscomp$28$$) {
  void 0 === $channel$jscomp$28$$ && ($channel$jscomp$28$$ = 2);
  switch($channel$jscomp$28$$) {
    case 0:
      this.volume_left = $value$jscomp$134$$;
      break;
    case 1:
      this.volume_right = $value$jscomp$134$$;
      break;
    case 2:
      this.volume_both = $value$jscomp$134$$;
      break;
    default:
      $dbg_assert$$module$src$log$$(!1, "Mixer set volume - unknown channel: " + $channel$jscomp$28$$);
      return;
  }
  this.update();
};
$SpeakerMixerSource$$module$src$browser$speaker$$.prototype.set_gain_hidden = function($value$jscomp$135$$) {
  this.gain_hidden = $value$jscomp$135$$;
};
function $PCSpeaker$$module$src$browser$speaker$$($bus$jscomp$4$$, $audio_context$jscomp$2$$, $mixer$$) {
  this.node_oscillator = $audio_context$jscomp$2$$.createOscillator();
  this.node_oscillator.type = "square";
  this.node_oscillator.frequency.setValueAtTime(440, $audio_context$jscomp$2$$.currentTime);
  this.mixer_connection = $mixer$$.add_source(this.node_oscillator, 1);
  this.mixer_connection.disconnect();
  $bus$jscomp$4$$.register("pcspeaker-enable", function() {
    $mixer$$.connect_source(1);
  }, this);
  $bus$jscomp$4$$.register("pcspeaker-disable", function() {
    $mixer$$.disconnect_source(1);
  }, this);
  $bus$jscomp$4$$.register("pcspeaker-update", function($data$jscomp$109$$) {
    var $counter_reload$$ = $data$jscomp$109$$[1], $frequency$$ = 0;
    3 === $data$jscomp$109$$[0] && ($frequency$$ = Math.min(1193181.6665999999 / $counter_reload$$, this.node_oscillator.frequency.maxValue), $frequency$$ = Math.max($frequency$$, 0));
    this.node_oscillator.frequency.setValueAtTime($frequency$$, $audio_context$jscomp$2$$.currentTime);
  }, this);
}
$PCSpeaker$$module$src$browser$speaker$$.prototype.start = function() {
  this.node_oscillator.start();
};
function $SpeakerWorkletDAC$$module$src$browser$speaker$$($bus$jscomp$5$$, $audio_context$jscomp$3_worklet_blob_worklet_code_worklet_string$$, $mixer$jscomp$1$$) {
  this.bus = $bus$jscomp$5$$;
  this.audio_context = $audio_context$jscomp$3_worklet_blob_worklet_code_worklet_string$$;
  this.enabled = !1;
  this.sampling_rate = 48000;
  $audio_context$jscomp$3_worklet_blob_worklet_code_worklet_string$$ = function() {
    function $sinc$$($x$jscomp$100$$) {
      if (0 === $x$jscomp$100$$) {
        return 1;
      }
      $x$jscomp$100$$ *= Math.PI;
      return Math.sin($x$jscomp$100$$) / $x$jscomp$100$$;
    }
    function $DACProcessor$$() {
      var $self$jscomp$1$$ = Reflect.construct(AudioWorkletProcessor, [], $DACProcessor$$);
      $self$jscomp$1$$.kernel_size = 3;
      $self$jscomp$1$$.queue_data = Array(1024);
      $self$jscomp$1$$.queue_start = 0;
      $self$jscomp$1$$.queue_end = 0;
      $self$jscomp$1$$.queue_length = 0;
      $self$jscomp$1$$.queue_size = $self$jscomp$1$$.queue_data.length;
      $self$jscomp$1$$.queued_samples = 0;
      $self$jscomp$1$$.source_buffer_previous = $EMPTY_BUFFER$$;
      $self$jscomp$1$$.source_buffer_current = $EMPTY_BUFFER$$;
      $self$jscomp$1$$.source_samples_per_destination = 1.0;
      $self$jscomp$1$$.source_block_start = 0;
      $self$jscomp$1$$.source_time = 0.0;
      $self$jscomp$1$$.source_offset = 0;
      $self$jscomp$1$$.port.onmessage = $event$jscomp$4$$ => {
        switch($event$jscomp$4$$.data.type) {
          case "queue":
            $self$jscomp$1$$.queue_push($event$jscomp$4$$.data.value);
            break;
          case "sampling-rate":
            $self$jscomp$1$$.source_samples_per_destination = $event$jscomp$4$$.data.value / sampleRate;
        }
      };
      return $self$jscomp$1$$;
    }
    var $EMPTY_BUFFER$$ = [new Float32Array(256), new Float32Array(256), ];
    Reflect.setPrototypeOf($DACProcessor$$.prototype, AudioWorkletProcessor.prototype);
    Reflect.setPrototypeOf($DACProcessor$$, AudioWorkletProcessor);
    $DACProcessor$$.prototype.process = $DACProcessor$$.prototype.process = function($i$jscomp$38_inputs$jscomp$1$$, $outputs$jscomp$1_samples_needed_per_block$$) {
      for ($i$jscomp$38_inputs$jscomp$1$$ = 0; $i$jscomp$38_inputs$jscomp$1$$ < $outputs$jscomp$1_samples_needed_per_block$$[0][0].length; $i$jscomp$38_inputs$jscomp$1$$++) {
        for (var $sum0$$ = 0, $sum1$$ = 0, $end$jscomp$14$$ = this.source_offset + this.kernel_size, $j$jscomp$5$$ = this.source_offset - this.kernel_size + 1; $j$jscomp$5$$ <= $end$jscomp$14$$; $j$jscomp$5$$++) {
          var $convolute_index$$ = this.source_block_start + $j$jscomp$5$$;
          $sum0$$ += this.get_sample($convolute_index$$, 0) * this.kernel(this.source_time - $j$jscomp$5$$);
          $sum1$$ += this.get_sample($convolute_index$$, 1) * this.kernel(this.source_time - $j$jscomp$5$$);
        }
        if (isNaN($sum0$$) || isNaN($sum1$$)) {
          $sum0$$ = $sum1$$ = 0, this.dbg_log("ERROR: NaN values! Ignoring for now.");
        }
        $outputs$jscomp$1_samples_needed_per_block$$[0][0][$i$jscomp$38_inputs$jscomp$1$$] = $sum0$$;
        $outputs$jscomp$1_samples_needed_per_block$$[0][1][$i$jscomp$38_inputs$jscomp$1$$] = $sum1$$;
        this.source_time += this.source_samples_per_destination;
        this.source_offset = Math.floor(this.source_time);
      }
      $outputs$jscomp$1_samples_needed_per_block$$ = this.source_offset;
      $outputs$jscomp$1_samples_needed_per_block$$ += this.kernel_size + 2;
      this.source_time -= this.source_offset;
      this.source_block_start += this.source_offset;
      this.source_offset = 0;
      this.ensure_enough_data($outputs$jscomp$1_samples_needed_per_block$$);
      return !0;
    };
    $DACProcessor$$.prototype.kernel = function($x$jscomp$101$$) {
      return $sinc$$($x$jscomp$101$$) * $sinc$$($x$jscomp$101$$ / this.kernel_size);
    };
    $DACProcessor$$.prototype.get_sample = function($index$jscomp$82$$, $channel$jscomp$29$$) {
      return 0 > $index$jscomp$82$$ ? ($index$jscomp$82$$ += this.source_buffer_previous[0].length, this.source_buffer_previous[$channel$jscomp$29$$][$index$jscomp$82$$]) : this.source_buffer_current[$channel$jscomp$29$$][$index$jscomp$82$$];
    };
    $DACProcessor$$.prototype.ensure_enough_data = function($needed$$) {
      var $current_length$$ = this.source_buffer_current[0].length;
      $current_length$$ - this.source_block_start < $needed$$ && (this.prepare_next_buffer(), this.source_block_start -= $current_length$$);
    };
    $DACProcessor$$.prototype.prepare_next_buffer = function() {
      256 > this.queued_samples && this.queue_length && this.dbg_log("Not enough samples - should not happen during midway of playback");
      this.source_buffer_previous = this.source_buffer_current;
      this.source_buffer_current = this.queue_shift();
      var $new_big_buffer_new_big_buffer_size_sample_count$jscomp$1$$ = this.source_buffer_current[0].length;
      if (256 > $new_big_buffer_new_big_buffer_size_sample_count$jscomp$1$$) {
        for (var $new_big_buffer_pos_queue_pos$$ = this.queue_start, $buffer_count$$ = 0; 256 > $new_big_buffer_new_big_buffer_size_sample_count$jscomp$1$$ && $buffer_count$$ < this.queue_length;) {
          $new_big_buffer_new_big_buffer_size_sample_count$jscomp$1$$ += this.queue_data[$new_big_buffer_pos_queue_pos$$][0].length, $new_big_buffer_pos_queue_pos$$ = $new_big_buffer_pos_queue_pos$$ + 1 & this.queue_size - 1, $buffer_count$$++;
        }
        $new_big_buffer_new_big_buffer_size_sample_count$jscomp$1$$ = Math.max($new_big_buffer_new_big_buffer_size_sample_count$jscomp$1$$, 256);
        $new_big_buffer_new_big_buffer_size_sample_count$jscomp$1$$ = [new Float32Array($new_big_buffer_new_big_buffer_size_sample_count$jscomp$1$$), new Float32Array($new_big_buffer_new_big_buffer_size_sample_count$jscomp$1$$), ];
        $new_big_buffer_new_big_buffer_size_sample_count$jscomp$1$$[0].set(this.source_buffer_current[0]);
        $new_big_buffer_new_big_buffer_size_sample_count$jscomp$1$$[1].set(this.source_buffer_current[1]);
        $new_big_buffer_pos_queue_pos$$ = this.source_buffer_current[0].length;
        for (var $i$jscomp$39$$ = 0; $i$jscomp$39$$ < $buffer_count$$; $i$jscomp$39$$++) {
          var $small_buffer$$ = this.queue_shift();
          $new_big_buffer_new_big_buffer_size_sample_count$jscomp$1$$[0].set($small_buffer$$[0], $new_big_buffer_pos_queue_pos$$);
          $new_big_buffer_new_big_buffer_size_sample_count$jscomp$1$$[1].set($small_buffer$$[1], $new_big_buffer_pos_queue_pos$$);
          $new_big_buffer_pos_queue_pos$$ += $small_buffer$$[0].length;
        }
        this.source_buffer_current = $new_big_buffer_new_big_buffer_size_sample_count$jscomp$1$$;
      }
      this.pump();
    };
    $DACProcessor$$.prototype.pump = function() {
      1024 > this.queued_samples / this.source_samples_per_destination && this.port.postMessage({type:"pump", });
    };
    $DACProcessor$$.prototype.queue_push = function($item$jscomp$6$$) {
      this.queue_length < this.queue_size && (this.queue_data[this.queue_end] = $item$jscomp$6$$, this.queue_end = this.queue_end + 1 & this.queue_size - 1, this.queue_length++, this.queued_samples += $item$jscomp$6$$[0].length, this.pump());
    };
    $DACProcessor$$.prototype.queue_shift = function() {
      if (!this.queue_length) {
        return $EMPTY_BUFFER$$;
      }
      var $item$jscomp$7$$ = this.queue_data[this.queue_start];
      this.queue_data[this.queue_start] = null;
      this.queue_start = this.queue_start + 1 & this.queue_size - 1;
      this.queue_length--;
      this.queued_samples -= $item$jscomp$7$$[0].length;
      return $item$jscomp$7$$;
    };
    $DACProcessor$$.prototype.dbg_log = function($message$jscomp$30$$) {
      this.port.postMessage({type:"debug-log", value:$message$jscomp$30$$, });
    };
    registerProcessor("dac-processor", $DACProcessor$$);
  }.toString();
  var $worklet_code_start$$ = $audio_context$jscomp$3_worklet_blob_worklet_code_worklet_string$$.indexOf("{") + 1, $worklet_code_end$$ = $audio_context$jscomp$3_worklet_blob_worklet_code_worklet_string$$.lastIndexOf("}");
  $audio_context$jscomp$3_worklet_blob_worklet_code_worklet_string$$ = $audio_context$jscomp$3_worklet_blob_worklet_code_worklet_string$$.substring($worklet_code_start$$, $worklet_code_end$$);
  $audio_context$jscomp$3_worklet_blob_worklet_code_worklet_string$$ = new Blob(["var DEBUG = true;\n" + $audio_context$jscomp$3_worklet_blob_worklet_code_worklet_string$$], {type:"application/javascript"});
  var $worklet_url$$ = URL.createObjectURL($audio_context$jscomp$3_worklet_blob_worklet_code_worklet_string$$);
  this.node_processor = null;
  this.node_output = this.audio_context.createGain();
  this.audio_context.audioWorklet.addModule($worklet_url$$).then(() => {
    URL.revokeObjectURL($worklet_url$$);
    this.node_processor = new AudioWorkletNode(this.audio_context, "dac-processor", {numberOfInputs:0, numberOfOutputs:1, outputChannelCount:[2], parameterData:{}, processorOptions:{}, });
    this.node_processor.port.postMessage({type:"sampling-rate", value:this.sampling_rate, });
    this.node_processor.port.onmessage = $event$jscomp$5$$ => {
      switch($event$jscomp$5$$.data.type) {
        case "pump":
          this.pump();
          break;
        case "debug-log":
          $dbg_log$$module$src$log$$("SpeakerWorkletDAC - Worklet: " + $event$jscomp$5$$.data.value);
      }
    };
    this.node_processor.connect(this.node_output);
  });
  this.mixer_connection = $mixer$jscomp$1$$.add_source(this.node_output, 2);
  this.mixer_connection.set_gain_hidden(3);
  $bus$jscomp$5$$.register("dac-send-data", function($data$jscomp$110$$) {
    this.queue($data$jscomp$110$$);
  }, this);
  $bus$jscomp$5$$.register("dac-enable", function() {
    this.enabled = !0;
  }, this);
  $bus$jscomp$5$$.register("dac-disable", function() {
    this.enabled = !1;
  }, this);
  $bus$jscomp$5$$.register("dac-tell-sampling-rate", function($rate$jscomp$2$$) {
    $dbg_assert$$module$src$log$$(0 < $rate$jscomp$2$$, "Sampling rate should be nonzero");
    this.sampling_rate = $rate$jscomp$2$$;
    this.node_processor && this.node_processor.port.postMessage({type:"sampling-rate", value:$rate$jscomp$2$$, });
  }, this);
  this.debugger = new $SpeakerDACDebugger$$module$src$browser$speaker$$(this.audio_context, this.node_output);
}
$SpeakerWorkletDAC$$module$src$browser$speaker$$.prototype.queue = function($data$jscomp$111$$) {
  this.node_processor && (this.debugger.push_queued_data($data$jscomp$111$$), this.node_processor.port.postMessage({type:"queue", value:$data$jscomp$111$$, }, [$data$jscomp$111$$[0].buffer, $data$jscomp$111$$[1].buffer]));
};
$SpeakerWorkletDAC$$module$src$browser$speaker$$.prototype.pump = function() {
  this.enabled && this.bus.send("dac-request-data");
};
function $SpeakerBufferSourceDAC$$module$src$browser$speaker$$($bus$jscomp$6$$, $audio_context$jscomp$4$$, $mixer$jscomp$2$$) {
  this.bus = $bus$jscomp$6$$;
  this.audio_context = $audio_context$jscomp$4$$;
  this.enabled = !1;
  this.sampling_rate = 22050;
  this.buffered_time = 0;
  this.rate_ratio = 1;
  this.node_lowpass = this.audio_context.createBiquadFilter();
  this.node_lowpass.type = "lowpass";
  this.node_output = this.node_lowpass;
  this.mixer_connection = $mixer$jscomp$2$$.add_source(this.node_output, 2);
  this.mixer_connection.set_gain_hidden(3);
  $bus$jscomp$6$$.register("dac-send-data", function($data$jscomp$112$$) {
    this.queue($data$jscomp$112$$);
  }, this);
  $bus$jscomp$6$$.register("dac-enable", function() {
    this.enabled = !0;
    this.pump();
  }, this);
  $bus$jscomp$6$$.register("dac-disable", function() {
    this.enabled = !1;
  }, this);
  $bus$jscomp$6$$.register("dac-tell-sampling-rate", function($rate$jscomp$3$$) {
    $dbg_assert$$module$src$log$$(0 < $rate$jscomp$3$$, "Sampling rate should be nonzero");
    this.sampling_rate = $rate$jscomp$3$$;
    this.rate_ratio = Math.ceil(8000 / $rate$jscomp$3$$);
    this.node_lowpass.frequency.setValueAtTime($rate$jscomp$3$$ / 2, this.audio_context.currentTime);
  }, this);
  this.debugger = new $SpeakerDACDebugger$$module$src$browser$speaker$$(this.audio_context, this.node_output);
}
$SpeakerBufferSourceDAC$$module$src$browser$speaker$$.prototype.queue = function($data$jscomp$113_source$jscomp$20$$) {
  this.debugger.push_queued_data($data$jscomp$113_source$jscomp$20$$);
  var $current_silence_duration_sample_count$jscomp$2$$ = $data$jscomp$113_source$jscomp$20$$[0].length, $block_duration$$ = $current_silence_duration_sample_count$jscomp$2$$ / this.sampling_rate;
  if (1 < this.rate_ratio) {
    var $buffer$jscomp$32_current_time_target_silence_duration$$ = this.audio_context.createBuffer(2, $current_silence_duration_sample_count$jscomp$2$$ * this.rate_ratio, this.sampling_rate * this.rate_ratio);
    for (var $buffer_data0$$ = $buffer$jscomp$32_current_time_target_silence_duration$$.getChannelData(0), $buffer_data1$$ = $buffer$jscomp$32_current_time_target_silence_duration$$.getChannelData(1), $buffer_index$$ = 0, $i$jscomp$40$$ = 0; $i$jscomp$40$$ < $current_silence_duration_sample_count$jscomp$2$$; $i$jscomp$40$$++) {
      for (var $j$jscomp$6$$ = 0; $j$jscomp$6$$ < this.rate_ratio; $j$jscomp$6$$++, $buffer_index$$++) {
        $buffer_data0$$[$buffer_index$$] = $data$jscomp$113_source$jscomp$20$$[0][$i$jscomp$40$$], $buffer_data1$$[$buffer_index$$] = $data$jscomp$113_source$jscomp$20$$[1][$i$jscomp$40$$];
      }
    }
  } else {
    $buffer$jscomp$32_current_time_target_silence_duration$$ = this.audio_context.createBuffer(2, $current_silence_duration_sample_count$jscomp$2$$, this.sampling_rate), $buffer$jscomp$32_current_time_target_silence_duration$$.copyToChannel ? ($buffer$jscomp$32_current_time_target_silence_duration$$.copyToChannel($data$jscomp$113_source$jscomp$20$$[0], 0), $buffer$jscomp$32_current_time_target_silence_duration$$.copyToChannel($data$jscomp$113_source$jscomp$20$$[1], 1)) : ($buffer$jscomp$32_current_time_target_silence_duration$$.getChannelData(0).set($data$jscomp$113_source$jscomp$20$$[0]), 
    $buffer$jscomp$32_current_time_target_silence_duration$$.getChannelData(1).set($data$jscomp$113_source$jscomp$20$$[1]));
  }
  $data$jscomp$113_source$jscomp$20$$ = this.audio_context.createBufferSource();
  $data$jscomp$113_source$jscomp$20$$.buffer = $buffer$jscomp$32_current_time_target_silence_duration$$;
  $data$jscomp$113_source$jscomp$20$$.connect(this.node_lowpass);
  $data$jscomp$113_source$jscomp$20$$.addEventListener("ended", this.pump.bind(this));
  $buffer$jscomp$32_current_time_target_silence_duration$$ = this.audio_context.currentTime;
  if (this.buffered_time < $buffer$jscomp$32_current_time_target_silence_duration$$) {
    for ($dbg_log$$module$src$log$$("Speaker DAC - Creating/Recreating reserve - shouldn't occur frequently during playback"), this.buffered_time = $buffer$jscomp$32_current_time_target_silence_duration$$, $buffer$jscomp$32_current_time_target_silence_duration$$ = 0.2 - $block_duration$$, $current_silence_duration_sample_count$jscomp$2$$ = 0; $current_silence_duration_sample_count$jscomp$2$$ <= $buffer$jscomp$32_current_time_target_silence_duration$$;) {
      $current_silence_duration_sample_count$jscomp$2$$ += $block_duration$$, this.buffered_time += $block_duration$$, setTimeout(() => this.pump(), 1000 * $current_silence_duration_sample_count$jscomp$2$$);
    }
  }
  $data$jscomp$113_source$jscomp$20$$.start(this.buffered_time);
  this.buffered_time += $block_duration$$;
  setTimeout(() => this.pump(), 0);
};
$SpeakerBufferSourceDAC$$module$src$browser$speaker$$.prototype.pump = function() {
  this.enabled && (0.2 < this.buffered_time - this.audio_context.currentTime || this.bus.send("dac-request-data"));
};
function $SpeakerDACDebugger$$module$src$browser$speaker$$($audio_context$jscomp$5$$, $source_node$jscomp$2$$) {
  this.audio_context = $audio_context$jscomp$5$$;
  this.node_source = $source_node$jscomp$2$$;
  this.node_processor = null;
  this.node_gain = this.audio_context.createGain();
  this.node_gain.gain.setValueAtTime(0, this.audio_context.currentTime);
  this.node_gain.connect(this.audio_context.destination);
  this.is_active = !1;
  this.queued_history = [];
  this.output_history = [];
  this.queued = [[], []];
  this.output = [[], []];
}
$SpeakerDACDebugger$$module$src$browser$speaker$$.prototype.start = function($duration_ms$$) {
  this.is_active = !0;
  this.queued = [[], []];
  this.output = [[], []];
  this.queued_history.push(this.queued);
  this.output_history.push(this.output);
  this.node_processor = this.audio_context.createScriptProcessor(1024, 2, 2);
  this.node_processor.onaudioprocess = $event$jscomp$6$$ => {
    this.output[0].push($event$jscomp$6$$.inputBuffer.getChannelData(0).slice());
    this.output[1].push($event$jscomp$6$$.inputBuffer.getChannelData(1).slice());
  };
  this.node_source.connect(this.node_processor);
  this.node_processor.connect(this.node_gain);
  setTimeout(() => {
    this.stop();
  }, $duration_ms$$);
};
$SpeakerDACDebugger$$module$src$browser$speaker$$.prototype.stop = function() {
  this.is_active = !1;
  this.node_source.disconnect(this.node_processor);
  this.node_processor.disconnect();
  this.node_processor = null;
};
$SpeakerDACDebugger$$module$src$browser$speaker$$.prototype.push_queued_data = function($data$jscomp$114$$) {
  this.is_active && (this.queued[0].push($data$jscomp$114$$[0].slice()), this.queued[1].push($data$jscomp$114$$[1].slice()));
};
$SpeakerDACDebugger$$module$src$browser$speaker$$.prototype.download_txt = function($history_id_txt$$, $channel$jscomp$30$$) {
  $history_id_txt$$ = this.output_history[$history_id_txt$$][$channel$jscomp$30$$].map($v$$ => $v$$.join(" ")).join(" ");
  $dump_file$$module$src$lib$$($history_id_txt$$, "dacdata.txt");
};
$SpeakerDACDebugger$$module$src$browser$speaker$$.prototype.download_csv = function($buffers$jscomp$5_history_id$jscomp$1$$) {
  $buffers$jscomp$5_history_id$jscomp$1$$ = this.output_history[$buffers$jscomp$5_history_id$jscomp$1$$];
  for (var $csv_rows$$ = [], $buffer_id$$ = 0; $buffer_id$$ < $buffers$jscomp$5_history_id$jscomp$1$$[0].length; $buffer_id$$++) {
    for (var $i$jscomp$41$$ = 0; $i$jscomp$41$$ < $buffers$jscomp$5_history_id$jscomp$1$$[0][$buffer_id$$].length; $i$jscomp$41$$++) {
      $csv_rows$$.push(`${$buffers$jscomp$5_history_id$jscomp$1$$[0][$buffer_id$$][$i$jscomp$41$$]},${$buffers$jscomp$5_history_id$jscomp$1$$[1][$buffer_id$$][$i$jscomp$41$$]}`);
    }
  }
  $dump_file$$module$src$lib$$($csv_rows$$.join("\n"), "dacdata.csv");
};
function $NetworkAdapter$$module$src$browser$network$$($url$jscomp$23$$, $bus$jscomp$7$$, $id$jscomp$5$$) {
  this.bus = $bus$jscomp$7$$;
  this.socket = void 0;
  this.id = $id$jscomp$5$$ || 0;
  this.send_queue = [];
  this.url = $url$jscomp$23$$;
  this.reconnect_interval = 10000;
  this.last_connect_attempt = Date.now() - this.reconnect_interval;
  this.send_queue_limit = 64;
  this.destroyed = !1;
  this.bus.register("net" + this.id + "-send", function($data$jscomp$115$$) {
    this.send($data$jscomp$115$$);
  }, this);
}
$NetworkAdapter$$module$src$browser$network$$.prototype.handle_message = function($e$jscomp$12$$) {
  this.bus && this.bus.send("net" + this.id + "-receive", new Uint8Array($e$jscomp$12$$.data));
};
$NetworkAdapter$$module$src$browser$network$$.prototype.handle_close = function() {
  this.destroyed || (this.connect(), setTimeout(this.connect.bind(this), this.reconnect_interval));
};
$NetworkAdapter$$module$src$browser$network$$.prototype.handle_open = function() {
  for (var $i$jscomp$42$$ = 0; $i$jscomp$42$$ < this.send_queue.length; $i$jscomp$42$$++) {
    this.send(this.send_queue[$i$jscomp$42$$]);
  }
  this.send_queue = [];
};
$NetworkAdapter$$module$src$browser$network$$.prototype.handle_error = function() {
};
$NetworkAdapter$$module$src$browser$network$$.prototype.destroy = function() {
  this.destroyed = !0;
  this.socket && this.socket.close();
};
$NetworkAdapter$$module$src$browser$network$$.prototype.connect = function() {
  if ("undefined" !== typeof WebSocket) {
    if (this.socket) {
      var $now$jscomp$6_state$jscomp$15$$ = this.socket.readyState;
      if (0 === $now$jscomp$6_state$jscomp$15$$ || 1 === $now$jscomp$6_state$jscomp$15$$) {
        return;
      }
    }
    $now$jscomp$6_state$jscomp$15$$ = Date.now();
    if (!(this.last_connect_attempt + this.reconnect_interval > $now$jscomp$6_state$jscomp$15$$)) {
      this.last_connect_attempt = Date.now();
      try {
        this.socket = new WebSocket(this.url);
      } catch ($e$jscomp$16$$) {
        console.error($e$jscomp$16$$);
        return;
      }
      this.socket.binaryType = "arraybuffer";
      this.socket.onopen = this.handle_open.bind(this);
      this.socket.onmessage = this.handle_message.bind(this);
      this.socket.onclose = this.handle_close.bind(this);
      this.socket.onerror = this.handle_error.bind(this);
    }
  }
};
$NetworkAdapter$$module$src$browser$network$$.prototype.send = function($data$jscomp$116$$) {
  this.socket && 1 === this.socket.readyState ? this.socket.send($data$jscomp$116$$) : (this.send_queue.push($data$jscomp$116$$), this.send_queue.length > 2 * this.send_queue_limit && (this.send_queue = this.send_queue.slice(-this.send_queue_limit)), this.connect());
};
$NetworkAdapter$$module$src$browser$network$$.prototype.change_proxy = function($url$jscomp$24$$) {
  this.url = $url$jscomp$24$$;
  this.socket && (this.socket.onclose = function() {
  }, this.socket.onerror = function() {
  }, this.socket.close(), this.socket = void 0);
};
const $UNIX_EPOCH$$module$src$browser$fake_network$$ = (new Date("1970-01-01T00:00:00Z")).getTime(), $NTP_EPOCH$$module$src$browser$fake_network$$ = (new Date("1900-01-01T00:00:00Z")).getTime(), $NTP_EPOC_DIFF$$module$src$browser$fake_network$$ = $UNIX_EPOCH$$module$src$browser$fake_network$$ - $NTP_EPOCH$$module$src$browser$fake_network$$, $TWO_TO_32$$module$src$browser$fake_network$$ = Math.pow(2, 32), $V86_ASCII$$module$src$browser$fake_network$$ = [118, 56, 54];
function $a2ethaddr$$module$src$browser$fake_network$$($bytes$jscomp$3$$) {
  return [0, 1, 2, 3, 4, 5].map($i$jscomp$43$$ => $bytes$jscomp$3$$[$i$jscomp$43$$].toString(16)).map($x$jscomp$102$$ => 1 === $x$jscomp$102$$.length ? "0" + $x$jscomp$102$$ : $x$jscomp$102$$).join(":");
}
function $iptolong$$module$src$browser$fake_network$$($parts$jscomp$2$$) {
  return $parts$jscomp$2$$[0] << 24 | $parts$jscomp$2$$[1] << 16 | $parts$jscomp$2$$[2] << 8 | $parts$jscomp$2$$[3];
}
class $GrowableRingbuffer$$module$src$browser$fake_network$$ {
  constructor($initial_capacity$$, $maximum_capacity$$) {
    $initial_capacity$$ = Math.min($initial_capacity$$, 16);
    this.maximum_capacity = $maximum_capacity$$ ? Math.max($maximum_capacity$$, $initial_capacity$$) : 0;
    this.length = this.head = this.tail = 0;
    this.buffer = new Uint8Array($initial_capacity$$);
  }
  write($src_array$$) {
    const $src_length$$ = $src_array$$.length;
    var $buffer$jscomp$33_new_buffer_total_length$$ = this.length + $src_length$$;
    let $capacity$$ = this.buffer.length;
    if ($capacity$$ < $buffer$jscomp$33_new_buffer_total_length$$) {
      for ($dbg_assert$$module$src$log$$(0 < $capacity$$); $capacity$$ < $buffer$jscomp$33_new_buffer_total_length$$;) {
        $capacity$$ *= 2;
      }
      if (this.maximum_capacity && $capacity$$ > this.maximum_capacity) {
        throw Error("stream capacity overflow in GrowableRingbuffer.write(), package dropped");
      }
      $buffer$jscomp$33_new_buffer_total_length$$ = new Uint8Array($capacity$$);
      this.peek($buffer$jscomp$33_new_buffer_total_length$$);
      this.tail = 0;
      this.head = this.length;
      this.buffer = $buffer$jscomp$33_new_buffer_total_length$$;
    }
    $buffer$jscomp$33_new_buffer_total_length$$ = this.buffer;
    const $new_head$$ = this.head + $src_length$$;
    if ($new_head$$ > $capacity$$) {
      const $i_split$$ = $capacity$$ - this.head;
      $buffer$jscomp$33_new_buffer_total_length$$.set($src_array$$.subarray(0, $i_split$$), this.head);
      $buffer$jscomp$33_new_buffer_total_length$$.set($src_array$$.subarray($i_split$$));
    } else {
      $buffer$jscomp$33_new_buffer_total_length$$.set($src_array$$, this.head);
    }
    this.head = $new_head$$ % $capacity$$;
    this.length += $src_length$$;
  }
  peek($dst_array$$) {
    const $length$jscomp$19$$ = Math.min(this.length, $dst_array$$.length);
    if ($length$jscomp$19$$) {
      const $buffer$jscomp$34$$ = this.buffer;
      var $buf_len_right_capacity$jscomp$1$$ = $buffer$jscomp$34$$.length, $buf_len_left_new_tail$$ = this.tail + $length$jscomp$19$$;
      $buf_len_left_new_tail$$ > $buf_len_right_capacity$jscomp$1$$ ? ($buf_len_left_new_tail$$ %= $buf_len_right_capacity$jscomp$1$$, $buf_len_right_capacity$jscomp$1$$ -= this.tail, $dst_array$$.set($buffer$jscomp$34$$.subarray(this.tail)), $dst_array$$.set($buffer$jscomp$34$$.subarray(0, $buf_len_left_new_tail$$), $buf_len_right_capacity$jscomp$1$$)) : $dst_array$$.set($buffer$jscomp$34$$.subarray(this.tail, $buf_len_left_new_tail$$));
    }
    return $length$jscomp$19$$;
  }
  remove($length$jscomp$20$$) {
    $length$jscomp$20$$ > this.length && ($length$jscomp$20$$ = this.length);
    $length$jscomp$20$$ && (this.tail = (this.tail + $length$jscomp$20$$) % this.buffer.length, this.length -= $length$jscomp$20$$);
    return $length$jscomp$20$$;
  }
}
function $create_eth_encoder_buf$$module$src$browser$fake_network$$() {
  const $eth_frame$$ = new Uint8Array(1518), $buffer$jscomp$35$$ = $eth_frame$$.buffer, $offset$jscomp$41$$ = $eth_frame$$.byteOffset;
  return {eth_frame:$eth_frame$$, eth_frame_view:new DataView($buffer$jscomp$35$$), eth_payload_view:new DataView($buffer$jscomp$35$$, $offset$jscomp$41$$ + 14, 1500), ipv4_payload_view:new DataView($buffer$jscomp$35$$, $offset$jscomp$41$$ + 34, 1480), udp_payload_view:new DataView($buffer$jscomp$35$$, $offset$jscomp$41$$ + 42, 1472), text_encoder:new TextEncoder};
}
function $view_set_array$$module$src$browser$fake_network$$($offset$jscomp$42$$, $data$jscomp$117$$, $view$jscomp$5$$, $out$$) {
  $out$$.eth_frame.set($data$jscomp$117$$, $view$jscomp$5$$.byteOffset + $offset$jscomp$42$$);
  return $data$jscomp$117$$.length;
}
function $calc_inet_checksum$$module$src$browser$fake_network$$($length$jscomp$21$$, $checksum$$, $i$jscomp$44_view$jscomp$7$$, $eth_frame$jscomp$1_out$jscomp$2$$) {
  const $uint16_end$$ = $i$jscomp$44_view$jscomp$7$$.byteOffset + ($length$jscomp$21$$ & -2);
  $eth_frame$jscomp$1_out$jscomp$2$$ = $eth_frame$jscomp$1_out$jscomp$2$$.eth_frame;
  for ($i$jscomp$44_view$jscomp$7$$ = $i$jscomp$44_view$jscomp$7$$.byteOffset; $i$jscomp$44_view$jscomp$7$$ < $uint16_end$$; $i$jscomp$44_view$jscomp$7$$ += 2) {
    $checksum$$ += $eth_frame$jscomp$1_out$jscomp$2$$[$i$jscomp$44_view$jscomp$7$$] << 8 | $eth_frame$jscomp$1_out$jscomp$2$$[$i$jscomp$44_view$jscomp$7$$ + 1];
  }
  for ($length$jscomp$21$$ & 1 && ($checksum$$ += $eth_frame$jscomp$1_out$jscomp$2$$[$uint16_end$$] << 8); $checksum$$ >>> 16;) {
    $checksum$$ = ($checksum$$ & 65535) + ($checksum$$ >>> 16);
  }
  return ~$checksum$$ & 65535;
}
function $make_packet$$module$src$browser$fake_network$$($out$jscomp$3$$, $spec$$) {
  $dbg_assert$$module$src$log$$($spec$$.eth);
  $out$jscomp$3$$.eth_frame.fill(0);
  var $JSCompiler_temp_const$jscomp$5$$ = $out$jscomp$3$$.eth_frame, $JSCompiler_temp_const$jscomp$4$$ = $JSCompiler_temp_const$jscomp$5$$.subarray, $JSCompiler_temp_const$jscomp$279_JSCompiler_temp_const$jscomp$282_len$jscomp$inline_71_view$jscomp$inline_70$$ = $out$jscomp$3$$.eth_frame_view;
  $view_set_array$$module$src$browser$fake_network$$(0, $spec$$.eth.dest, $JSCompiler_temp_const$jscomp$279_JSCompiler_temp_const$jscomp$282_len$jscomp$inline_71_view$jscomp$inline_70$$, $out$jscomp$3$$);
  $view_set_array$$module$src$browser$fake_network$$(6, $spec$$.eth.src, $JSCompiler_temp_const$jscomp$279_JSCompiler_temp_const$jscomp$282_len$jscomp$inline_71_view$jscomp$inline_70$$, $out$jscomp$3$$);
  $JSCompiler_temp_const$jscomp$279_JSCompiler_temp_const$jscomp$282_len$jscomp$inline_71_view$jscomp$inline_70$$.setUint16(12, $spec$$.eth.ethertype);
  $JSCompiler_temp_const$jscomp$279_JSCompiler_temp_const$jscomp$282_len$jscomp$inline_71_view$jscomp$inline_70$$ = 14;
  if ($spec$$.arp) {
    var $view$jscomp$inline_301_view$jscomp$inline_305$$ = $out$jscomp$3$$.eth_payload_view;
    $view$jscomp$inline_301_view$jscomp$inline_305$$.setUint16(0, $spec$$.arp.htype);
    $view$jscomp$inline_301_view$jscomp$inline_305$$.setUint16(2, $spec$$.arp.ptype);
    $view$jscomp$inline_301_view$jscomp$inline_305$$.setUint8(4, $spec$$.arp.sha.length);
    $view$jscomp$inline_301_view$jscomp$inline_305$$.setUint8(5, $spec$$.arp.spa.length);
    $view$jscomp$inline_301_view$jscomp$inline_305$$.setUint16(6, $spec$$.arp.oper);
    $view_set_array$$module$src$browser$fake_network$$(8, $spec$$.arp.sha, $view$jscomp$inline_301_view$jscomp$inline_305$$, $out$jscomp$3$$);
    $view_set_array$$module$src$browser$fake_network$$(14, $spec$$.arp.spa, $view$jscomp$inline_301_view$jscomp$inline_305$$, $out$jscomp$3$$);
    $view_set_array$$module$src$browser$fake_network$$(18, $spec$$.arp.tha, $view$jscomp$inline_301_view$jscomp$inline_305$$, $out$jscomp$3$$);
    $view_set_array$$module$src$browser$fake_network$$(24, $spec$$.arp.tpa, $view$jscomp$inline_301_view$jscomp$inline_305$$, $out$jscomp$3$$);
    $JSCompiler_temp_const$jscomp$279_JSCompiler_temp_const$jscomp$282_len$jscomp$inline_71_view$jscomp$inline_70$$ += 28;
  } else {
    if ($spec$$.ipv4) {
      $view$jscomp$inline_301_view$jscomp$inline_305$$ = $out$jscomp$3$$.eth_payload_view;
      $JSCompiler_temp_const$jscomp$inline_308_JSCompiler_temp_const$jscomp$inline_310_JSCompiler_temp_const$jscomp$inline_313_len$jscomp$inline_307$$ = 20;
      if ($spec$$.icmp) {
        var $JSCompiler_temp_const$jscomp$inline_308_JSCompiler_temp_const$jscomp$inline_310_JSCompiler_temp_const$jscomp$inline_313_len$jscomp$inline_307$$ = $JSCompiler_temp_const$jscomp$inline_308_JSCompiler_temp_const$jscomp$inline_310_JSCompiler_temp_const$jscomp$inline_313_len$jscomp$inline_307$$, $view$jscomp$inline_316_view$jscomp$inline_319_view$jscomp$inline_321$$ = $out$jscomp$3$$.ipv4_payload_view;
        $view$jscomp$inline_316_view$jscomp$inline_319_view$jscomp$inline_321$$.setUint8(0, $spec$$.icmp.type);
        $view$jscomp$inline_316_view$jscomp$inline_319_view$jscomp$inline_321$$.setUint8(1, $spec$$.icmp.code);
        $view$jscomp$inline_316_view$jscomp$inline_319_view$jscomp$inline_321$$.setUint16(2, 0);
        var $JSCompiler_temp$jscomp$427_JSCompiler_temp$jscomp$428_JSCompiler_temp$jscomp$436_JSCompiler_temp_const$jscomp$432_JSCompiler_temp_const$jscomp$437_flags$jscomp$inline_322_s$jscomp$inline_455_total_length$jscomp$inline_318_total_length$jscomp$inline_325$$ = 4 + $view_set_array$$module$src$browser$fake_network$$(4, $spec$$.icmp.data, $view$jscomp$inline_316_view$jscomp$inline_319_view$jscomp$inline_321$$, $out$jscomp$3$$);
        $view$jscomp$inline_316_view$jscomp$inline_319_view$jscomp$inline_321$$.setUint16(2, $calc_inet_checksum$$module$src$browser$fake_network$$($JSCompiler_temp$jscomp$427_JSCompiler_temp$jscomp$428_JSCompiler_temp$jscomp$436_JSCompiler_temp_const$jscomp$432_JSCompiler_temp_const$jscomp$437_flags$jscomp$inline_322_s$jscomp$inline_455_total_length$jscomp$inline_318_total_length$jscomp$inline_325$$, 0, $view$jscomp$inline_316_view$jscomp$inline_319_view$jscomp$inline_321$$, $out$jscomp$3$$));
        $JSCompiler_temp_const$jscomp$inline_308_JSCompiler_temp_const$jscomp$inline_310_JSCompiler_temp_const$jscomp$inline_313_len$jscomp$inline_307$$ += $JSCompiler_temp$jscomp$427_JSCompiler_temp$jscomp$428_JSCompiler_temp$jscomp$436_JSCompiler_temp_const$jscomp$432_JSCompiler_temp_const$jscomp$437_flags$jscomp$inline_322_s$jscomp$inline_455_total_length$jscomp$inline_318_total_length$jscomp$inline_325$$;
      } else {
        if ($spec$$.udp) {
          $view$jscomp$inline_316_view$jscomp$inline_319_view$jscomp$inline_321$$ = $out$jscomp$3$$.ipv4_payload_view;
          var $offset$jscomp$inline_442_total_length$jscomp$inline_320_view$jscomp$inline_447$$ = 8;
          if ($spec$$.dhcp) {
            $JSCompiler_temp$jscomp$427_JSCompiler_temp$jscomp$428_JSCompiler_temp$jscomp$436_JSCompiler_temp_const$jscomp$432_JSCompiler_temp_const$jscomp$437_flags$jscomp$inline_322_s$jscomp$inline_455_total_length$jscomp$inline_318_total_length$jscomp$inline_325$$ = $offset$jscomp$inline_442_total_length$jscomp$inline_320_view$jscomp$inline_447$$;
            $a$jscomp$inline_449_s$jscomp$inline_452_tcp$jscomp$inline_323_view$jscomp$inline_441_view$jscomp$inline_460$$ = $out$jscomp$3$$.udp_payload_view;
            $a$jscomp$inline_449_s$jscomp$inline_452_tcp$jscomp$inline_323_view$jscomp$inline_441_view$jscomp$inline_460$$.setUint8(0, $spec$$.dhcp.op);
            $a$jscomp$inline_449_s$jscomp$inline_452_tcp$jscomp$inline_323_view$jscomp$inline_441_view$jscomp$inline_460$$.setUint8(1, $spec$$.dhcp.htype);
            $a$jscomp$inline_449_s$jscomp$inline_452_tcp$jscomp$inline_323_view$jscomp$inline_441_view$jscomp$inline_460$$.setUint8(2, $spec$$.dhcp.hlen);
            $a$jscomp$inline_449_s$jscomp$inline_452_tcp$jscomp$inline_323_view$jscomp$inline_441_view$jscomp$inline_460$$.setUint8(3, $spec$$.dhcp.hops);
            $a$jscomp$inline_449_s$jscomp$inline_452_tcp$jscomp$inline_323_view$jscomp$inline_441_view$jscomp$inline_460$$.setUint32(4, $spec$$.dhcp.xid);
            $a$jscomp$inline_449_s$jscomp$inline_452_tcp$jscomp$inline_323_view$jscomp$inline_441_view$jscomp$inline_460$$.setUint16(8, $spec$$.dhcp.secs);
            $a$jscomp$inline_449_s$jscomp$inline_452_tcp$jscomp$inline_323_view$jscomp$inline_441_view$jscomp$inline_460$$.setUint16(10, $spec$$.dhcp.flags);
            $a$jscomp$inline_449_s$jscomp$inline_452_tcp$jscomp$inline_323_view$jscomp$inline_441_view$jscomp$inline_460$$.setUint32(12, $spec$$.dhcp.ciaddr);
            $a$jscomp$inline_449_s$jscomp$inline_452_tcp$jscomp$inline_323_view$jscomp$inline_441_view$jscomp$inline_460$$.setUint32(16, $spec$$.dhcp.yiaddr);
            $a$jscomp$inline_449_s$jscomp$inline_452_tcp$jscomp$inline_323_view$jscomp$inline_441_view$jscomp$inline_460$$.setUint32(20, $spec$$.dhcp.siaddr);
            $a$jscomp$inline_449_s$jscomp$inline_452_tcp$jscomp$inline_323_view$jscomp$inline_441_view$jscomp$inline_460$$.setUint32(24, $spec$$.dhcp.giaddr);
            $view_set_array$$module$src$browser$fake_network$$(28, $spec$$.dhcp.chaddr, $a$jscomp$inline_449_s$jscomp$inline_452_tcp$jscomp$inline_323_view$jscomp$inline_441_view$jscomp$inline_460$$, $out$jscomp$3$$);
            $a$jscomp$inline_449_s$jscomp$inline_452_tcp$jscomp$inline_323_view$jscomp$inline_441_view$jscomp$inline_460$$.setUint32(236, 1669485411);
            $offset$jscomp$inline_442_total_length$jscomp$inline_320_view$jscomp$inline_447$$ = 240;
            for ($JSCompiler_temp_const$jscomp$429_o$jscomp$inline_443$$ of $spec$$.dhcp.options) {
              $offset$jscomp$inline_442_total_length$jscomp$inline_320_view$jscomp$inline_447$$ += $view_set_array$$module$src$browser$fake_network$$($offset$jscomp$inline_442_total_length$jscomp$inline_320_view$jscomp$inline_447$$, $JSCompiler_temp_const$jscomp$429_o$jscomp$inline_443$$, $a$jscomp$inline_449_s$jscomp$inline_452_tcp$jscomp$inline_323_view$jscomp$inline_441_view$jscomp$inline_460$$, $out$jscomp$3$$);
            }
            $JSCompiler_temp$jscomp$427_JSCompiler_temp$jscomp$428_JSCompiler_temp$jscomp$436_JSCompiler_temp_const$jscomp$432_JSCompiler_temp_const$jscomp$437_flags$jscomp$inline_322_s$jscomp$inline_455_total_length$jscomp$inline_318_total_length$jscomp$inline_325$$ += $offset$jscomp$inline_442_total_length$jscomp$inline_320_view$jscomp$inline_447$$;
          } else {
            if ($spec$$.dns) {
              var $JSCompiler_temp_const$jscomp$429_o$jscomp$inline_443$$ = $offset$jscomp$inline_442_total_length$jscomp$inline_320_view$jscomp$inline_447$$;
              $offset$jscomp$inline_442_total_length$jscomp$inline_320_view$jscomp$inline_447$$ = $out$jscomp$3$$.udp_payload_view;
              $offset$jscomp$inline_442_total_length$jscomp$inline_320_view$jscomp$inline_447$$.setUint16(0, $spec$$.dns.id);
              $offset$jscomp$inline_442_total_length$jscomp$inline_320_view$jscomp$inline_447$$.setUint16(2, $spec$$.dns.flags);
              $offset$jscomp$inline_442_total_length$jscomp$inline_320_view$jscomp$inline_447$$.setUint16(4, $spec$$.dns.questions.length);
              $offset$jscomp$inline_442_total_length$jscomp$inline_320_view$jscomp$inline_447$$.setUint16(6, $spec$$.dns.answers.length);
              let $offset$jscomp$inline_448$$ = 12;
              for (var $i$jscomp$inline_450_i$jscomp$inline_454$$ = 0; $i$jscomp$inline_450_i$jscomp$inline_454$$ < $spec$$.dns.questions.length; ++$i$jscomp$inline_450_i$jscomp$inline_454$$) {
                var $n_written$jscomp$inline_456_q$jscomp$inline_451$$ = $spec$$.dns.questions[$i$jscomp$inline_450_i$jscomp$inline_454$$];
                for ($a$jscomp$inline_449_s$jscomp$inline_452_tcp$jscomp$inline_323_view$jscomp$inline_441_view$jscomp$inline_460$$ of $n_written$jscomp$inline_456_q$jscomp$inline_451$$.name) {
                  const $n_written$jscomp$inline_453$$ = $out$jscomp$3$$.text_encoder.encodeInto($a$jscomp$inline_449_s$jscomp$inline_452_tcp$jscomp$inline_323_view$jscomp$inline_441_view$jscomp$inline_460$$, $out$jscomp$3$$.eth_frame.subarray($offset$jscomp$inline_442_total_length$jscomp$inline_320_view$jscomp$inline_447$$.byteOffset + ($offset$jscomp$inline_448$$ + 1))).written;
                  $offset$jscomp$inline_442_total_length$jscomp$inline_320_view$jscomp$inline_447$$.setUint8($offset$jscomp$inline_448$$, $n_written$jscomp$inline_453$$);
                  $offset$jscomp$inline_448$$ += 1 + $n_written$jscomp$inline_453$$;
                }
                $offset$jscomp$inline_442_total_length$jscomp$inline_320_view$jscomp$inline_447$$.setUint16($offset$jscomp$inline_448$$, $n_written$jscomp$inline_456_q$jscomp$inline_451$$.type);
                $offset$jscomp$inline_448$$ += 2;
                $offset$jscomp$inline_442_total_length$jscomp$inline_320_view$jscomp$inline_447$$.setUint16($offset$jscomp$inline_448$$, $n_written$jscomp$inline_456_q$jscomp$inline_451$$.class);
                $offset$jscomp$inline_448$$ += 2;
              }
              for ($i$jscomp$inline_450_i$jscomp$inline_454$$ = 0; $i$jscomp$inline_450_i$jscomp$inline_454$$ < $spec$$.dns.answers.length; ++$i$jscomp$inline_450_i$jscomp$inline_454$$) {
                var $a$jscomp$inline_449_s$jscomp$inline_452_tcp$jscomp$inline_323_view$jscomp$inline_441_view$jscomp$inline_460$$ = $spec$$.dns.answers[$i$jscomp$inline_450_i$jscomp$inline_454$$];
                for ($JSCompiler_temp$jscomp$427_JSCompiler_temp$jscomp$428_JSCompiler_temp$jscomp$436_JSCompiler_temp_const$jscomp$432_JSCompiler_temp_const$jscomp$437_flags$jscomp$inline_322_s$jscomp$inline_455_total_length$jscomp$inline_318_total_length$jscomp$inline_325$$ of $a$jscomp$inline_449_s$jscomp$inline_452_tcp$jscomp$inline_323_view$jscomp$inline_441_view$jscomp$inline_460$$.name) {
                  $n_written$jscomp$inline_456_q$jscomp$inline_451$$ = $out$jscomp$3$$.text_encoder.encodeInto($JSCompiler_temp$jscomp$427_JSCompiler_temp$jscomp$428_JSCompiler_temp$jscomp$436_JSCompiler_temp_const$jscomp$432_JSCompiler_temp_const$jscomp$437_flags$jscomp$inline_322_s$jscomp$inline_455_total_length$jscomp$inline_318_total_length$jscomp$inline_325$$, $out$jscomp$3$$.eth_frame.subarray($offset$jscomp$inline_442_total_length$jscomp$inline_320_view$jscomp$inline_447$$.byteOffset + ($offset$jscomp$inline_448$$ + 
                  1))).written, $offset$jscomp$inline_442_total_length$jscomp$inline_320_view$jscomp$inline_447$$.setUint8($offset$jscomp$inline_448$$, $n_written$jscomp$inline_456_q$jscomp$inline_451$$), $offset$jscomp$inline_448$$ += 1 + $n_written$jscomp$inline_456_q$jscomp$inline_451$$;
                }
                $offset$jscomp$inline_442_total_length$jscomp$inline_320_view$jscomp$inline_447$$.setUint16($offset$jscomp$inline_448$$, $a$jscomp$inline_449_s$jscomp$inline_452_tcp$jscomp$inline_323_view$jscomp$inline_441_view$jscomp$inline_460$$.type);
                $offset$jscomp$inline_448$$ += 2;
                $offset$jscomp$inline_442_total_length$jscomp$inline_320_view$jscomp$inline_447$$.setUint16($offset$jscomp$inline_448$$, $a$jscomp$inline_449_s$jscomp$inline_452_tcp$jscomp$inline_323_view$jscomp$inline_441_view$jscomp$inline_460$$.class);
                $offset$jscomp$inline_448$$ += 2;
                $offset$jscomp$inline_442_total_length$jscomp$inline_320_view$jscomp$inline_447$$.setUint32($offset$jscomp$inline_448$$, $a$jscomp$inline_449_s$jscomp$inline_452_tcp$jscomp$inline_323_view$jscomp$inline_441_view$jscomp$inline_460$$.ttl);
                $offset$jscomp$inline_448$$ += 4;
                $offset$jscomp$inline_442_total_length$jscomp$inline_320_view$jscomp$inline_447$$.setUint16($offset$jscomp$inline_448$$, $a$jscomp$inline_449_s$jscomp$inline_452_tcp$jscomp$inline_323_view$jscomp$inline_441_view$jscomp$inline_460$$.data.length);
                $offset$jscomp$inline_448$$ += 2;
                $offset$jscomp$inline_448$$ += $view_set_array$$module$src$browser$fake_network$$($offset$jscomp$inline_448$$, $a$jscomp$inline_449_s$jscomp$inline_452_tcp$jscomp$inline_323_view$jscomp$inline_441_view$jscomp$inline_460$$.data, $offset$jscomp$inline_442_total_length$jscomp$inline_320_view$jscomp$inline_447$$, $out$jscomp$3$$);
              }
              $JSCompiler_temp$jscomp$427_JSCompiler_temp$jscomp$428_JSCompiler_temp$jscomp$436_JSCompiler_temp_const$jscomp$432_JSCompiler_temp_const$jscomp$437_flags$jscomp$inline_322_s$jscomp$inline_455_total_length$jscomp$inline_318_total_length$jscomp$inline_325$$ = $JSCompiler_temp_const$jscomp$429_o$jscomp$inline_443$$ + $offset$jscomp$inline_448$$;
            } else {
              $spec$$.ntp ? ($JSCompiler_temp$jscomp$427_JSCompiler_temp$jscomp$428_JSCompiler_temp$jscomp$436_JSCompiler_temp_const$jscomp$432_JSCompiler_temp_const$jscomp$437_flags$jscomp$inline_322_s$jscomp$inline_455_total_length$jscomp$inline_318_total_length$jscomp$inline_325$$ = $offset$jscomp$inline_442_total_length$jscomp$inline_320_view$jscomp$inline_447$$, $a$jscomp$inline_449_s$jscomp$inline_452_tcp$jscomp$inline_323_view$jscomp$inline_441_view$jscomp$inline_460$$ = $out$jscomp$3$$.udp_payload_view, 
              $a$jscomp$inline_449_s$jscomp$inline_452_tcp$jscomp$inline_323_view$jscomp$inline_441_view$jscomp$inline_460$$.setUint8(0, $spec$$.ntp.flags), $a$jscomp$inline_449_s$jscomp$inline_452_tcp$jscomp$inline_323_view$jscomp$inline_441_view$jscomp$inline_460$$.setUint8(1, $spec$$.ntp.stratum), $a$jscomp$inline_449_s$jscomp$inline_452_tcp$jscomp$inline_323_view$jscomp$inline_441_view$jscomp$inline_460$$.setUint8(2, $spec$$.ntp.poll), $a$jscomp$inline_449_s$jscomp$inline_452_tcp$jscomp$inline_323_view$jscomp$inline_441_view$jscomp$inline_460$$.setUint8(3, 
              $spec$$.ntp.precision), $a$jscomp$inline_449_s$jscomp$inline_452_tcp$jscomp$inline_323_view$jscomp$inline_441_view$jscomp$inline_460$$.setUint32(4, $spec$$.ntp.root_delay), $a$jscomp$inline_449_s$jscomp$inline_452_tcp$jscomp$inline_323_view$jscomp$inline_441_view$jscomp$inline_460$$.setUint32(8, $spec$$.ntp.root_disp), $a$jscomp$inline_449_s$jscomp$inline_452_tcp$jscomp$inline_323_view$jscomp$inline_441_view$jscomp$inline_460$$.setUint32(12, $spec$$.ntp.ref_id), $a$jscomp$inline_449_s$jscomp$inline_452_tcp$jscomp$inline_323_view$jscomp$inline_441_view$jscomp$inline_460$$.setUint32(16, 
              $spec$$.ntp.ref_ts_i), $a$jscomp$inline_449_s$jscomp$inline_452_tcp$jscomp$inline_323_view$jscomp$inline_441_view$jscomp$inline_460$$.setUint32(20, $spec$$.ntp.ref_ts_f), $a$jscomp$inline_449_s$jscomp$inline_452_tcp$jscomp$inline_323_view$jscomp$inline_441_view$jscomp$inline_460$$.setUint32(24, $spec$$.ntp.ori_ts_i), $a$jscomp$inline_449_s$jscomp$inline_452_tcp$jscomp$inline_323_view$jscomp$inline_441_view$jscomp$inline_460$$.setUint32(28, $spec$$.ntp.ori_ts_f), $a$jscomp$inline_449_s$jscomp$inline_452_tcp$jscomp$inline_323_view$jscomp$inline_441_view$jscomp$inline_460$$.setUint32(32, 
              $spec$$.ntp.rec_ts_i), $a$jscomp$inline_449_s$jscomp$inline_452_tcp$jscomp$inline_323_view$jscomp$inline_441_view$jscomp$inline_460$$.setUint32(36, $spec$$.ntp.rec_ts_f), $a$jscomp$inline_449_s$jscomp$inline_452_tcp$jscomp$inline_323_view$jscomp$inline_441_view$jscomp$inline_460$$.setUint32(40, $spec$$.ntp.trans_ts_i), $a$jscomp$inline_449_s$jscomp$inline_452_tcp$jscomp$inline_323_view$jscomp$inline_441_view$jscomp$inline_460$$.setUint32(44, $spec$$.ntp.trans_ts_f), $JSCompiler_temp$jscomp$427_JSCompiler_temp$jscomp$428_JSCompiler_temp$jscomp$436_JSCompiler_temp_const$jscomp$432_JSCompiler_temp_const$jscomp$437_flags$jscomp$inline_322_s$jscomp$inline_455_total_length$jscomp$inline_318_total_length$jscomp$inline_325$$ += 
              48) : $JSCompiler_temp$jscomp$427_JSCompiler_temp$jscomp$428_JSCompiler_temp$jscomp$436_JSCompiler_temp_const$jscomp$432_JSCompiler_temp_const$jscomp$437_flags$jscomp$inline_322_s$jscomp$inline_455_total_length$jscomp$inline_318_total_length$jscomp$inline_325$$ = $offset$jscomp$inline_442_total_length$jscomp$inline_320_view$jscomp$inline_447$$ + $view_set_array$$module$src$browser$fake_network$$(0, $spec$$.udp.data, $out$jscomp$3$$.udp_payload_view, $out$jscomp$3$$);
            }
          }
          $offset$jscomp$inline_442_total_length$jscomp$inline_320_view$jscomp$inline_447$$ = $JSCompiler_temp$jscomp$427_JSCompiler_temp$jscomp$428_JSCompiler_temp$jscomp$436_JSCompiler_temp_const$jscomp$432_JSCompiler_temp_const$jscomp$437_flags$jscomp$inline_322_s$jscomp$inline_455_total_length$jscomp$inline_318_total_length$jscomp$inline_325$$;
          $view$jscomp$inline_316_view$jscomp$inline_319_view$jscomp$inline_321$$.setUint16(0, $spec$$.udp.sport);
          $view$jscomp$inline_316_view$jscomp$inline_319_view$jscomp$inline_321$$.setUint16(2, $spec$$.udp.dport);
          $view$jscomp$inline_316_view$jscomp$inline_319_view$jscomp$inline_321$$.setUint16(4, $offset$jscomp$inline_442_total_length$jscomp$inline_320_view$jscomp$inline_447$$);
          $view$jscomp$inline_316_view$jscomp$inline_319_view$jscomp$inline_321$$.setUint16(6, 0);
          $view$jscomp$inline_316_view$jscomp$inline_319_view$jscomp$inline_321$$.setUint16(6, $calc_inet_checksum$$module$src$browser$fake_network$$($offset$jscomp$inline_442_total_length$jscomp$inline_320_view$jscomp$inline_447$$, ($spec$$.ipv4.src[0] << 8 | $spec$$.ipv4.src[1]) + ($spec$$.ipv4.src[2] << 8 | $spec$$.ipv4.src[3]) + ($spec$$.ipv4.dest[0] << 8 | $spec$$.ipv4.dest[1]) + ($spec$$.ipv4.dest[2] << 8 | $spec$$.ipv4.dest[3]) + 17 + $offset$jscomp$inline_442_total_length$jscomp$inline_320_view$jscomp$inline_447$$, 
          $view$jscomp$inline_316_view$jscomp$inline_319_view$jscomp$inline_321$$, $out$jscomp$3$$));
          $JSCompiler_temp_const$jscomp$inline_308_JSCompiler_temp_const$jscomp$inline_310_JSCompiler_temp_const$jscomp$inline_313_len$jscomp$inline_307$$ += $offset$jscomp$inline_442_total_length$jscomp$inline_320_view$jscomp$inline_447$$;
        } else {
          $spec$$.tcp && ($view$jscomp$inline_316_view$jscomp$inline_319_view$jscomp$inline_321$$ = $out$jscomp$3$$.ipv4_payload_view, $JSCompiler_temp$jscomp$427_JSCompiler_temp$jscomp$428_JSCompiler_temp$jscomp$436_JSCompiler_temp_const$jscomp$432_JSCompiler_temp_const$jscomp$437_flags$jscomp$inline_322_s$jscomp$inline_455_total_length$jscomp$inline_318_total_length$jscomp$inline_325$$ = 0, $a$jscomp$inline_449_s$jscomp$inline_452_tcp$jscomp$inline_323_view$jscomp$inline_441_view$jscomp$inline_460$$ = 
          $spec$$.tcp, $a$jscomp$inline_449_s$jscomp$inline_452_tcp$jscomp$inline_323_view$jscomp$inline_441_view$jscomp$inline_460$$.fin && ($JSCompiler_temp$jscomp$427_JSCompiler_temp$jscomp$428_JSCompiler_temp$jscomp$436_JSCompiler_temp_const$jscomp$432_JSCompiler_temp_const$jscomp$437_flags$jscomp$inline_322_s$jscomp$inline_455_total_length$jscomp$inline_318_total_length$jscomp$inline_325$$ |= 1), $a$jscomp$inline_449_s$jscomp$inline_452_tcp$jscomp$inline_323_view$jscomp$inline_441_view$jscomp$inline_460$$.syn && 
          ($JSCompiler_temp$jscomp$427_JSCompiler_temp$jscomp$428_JSCompiler_temp$jscomp$436_JSCompiler_temp_const$jscomp$432_JSCompiler_temp_const$jscomp$437_flags$jscomp$inline_322_s$jscomp$inline_455_total_length$jscomp$inline_318_total_length$jscomp$inline_325$$ |= 2), $a$jscomp$inline_449_s$jscomp$inline_452_tcp$jscomp$inline_323_view$jscomp$inline_441_view$jscomp$inline_460$$.rst && ($JSCompiler_temp$jscomp$427_JSCompiler_temp$jscomp$428_JSCompiler_temp$jscomp$436_JSCompiler_temp_const$jscomp$432_JSCompiler_temp_const$jscomp$437_flags$jscomp$inline_322_s$jscomp$inline_455_total_length$jscomp$inline_318_total_length$jscomp$inline_325$$ |= 
          4), $a$jscomp$inline_449_s$jscomp$inline_452_tcp$jscomp$inline_323_view$jscomp$inline_441_view$jscomp$inline_460$$.psh && ($JSCompiler_temp$jscomp$427_JSCompiler_temp$jscomp$428_JSCompiler_temp$jscomp$436_JSCompiler_temp_const$jscomp$432_JSCompiler_temp_const$jscomp$437_flags$jscomp$inline_322_s$jscomp$inline_455_total_length$jscomp$inline_318_total_length$jscomp$inline_325$$ |= 8), $a$jscomp$inline_449_s$jscomp$inline_452_tcp$jscomp$inline_323_view$jscomp$inline_441_view$jscomp$inline_460$$.ack && 
          ($JSCompiler_temp$jscomp$427_JSCompiler_temp$jscomp$428_JSCompiler_temp$jscomp$436_JSCompiler_temp_const$jscomp$432_JSCompiler_temp_const$jscomp$437_flags$jscomp$inline_322_s$jscomp$inline_455_total_length$jscomp$inline_318_total_length$jscomp$inline_325$$ |= 16), $a$jscomp$inline_449_s$jscomp$inline_452_tcp$jscomp$inline_323_view$jscomp$inline_441_view$jscomp$inline_460$$.urg && ($JSCompiler_temp$jscomp$427_JSCompiler_temp$jscomp$428_JSCompiler_temp$jscomp$436_JSCompiler_temp_const$jscomp$432_JSCompiler_temp_const$jscomp$437_flags$jscomp$inline_322_s$jscomp$inline_455_total_length$jscomp$inline_318_total_length$jscomp$inline_325$$ |= 
          32), $a$jscomp$inline_449_s$jscomp$inline_452_tcp$jscomp$inline_323_view$jscomp$inline_441_view$jscomp$inline_460$$.ece && ($JSCompiler_temp$jscomp$427_JSCompiler_temp$jscomp$428_JSCompiler_temp$jscomp$436_JSCompiler_temp_const$jscomp$432_JSCompiler_temp_const$jscomp$437_flags$jscomp$inline_322_s$jscomp$inline_455_total_length$jscomp$inline_318_total_length$jscomp$inline_325$$ |= 64), $a$jscomp$inline_449_s$jscomp$inline_452_tcp$jscomp$inline_323_view$jscomp$inline_441_view$jscomp$inline_460$$.cwr && 
          ($JSCompiler_temp$jscomp$427_JSCompiler_temp$jscomp$428_JSCompiler_temp$jscomp$436_JSCompiler_temp_const$jscomp$432_JSCompiler_temp_const$jscomp$437_flags$jscomp$inline_322_s$jscomp$inline_455_total_length$jscomp$inline_318_total_length$jscomp$inline_325$$ |= 128), $view$jscomp$inline_316_view$jscomp$inline_319_view$jscomp$inline_321$$.setUint16(0, $a$jscomp$inline_449_s$jscomp$inline_452_tcp$jscomp$inline_323_view$jscomp$inline_441_view$jscomp$inline_460$$.sport), $view$jscomp$inline_316_view$jscomp$inline_319_view$jscomp$inline_321$$.setUint16(2, 
          $a$jscomp$inline_449_s$jscomp$inline_452_tcp$jscomp$inline_323_view$jscomp$inline_441_view$jscomp$inline_460$$.dport), $view$jscomp$inline_316_view$jscomp$inline_319_view$jscomp$inline_321$$.setUint32(4, $a$jscomp$inline_449_s$jscomp$inline_452_tcp$jscomp$inline_323_view$jscomp$inline_441_view$jscomp$inline_460$$.seq), $view$jscomp$inline_316_view$jscomp$inline_319_view$jscomp$inline_321$$.setUint32(8, $a$jscomp$inline_449_s$jscomp$inline_452_tcp$jscomp$inline_323_view$jscomp$inline_441_view$jscomp$inline_460$$.ackn), 
          $view$jscomp$inline_316_view$jscomp$inline_319_view$jscomp$inline_321$$.setUint8(12, 80), $view$jscomp$inline_316_view$jscomp$inline_319_view$jscomp$inline_321$$.setUint8(13, $JSCompiler_temp$jscomp$427_JSCompiler_temp$jscomp$428_JSCompiler_temp$jscomp$436_JSCompiler_temp_const$jscomp$432_JSCompiler_temp_const$jscomp$437_flags$jscomp$inline_322_s$jscomp$inline_455_total_length$jscomp$inline_318_total_length$jscomp$inline_325$$), $view$jscomp$inline_316_view$jscomp$inline_319_view$jscomp$inline_321$$.setUint16(14, 
          $a$jscomp$inline_449_s$jscomp$inline_452_tcp$jscomp$inline_323_view$jscomp$inline_441_view$jscomp$inline_460$$.winsize), $view$jscomp$inline_316_view$jscomp$inline_319_view$jscomp$inline_321$$.setUint16(16, 0), $view$jscomp$inline_316_view$jscomp$inline_319_view$jscomp$inline_321$$.setUint16(18, $a$jscomp$inline_449_s$jscomp$inline_452_tcp$jscomp$inline_323_view$jscomp$inline_441_view$jscomp$inline_460$$.urgent || 0), $JSCompiler_temp$jscomp$427_JSCompiler_temp$jscomp$428_JSCompiler_temp$jscomp$436_JSCompiler_temp_const$jscomp$432_JSCompiler_temp_const$jscomp$437_flags$jscomp$inline_322_s$jscomp$inline_455_total_length$jscomp$inline_318_total_length$jscomp$inline_325$$ = 
          20, $spec$$.tcp_data && ($JSCompiler_temp$jscomp$427_JSCompiler_temp$jscomp$428_JSCompiler_temp$jscomp$436_JSCompiler_temp_const$jscomp$432_JSCompiler_temp_const$jscomp$437_flags$jscomp$inline_322_s$jscomp$inline_455_total_length$jscomp$inline_318_total_length$jscomp$inline_325$$ += $view_set_array$$module$src$browser$fake_network$$(20, $spec$$.tcp_data, $view$jscomp$inline_316_view$jscomp$inline_319_view$jscomp$inline_321$$, $out$jscomp$3$$)), $view$jscomp$inline_316_view$jscomp$inline_319_view$jscomp$inline_321$$.setUint16(16, 
          $calc_inet_checksum$$module$src$browser$fake_network$$($JSCompiler_temp$jscomp$427_JSCompiler_temp$jscomp$428_JSCompiler_temp$jscomp$436_JSCompiler_temp_const$jscomp$432_JSCompiler_temp_const$jscomp$437_flags$jscomp$inline_322_s$jscomp$inline_455_total_length$jscomp$inline_318_total_length$jscomp$inline_325$$, ($spec$$.ipv4.src[0] << 8 | $spec$$.ipv4.src[1]) + ($spec$$.ipv4.src[2] << 8 | $spec$$.ipv4.src[3]) + ($spec$$.ipv4.dest[0] << 8 | $spec$$.ipv4.dest[1]) + ($spec$$.ipv4.dest[2] << 
          8 | $spec$$.ipv4.dest[3]) + 6 + $JSCompiler_temp$jscomp$427_JSCompiler_temp$jscomp$428_JSCompiler_temp$jscomp$436_JSCompiler_temp_const$jscomp$432_JSCompiler_temp_const$jscomp$437_flags$jscomp$inline_322_s$jscomp$inline_455_total_length$jscomp$inline_318_total_length$jscomp$inline_325$$, $view$jscomp$inline_316_view$jscomp$inline_319_view$jscomp$inline_321$$, $out$jscomp$3$$)), $JSCompiler_temp_const$jscomp$inline_308_JSCompiler_temp_const$jscomp$inline_310_JSCompiler_temp_const$jscomp$inline_313_len$jscomp$inline_307$$ += 
          $JSCompiler_temp$jscomp$427_JSCompiler_temp$jscomp$428_JSCompiler_temp$jscomp$436_JSCompiler_temp_const$jscomp$432_JSCompiler_temp_const$jscomp$437_flags$jscomp$inline_322_s$jscomp$inline_455_total_length$jscomp$inline_318_total_length$jscomp$inline_325$$);
        }
      }
      $view$jscomp$inline_301_view$jscomp$inline_305$$.setUint8(0, 69);
      $view$jscomp$inline_301_view$jscomp$inline_305$$.setUint8(1, $spec$$.ipv4.tos || 0);
      $view$jscomp$inline_301_view$jscomp$inline_305$$.setUint16(2, $JSCompiler_temp_const$jscomp$inline_308_JSCompiler_temp_const$jscomp$inline_310_JSCompiler_temp_const$jscomp$inline_313_len$jscomp$inline_307$$);
      $view$jscomp$inline_301_view$jscomp$inline_305$$.setUint16(4, $spec$$.ipv4.id || 0);
      $view$jscomp$inline_301_view$jscomp$inline_305$$.setUint8(6, 64);
      $view$jscomp$inline_301_view$jscomp$inline_305$$.setUint8(8, $spec$$.ipv4.ttl || 32);
      $view$jscomp$inline_301_view$jscomp$inline_305$$.setUint8(9, $spec$$.ipv4.proto);
      $view$jscomp$inline_301_view$jscomp$inline_305$$.setUint16(10, 0);
      $view_set_array$$module$src$browser$fake_network$$(12, $spec$$.ipv4.src, $view$jscomp$inline_301_view$jscomp$inline_305$$, $out$jscomp$3$$);
      $view_set_array$$module$src$browser$fake_network$$(16, $spec$$.ipv4.dest, $view$jscomp$inline_301_view$jscomp$inline_305$$, $out$jscomp$3$$);
      $view$jscomp$inline_301_view$jscomp$inline_305$$.setUint16(10, $calc_inet_checksum$$module$src$browser$fake_network$$(20, 0, $view$jscomp$inline_301_view$jscomp$inline_305$$, $out$jscomp$3$$));
      $JSCompiler_temp_const$jscomp$279_JSCompiler_temp_const$jscomp$282_len$jscomp$inline_71_view$jscomp$inline_70$$ += $JSCompiler_temp_const$jscomp$inline_308_JSCompiler_temp_const$jscomp$inline_310_JSCompiler_temp_const$jscomp$inline_313_len$jscomp$inline_307$$;
    }
  }
  return $JSCompiler_temp_const$jscomp$4$$.call($JSCompiler_temp_const$jscomp$5$$, 0, $JSCompiler_temp_const$jscomp$279_JSCompiler_temp_const$jscomp$282_len$jscomp$inline_71_view$jscomp$inline_70$$);
}
function $handle_fake_dns_doh$$module$src$browser$fake_network$$($packet$jscomp$2$$, $adapter$jscomp$2$$) {
  fetch(`https://${$adapter$jscomp$2$$.doh_server || "cloudflare-dns.com"}/dns-query`, {method:"POST", headers:[["content-type", "application/dns-message"]], body:$packet$jscomp$2$$.udp.data}).then(async $reply$jscomp$2_resp$$ => {
    $reply$jscomp$2_resp$$ = {eth:{ethertype:2048, src:$adapter$jscomp$2$$.router_mac, dest:$packet$jscomp$2$$.eth.src}, ipv4:{proto:17, src:$adapter$jscomp$2$$.router_ip, dest:$packet$jscomp$2$$.ipv4.src}, udp:{sport:53, dport:$packet$jscomp$2$$.udp.sport, data:new Uint8Array(await $reply$jscomp$2_resp$$.arrayBuffer())}};
    $adapter$jscomp$2$$.receive($make_packet$$module$src$browser$fake_network$$($adapter$jscomp$2$$.eth_encoder_buf, $reply$jscomp$2_resp$$));
  });
  return !0;
}
function $handle_fake_dhcp$$module$src$browser$fake_network$$($packet$jscomp$5_router_ip$$, $adapter$jscomp$5$$) {
  let $reply$jscomp$4$$ = {};
  $reply$jscomp$4$$.eth = {ethertype:2048, src:$adapter$jscomp$5$$.router_mac, dest:$packet$jscomp$5_router_ip$$.eth.src};
  $reply$jscomp$4$$.ipv4 = {proto:17, src:$adapter$jscomp$5$$.router_ip, dest:$adapter$jscomp$5$$.vm_ip, };
  $reply$jscomp$4$$.udp = {sport:67, dport:68, };
  $reply$jscomp$4$$.dhcp = {htype:1, hlen:6, hops:0, xid:$packet$jscomp$5_router_ip$$.dhcp.xid, secs:0, flags:0, ciaddr:0, yiaddr:$iptolong$$module$src$browser$fake_network$$($adapter$jscomp$5$$.vm_ip), siaddr:$iptolong$$module$src$browser$fake_network$$($adapter$jscomp$5$$.router_ip), giaddr:$iptolong$$module$src$browser$fake_network$$($adapter$jscomp$5$$.router_ip), chaddr:$packet$jscomp$5_router_ip$$.dhcp.chaddr, };
  let $options$jscomp$37$$ = [], $fix$$ = $packet$jscomp$5_router_ip$$.dhcp.options.find(function($x$jscomp$103$$) {
    return 53 === $x$jscomp$103$$[0];
  });
  $fix$$ && 3 === $fix$$[2] && ($packet$jscomp$5_router_ip$$.dhcp.op = 3);
  1 === $packet$jscomp$5_router_ip$$.dhcp.op && ($reply$jscomp$4$$.dhcp.op = 2, $options$jscomp$37$$.push(new Uint8Array([53, 1, 2])));
  3 === $packet$jscomp$5_router_ip$$.dhcp.op && ($reply$jscomp$4$$.dhcp.op = 2, $options$jscomp$37$$.push(new Uint8Array([53, 1, 5])), $options$jscomp$37$$.push(new Uint8Array([51, 4, 8, 0, 0, 0])));
  $packet$jscomp$5_router_ip$$ = [$adapter$jscomp$5$$.router_ip[0], $adapter$jscomp$5$$.router_ip[1], $adapter$jscomp$5$$.router_ip[2], $adapter$jscomp$5$$.router_ip[3]];
  $options$jscomp$37$$.push(new Uint8Array([1, 4, 255, 255, 255, 0]));
  $adapter$jscomp$5$$.masquerade && ($options$jscomp$37$$.push(new Uint8Array([3, 4].concat($packet$jscomp$5_router_ip$$))), $options$jscomp$37$$.push(new Uint8Array([6, 4].concat($packet$jscomp$5_router_ip$$))));
  $options$jscomp$37$$.push(new Uint8Array([54, 4].concat($packet$jscomp$5_router_ip$$)));
  $options$jscomp$37$$.push(new Uint8Array([60, 3].concat($V86_ASCII$$module$src$browser$fake_network$$)));
  $options$jscomp$37$$.push(new Uint8Array([255, 0]));
  $reply$jscomp$4$$.dhcp.options = $options$jscomp$37$$;
  $adapter$jscomp$5$$.receive($make_packet$$module$src$browser$fake_network$$($adapter$jscomp$5$$.eth_encoder_buf, $reply$jscomp$4$$));
}
function $handle_fake_networking$$module$src$browser$fake_network$$($arp$jscomp$inline_350_bop$jscomp$inline_83_data$jscomp$118_icmp$jscomp$inline_340_now_n$jscomp$inline_92_packet_subnet$jscomp$inline_107_payload$jscomp$inline_78_reply$jscomp$inline_103_reply$jscomp$inline_109_reply$jscomp$inline_354_reply$jscomp$inline_99_tcp$jscomp$inline_342_tuple$jscomp$inline_82_udp$jscomp$inline_345_view$jscomp$inline_339_view$jscomp$inline_344$$, $adapter$jscomp$6$$) {
  let $packet$jscomp$6$$ = {};
  var $answers$jscomp$inline_355_data$jscomp$inline_471_dhcp$jscomp$inline_465_ethertype$jscomp$inline_76_flags$jscomp$inline_343_now_n_f$jscomp$inline_93_proto$jscomp$inline_335_reply$jscomp$inline_84_router_subnet$jscomp$inline_108_view$jscomp$inline_341_view$jscomp$inline_349_view$jscomp$inline_464_view$jscomp$inline_473$$ = (new DataView($arp$jscomp$inline_350_bop$jscomp$inline_83_data$jscomp$118_icmp$jscomp$inline_340_now_n$jscomp$inline_92_packet_subnet$jscomp$inline_107_payload$jscomp$inline_78_reply$jscomp$inline_103_reply$jscomp$inline_109_reply$jscomp$inline_354_reply$jscomp$inline_99_tcp$jscomp$inline_342_tuple$jscomp$inline_82_udp$jscomp$inline_345_view$jscomp$inline_339_view$jscomp$inline_344$$.buffer, 
  $arp$jscomp$inline_350_bop$jscomp$inline_83_data$jscomp$118_icmp$jscomp$inline_340_now_n$jscomp$inline_92_packet_subnet$jscomp$inline_107_payload$jscomp$inline_78_reply$jscomp$inline_103_reply$jscomp$inline_109_reply$jscomp$inline_354_reply$jscomp$inline_99_tcp$jscomp$inline_342_tuple$jscomp$inline_82_udp$jscomp$inline_345_view$jscomp$inline_339_view$jscomp$inline_344$$.byteOffset, $arp$jscomp$inline_350_bop$jscomp$inline_83_data$jscomp$118_icmp$jscomp$inline_340_now_n$jscomp$inline_92_packet_subnet$jscomp$inline_107_payload$jscomp$inline_78_reply$jscomp$inline_103_reply$jscomp$inline_109_reply$jscomp$inline_354_reply$jscomp$inline_99_tcp$jscomp$inline_342_tuple$jscomp$inline_82_udp$jscomp$inline_345_view$jscomp$inline_339_view$jscomp$inline_344$$.byteLength)).getUint16(12), 
  $data$jscomp$inline_462_eth$jscomp$inline_77_i$jscomp$inline_357_ihl$jscomp$inline_331_ipdata$jscomp$inline_338_options$jscomp$inline_466_reply$jscomp$inline_94$$ = {ethertype:$answers$jscomp$inline_355_data$jscomp$inline_471_dhcp$jscomp$inline_465_ethertype$jscomp$inline_76_flags$jscomp$inline_343_now_n_f$jscomp$inline_93_proto$jscomp$inline_335_reply$jscomp$inline_84_router_subnet$jscomp$inline_108_view$jscomp$inline_341_view$jscomp$inline_349_view$jscomp$inline_464_view$jscomp$inline_473$$, 
  dest:$arp$jscomp$inline_350_bop$jscomp$inline_83_data$jscomp$118_icmp$jscomp$inline_340_now_n$jscomp$inline_92_packet_subnet$jscomp$inline_107_payload$jscomp$inline_78_reply$jscomp$inline_103_reply$jscomp$inline_109_reply$jscomp$inline_354_reply$jscomp$inline_99_tcp$jscomp$inline_342_tuple$jscomp$inline_82_udp$jscomp$inline_345_view$jscomp$inline_339_view$jscomp$inline_344$$.subarray(0, 6), dest_s:$a2ethaddr$$module$src$browser$fake_network$$($arp$jscomp$inline_350_bop$jscomp$inline_83_data$jscomp$118_icmp$jscomp$inline_340_now_n$jscomp$inline_92_packet_subnet$jscomp$inline_107_payload$jscomp$inline_78_reply$jscomp$inline_103_reply$jscomp$inline_109_reply$jscomp$inline_354_reply$jscomp$inline_99_tcp$jscomp$inline_342_tuple$jscomp$inline_82_udp$jscomp$inline_345_view$jscomp$inline_339_view$jscomp$inline_344$$.subarray(0, 
  6)), src:$arp$jscomp$inline_350_bop$jscomp$inline_83_data$jscomp$118_icmp$jscomp$inline_340_now_n$jscomp$inline_92_packet_subnet$jscomp$inline_107_payload$jscomp$inline_78_reply$jscomp$inline_103_reply$jscomp$inline_109_reply$jscomp$inline_354_reply$jscomp$inline_99_tcp$jscomp$inline_342_tuple$jscomp$inline_82_udp$jscomp$inline_345_view$jscomp$inline_339_view$jscomp$inline_344$$.subarray(6, 12), src_s:$a2ethaddr$$module$src$browser$fake_network$$($arp$jscomp$inline_350_bop$jscomp$inline_83_data$jscomp$118_icmp$jscomp$inline_340_now_n$jscomp$inline_92_packet_subnet$jscomp$inline_107_payload$jscomp$inline_78_reply$jscomp$inline_103_reply$jscomp$inline_109_reply$jscomp$inline_354_reply$jscomp$inline_99_tcp$jscomp$inline_342_tuple$jscomp$inline_82_udp$jscomp$inline_345_view$jscomp$inline_339_view$jscomp$inline_344$$.subarray(6, 
  12)), };
  $packet$jscomp$6$$.eth = $data$jscomp$inline_462_eth$jscomp$inline_77_i$jscomp$inline_357_ihl$jscomp$inline_331_ipdata$jscomp$inline_338_options$jscomp$inline_466_reply$jscomp$inline_94$$;
  $arp$jscomp$inline_350_bop$jscomp$inline_83_data$jscomp$118_icmp$jscomp$inline_340_now_n$jscomp$inline_92_packet_subnet$jscomp$inline_107_payload$jscomp$inline_78_reply$jscomp$inline_103_reply$jscomp$inline_109_reply$jscomp$inline_354_reply$jscomp$inline_99_tcp$jscomp$inline_342_tuple$jscomp$inline_82_udp$jscomp$inline_345_view$jscomp$inline_339_view$jscomp$inline_344$$ = $arp$jscomp$inline_350_bop$jscomp$inline_83_data$jscomp$118_icmp$jscomp$inline_340_now_n$jscomp$inline_92_packet_subnet$jscomp$inline_107_payload$jscomp$inline_78_reply$jscomp$inline_103_reply$jscomp$inline_109_reply$jscomp$inline_354_reply$jscomp$inline_99_tcp$jscomp$inline_342_tuple$jscomp$inline_82_udp$jscomp$inline_345_view$jscomp$inline_339_view$jscomp$inline_344$$.subarray(14, 
  $arp$jscomp$inline_350_bop$jscomp$inline_83_data$jscomp$118_icmp$jscomp$inline_340_now_n$jscomp$inline_92_packet_subnet$jscomp$inline_107_payload$jscomp$inline_78_reply$jscomp$inline_103_reply$jscomp$inline_109_reply$jscomp$inline_354_reply$jscomp$inline_99_tcp$jscomp$inline_342_tuple$jscomp$inline_82_udp$jscomp$inline_345_view$jscomp$inline_339_view$jscomp$inline_344$$.length);
  if (2048 === $answers$jscomp$inline_355_data$jscomp$inline_471_dhcp$jscomp$inline_465_ethertype$jscomp$inline_76_flags$jscomp$inline_343_now_n_f$jscomp$inline_93_proto$jscomp$inline_335_reply$jscomp$inline_84_router_subnet$jscomp$inline_108_view$jscomp$inline_341_view$jscomp$inline_349_view$jscomp$inline_464_view$jscomp$inline_473$$) {
    var $ip_checksum$jscomp$inline_336_view$jscomp$inline_329$$ = new DataView($arp$jscomp$inline_350_bop$jscomp$inline_83_data$jscomp$118_icmp$jscomp$inline_340_now_n$jscomp$inline_92_packet_subnet$jscomp$inline_107_payload$jscomp$inline_78_reply$jscomp$inline_103_reply$jscomp$inline_109_reply$jscomp$inline_354_reply$jscomp$inline_99_tcp$jscomp$inline_342_tuple$jscomp$inline_82_udp$jscomp$inline_345_view$jscomp$inline_339_view$jscomp$inline_344$$.buffer, $arp$jscomp$inline_350_bop$jscomp$inline_83_data$jscomp$118_icmp$jscomp$inline_340_now_n$jscomp$inline_92_packet_subnet$jscomp$inline_107_payload$jscomp$inline_78_reply$jscomp$inline_103_reply$jscomp$inline_109_reply$jscomp$inline_354_reply$jscomp$inline_99_tcp$jscomp$inline_342_tuple$jscomp$inline_82_udp$jscomp$inline_345_view$jscomp$inline_339_view$jscomp$inline_344$$.byteOffset, 
    $arp$jscomp$inline_350_bop$jscomp$inline_83_data$jscomp$118_icmp$jscomp$inline_340_now_n$jscomp$inline_92_packet_subnet$jscomp$inline_107_payload$jscomp$inline_78_reply$jscomp$inline_103_reply$jscomp$inline_109_reply$jscomp$inline_354_reply$jscomp$inline_99_tcp$jscomp$inline_342_tuple$jscomp$inline_82_udp$jscomp$inline_345_view$jscomp$inline_339_view$jscomp$inline_344$$.byteLength), $ipv4$jscomp$inline_337_start$jscomp$inline_468_version$jscomp$inline_330$$ = $arp$jscomp$inline_350_bop$jscomp$inline_83_data$jscomp$118_icmp$jscomp$inline_340_now_n$jscomp$inline_92_packet_subnet$jscomp$inline_107_payload$jscomp$inline_78_reply$jscomp$inline_103_reply$jscomp$inline_109_reply$jscomp$inline_354_reply$jscomp$inline_99_tcp$jscomp$inline_342_tuple$jscomp$inline_82_udp$jscomp$inline_345_view$jscomp$inline_339_view$jscomp$inline_344$$[0] >> 
    4 & 15;
    $data$jscomp$inline_462_eth$jscomp$inline_77_i$jscomp$inline_357_ihl$jscomp$inline_331_ipdata$jscomp$inline_338_options$jscomp$inline_466_reply$jscomp$inline_94$$ = $arp$jscomp$inline_350_bop$jscomp$inline_83_data$jscomp$118_icmp$jscomp$inline_340_now_n$jscomp$inline_92_packet_subnet$jscomp$inline_107_payload$jscomp$inline_78_reply$jscomp$inline_103_reply$jscomp$inline_109_reply$jscomp$inline_354_reply$jscomp$inline_99_tcp$jscomp$inline_342_tuple$jscomp$inline_82_udp$jscomp$inline_345_view$jscomp$inline_339_view$jscomp$inline_344$$[0] & 
    15;
    var $len$jscomp$inline_469_tos$jscomp$inline_332$$ = $ip_checksum$jscomp$inline_336_view$jscomp$inline_329$$.getUint8(1), $i$jscomp$inline_467_len$jscomp$inline_333_q$jscomp$inline_358$$ = $ip_checksum$jscomp$inline_336_view$jscomp$inline_329$$.getUint16(2);
    let $ttl$jscomp$inline_334$$ = $ip_checksum$jscomp$inline_336_view$jscomp$inline_329$$.getUint8(8);
    $answers$jscomp$inline_355_data$jscomp$inline_471_dhcp$jscomp$inline_465_ethertype$jscomp$inline_76_flags$jscomp$inline_343_now_n_f$jscomp$inline_93_proto$jscomp$inline_335_reply$jscomp$inline_84_router_subnet$jscomp$inline_108_view$jscomp$inline_341_view$jscomp$inline_349_view$jscomp$inline_464_view$jscomp$inline_473$$ = $ip_checksum$jscomp$inline_336_view$jscomp$inline_329$$.getUint8(9);
    $ip_checksum$jscomp$inline_336_view$jscomp$inline_329$$ = $ip_checksum$jscomp$inline_336_view$jscomp$inline_329$$.getUint16(10);
    $ipv4$jscomp$inline_337_start$jscomp$inline_468_version$jscomp$inline_330$$ = {version:$ipv4$jscomp$inline_337_start$jscomp$inline_468_version$jscomp$inline_330$$, ihl:$data$jscomp$inline_462_eth$jscomp$inline_77_i$jscomp$inline_357_ihl$jscomp$inline_331_ipdata$jscomp$inline_338_options$jscomp$inline_466_reply$jscomp$inline_94$$, tos:$len$jscomp$inline_469_tos$jscomp$inline_332$$, len:$i$jscomp$inline_467_len$jscomp$inline_333_q$jscomp$inline_358$$, ttl:$ttl$jscomp$inline_334$$, proto:$answers$jscomp$inline_355_data$jscomp$inline_471_dhcp$jscomp$inline_465_ethertype$jscomp$inline_76_flags$jscomp$inline_343_now_n_f$jscomp$inline_93_proto$jscomp$inline_335_reply$jscomp$inline_84_router_subnet$jscomp$inline_108_view$jscomp$inline_341_view$jscomp$inline_349_view$jscomp$inline_464_view$jscomp$inline_473$$, 
    ip_checksum:$ip_checksum$jscomp$inline_336_view$jscomp$inline_329$$, src:$arp$jscomp$inline_350_bop$jscomp$inline_83_data$jscomp$118_icmp$jscomp$inline_340_now_n$jscomp$inline_92_packet_subnet$jscomp$inline_107_payload$jscomp$inline_78_reply$jscomp$inline_103_reply$jscomp$inline_109_reply$jscomp$inline_354_reply$jscomp$inline_99_tcp$jscomp$inline_342_tuple$jscomp$inline_82_udp$jscomp$inline_345_view$jscomp$inline_339_view$jscomp$inline_344$$.subarray(12, 16), dest:$arp$jscomp$inline_350_bop$jscomp$inline_83_data$jscomp$118_icmp$jscomp$inline_340_now_n$jscomp$inline_92_packet_subnet$jscomp$inline_107_payload$jscomp$inline_78_reply$jscomp$inline_103_reply$jscomp$inline_109_reply$jscomp$inline_354_reply$jscomp$inline_99_tcp$jscomp$inline_342_tuple$jscomp$inline_82_udp$jscomp$inline_345_view$jscomp$inline_339_view$jscomp$inline_344$$.subarray(16, 
    20), };
    Math.max($i$jscomp$inline_467_len$jscomp$inline_333_q$jscomp$inline_358$$, 46) !== $arp$jscomp$inline_350_bop$jscomp$inline_83_data$jscomp$118_icmp$jscomp$inline_340_now_n$jscomp$inline_92_packet_subnet$jscomp$inline_107_payload$jscomp$inline_78_reply$jscomp$inline_103_reply$jscomp$inline_109_reply$jscomp$inline_354_reply$jscomp$inline_99_tcp$jscomp$inline_342_tuple$jscomp$inline_82_udp$jscomp$inline_345_view$jscomp$inline_339_view$jscomp$inline_344$$.length && $dbg_log$$module$src$log$$(`ipv4 Length mismatch: ${$i$jscomp$inline_467_len$jscomp$inline_333_q$jscomp$inline_358$$} != ${$arp$jscomp$inline_350_bop$jscomp$inline_83_data$jscomp$118_icmp$jscomp$inline_340_now_n$jscomp$inline_92_packet_subnet$jscomp$inline_107_payload$jscomp$inline_78_reply$jscomp$inline_103_reply$jscomp$inline_109_reply$jscomp$inline_354_reply$jscomp$inline_99_tcp$jscomp$inline_342_tuple$jscomp$inline_82_udp$jscomp$inline_345_view$jscomp$inline_339_view$jscomp$inline_344$$.length}`, 
    16777216);
    $packet$jscomp$6$$.ipv4 = $ipv4$jscomp$inline_337_start$jscomp$inline_468_version$jscomp$inline_330$$;
    $data$jscomp$inline_462_eth$jscomp$inline_77_i$jscomp$inline_357_ihl$jscomp$inline_331_ipdata$jscomp$inline_338_options$jscomp$inline_466_reply$jscomp$inline_94$$ = $arp$jscomp$inline_350_bop$jscomp$inline_83_data$jscomp$118_icmp$jscomp$inline_340_now_n$jscomp$inline_92_packet_subnet$jscomp$inline_107_payload$jscomp$inline_78_reply$jscomp$inline_103_reply$jscomp$inline_109_reply$jscomp$inline_354_reply$jscomp$inline_99_tcp$jscomp$inline_342_tuple$jscomp$inline_82_udp$jscomp$inline_345_view$jscomp$inline_339_view$jscomp$inline_344$$.subarray(4 * 
    $data$jscomp$inline_462_eth$jscomp$inline_77_i$jscomp$inline_357_ihl$jscomp$inline_331_ipdata$jscomp$inline_338_options$jscomp$inline_466_reply$jscomp$inline_94$$, $i$jscomp$inline_467_len$jscomp$inline_333_q$jscomp$inline_358$$);
    if (1 === $answers$jscomp$inline_355_data$jscomp$inline_471_dhcp$jscomp$inline_465_ethertype$jscomp$inline_76_flags$jscomp$inline_343_now_n_f$jscomp$inline_93_proto$jscomp$inline_335_reply$jscomp$inline_84_router_subnet$jscomp$inline_108_view$jscomp$inline_341_view$jscomp$inline_349_view$jscomp$inline_464_view$jscomp$inline_473$$) {
      $arp$jscomp$inline_350_bop$jscomp$inline_83_data$jscomp$118_icmp$jscomp$inline_340_now_n$jscomp$inline_92_packet_subnet$jscomp$inline_107_payload$jscomp$inline_78_reply$jscomp$inline_103_reply$jscomp$inline_109_reply$jscomp$inline_354_reply$jscomp$inline_99_tcp$jscomp$inline_342_tuple$jscomp$inline_82_udp$jscomp$inline_345_view$jscomp$inline_339_view$jscomp$inline_344$$ = new DataView($data$jscomp$inline_462_eth$jscomp$inline_77_i$jscomp$inline_357_ihl$jscomp$inline_331_ipdata$jscomp$inline_338_options$jscomp$inline_466_reply$jscomp$inline_94$$.buffer, 
      $data$jscomp$inline_462_eth$jscomp$inline_77_i$jscomp$inline_357_ihl$jscomp$inline_331_ipdata$jscomp$inline_338_options$jscomp$inline_466_reply$jscomp$inline_94$$.byteOffset, $data$jscomp$inline_462_eth$jscomp$inline_77_i$jscomp$inline_357_ihl$jscomp$inline_331_ipdata$jscomp$inline_338_options$jscomp$inline_466_reply$jscomp$inline_94$$.byteLength), $arp$jscomp$inline_350_bop$jscomp$inline_83_data$jscomp$118_icmp$jscomp$inline_340_now_n$jscomp$inline_92_packet_subnet$jscomp$inline_107_payload$jscomp$inline_78_reply$jscomp$inline_103_reply$jscomp$inline_109_reply$jscomp$inline_354_reply$jscomp$inline_99_tcp$jscomp$inline_342_tuple$jscomp$inline_82_udp$jscomp$inline_345_view$jscomp$inline_339_view$jscomp$inline_344$$ = 
      {type:$arp$jscomp$inline_350_bop$jscomp$inline_83_data$jscomp$118_icmp$jscomp$inline_340_now_n$jscomp$inline_92_packet_subnet$jscomp$inline_107_payload$jscomp$inline_78_reply$jscomp$inline_103_reply$jscomp$inline_109_reply$jscomp$inline_354_reply$jscomp$inline_99_tcp$jscomp$inline_342_tuple$jscomp$inline_82_udp$jscomp$inline_345_view$jscomp$inline_339_view$jscomp$inline_344$$.getUint8(0), code:$arp$jscomp$inline_350_bop$jscomp$inline_83_data$jscomp$118_icmp$jscomp$inline_340_now_n$jscomp$inline_92_packet_subnet$jscomp$inline_107_payload$jscomp$inline_78_reply$jscomp$inline_103_reply$jscomp$inline_109_reply$jscomp$inline_354_reply$jscomp$inline_99_tcp$jscomp$inline_342_tuple$jscomp$inline_82_udp$jscomp$inline_345_view$jscomp$inline_339_view$jscomp$inline_344$$.getUint8(1), 
      checksum:$arp$jscomp$inline_350_bop$jscomp$inline_83_data$jscomp$118_icmp$jscomp$inline_340_now_n$jscomp$inline_92_packet_subnet$jscomp$inline_107_payload$jscomp$inline_78_reply$jscomp$inline_103_reply$jscomp$inline_109_reply$jscomp$inline_354_reply$jscomp$inline_99_tcp$jscomp$inline_342_tuple$jscomp$inline_82_udp$jscomp$inline_345_view$jscomp$inline_339_view$jscomp$inline_344$$.getUint16(2), data:$data$jscomp$inline_462_eth$jscomp$inline_77_i$jscomp$inline_357_ihl$jscomp$inline_331_ipdata$jscomp$inline_338_options$jscomp$inline_466_reply$jscomp$inline_94$$.subarray(4)}, 
      $packet$jscomp$6$$.icmp = $arp$jscomp$inline_350_bop$jscomp$inline_83_data$jscomp$118_icmp$jscomp$inline_340_now_n$jscomp$inline_92_packet_subnet$jscomp$inline_107_payload$jscomp$inline_78_reply$jscomp$inline_103_reply$jscomp$inline_109_reply$jscomp$inline_354_reply$jscomp$inline_99_tcp$jscomp$inline_342_tuple$jscomp$inline_82_udp$jscomp$inline_345_view$jscomp$inline_339_view$jscomp$inline_344$$;
    } else {
      if (6 === $answers$jscomp$inline_355_data$jscomp$inline_471_dhcp$jscomp$inline_465_ethertype$jscomp$inline_76_flags$jscomp$inline_343_now_n_f$jscomp$inline_93_proto$jscomp$inline_335_reply$jscomp$inline_84_router_subnet$jscomp$inline_108_view$jscomp$inline_341_view$jscomp$inline_349_view$jscomp$inline_464_view$jscomp$inline_473$$) {
        $answers$jscomp$inline_355_data$jscomp$inline_471_dhcp$jscomp$inline_465_ethertype$jscomp$inline_76_flags$jscomp$inline_343_now_n_f$jscomp$inline_93_proto$jscomp$inline_335_reply$jscomp$inline_84_router_subnet$jscomp$inline_108_view$jscomp$inline_341_view$jscomp$inline_349_view$jscomp$inline_464_view$jscomp$inline_473$$ = new DataView($data$jscomp$inline_462_eth$jscomp$inline_77_i$jscomp$inline_357_ihl$jscomp$inline_331_ipdata$jscomp$inline_338_options$jscomp$inline_466_reply$jscomp$inline_94$$.buffer, 
        $data$jscomp$inline_462_eth$jscomp$inline_77_i$jscomp$inline_357_ihl$jscomp$inline_331_ipdata$jscomp$inline_338_options$jscomp$inline_466_reply$jscomp$inline_94$$.byteOffset, $data$jscomp$inline_462_eth$jscomp$inline_77_i$jscomp$inline_357_ihl$jscomp$inline_331_ipdata$jscomp$inline_338_options$jscomp$inline_466_reply$jscomp$inline_94$$.byteLength), $arp$jscomp$inline_350_bop$jscomp$inline_83_data$jscomp$118_icmp$jscomp$inline_340_now_n$jscomp$inline_92_packet_subnet$jscomp$inline_107_payload$jscomp$inline_78_reply$jscomp$inline_103_reply$jscomp$inline_109_reply$jscomp$inline_354_reply$jscomp$inline_99_tcp$jscomp$inline_342_tuple$jscomp$inline_82_udp$jscomp$inline_345_view$jscomp$inline_339_view$jscomp$inline_344$$ = 
        {sport:$answers$jscomp$inline_355_data$jscomp$inline_471_dhcp$jscomp$inline_465_ethertype$jscomp$inline_76_flags$jscomp$inline_343_now_n_f$jscomp$inline_93_proto$jscomp$inline_335_reply$jscomp$inline_84_router_subnet$jscomp$inline_108_view$jscomp$inline_341_view$jscomp$inline_349_view$jscomp$inline_464_view$jscomp$inline_473$$.getUint16(0), dport:$answers$jscomp$inline_355_data$jscomp$inline_471_dhcp$jscomp$inline_465_ethertype$jscomp$inline_76_flags$jscomp$inline_343_now_n_f$jscomp$inline_93_proto$jscomp$inline_335_reply$jscomp$inline_84_router_subnet$jscomp$inline_108_view$jscomp$inline_341_view$jscomp$inline_349_view$jscomp$inline_464_view$jscomp$inline_473$$.getUint16(2), 
        seq:$answers$jscomp$inline_355_data$jscomp$inline_471_dhcp$jscomp$inline_465_ethertype$jscomp$inline_76_flags$jscomp$inline_343_now_n_f$jscomp$inline_93_proto$jscomp$inline_335_reply$jscomp$inline_84_router_subnet$jscomp$inline_108_view$jscomp$inline_341_view$jscomp$inline_349_view$jscomp$inline_464_view$jscomp$inline_473$$.getUint32(4), ackn:$answers$jscomp$inline_355_data$jscomp$inline_471_dhcp$jscomp$inline_465_ethertype$jscomp$inline_76_flags$jscomp$inline_343_now_n_f$jscomp$inline_93_proto$jscomp$inline_335_reply$jscomp$inline_84_router_subnet$jscomp$inline_108_view$jscomp$inline_341_view$jscomp$inline_349_view$jscomp$inline_464_view$jscomp$inline_473$$.getUint32(8), 
        doff:$answers$jscomp$inline_355_data$jscomp$inline_471_dhcp$jscomp$inline_465_ethertype$jscomp$inline_76_flags$jscomp$inline_343_now_n_f$jscomp$inline_93_proto$jscomp$inline_335_reply$jscomp$inline_84_router_subnet$jscomp$inline_108_view$jscomp$inline_341_view$jscomp$inline_349_view$jscomp$inline_464_view$jscomp$inline_473$$.getUint8(12) >> 4, winsize:$answers$jscomp$inline_355_data$jscomp$inline_471_dhcp$jscomp$inline_465_ethertype$jscomp$inline_76_flags$jscomp$inline_343_now_n_f$jscomp$inline_93_proto$jscomp$inline_335_reply$jscomp$inline_84_router_subnet$jscomp$inline_108_view$jscomp$inline_341_view$jscomp$inline_349_view$jscomp$inline_464_view$jscomp$inline_473$$.getUint16(14), 
        checksum:$answers$jscomp$inline_355_data$jscomp$inline_471_dhcp$jscomp$inline_465_ethertype$jscomp$inline_76_flags$jscomp$inline_343_now_n_f$jscomp$inline_93_proto$jscomp$inline_335_reply$jscomp$inline_84_router_subnet$jscomp$inline_108_view$jscomp$inline_341_view$jscomp$inline_349_view$jscomp$inline_464_view$jscomp$inline_473$$.getUint16(16), urgent:$answers$jscomp$inline_355_data$jscomp$inline_471_dhcp$jscomp$inline_465_ethertype$jscomp$inline_76_flags$jscomp$inline_343_now_n_f$jscomp$inline_93_proto$jscomp$inline_335_reply$jscomp$inline_84_router_subnet$jscomp$inline_108_view$jscomp$inline_341_view$jscomp$inline_349_view$jscomp$inline_464_view$jscomp$inline_473$$.getUint16(18), 
        }, $answers$jscomp$inline_355_data$jscomp$inline_471_dhcp$jscomp$inline_465_ethertype$jscomp$inline_76_flags$jscomp$inline_343_now_n_f$jscomp$inline_93_proto$jscomp$inline_335_reply$jscomp$inline_84_router_subnet$jscomp$inline_108_view$jscomp$inline_341_view$jscomp$inline_349_view$jscomp$inline_464_view$jscomp$inline_473$$ = $answers$jscomp$inline_355_data$jscomp$inline_471_dhcp$jscomp$inline_465_ethertype$jscomp$inline_76_flags$jscomp$inline_343_now_n_f$jscomp$inline_93_proto$jscomp$inline_335_reply$jscomp$inline_84_router_subnet$jscomp$inline_108_view$jscomp$inline_341_view$jscomp$inline_349_view$jscomp$inline_464_view$jscomp$inline_473$$.getUint8(13), 
        $arp$jscomp$inline_350_bop$jscomp$inline_83_data$jscomp$118_icmp$jscomp$inline_340_now_n$jscomp$inline_92_packet_subnet$jscomp$inline_107_payload$jscomp$inline_78_reply$jscomp$inline_103_reply$jscomp$inline_109_reply$jscomp$inline_354_reply$jscomp$inline_99_tcp$jscomp$inline_342_tuple$jscomp$inline_82_udp$jscomp$inline_345_view$jscomp$inline_339_view$jscomp$inline_344$$.fin = !!($answers$jscomp$inline_355_data$jscomp$inline_471_dhcp$jscomp$inline_465_ethertype$jscomp$inline_76_flags$jscomp$inline_343_now_n_f$jscomp$inline_93_proto$jscomp$inline_335_reply$jscomp$inline_84_router_subnet$jscomp$inline_108_view$jscomp$inline_341_view$jscomp$inline_349_view$jscomp$inline_464_view$jscomp$inline_473$$ & 
        1), $arp$jscomp$inline_350_bop$jscomp$inline_83_data$jscomp$118_icmp$jscomp$inline_340_now_n$jscomp$inline_92_packet_subnet$jscomp$inline_107_payload$jscomp$inline_78_reply$jscomp$inline_103_reply$jscomp$inline_109_reply$jscomp$inline_354_reply$jscomp$inline_99_tcp$jscomp$inline_342_tuple$jscomp$inline_82_udp$jscomp$inline_345_view$jscomp$inline_339_view$jscomp$inline_344$$.syn = !!($answers$jscomp$inline_355_data$jscomp$inline_471_dhcp$jscomp$inline_465_ethertype$jscomp$inline_76_flags$jscomp$inline_343_now_n_f$jscomp$inline_93_proto$jscomp$inline_335_reply$jscomp$inline_84_router_subnet$jscomp$inline_108_view$jscomp$inline_341_view$jscomp$inline_349_view$jscomp$inline_464_view$jscomp$inline_473$$ & 
        2), $arp$jscomp$inline_350_bop$jscomp$inline_83_data$jscomp$118_icmp$jscomp$inline_340_now_n$jscomp$inline_92_packet_subnet$jscomp$inline_107_payload$jscomp$inline_78_reply$jscomp$inline_103_reply$jscomp$inline_109_reply$jscomp$inline_354_reply$jscomp$inline_99_tcp$jscomp$inline_342_tuple$jscomp$inline_82_udp$jscomp$inline_345_view$jscomp$inline_339_view$jscomp$inline_344$$.rst = !!($answers$jscomp$inline_355_data$jscomp$inline_471_dhcp$jscomp$inline_465_ethertype$jscomp$inline_76_flags$jscomp$inline_343_now_n_f$jscomp$inline_93_proto$jscomp$inline_335_reply$jscomp$inline_84_router_subnet$jscomp$inline_108_view$jscomp$inline_341_view$jscomp$inline_349_view$jscomp$inline_464_view$jscomp$inline_473$$ & 
        4), $arp$jscomp$inline_350_bop$jscomp$inline_83_data$jscomp$118_icmp$jscomp$inline_340_now_n$jscomp$inline_92_packet_subnet$jscomp$inline_107_payload$jscomp$inline_78_reply$jscomp$inline_103_reply$jscomp$inline_109_reply$jscomp$inline_354_reply$jscomp$inline_99_tcp$jscomp$inline_342_tuple$jscomp$inline_82_udp$jscomp$inline_345_view$jscomp$inline_339_view$jscomp$inline_344$$.psh = !!($answers$jscomp$inline_355_data$jscomp$inline_471_dhcp$jscomp$inline_465_ethertype$jscomp$inline_76_flags$jscomp$inline_343_now_n_f$jscomp$inline_93_proto$jscomp$inline_335_reply$jscomp$inline_84_router_subnet$jscomp$inline_108_view$jscomp$inline_341_view$jscomp$inline_349_view$jscomp$inline_464_view$jscomp$inline_473$$ & 
        8), $arp$jscomp$inline_350_bop$jscomp$inline_83_data$jscomp$118_icmp$jscomp$inline_340_now_n$jscomp$inline_92_packet_subnet$jscomp$inline_107_payload$jscomp$inline_78_reply$jscomp$inline_103_reply$jscomp$inline_109_reply$jscomp$inline_354_reply$jscomp$inline_99_tcp$jscomp$inline_342_tuple$jscomp$inline_82_udp$jscomp$inline_345_view$jscomp$inline_339_view$jscomp$inline_344$$.ack = !!($answers$jscomp$inline_355_data$jscomp$inline_471_dhcp$jscomp$inline_465_ethertype$jscomp$inline_76_flags$jscomp$inline_343_now_n_f$jscomp$inline_93_proto$jscomp$inline_335_reply$jscomp$inline_84_router_subnet$jscomp$inline_108_view$jscomp$inline_341_view$jscomp$inline_349_view$jscomp$inline_464_view$jscomp$inline_473$$ & 
        16), $arp$jscomp$inline_350_bop$jscomp$inline_83_data$jscomp$118_icmp$jscomp$inline_340_now_n$jscomp$inline_92_packet_subnet$jscomp$inline_107_payload$jscomp$inline_78_reply$jscomp$inline_103_reply$jscomp$inline_109_reply$jscomp$inline_354_reply$jscomp$inline_99_tcp$jscomp$inline_342_tuple$jscomp$inline_82_udp$jscomp$inline_345_view$jscomp$inline_339_view$jscomp$inline_344$$.urg = !!($answers$jscomp$inline_355_data$jscomp$inline_471_dhcp$jscomp$inline_465_ethertype$jscomp$inline_76_flags$jscomp$inline_343_now_n_f$jscomp$inline_93_proto$jscomp$inline_335_reply$jscomp$inline_84_router_subnet$jscomp$inline_108_view$jscomp$inline_341_view$jscomp$inline_349_view$jscomp$inline_464_view$jscomp$inline_473$$ & 
        32), $arp$jscomp$inline_350_bop$jscomp$inline_83_data$jscomp$118_icmp$jscomp$inline_340_now_n$jscomp$inline_92_packet_subnet$jscomp$inline_107_payload$jscomp$inline_78_reply$jscomp$inline_103_reply$jscomp$inline_109_reply$jscomp$inline_354_reply$jscomp$inline_99_tcp$jscomp$inline_342_tuple$jscomp$inline_82_udp$jscomp$inline_345_view$jscomp$inline_339_view$jscomp$inline_344$$.ece = !!($answers$jscomp$inline_355_data$jscomp$inline_471_dhcp$jscomp$inline_465_ethertype$jscomp$inline_76_flags$jscomp$inline_343_now_n_f$jscomp$inline_93_proto$jscomp$inline_335_reply$jscomp$inline_84_router_subnet$jscomp$inline_108_view$jscomp$inline_341_view$jscomp$inline_349_view$jscomp$inline_464_view$jscomp$inline_473$$ & 
        64), $arp$jscomp$inline_350_bop$jscomp$inline_83_data$jscomp$118_icmp$jscomp$inline_340_now_n$jscomp$inline_92_packet_subnet$jscomp$inline_107_payload$jscomp$inline_78_reply$jscomp$inline_103_reply$jscomp$inline_109_reply$jscomp$inline_354_reply$jscomp$inline_99_tcp$jscomp$inline_342_tuple$jscomp$inline_82_udp$jscomp$inline_345_view$jscomp$inline_339_view$jscomp$inline_344$$.cwr = !!($answers$jscomp$inline_355_data$jscomp$inline_471_dhcp$jscomp$inline_465_ethertype$jscomp$inline_76_flags$jscomp$inline_343_now_n_f$jscomp$inline_93_proto$jscomp$inline_335_reply$jscomp$inline_84_router_subnet$jscomp$inline_108_view$jscomp$inline_341_view$jscomp$inline_349_view$jscomp$inline_464_view$jscomp$inline_473$$ & 
        128), $packet$jscomp$6$$.tcp = $arp$jscomp$inline_350_bop$jscomp$inline_83_data$jscomp$118_icmp$jscomp$inline_340_now_n$jscomp$inline_92_packet_subnet$jscomp$inline_107_payload$jscomp$inline_78_reply$jscomp$inline_103_reply$jscomp$inline_109_reply$jscomp$inline_354_reply$jscomp$inline_99_tcp$jscomp$inline_342_tuple$jscomp$inline_82_udp$jscomp$inline_345_view$jscomp$inline_339_view$jscomp$inline_344$$, $packet$jscomp$6$$.tcp_data = $data$jscomp$inline_462_eth$jscomp$inline_77_i$jscomp$inline_357_ihl$jscomp$inline_331_ipdata$jscomp$inline_338_options$jscomp$inline_466_reply$jscomp$inline_94$$.subarray(4 * 
        $arp$jscomp$inline_350_bop$jscomp$inline_83_data$jscomp$118_icmp$jscomp$inline_340_now_n$jscomp$inline_92_packet_subnet$jscomp$inline_107_payload$jscomp$inline_78_reply$jscomp$inline_103_reply$jscomp$inline_109_reply$jscomp$inline_354_reply$jscomp$inline_99_tcp$jscomp$inline_342_tuple$jscomp$inline_82_udp$jscomp$inline_345_view$jscomp$inline_339_view$jscomp$inline_344$$.doff);
      } else {
        if (17 === $answers$jscomp$inline_355_data$jscomp$inline_471_dhcp$jscomp$inline_465_ethertype$jscomp$inline_76_flags$jscomp$inline_343_now_n_f$jscomp$inline_93_proto$jscomp$inline_335_reply$jscomp$inline_84_router_subnet$jscomp$inline_108_view$jscomp$inline_341_view$jscomp$inline_349_view$jscomp$inline_464_view$jscomp$inline_473$$) {
          $arp$jscomp$inline_350_bop$jscomp$inline_83_data$jscomp$118_icmp$jscomp$inline_340_now_n$jscomp$inline_92_packet_subnet$jscomp$inline_107_payload$jscomp$inline_78_reply$jscomp$inline_103_reply$jscomp$inline_109_reply$jscomp$inline_354_reply$jscomp$inline_99_tcp$jscomp$inline_342_tuple$jscomp$inline_82_udp$jscomp$inline_345_view$jscomp$inline_339_view$jscomp$inline_344$$ = new DataView($data$jscomp$inline_462_eth$jscomp$inline_77_i$jscomp$inline_357_ihl$jscomp$inline_331_ipdata$jscomp$inline_338_options$jscomp$inline_466_reply$jscomp$inline_94$$.buffer, 
          $data$jscomp$inline_462_eth$jscomp$inline_77_i$jscomp$inline_357_ihl$jscomp$inline_331_ipdata$jscomp$inline_338_options$jscomp$inline_466_reply$jscomp$inline_94$$.byteOffset, $data$jscomp$inline_462_eth$jscomp$inline_77_i$jscomp$inline_357_ihl$jscomp$inline_331_ipdata$jscomp$inline_338_options$jscomp$inline_466_reply$jscomp$inline_94$$.byteLength);
          $arp$jscomp$inline_350_bop$jscomp$inline_83_data$jscomp$118_icmp$jscomp$inline_340_now_n$jscomp$inline_92_packet_subnet$jscomp$inline_107_payload$jscomp$inline_78_reply$jscomp$inline_103_reply$jscomp$inline_109_reply$jscomp$inline_354_reply$jscomp$inline_99_tcp$jscomp$inline_342_tuple$jscomp$inline_82_udp$jscomp$inline_345_view$jscomp$inline_339_view$jscomp$inline_344$$ = {sport:$arp$jscomp$inline_350_bop$jscomp$inline_83_data$jscomp$118_icmp$jscomp$inline_340_now_n$jscomp$inline_92_packet_subnet$jscomp$inline_107_payload$jscomp$inline_78_reply$jscomp$inline_103_reply$jscomp$inline_109_reply$jscomp$inline_354_reply$jscomp$inline_99_tcp$jscomp$inline_342_tuple$jscomp$inline_82_udp$jscomp$inline_345_view$jscomp$inline_339_view$jscomp$inline_344$$.getUint16(0), 
          dport:$arp$jscomp$inline_350_bop$jscomp$inline_83_data$jscomp$118_icmp$jscomp$inline_340_now_n$jscomp$inline_92_packet_subnet$jscomp$inline_107_payload$jscomp$inline_78_reply$jscomp$inline_103_reply$jscomp$inline_109_reply$jscomp$inline_354_reply$jscomp$inline_99_tcp$jscomp$inline_342_tuple$jscomp$inline_82_udp$jscomp$inline_345_view$jscomp$inline_339_view$jscomp$inline_344$$.getUint16(2), len:$arp$jscomp$inline_350_bop$jscomp$inline_83_data$jscomp$118_icmp$jscomp$inline_340_now_n$jscomp$inline_92_packet_subnet$jscomp$inline_107_payload$jscomp$inline_78_reply$jscomp$inline_103_reply$jscomp$inline_109_reply$jscomp$inline_354_reply$jscomp$inline_99_tcp$jscomp$inline_342_tuple$jscomp$inline_82_udp$jscomp$inline_345_view$jscomp$inline_339_view$jscomp$inline_344$$.getUint16(4), 
          checksum:$arp$jscomp$inline_350_bop$jscomp$inline_83_data$jscomp$118_icmp$jscomp$inline_340_now_n$jscomp$inline_92_packet_subnet$jscomp$inline_107_payload$jscomp$inline_78_reply$jscomp$inline_103_reply$jscomp$inline_109_reply$jscomp$inline_354_reply$jscomp$inline_99_tcp$jscomp$inline_342_tuple$jscomp$inline_82_udp$jscomp$inline_345_view$jscomp$inline_339_view$jscomp$inline_344$$.getUint16(6), data:$data$jscomp$inline_462_eth$jscomp$inline_77_i$jscomp$inline_357_ihl$jscomp$inline_331_ipdata$jscomp$inline_338_options$jscomp$inline_466_reply$jscomp$inline_94$$.subarray(8), 
          data_s:(new TextDecoder).decode($data$jscomp$inline_462_eth$jscomp$inline_77_i$jscomp$inline_357_ihl$jscomp$inline_331_ipdata$jscomp$inline_338_options$jscomp$inline_466_reply$jscomp$inline_94$$.subarray(8))};
          if (67 === $arp$jscomp$inline_350_bop$jscomp$inline_83_data$jscomp$118_icmp$jscomp$inline_340_now_n$jscomp$inline_92_packet_subnet$jscomp$inline_107_payload$jscomp$inline_78_reply$jscomp$inline_103_reply$jscomp$inline_109_reply$jscomp$inline_354_reply$jscomp$inline_99_tcp$jscomp$inline_342_tuple$jscomp$inline_82_udp$jscomp$inline_345_view$jscomp$inline_339_view$jscomp$inline_344$$.dport || 67 === $arp$jscomp$inline_350_bop$jscomp$inline_83_data$jscomp$118_icmp$jscomp$inline_340_now_n$jscomp$inline_92_packet_subnet$jscomp$inline_107_payload$jscomp$inline_78_reply$jscomp$inline_103_reply$jscomp$inline_109_reply$jscomp$inline_354_reply$jscomp$inline_99_tcp$jscomp$inline_342_tuple$jscomp$inline_82_udp$jscomp$inline_345_view$jscomp$inline_339_view$jscomp$inline_344$$.sport) {
            $data$jscomp$inline_462_eth$jscomp$inline_77_i$jscomp$inline_357_ihl$jscomp$inline_331_ipdata$jscomp$inline_338_options$jscomp$inline_466_reply$jscomp$inline_94$$ = $data$jscomp$inline_462_eth$jscomp$inline_77_i$jscomp$inline_357_ihl$jscomp$inline_331_ipdata$jscomp$inline_338_options$jscomp$inline_466_reply$jscomp$inline_94$$.subarray(8);
            $answers$jscomp$inline_355_data$jscomp$inline_471_dhcp$jscomp$inline_465_ethertype$jscomp$inline_76_flags$jscomp$inline_343_now_n_f$jscomp$inline_93_proto$jscomp$inline_335_reply$jscomp$inline_84_router_subnet$jscomp$inline_108_view$jscomp$inline_341_view$jscomp$inline_349_view$jscomp$inline_464_view$jscomp$inline_473$$ = new DataView($data$jscomp$inline_462_eth$jscomp$inline_77_i$jscomp$inline_357_ihl$jscomp$inline_331_ipdata$jscomp$inline_338_options$jscomp$inline_466_reply$jscomp$inline_94$$.buffer, 
            $data$jscomp$inline_462_eth$jscomp$inline_77_i$jscomp$inline_357_ihl$jscomp$inline_331_ipdata$jscomp$inline_338_options$jscomp$inline_466_reply$jscomp$inline_94$$.byteOffset, $data$jscomp$inline_462_eth$jscomp$inline_77_i$jscomp$inline_357_ihl$jscomp$inline_331_ipdata$jscomp$inline_338_options$jscomp$inline_466_reply$jscomp$inline_94$$.byteLength);
            $data$jscomp$inline_462_eth$jscomp$inline_77_i$jscomp$inline_357_ihl$jscomp$inline_331_ipdata$jscomp$inline_338_options$jscomp$inline_466_reply$jscomp$inline_94$$.subarray(44, 236);
            $answers$jscomp$inline_355_data$jscomp$inline_471_dhcp$jscomp$inline_465_ethertype$jscomp$inline_76_flags$jscomp$inline_343_now_n_f$jscomp$inline_93_proto$jscomp$inline_335_reply$jscomp$inline_84_router_subnet$jscomp$inline_108_view$jscomp$inline_341_view$jscomp$inline_349_view$jscomp$inline_464_view$jscomp$inline_473$$ = {op:$answers$jscomp$inline_355_data$jscomp$inline_471_dhcp$jscomp$inline_465_ethertype$jscomp$inline_76_flags$jscomp$inline_343_now_n_f$jscomp$inline_93_proto$jscomp$inline_335_reply$jscomp$inline_84_router_subnet$jscomp$inline_108_view$jscomp$inline_341_view$jscomp$inline_349_view$jscomp$inline_464_view$jscomp$inline_473$$.getUint8(0), 
            htype:$answers$jscomp$inline_355_data$jscomp$inline_471_dhcp$jscomp$inline_465_ethertype$jscomp$inline_76_flags$jscomp$inline_343_now_n_f$jscomp$inline_93_proto$jscomp$inline_335_reply$jscomp$inline_84_router_subnet$jscomp$inline_108_view$jscomp$inline_341_view$jscomp$inline_349_view$jscomp$inline_464_view$jscomp$inline_473$$.getUint8(1), hlen:$answers$jscomp$inline_355_data$jscomp$inline_471_dhcp$jscomp$inline_465_ethertype$jscomp$inline_76_flags$jscomp$inline_343_now_n_f$jscomp$inline_93_proto$jscomp$inline_335_reply$jscomp$inline_84_router_subnet$jscomp$inline_108_view$jscomp$inline_341_view$jscomp$inline_349_view$jscomp$inline_464_view$jscomp$inline_473$$.getUint8(2), 
            hops:$answers$jscomp$inline_355_data$jscomp$inline_471_dhcp$jscomp$inline_465_ethertype$jscomp$inline_76_flags$jscomp$inline_343_now_n_f$jscomp$inline_93_proto$jscomp$inline_335_reply$jscomp$inline_84_router_subnet$jscomp$inline_108_view$jscomp$inline_341_view$jscomp$inline_349_view$jscomp$inline_464_view$jscomp$inline_473$$.getUint8(3), xid:$answers$jscomp$inline_355_data$jscomp$inline_471_dhcp$jscomp$inline_465_ethertype$jscomp$inline_76_flags$jscomp$inline_343_now_n_f$jscomp$inline_93_proto$jscomp$inline_335_reply$jscomp$inline_84_router_subnet$jscomp$inline_108_view$jscomp$inline_341_view$jscomp$inline_349_view$jscomp$inline_464_view$jscomp$inline_473$$.getUint32(4), 
            secs:$answers$jscomp$inline_355_data$jscomp$inline_471_dhcp$jscomp$inline_465_ethertype$jscomp$inline_76_flags$jscomp$inline_343_now_n_f$jscomp$inline_93_proto$jscomp$inline_335_reply$jscomp$inline_84_router_subnet$jscomp$inline_108_view$jscomp$inline_341_view$jscomp$inline_349_view$jscomp$inline_464_view$jscomp$inline_473$$.getUint16(8), flags:$answers$jscomp$inline_355_data$jscomp$inline_471_dhcp$jscomp$inline_465_ethertype$jscomp$inline_76_flags$jscomp$inline_343_now_n_f$jscomp$inline_93_proto$jscomp$inline_335_reply$jscomp$inline_84_router_subnet$jscomp$inline_108_view$jscomp$inline_341_view$jscomp$inline_349_view$jscomp$inline_464_view$jscomp$inline_473$$.getUint16(10), 
            ciaddr:$answers$jscomp$inline_355_data$jscomp$inline_471_dhcp$jscomp$inline_465_ethertype$jscomp$inline_76_flags$jscomp$inline_343_now_n_f$jscomp$inline_93_proto$jscomp$inline_335_reply$jscomp$inline_84_router_subnet$jscomp$inline_108_view$jscomp$inline_341_view$jscomp$inline_349_view$jscomp$inline_464_view$jscomp$inline_473$$.getUint32(12), yiaddr:$answers$jscomp$inline_355_data$jscomp$inline_471_dhcp$jscomp$inline_465_ethertype$jscomp$inline_76_flags$jscomp$inline_343_now_n_f$jscomp$inline_93_proto$jscomp$inline_335_reply$jscomp$inline_84_router_subnet$jscomp$inline_108_view$jscomp$inline_341_view$jscomp$inline_349_view$jscomp$inline_464_view$jscomp$inline_473$$.getUint32(16), 
            siaddr:$answers$jscomp$inline_355_data$jscomp$inline_471_dhcp$jscomp$inline_465_ethertype$jscomp$inline_76_flags$jscomp$inline_343_now_n_f$jscomp$inline_93_proto$jscomp$inline_335_reply$jscomp$inline_84_router_subnet$jscomp$inline_108_view$jscomp$inline_341_view$jscomp$inline_349_view$jscomp$inline_464_view$jscomp$inline_473$$.getUint32(20), giaddr:$answers$jscomp$inline_355_data$jscomp$inline_471_dhcp$jscomp$inline_465_ethertype$jscomp$inline_76_flags$jscomp$inline_343_now_n_f$jscomp$inline_93_proto$jscomp$inline_335_reply$jscomp$inline_84_router_subnet$jscomp$inline_108_view$jscomp$inline_341_view$jscomp$inline_349_view$jscomp$inline_464_view$jscomp$inline_473$$.getUint32(24), 
            chaddr:$data$jscomp$inline_462_eth$jscomp$inline_77_i$jscomp$inline_357_ihl$jscomp$inline_331_ipdata$jscomp$inline_338_options$jscomp$inline_466_reply$jscomp$inline_94$$.subarray(28, 44), magic:$answers$jscomp$inline_355_data$jscomp$inline_471_dhcp$jscomp$inline_465_ethertype$jscomp$inline_76_flags$jscomp$inline_343_now_n_f$jscomp$inline_93_proto$jscomp$inline_335_reply$jscomp$inline_84_router_subnet$jscomp$inline_108_view$jscomp$inline_341_view$jscomp$inline_349_view$jscomp$inline_464_view$jscomp$inline_473$$.getUint32(236), 
            options:[], };
            $data$jscomp$inline_462_eth$jscomp$inline_77_i$jscomp$inline_357_ihl$jscomp$inline_331_ipdata$jscomp$inline_338_options$jscomp$inline_466_reply$jscomp$inline_94$$ = $data$jscomp$inline_462_eth$jscomp$inline_77_i$jscomp$inline_357_ihl$jscomp$inline_331_ipdata$jscomp$inline_338_options$jscomp$inline_466_reply$jscomp$inline_94$$.subarray(240);
            for ($i$jscomp$inline_467_len$jscomp$inline_333_q$jscomp$inline_358$$ = 0; $i$jscomp$inline_467_len$jscomp$inline_333_q$jscomp$inline_358$$ < $data$jscomp$inline_462_eth$jscomp$inline_77_i$jscomp$inline_357_ihl$jscomp$inline_331_ipdata$jscomp$inline_338_options$jscomp$inline_466_reply$jscomp$inline_94$$.length; ++$i$jscomp$inline_467_len$jscomp$inline_333_q$jscomp$inline_358$$) {
              $ipv4$jscomp$inline_337_start$jscomp$inline_468_version$jscomp$inline_330$$ = $i$jscomp$inline_467_len$jscomp$inline_333_q$jscomp$inline_358$$, 0 !== $data$jscomp$inline_462_eth$jscomp$inline_77_i$jscomp$inline_357_ihl$jscomp$inline_331_ipdata$jscomp$inline_338_options$jscomp$inline_466_reply$jscomp$inline_94$$[$i$jscomp$inline_467_len$jscomp$inline_333_q$jscomp$inline_358$$] && (++$i$jscomp$inline_467_len$jscomp$inline_333_q$jscomp$inline_358$$, $len$jscomp$inline_469_tos$jscomp$inline_332$$ = 
              $data$jscomp$inline_462_eth$jscomp$inline_77_i$jscomp$inline_357_ihl$jscomp$inline_331_ipdata$jscomp$inline_338_options$jscomp$inline_466_reply$jscomp$inline_94$$[$i$jscomp$inline_467_len$jscomp$inline_333_q$jscomp$inline_358$$], $i$jscomp$inline_467_len$jscomp$inline_333_q$jscomp$inline_358$$ += $len$jscomp$inline_469_tos$jscomp$inline_332$$, $answers$jscomp$inline_355_data$jscomp$inline_471_dhcp$jscomp$inline_465_ethertype$jscomp$inline_76_flags$jscomp$inline_343_now_n_f$jscomp$inline_93_proto$jscomp$inline_335_reply$jscomp$inline_84_router_subnet$jscomp$inline_108_view$jscomp$inline_341_view$jscomp$inline_349_view$jscomp$inline_464_view$jscomp$inline_473$$.options.push($data$jscomp$inline_462_eth$jscomp$inline_77_i$jscomp$inline_357_ihl$jscomp$inline_331_ipdata$jscomp$inline_338_options$jscomp$inline_466_reply$jscomp$inline_94$$.subarray($ipv4$jscomp$inline_337_start$jscomp$inline_468_version$jscomp$inline_330$$, 
              $ipv4$jscomp$inline_337_start$jscomp$inline_468_version$jscomp$inline_330$$ + $len$jscomp$inline_469_tos$jscomp$inline_332$$ + 2)));
            }
            $packet$jscomp$6$$.dhcp = $answers$jscomp$inline_355_data$jscomp$inline_471_dhcp$jscomp$inline_465_ethertype$jscomp$inline_76_flags$jscomp$inline_343_now_n_f$jscomp$inline_93_proto$jscomp$inline_335_reply$jscomp$inline_84_router_subnet$jscomp$inline_108_view$jscomp$inline_341_view$jscomp$inline_349_view$jscomp$inline_464_view$jscomp$inline_473$$;
            $packet$jscomp$6$$.dhcp_options = $answers$jscomp$inline_355_data$jscomp$inline_471_dhcp$jscomp$inline_465_ethertype$jscomp$inline_76_flags$jscomp$inline_343_now_n_f$jscomp$inline_93_proto$jscomp$inline_335_reply$jscomp$inline_84_router_subnet$jscomp$inline_108_view$jscomp$inline_341_view$jscomp$inline_349_view$jscomp$inline_464_view$jscomp$inline_473$$.options;
          } else {
            53 === $arp$jscomp$inline_350_bop$jscomp$inline_83_data$jscomp$118_icmp$jscomp$inline_340_now_n$jscomp$inline_92_packet_subnet$jscomp$inline_107_payload$jscomp$inline_78_reply$jscomp$inline_103_reply$jscomp$inline_109_reply$jscomp$inline_354_reply$jscomp$inline_99_tcp$jscomp$inline_342_tuple$jscomp$inline_82_udp$jscomp$inline_345_view$jscomp$inline_339_view$jscomp$inline_344$$.dport || 53 === $arp$jscomp$inline_350_bop$jscomp$inline_83_data$jscomp$118_icmp$jscomp$inline_340_now_n$jscomp$inline_92_packet_subnet$jscomp$inline_107_payload$jscomp$inline_78_reply$jscomp$inline_103_reply$jscomp$inline_109_reply$jscomp$inline_354_reply$jscomp$inline_99_tcp$jscomp$inline_342_tuple$jscomp$inline_82_udp$jscomp$inline_345_view$jscomp$inline_339_view$jscomp$inline_344$$.sport ? 
            $parse_dns$$module$src$browser$fake_network$$($data$jscomp$inline_462_eth$jscomp$inline_77_i$jscomp$inline_357_ihl$jscomp$inline_331_ipdata$jscomp$inline_338_options$jscomp$inline_466_reply$jscomp$inline_94$$.subarray(8), $packet$jscomp$6$$) : 123 === $arp$jscomp$inline_350_bop$jscomp$inline_83_data$jscomp$118_icmp$jscomp$inline_340_now_n$jscomp$inline_92_packet_subnet$jscomp$inline_107_payload$jscomp$inline_78_reply$jscomp$inline_103_reply$jscomp$inline_109_reply$jscomp$inline_354_reply$jscomp$inline_99_tcp$jscomp$inline_342_tuple$jscomp$inline_82_udp$jscomp$inline_345_view$jscomp$inline_339_view$jscomp$inline_344$$.dport && 
            ($answers$jscomp$inline_355_data$jscomp$inline_471_dhcp$jscomp$inline_465_ethertype$jscomp$inline_76_flags$jscomp$inline_343_now_n_f$jscomp$inline_93_proto$jscomp$inline_335_reply$jscomp$inline_84_router_subnet$jscomp$inline_108_view$jscomp$inline_341_view$jscomp$inline_349_view$jscomp$inline_464_view$jscomp$inline_473$$ = $data$jscomp$inline_462_eth$jscomp$inline_77_i$jscomp$inline_357_ihl$jscomp$inline_331_ipdata$jscomp$inline_338_options$jscomp$inline_466_reply$jscomp$inline_94$$.subarray(8), 
            $answers$jscomp$inline_355_data$jscomp$inline_471_dhcp$jscomp$inline_465_ethertype$jscomp$inline_76_flags$jscomp$inline_343_now_n_f$jscomp$inline_93_proto$jscomp$inline_335_reply$jscomp$inline_84_router_subnet$jscomp$inline_108_view$jscomp$inline_341_view$jscomp$inline_349_view$jscomp$inline_464_view$jscomp$inline_473$$ = new DataView($answers$jscomp$inline_355_data$jscomp$inline_471_dhcp$jscomp$inline_465_ethertype$jscomp$inline_76_flags$jscomp$inline_343_now_n_f$jscomp$inline_93_proto$jscomp$inline_335_reply$jscomp$inline_84_router_subnet$jscomp$inline_108_view$jscomp$inline_341_view$jscomp$inline_349_view$jscomp$inline_464_view$jscomp$inline_473$$.buffer, 
            $answers$jscomp$inline_355_data$jscomp$inline_471_dhcp$jscomp$inline_465_ethertype$jscomp$inline_76_flags$jscomp$inline_343_now_n_f$jscomp$inline_93_proto$jscomp$inline_335_reply$jscomp$inline_84_router_subnet$jscomp$inline_108_view$jscomp$inline_341_view$jscomp$inline_349_view$jscomp$inline_464_view$jscomp$inline_473$$.byteOffset, $answers$jscomp$inline_355_data$jscomp$inline_471_dhcp$jscomp$inline_465_ethertype$jscomp$inline_76_flags$jscomp$inline_343_now_n_f$jscomp$inline_93_proto$jscomp$inline_335_reply$jscomp$inline_84_router_subnet$jscomp$inline_108_view$jscomp$inline_341_view$jscomp$inline_349_view$jscomp$inline_464_view$jscomp$inline_473$$.byteLength), 
            $packet$jscomp$6$$.ntp = {flags:$answers$jscomp$inline_355_data$jscomp$inline_471_dhcp$jscomp$inline_465_ethertype$jscomp$inline_76_flags$jscomp$inline_343_now_n_f$jscomp$inline_93_proto$jscomp$inline_335_reply$jscomp$inline_84_router_subnet$jscomp$inline_108_view$jscomp$inline_341_view$jscomp$inline_349_view$jscomp$inline_464_view$jscomp$inline_473$$.getUint8(0), stratum:$answers$jscomp$inline_355_data$jscomp$inline_471_dhcp$jscomp$inline_465_ethertype$jscomp$inline_76_flags$jscomp$inline_343_now_n_f$jscomp$inline_93_proto$jscomp$inline_335_reply$jscomp$inline_84_router_subnet$jscomp$inline_108_view$jscomp$inline_341_view$jscomp$inline_349_view$jscomp$inline_464_view$jscomp$inline_473$$.getUint8(1), 
            poll:$answers$jscomp$inline_355_data$jscomp$inline_471_dhcp$jscomp$inline_465_ethertype$jscomp$inline_76_flags$jscomp$inline_343_now_n_f$jscomp$inline_93_proto$jscomp$inline_335_reply$jscomp$inline_84_router_subnet$jscomp$inline_108_view$jscomp$inline_341_view$jscomp$inline_349_view$jscomp$inline_464_view$jscomp$inline_473$$.getUint8(2), precision:$answers$jscomp$inline_355_data$jscomp$inline_471_dhcp$jscomp$inline_465_ethertype$jscomp$inline_76_flags$jscomp$inline_343_now_n_f$jscomp$inline_93_proto$jscomp$inline_335_reply$jscomp$inline_84_router_subnet$jscomp$inline_108_view$jscomp$inline_341_view$jscomp$inline_349_view$jscomp$inline_464_view$jscomp$inline_473$$.getUint8(3), 
            root_delay:$answers$jscomp$inline_355_data$jscomp$inline_471_dhcp$jscomp$inline_465_ethertype$jscomp$inline_76_flags$jscomp$inline_343_now_n_f$jscomp$inline_93_proto$jscomp$inline_335_reply$jscomp$inline_84_router_subnet$jscomp$inline_108_view$jscomp$inline_341_view$jscomp$inline_349_view$jscomp$inline_464_view$jscomp$inline_473$$.getUint32(4), root_disp:$answers$jscomp$inline_355_data$jscomp$inline_471_dhcp$jscomp$inline_465_ethertype$jscomp$inline_76_flags$jscomp$inline_343_now_n_f$jscomp$inline_93_proto$jscomp$inline_335_reply$jscomp$inline_84_router_subnet$jscomp$inline_108_view$jscomp$inline_341_view$jscomp$inline_349_view$jscomp$inline_464_view$jscomp$inline_473$$.getUint32(8), 
            ref_id:$answers$jscomp$inline_355_data$jscomp$inline_471_dhcp$jscomp$inline_465_ethertype$jscomp$inline_76_flags$jscomp$inline_343_now_n_f$jscomp$inline_93_proto$jscomp$inline_335_reply$jscomp$inline_84_router_subnet$jscomp$inline_108_view$jscomp$inline_341_view$jscomp$inline_349_view$jscomp$inline_464_view$jscomp$inline_473$$.getUint32(12), ref_ts_i:$answers$jscomp$inline_355_data$jscomp$inline_471_dhcp$jscomp$inline_465_ethertype$jscomp$inline_76_flags$jscomp$inline_343_now_n_f$jscomp$inline_93_proto$jscomp$inline_335_reply$jscomp$inline_84_router_subnet$jscomp$inline_108_view$jscomp$inline_341_view$jscomp$inline_349_view$jscomp$inline_464_view$jscomp$inline_473$$.getUint32(16), 
            ref_ts_f:$answers$jscomp$inline_355_data$jscomp$inline_471_dhcp$jscomp$inline_465_ethertype$jscomp$inline_76_flags$jscomp$inline_343_now_n_f$jscomp$inline_93_proto$jscomp$inline_335_reply$jscomp$inline_84_router_subnet$jscomp$inline_108_view$jscomp$inline_341_view$jscomp$inline_349_view$jscomp$inline_464_view$jscomp$inline_473$$.getUint32(20), ori_ts_i:$answers$jscomp$inline_355_data$jscomp$inline_471_dhcp$jscomp$inline_465_ethertype$jscomp$inline_76_flags$jscomp$inline_343_now_n_f$jscomp$inline_93_proto$jscomp$inline_335_reply$jscomp$inline_84_router_subnet$jscomp$inline_108_view$jscomp$inline_341_view$jscomp$inline_349_view$jscomp$inline_464_view$jscomp$inline_473$$.getUint32(24), 
            ori_ts_f:$answers$jscomp$inline_355_data$jscomp$inline_471_dhcp$jscomp$inline_465_ethertype$jscomp$inline_76_flags$jscomp$inline_343_now_n_f$jscomp$inline_93_proto$jscomp$inline_335_reply$jscomp$inline_84_router_subnet$jscomp$inline_108_view$jscomp$inline_341_view$jscomp$inline_349_view$jscomp$inline_464_view$jscomp$inline_473$$.getUint32(28), rec_ts_i:$answers$jscomp$inline_355_data$jscomp$inline_471_dhcp$jscomp$inline_465_ethertype$jscomp$inline_76_flags$jscomp$inline_343_now_n_f$jscomp$inline_93_proto$jscomp$inline_335_reply$jscomp$inline_84_router_subnet$jscomp$inline_108_view$jscomp$inline_341_view$jscomp$inline_349_view$jscomp$inline_464_view$jscomp$inline_473$$.getUint32(32), 
            rec_ts_f:$answers$jscomp$inline_355_data$jscomp$inline_471_dhcp$jscomp$inline_465_ethertype$jscomp$inline_76_flags$jscomp$inline_343_now_n_f$jscomp$inline_93_proto$jscomp$inline_335_reply$jscomp$inline_84_router_subnet$jscomp$inline_108_view$jscomp$inline_341_view$jscomp$inline_349_view$jscomp$inline_464_view$jscomp$inline_473$$.getUint32(36), trans_ts_i:$answers$jscomp$inline_355_data$jscomp$inline_471_dhcp$jscomp$inline_465_ethertype$jscomp$inline_76_flags$jscomp$inline_343_now_n_f$jscomp$inline_93_proto$jscomp$inline_335_reply$jscomp$inline_84_router_subnet$jscomp$inline_108_view$jscomp$inline_341_view$jscomp$inline_349_view$jscomp$inline_464_view$jscomp$inline_473$$.getUint32(40), 
            trans_ts_f:$answers$jscomp$inline_355_data$jscomp$inline_471_dhcp$jscomp$inline_465_ethertype$jscomp$inline_76_flags$jscomp$inline_343_now_n_f$jscomp$inline_93_proto$jscomp$inline_335_reply$jscomp$inline_84_router_subnet$jscomp$inline_108_view$jscomp$inline_341_view$jscomp$inline_349_view$jscomp$inline_464_view$jscomp$inline_473$$.getUint32(44), });
          }
          $packet$jscomp$6$$.udp = $arp$jscomp$inline_350_bop$jscomp$inline_83_data$jscomp$118_icmp$jscomp$inline_340_now_n$jscomp$inline_92_packet_subnet$jscomp$inline_107_payload$jscomp$inline_78_reply$jscomp$inline_103_reply$jscomp$inline_109_reply$jscomp$inline_354_reply$jscomp$inline_99_tcp$jscomp$inline_342_tuple$jscomp$inline_82_udp$jscomp$inline_345_view$jscomp$inline_339_view$jscomp$inline_344$$;
        }
      }
    }
  } else {
    2054 === $answers$jscomp$inline_355_data$jscomp$inline_471_dhcp$jscomp$inline_465_ethertype$jscomp$inline_76_flags$jscomp$inline_343_now_n_f$jscomp$inline_93_proto$jscomp$inline_335_reply$jscomp$inline_84_router_subnet$jscomp$inline_108_view$jscomp$inline_341_view$jscomp$inline_349_view$jscomp$inline_464_view$jscomp$inline_473$$ ? ($answers$jscomp$inline_355_data$jscomp$inline_471_dhcp$jscomp$inline_465_ethertype$jscomp$inline_76_flags$jscomp$inline_343_now_n_f$jscomp$inline_93_proto$jscomp$inline_335_reply$jscomp$inline_84_router_subnet$jscomp$inline_108_view$jscomp$inline_341_view$jscomp$inline_349_view$jscomp$inline_464_view$jscomp$inline_473$$ = 
    new DataView($arp$jscomp$inline_350_bop$jscomp$inline_83_data$jscomp$118_icmp$jscomp$inline_340_now_n$jscomp$inline_92_packet_subnet$jscomp$inline_107_payload$jscomp$inline_78_reply$jscomp$inline_103_reply$jscomp$inline_109_reply$jscomp$inline_354_reply$jscomp$inline_99_tcp$jscomp$inline_342_tuple$jscomp$inline_82_udp$jscomp$inline_345_view$jscomp$inline_339_view$jscomp$inline_344$$.buffer, $arp$jscomp$inline_350_bop$jscomp$inline_83_data$jscomp$118_icmp$jscomp$inline_340_now_n$jscomp$inline_92_packet_subnet$jscomp$inline_107_payload$jscomp$inline_78_reply$jscomp$inline_103_reply$jscomp$inline_109_reply$jscomp$inline_354_reply$jscomp$inline_99_tcp$jscomp$inline_342_tuple$jscomp$inline_82_udp$jscomp$inline_345_view$jscomp$inline_339_view$jscomp$inline_344$$.byteOffset, 
    $arp$jscomp$inline_350_bop$jscomp$inline_83_data$jscomp$118_icmp$jscomp$inline_340_now_n$jscomp$inline_92_packet_subnet$jscomp$inline_107_payload$jscomp$inline_78_reply$jscomp$inline_103_reply$jscomp$inline_109_reply$jscomp$inline_354_reply$jscomp$inline_99_tcp$jscomp$inline_342_tuple$jscomp$inline_82_udp$jscomp$inline_345_view$jscomp$inline_339_view$jscomp$inline_344$$.byteLength), $arp$jscomp$inline_350_bop$jscomp$inline_83_data$jscomp$118_icmp$jscomp$inline_340_now_n$jscomp$inline_92_packet_subnet$jscomp$inline_107_payload$jscomp$inline_78_reply$jscomp$inline_103_reply$jscomp$inline_109_reply$jscomp$inline_354_reply$jscomp$inline_99_tcp$jscomp$inline_342_tuple$jscomp$inline_82_udp$jscomp$inline_345_view$jscomp$inline_339_view$jscomp$inline_344$$ = 
    {htype:$answers$jscomp$inline_355_data$jscomp$inline_471_dhcp$jscomp$inline_465_ethertype$jscomp$inline_76_flags$jscomp$inline_343_now_n_f$jscomp$inline_93_proto$jscomp$inline_335_reply$jscomp$inline_84_router_subnet$jscomp$inline_108_view$jscomp$inline_341_view$jscomp$inline_349_view$jscomp$inline_464_view$jscomp$inline_473$$.getUint16(0), ptype:$answers$jscomp$inline_355_data$jscomp$inline_471_dhcp$jscomp$inline_465_ethertype$jscomp$inline_76_flags$jscomp$inline_343_now_n_f$jscomp$inline_93_proto$jscomp$inline_335_reply$jscomp$inline_84_router_subnet$jscomp$inline_108_view$jscomp$inline_341_view$jscomp$inline_349_view$jscomp$inline_464_view$jscomp$inline_473$$.getUint16(2), 
    oper:$answers$jscomp$inline_355_data$jscomp$inline_471_dhcp$jscomp$inline_465_ethertype$jscomp$inline_76_flags$jscomp$inline_343_now_n_f$jscomp$inline_93_proto$jscomp$inline_335_reply$jscomp$inline_84_router_subnet$jscomp$inline_108_view$jscomp$inline_341_view$jscomp$inline_349_view$jscomp$inline_464_view$jscomp$inline_473$$.getUint16(6), sha:$arp$jscomp$inline_350_bop$jscomp$inline_83_data$jscomp$118_icmp$jscomp$inline_340_now_n$jscomp$inline_92_packet_subnet$jscomp$inline_107_payload$jscomp$inline_78_reply$jscomp$inline_103_reply$jscomp$inline_109_reply$jscomp$inline_354_reply$jscomp$inline_99_tcp$jscomp$inline_342_tuple$jscomp$inline_82_udp$jscomp$inline_345_view$jscomp$inline_339_view$jscomp$inline_344$$.subarray(8, 
    14), spa:$arp$jscomp$inline_350_bop$jscomp$inline_83_data$jscomp$118_icmp$jscomp$inline_340_now_n$jscomp$inline_92_packet_subnet$jscomp$inline_107_payload$jscomp$inline_78_reply$jscomp$inline_103_reply$jscomp$inline_109_reply$jscomp$inline_354_reply$jscomp$inline_99_tcp$jscomp$inline_342_tuple$jscomp$inline_82_udp$jscomp$inline_345_view$jscomp$inline_339_view$jscomp$inline_344$$.subarray(14, 18), tha:$arp$jscomp$inline_350_bop$jscomp$inline_83_data$jscomp$118_icmp$jscomp$inline_340_now_n$jscomp$inline_92_packet_subnet$jscomp$inline_107_payload$jscomp$inline_78_reply$jscomp$inline_103_reply$jscomp$inline_109_reply$jscomp$inline_354_reply$jscomp$inline_99_tcp$jscomp$inline_342_tuple$jscomp$inline_82_udp$jscomp$inline_345_view$jscomp$inline_339_view$jscomp$inline_344$$.subarray(18, 
    24), tpa:$arp$jscomp$inline_350_bop$jscomp$inline_83_data$jscomp$118_icmp$jscomp$inline_340_now_n$jscomp$inline_92_packet_subnet$jscomp$inline_107_payload$jscomp$inline_78_reply$jscomp$inline_103_reply$jscomp$inline_109_reply$jscomp$inline_354_reply$jscomp$inline_99_tcp$jscomp$inline_342_tuple$jscomp$inline_82_udp$jscomp$inline_345_view$jscomp$inline_339_view$jscomp$inline_344$$.subarray(24, 28), }, $packet$jscomp$6$$.arp = $arp$jscomp$inline_350_bop$jscomp$inline_83_data$jscomp$118_icmp$jscomp$inline_340_now_n$jscomp$inline_92_packet_subnet$jscomp$inline_107_payload$jscomp$inline_78_reply$jscomp$inline_103_reply$jscomp$inline_109_reply$jscomp$inline_354_reply$jscomp$inline_99_tcp$jscomp$inline_342_tuple$jscomp$inline_82_udp$jscomp$inline_345_view$jscomp$inline_339_view$jscomp$inline_344$$) : 
    34525 === $answers$jscomp$inline_355_data$jscomp$inline_471_dhcp$jscomp$inline_465_ethertype$jscomp$inline_76_flags$jscomp$inline_343_now_n_f$jscomp$inline_93_proto$jscomp$inline_335_reply$jscomp$inline_84_router_subnet$jscomp$inline_108_view$jscomp$inline_341_view$jscomp$inline_349_view$jscomp$inline_464_view$jscomp$inline_473$$ ? $dbg_log$$module$src$log$$("Unimplemented: ipv6") : $dbg_log$$module$src$log$$("Unknown ethertype: " + $h$$module$src$lib$$($answers$jscomp$inline_355_data$jscomp$inline_471_dhcp$jscomp$inline_465_ethertype$jscomp$inline_76_flags$jscomp$inline_343_now_n_f$jscomp$inline_93_proto$jscomp$inline_335_reply$jscomp$inline_84_router_subnet$jscomp$inline_108_view$jscomp$inline_341_view$jscomp$inline_349_view$jscomp$inline_464_view$jscomp$inline_473$$), 
    16777216);
  }
  if ($packet$jscomp$6$$.ipv4) {
    if ($packet$jscomp$6$$.tcp) {
      a: {
        $arp$jscomp$inline_350_bop$jscomp$inline_83_data$jscomp$118_icmp$jscomp$inline_340_now_n$jscomp$inline_92_packet_subnet$jscomp$inline_107_payload$jscomp$inline_78_reply$jscomp$inline_103_reply$jscomp$inline_109_reply$jscomp$inline_354_reply$jscomp$inline_99_tcp$jscomp$inline_342_tuple$jscomp$inline_82_udp$jscomp$inline_345_view$jscomp$inline_339_view$jscomp$inline_344$$ = `${$packet$jscomp$6$$.ipv4.src.join(".")}:${$packet$jscomp$6$$.tcp.sport}:${$packet$jscomp$6$$.ipv4.dest.join(".")}:${$packet$jscomp$6$$.tcp.dport}`;
        if ($packet$jscomp$6$$.tcp.syn && ($adapter$jscomp$6$$.tcp_conn[$arp$jscomp$inline_350_bop$jscomp$inline_83_data$jscomp$118_icmp$jscomp$inline_340_now_n$jscomp$inline_92_packet_subnet$jscomp$inline_107_payload$jscomp$inline_78_reply$jscomp$inline_103_reply$jscomp$inline_109_reply$jscomp$inline_354_reply$jscomp$inline_99_tcp$jscomp$inline_342_tuple$jscomp$inline_82_udp$jscomp$inline_345_view$jscomp$inline_339_view$jscomp$inline_344$$] && $dbg_log$$module$src$log$$("SYN to already opened port", 
        16777216), $adapter$jscomp$6$$.on_tcp_connection($packet$jscomp$6$$, $arp$jscomp$inline_350_bop$jscomp$inline_83_data$jscomp$118_icmp$jscomp$inline_340_now_n$jscomp$inline_92_packet_subnet$jscomp$inline_107_payload$jscomp$inline_78_reply$jscomp$inline_103_reply$jscomp$inline_109_reply$jscomp$inline_354_reply$jscomp$inline_99_tcp$jscomp$inline_342_tuple$jscomp$inline_82_udp$jscomp$inline_345_view$jscomp$inline_339_view$jscomp$inline_344$$))) {
          break a;
        }
        if ($adapter$jscomp$6$$.tcp_conn[$arp$jscomp$inline_350_bop$jscomp$inline_83_data$jscomp$118_icmp$jscomp$inline_340_now_n$jscomp$inline_92_packet_subnet$jscomp$inline_107_payload$jscomp$inline_78_reply$jscomp$inline_103_reply$jscomp$inline_109_reply$jscomp$inline_354_reply$jscomp$inline_99_tcp$jscomp$inline_342_tuple$jscomp$inline_82_udp$jscomp$inline_345_view$jscomp$inline_339_view$jscomp$inline_344$$]) {
          $adapter$jscomp$6$$.tcp_conn[$arp$jscomp$inline_350_bop$jscomp$inline_83_data$jscomp$118_icmp$jscomp$inline_340_now_n$jscomp$inline_92_packet_subnet$jscomp$inline_107_payload$jscomp$inline_78_reply$jscomp$inline_103_reply$jscomp$inline_109_reply$jscomp$inline_354_reply$jscomp$inline_99_tcp$jscomp$inline_342_tuple$jscomp$inline_82_udp$jscomp$inline_345_view$jscomp$inline_339_view$jscomp$inline_344$$].process($packet$jscomp$6$$);
        } else {
          $dbg_log$$module$src$log$$(`I dont know about ${$arp$jscomp$inline_350_bop$jscomp$inline_83_data$jscomp$118_icmp$jscomp$inline_340_now_n$jscomp$inline_92_packet_subnet$jscomp$inline_107_payload$jscomp$inline_78_reply$jscomp$inline_103_reply$jscomp$inline_109_reply$jscomp$inline_354_reply$jscomp$inline_99_tcp$jscomp$inline_342_tuple$jscomp$inline_82_udp$jscomp$inline_345_view$jscomp$inline_339_view$jscomp$inline_344$$}, so resetting`, 16777216);
          $arp$jscomp$inline_350_bop$jscomp$inline_83_data$jscomp$118_icmp$jscomp$inline_340_now_n$jscomp$inline_92_packet_subnet$jscomp$inline_107_payload$jscomp$inline_78_reply$jscomp$inline_103_reply$jscomp$inline_109_reply$jscomp$inline_354_reply$jscomp$inline_99_tcp$jscomp$inline_342_tuple$jscomp$inline_82_udp$jscomp$inline_345_view$jscomp$inline_339_view$jscomp$inline_344$$ = $packet$jscomp$6$$.tcp.ackn;
          if ($packet$jscomp$6$$.tcp.fin || $packet$jscomp$6$$.tcp.syn) {
            $arp$jscomp$inline_350_bop$jscomp$inline_83_data$jscomp$118_icmp$jscomp$inline_340_now_n$jscomp$inline_92_packet_subnet$jscomp$inline_107_payload$jscomp$inline_78_reply$jscomp$inline_103_reply$jscomp$inline_109_reply$jscomp$inline_354_reply$jscomp$inline_99_tcp$jscomp$inline_342_tuple$jscomp$inline_82_udp$jscomp$inline_345_view$jscomp$inline_339_view$jscomp$inline_344$$ += 1;
          }
          $answers$jscomp$inline_355_data$jscomp$inline_471_dhcp$jscomp$inline_465_ethertype$jscomp$inline_76_flags$jscomp$inline_343_now_n_f$jscomp$inline_93_proto$jscomp$inline_335_reply$jscomp$inline_84_router_subnet$jscomp$inline_108_view$jscomp$inline_341_view$jscomp$inline_349_view$jscomp$inline_464_view$jscomp$inline_473$$ = {};
          $answers$jscomp$inline_355_data$jscomp$inline_471_dhcp$jscomp$inline_465_ethertype$jscomp$inline_76_flags$jscomp$inline_343_now_n_f$jscomp$inline_93_proto$jscomp$inline_335_reply$jscomp$inline_84_router_subnet$jscomp$inline_108_view$jscomp$inline_341_view$jscomp$inline_349_view$jscomp$inline_464_view$jscomp$inline_473$$.eth = {ethertype:2048, src:$adapter$jscomp$6$$.router_mac, dest:$packet$jscomp$6$$.eth.src};
          $answers$jscomp$inline_355_data$jscomp$inline_471_dhcp$jscomp$inline_465_ethertype$jscomp$inline_76_flags$jscomp$inline_343_now_n_f$jscomp$inline_93_proto$jscomp$inline_335_reply$jscomp$inline_84_router_subnet$jscomp$inline_108_view$jscomp$inline_341_view$jscomp$inline_349_view$jscomp$inline_464_view$jscomp$inline_473$$.ipv4 = {proto:6, src:$packet$jscomp$6$$.ipv4.dest, dest:$packet$jscomp$6$$.ipv4.src};
          $answers$jscomp$inline_355_data$jscomp$inline_471_dhcp$jscomp$inline_465_ethertype$jscomp$inline_76_flags$jscomp$inline_343_now_n_f$jscomp$inline_93_proto$jscomp$inline_335_reply$jscomp$inline_84_router_subnet$jscomp$inline_108_view$jscomp$inline_341_view$jscomp$inline_349_view$jscomp$inline_464_view$jscomp$inline_473$$.tcp = {sport:$packet$jscomp$6$$.tcp.dport, dport:$packet$jscomp$6$$.tcp.sport, seq:$arp$jscomp$inline_350_bop$jscomp$inline_83_data$jscomp$118_icmp$jscomp$inline_340_now_n$jscomp$inline_92_packet_subnet$jscomp$inline_107_payload$jscomp$inline_78_reply$jscomp$inline_103_reply$jscomp$inline_109_reply$jscomp$inline_354_reply$jscomp$inline_99_tcp$jscomp$inline_342_tuple$jscomp$inline_82_udp$jscomp$inline_345_view$jscomp$inline_339_view$jscomp$inline_344$$, 
          ackn:$packet$jscomp$6$$.tcp.seq + ($packet$jscomp$6$$.tcp.syn ? 1 : 0), winsize:$packet$jscomp$6$$.tcp.winsize, rst:!0, ack:$packet$jscomp$6$$.tcp.syn};
          $adapter$jscomp$6$$.receive($make_packet$$module$src$browser$fake_network$$($adapter$jscomp$6$$.eth_encoder_buf, $answers$jscomp$inline_355_data$jscomp$inline_471_dhcp$jscomp$inline_465_ethertype$jscomp$inline_76_flags$jscomp$inline_343_now_n_f$jscomp$inline_93_proto$jscomp$inline_335_reply$jscomp$inline_84_router_subnet$jscomp$inline_108_view$jscomp$inline_341_view$jscomp$inline_349_view$jscomp$inline_464_view$jscomp$inline_473$$));
        }
      }
    } else {
      if ($packet$jscomp$6$$.udp) {
        if ($packet$jscomp$6$$.dns) {
          if ("static" === $adapter$jscomp$6$$.dns_method) {
            $arp$jscomp$inline_350_bop$jscomp$inline_83_data$jscomp$118_icmp$jscomp$inline_340_now_n$jscomp$inline_92_packet_subnet$jscomp$inline_107_payload$jscomp$inline_78_reply$jscomp$inline_103_reply$jscomp$inline_109_reply$jscomp$inline_354_reply$jscomp$inline_99_tcp$jscomp$inline_342_tuple$jscomp$inline_82_udp$jscomp$inline_345_view$jscomp$inline_339_view$jscomp$inline_344$$ = {};
            $arp$jscomp$inline_350_bop$jscomp$inline_83_data$jscomp$118_icmp$jscomp$inline_340_now_n$jscomp$inline_92_packet_subnet$jscomp$inline_107_payload$jscomp$inline_78_reply$jscomp$inline_103_reply$jscomp$inline_109_reply$jscomp$inline_354_reply$jscomp$inline_99_tcp$jscomp$inline_342_tuple$jscomp$inline_82_udp$jscomp$inline_345_view$jscomp$inline_339_view$jscomp$inline_344$$.eth = {ethertype:2048, src:$adapter$jscomp$6$$.router_mac, dest:$packet$jscomp$6$$.eth.src};
            $arp$jscomp$inline_350_bop$jscomp$inline_83_data$jscomp$118_icmp$jscomp$inline_340_now_n$jscomp$inline_92_packet_subnet$jscomp$inline_107_payload$jscomp$inline_78_reply$jscomp$inline_103_reply$jscomp$inline_109_reply$jscomp$inline_354_reply$jscomp$inline_99_tcp$jscomp$inline_342_tuple$jscomp$inline_82_udp$jscomp$inline_345_view$jscomp$inline_339_view$jscomp$inline_344$$.ipv4 = {proto:17, src:$adapter$jscomp$6$$.router_ip, dest:$packet$jscomp$6$$.ipv4.src, };
            $arp$jscomp$inline_350_bop$jscomp$inline_83_data$jscomp$118_icmp$jscomp$inline_340_now_n$jscomp$inline_92_packet_subnet$jscomp$inline_107_payload$jscomp$inline_78_reply$jscomp$inline_103_reply$jscomp$inline_109_reply$jscomp$inline_354_reply$jscomp$inline_99_tcp$jscomp$inline_342_tuple$jscomp$inline_82_udp$jscomp$inline_345_view$jscomp$inline_339_view$jscomp$inline_344$$.udp = {sport:53, dport:$packet$jscomp$6$$.udp.sport};
            $answers$jscomp$inline_355_data$jscomp$inline_471_dhcp$jscomp$inline_465_ethertype$jscomp$inline_76_flags$jscomp$inline_343_now_n_f$jscomp$inline_93_proto$jscomp$inline_335_reply$jscomp$inline_84_router_subnet$jscomp$inline_108_view$jscomp$inline_341_view$jscomp$inline_349_view$jscomp$inline_464_view$jscomp$inline_473$$ = [];
            for ($data$jscomp$inline_462_eth$jscomp$inline_77_i$jscomp$inline_357_ihl$jscomp$inline_331_ipdata$jscomp$inline_338_options$jscomp$inline_466_reply$jscomp$inline_94$$ = 0; $data$jscomp$inline_462_eth$jscomp$inline_77_i$jscomp$inline_357_ihl$jscomp$inline_331_ipdata$jscomp$inline_338_options$jscomp$inline_466_reply$jscomp$inline_94$$ < $packet$jscomp$6$$.dns.questions.length; ++$data$jscomp$inline_462_eth$jscomp$inline_77_i$jscomp$inline_357_ihl$jscomp$inline_331_ipdata$jscomp$inline_338_options$jscomp$inline_466_reply$jscomp$inline_94$$) {
              switch($i$jscomp$inline_467_len$jscomp$inline_333_q$jscomp$inline_358$$ = $packet$jscomp$6$$.dns.questions[$data$jscomp$inline_462_eth$jscomp$inline_77_i$jscomp$inline_357_ihl$jscomp$inline_331_ipdata$jscomp$inline_338_options$jscomp$inline_466_reply$jscomp$inline_94$$], $i$jscomp$inline_467_len$jscomp$inline_333_q$jscomp$inline_358$$.type) {
                case 1:
                  $answers$jscomp$inline_355_data$jscomp$inline_471_dhcp$jscomp$inline_465_ethertype$jscomp$inline_76_flags$jscomp$inline_343_now_n_f$jscomp$inline_93_proto$jscomp$inline_335_reply$jscomp$inline_84_router_subnet$jscomp$inline_108_view$jscomp$inline_341_view$jscomp$inline_349_view$jscomp$inline_464_view$jscomp$inline_473$$.push({name:$i$jscomp$inline_467_len$jscomp$inline_333_q$jscomp$inline_358$$.name, type:$i$jscomp$inline_467_len$jscomp$inline_333_q$jscomp$inline_358$$.type, class:$i$jscomp$inline_467_len$jscomp$inline_333_q$jscomp$inline_358$$.class, 
                  ttl:600, data:[192, 168, 87, 1]});
              }
            }
            $arp$jscomp$inline_350_bop$jscomp$inline_83_data$jscomp$118_icmp$jscomp$inline_340_now_n$jscomp$inline_92_packet_subnet$jscomp$inline_107_payload$jscomp$inline_78_reply$jscomp$inline_103_reply$jscomp$inline_109_reply$jscomp$inline_354_reply$jscomp$inline_99_tcp$jscomp$inline_342_tuple$jscomp$inline_82_udp$jscomp$inline_345_view$jscomp$inline_339_view$jscomp$inline_344$$.dns = {id:$packet$jscomp$6$$.dns.id, flags:33152, questions:$packet$jscomp$6$$.dns.questions, answers:$answers$jscomp$inline_355_data$jscomp$inline_471_dhcp$jscomp$inline_465_ethertype$jscomp$inline_76_flags$jscomp$inline_343_now_n_f$jscomp$inline_93_proto$jscomp$inline_335_reply$jscomp$inline_84_router_subnet$jscomp$inline_108_view$jscomp$inline_341_view$jscomp$inline_349_view$jscomp$inline_464_view$jscomp$inline_473$$};
            $adapter$jscomp$6$$.receive($make_packet$$module$src$browser$fake_network$$($adapter$jscomp$6$$.eth_encoder_buf, $arp$jscomp$inline_350_bop$jscomp$inline_83_data$jscomp$118_icmp$jscomp$inline_340_now_n$jscomp$inline_92_packet_subnet$jscomp$inline_107_payload$jscomp$inline_78_reply$jscomp$inline_103_reply$jscomp$inline_109_reply$jscomp$inline_354_reply$jscomp$inline_99_tcp$jscomp$inline_342_tuple$jscomp$inline_82_udp$jscomp$inline_345_view$jscomp$inline_339_view$jscomp$inline_344$$));
          } else {
            $handle_fake_dns_doh$$module$src$browser$fake_network$$($packet$jscomp$6$$, $adapter$jscomp$6$$);
          }
        } else {
          $packet$jscomp$6$$.dhcp ? $handle_fake_dhcp$$module$src$browser$fake_network$$($packet$jscomp$6$$, $adapter$jscomp$6$$) : $packet$jscomp$6$$.ntp ? ($arp$jscomp$inline_350_bop$jscomp$inline_83_data$jscomp$118_icmp$jscomp$inline_340_now_n$jscomp$inline_92_packet_subnet$jscomp$inline_107_payload$jscomp$inline_78_reply$jscomp$inline_103_reply$jscomp$inline_109_reply$jscomp$inline_354_reply$jscomp$inline_99_tcp$jscomp$inline_342_tuple$jscomp$inline_82_udp$jscomp$inline_345_view$jscomp$inline_339_view$jscomp$inline_344$$ = 
          Date.now() + $NTP_EPOC_DIFF$$module$src$browser$fake_network$$, $answers$jscomp$inline_355_data$jscomp$inline_471_dhcp$jscomp$inline_465_ethertype$jscomp$inline_76_flags$jscomp$inline_343_now_n_f$jscomp$inline_93_proto$jscomp$inline_335_reply$jscomp$inline_84_router_subnet$jscomp$inline_108_view$jscomp$inline_341_view$jscomp$inline_349_view$jscomp$inline_464_view$jscomp$inline_473$$ = $arp$jscomp$inline_350_bop$jscomp$inline_83_data$jscomp$118_icmp$jscomp$inline_340_now_n$jscomp$inline_92_packet_subnet$jscomp$inline_107_payload$jscomp$inline_78_reply$jscomp$inline_103_reply$jscomp$inline_109_reply$jscomp$inline_354_reply$jscomp$inline_99_tcp$jscomp$inline_342_tuple$jscomp$inline_82_udp$jscomp$inline_345_view$jscomp$inline_339_view$jscomp$inline_344$$ % 
          1000 / 1000 * $TWO_TO_32$$module$src$browser$fake_network$$, $data$jscomp$inline_462_eth$jscomp$inline_77_i$jscomp$inline_357_ihl$jscomp$inline_331_ipdata$jscomp$inline_338_options$jscomp$inline_466_reply$jscomp$inline_94$$ = {}, $data$jscomp$inline_462_eth$jscomp$inline_77_i$jscomp$inline_357_ihl$jscomp$inline_331_ipdata$jscomp$inline_338_options$jscomp$inline_466_reply$jscomp$inline_94$$.eth = {ethertype:2048, src:$adapter$jscomp$6$$.router_mac, dest:$packet$jscomp$6$$.eth.src}, $data$jscomp$inline_462_eth$jscomp$inline_77_i$jscomp$inline_357_ihl$jscomp$inline_331_ipdata$jscomp$inline_338_options$jscomp$inline_466_reply$jscomp$inline_94$$.ipv4 = 
          {proto:17, src:$packet$jscomp$6$$.ipv4.dest, dest:$packet$jscomp$6$$.ipv4.src, }, $data$jscomp$inline_462_eth$jscomp$inline_77_i$jscomp$inline_357_ihl$jscomp$inline_331_ipdata$jscomp$inline_338_options$jscomp$inline_466_reply$jscomp$inline_94$$.udp = {sport:123, dport:$packet$jscomp$6$$.udp.sport}, $data$jscomp$inline_462_eth$jscomp$inline_77_i$jscomp$inline_357_ihl$jscomp$inline_331_ipdata$jscomp$inline_338_options$jscomp$inline_466_reply$jscomp$inline_94$$.ntp = Object.assign({}, $packet$jscomp$6$$.ntp), 
          $data$jscomp$inline_462_eth$jscomp$inline_77_i$jscomp$inline_357_ihl$jscomp$inline_331_ipdata$jscomp$inline_338_options$jscomp$inline_466_reply$jscomp$inline_94$$.ntp.flags = 36, $data$jscomp$inline_462_eth$jscomp$inline_77_i$jscomp$inline_357_ihl$jscomp$inline_331_ipdata$jscomp$inline_338_options$jscomp$inline_466_reply$jscomp$inline_94$$.ntp.poll = 10, $data$jscomp$inline_462_eth$jscomp$inline_77_i$jscomp$inline_357_ihl$jscomp$inline_331_ipdata$jscomp$inline_338_options$jscomp$inline_466_reply$jscomp$inline_94$$.ntp.ori_ts_i = 
          $packet$jscomp$6$$.ntp.trans_ts_i, $data$jscomp$inline_462_eth$jscomp$inline_77_i$jscomp$inline_357_ihl$jscomp$inline_331_ipdata$jscomp$inline_338_options$jscomp$inline_466_reply$jscomp$inline_94$$.ntp.ori_ts_f = $packet$jscomp$6$$.ntp.trans_ts_f, $data$jscomp$inline_462_eth$jscomp$inline_77_i$jscomp$inline_357_ihl$jscomp$inline_331_ipdata$jscomp$inline_338_options$jscomp$inline_466_reply$jscomp$inline_94$$.ntp.rec_ts_i = $arp$jscomp$inline_350_bop$jscomp$inline_83_data$jscomp$118_icmp$jscomp$inline_340_now_n$jscomp$inline_92_packet_subnet$jscomp$inline_107_payload$jscomp$inline_78_reply$jscomp$inline_103_reply$jscomp$inline_109_reply$jscomp$inline_354_reply$jscomp$inline_99_tcp$jscomp$inline_342_tuple$jscomp$inline_82_udp$jscomp$inline_345_view$jscomp$inline_339_view$jscomp$inline_344$$ / 
          1000, $data$jscomp$inline_462_eth$jscomp$inline_77_i$jscomp$inline_357_ihl$jscomp$inline_331_ipdata$jscomp$inline_338_options$jscomp$inline_466_reply$jscomp$inline_94$$.ntp.rec_ts_f = $answers$jscomp$inline_355_data$jscomp$inline_471_dhcp$jscomp$inline_465_ethertype$jscomp$inline_76_flags$jscomp$inline_343_now_n_f$jscomp$inline_93_proto$jscomp$inline_335_reply$jscomp$inline_84_router_subnet$jscomp$inline_108_view$jscomp$inline_341_view$jscomp$inline_349_view$jscomp$inline_464_view$jscomp$inline_473$$, 
          $data$jscomp$inline_462_eth$jscomp$inline_77_i$jscomp$inline_357_ihl$jscomp$inline_331_ipdata$jscomp$inline_338_options$jscomp$inline_466_reply$jscomp$inline_94$$.ntp.trans_ts_i = $arp$jscomp$inline_350_bop$jscomp$inline_83_data$jscomp$118_icmp$jscomp$inline_340_now_n$jscomp$inline_92_packet_subnet$jscomp$inline_107_payload$jscomp$inline_78_reply$jscomp$inline_103_reply$jscomp$inline_109_reply$jscomp$inline_354_reply$jscomp$inline_99_tcp$jscomp$inline_342_tuple$jscomp$inline_82_udp$jscomp$inline_345_view$jscomp$inline_339_view$jscomp$inline_344$$ / 
          1000, $data$jscomp$inline_462_eth$jscomp$inline_77_i$jscomp$inline_357_ihl$jscomp$inline_331_ipdata$jscomp$inline_338_options$jscomp$inline_466_reply$jscomp$inline_94$$.ntp.trans_ts_f = $answers$jscomp$inline_355_data$jscomp$inline_471_dhcp$jscomp$inline_465_ethertype$jscomp$inline_76_flags$jscomp$inline_343_now_n_f$jscomp$inline_93_proto$jscomp$inline_335_reply$jscomp$inline_84_router_subnet$jscomp$inline_108_view$jscomp$inline_341_view$jscomp$inline_349_view$jscomp$inline_464_view$jscomp$inline_473$$, 
          $data$jscomp$inline_462_eth$jscomp$inline_77_i$jscomp$inline_357_ihl$jscomp$inline_331_ipdata$jscomp$inline_338_options$jscomp$inline_466_reply$jscomp$inline_94$$.ntp.stratum = 2, $adapter$jscomp$6$$.receive($make_packet$$module$src$browser$fake_network$$($adapter$jscomp$6$$.eth_encoder_buf, $data$jscomp$inline_462_eth$jscomp$inline_77_i$jscomp$inline_357_ihl$jscomp$inline_331_ipdata$jscomp$inline_338_options$jscomp$inline_466_reply$jscomp$inline_94$$))) : 8 === $packet$jscomp$6$$.udp.dport && 
          ($arp$jscomp$inline_350_bop$jscomp$inline_83_data$jscomp$118_icmp$jscomp$inline_340_now_n$jscomp$inline_92_packet_subnet$jscomp$inline_107_payload$jscomp$inline_78_reply$jscomp$inline_103_reply$jscomp$inline_109_reply$jscomp$inline_354_reply$jscomp$inline_99_tcp$jscomp$inline_342_tuple$jscomp$inline_82_udp$jscomp$inline_345_view$jscomp$inline_339_view$jscomp$inline_344$$ = {}, $arp$jscomp$inline_350_bop$jscomp$inline_83_data$jscomp$118_icmp$jscomp$inline_340_now_n$jscomp$inline_92_packet_subnet$jscomp$inline_107_payload$jscomp$inline_78_reply$jscomp$inline_103_reply$jscomp$inline_109_reply$jscomp$inline_354_reply$jscomp$inline_99_tcp$jscomp$inline_342_tuple$jscomp$inline_82_udp$jscomp$inline_345_view$jscomp$inline_339_view$jscomp$inline_344$$.eth = 
          {ethertype:2048, src:$adapter$jscomp$6$$.router_mac, dest:$packet$jscomp$6$$.eth.src}, $arp$jscomp$inline_350_bop$jscomp$inline_83_data$jscomp$118_icmp$jscomp$inline_340_now_n$jscomp$inline_92_packet_subnet$jscomp$inline_107_payload$jscomp$inline_78_reply$jscomp$inline_103_reply$jscomp$inline_109_reply$jscomp$inline_354_reply$jscomp$inline_99_tcp$jscomp$inline_342_tuple$jscomp$inline_82_udp$jscomp$inline_345_view$jscomp$inline_339_view$jscomp$inline_344$$.ipv4 = {proto:17, src:$packet$jscomp$6$$.ipv4.dest, 
          dest:$packet$jscomp$6$$.ipv4.src, }, $arp$jscomp$inline_350_bop$jscomp$inline_83_data$jscomp$118_icmp$jscomp$inline_340_now_n$jscomp$inline_92_packet_subnet$jscomp$inline_107_payload$jscomp$inline_78_reply$jscomp$inline_103_reply$jscomp$inline_109_reply$jscomp$inline_354_reply$jscomp$inline_99_tcp$jscomp$inline_342_tuple$jscomp$inline_82_udp$jscomp$inline_345_view$jscomp$inline_339_view$jscomp$inline_344$$.udp = {sport:$packet$jscomp$6$$.udp.dport, dport:$packet$jscomp$6$$.udp.sport, data:(new TextEncoder).encode($packet$jscomp$6$$.udp.data_s)}, 
          $adapter$jscomp$6$$.receive($make_packet$$module$src$browser$fake_network$$($adapter$jscomp$6$$.eth_encoder_buf, $arp$jscomp$inline_350_bop$jscomp$inline_83_data$jscomp$118_icmp$jscomp$inline_340_now_n$jscomp$inline_92_packet_subnet$jscomp$inline_107_payload$jscomp$inline_78_reply$jscomp$inline_103_reply$jscomp$inline_109_reply$jscomp$inline_354_reply$jscomp$inline_99_tcp$jscomp$inline_342_tuple$jscomp$inline_82_udp$jscomp$inline_345_view$jscomp$inline_339_view$jscomp$inline_344$$)));
        }
      } else {
        $packet$jscomp$6$$.icmp && 8 === $packet$jscomp$6$$.icmp.type && ($arp$jscomp$inline_350_bop$jscomp$inline_83_data$jscomp$118_icmp$jscomp$inline_340_now_n$jscomp$inline_92_packet_subnet$jscomp$inline_107_payload$jscomp$inline_78_reply$jscomp$inline_103_reply$jscomp$inline_109_reply$jscomp$inline_354_reply$jscomp$inline_99_tcp$jscomp$inline_342_tuple$jscomp$inline_82_udp$jscomp$inline_345_view$jscomp$inline_339_view$jscomp$inline_344$$ = {}, $arp$jscomp$inline_350_bop$jscomp$inline_83_data$jscomp$118_icmp$jscomp$inline_340_now_n$jscomp$inline_92_packet_subnet$jscomp$inline_107_payload$jscomp$inline_78_reply$jscomp$inline_103_reply$jscomp$inline_109_reply$jscomp$inline_354_reply$jscomp$inline_99_tcp$jscomp$inline_342_tuple$jscomp$inline_82_udp$jscomp$inline_345_view$jscomp$inline_339_view$jscomp$inline_344$$.eth = 
        {ethertype:2048, src:$adapter$jscomp$6$$.router_mac, dest:$packet$jscomp$6$$.eth.src}, $arp$jscomp$inline_350_bop$jscomp$inline_83_data$jscomp$118_icmp$jscomp$inline_340_now_n$jscomp$inline_92_packet_subnet$jscomp$inline_107_payload$jscomp$inline_78_reply$jscomp$inline_103_reply$jscomp$inline_109_reply$jscomp$inline_354_reply$jscomp$inline_99_tcp$jscomp$inline_342_tuple$jscomp$inline_82_udp$jscomp$inline_345_view$jscomp$inline_339_view$jscomp$inline_344$$.ipv4 = {proto:1, src:$packet$jscomp$6$$.ipv4.dest, 
        dest:$packet$jscomp$6$$.ipv4.src, }, $arp$jscomp$inline_350_bop$jscomp$inline_83_data$jscomp$118_icmp$jscomp$inline_340_now_n$jscomp$inline_92_packet_subnet$jscomp$inline_107_payload$jscomp$inline_78_reply$jscomp$inline_103_reply$jscomp$inline_109_reply$jscomp$inline_354_reply$jscomp$inline_99_tcp$jscomp$inline_342_tuple$jscomp$inline_82_udp$jscomp$inline_345_view$jscomp$inline_339_view$jscomp$inline_344$$.icmp = {type:0, code:$packet$jscomp$6$$.icmp.code, data:$packet$jscomp$6$$.icmp.data}, 
        $adapter$jscomp$6$$.receive($make_packet$$module$src$browser$fake_network$$($adapter$jscomp$6$$.eth_encoder_buf, $arp$jscomp$inline_350_bop$jscomp$inline_83_data$jscomp$118_icmp$jscomp$inline_340_now_n$jscomp$inline_92_packet_subnet$jscomp$inline_107_payload$jscomp$inline_78_reply$jscomp$inline_103_reply$jscomp$inline_109_reply$jscomp$inline_354_reply$jscomp$inline_99_tcp$jscomp$inline_342_tuple$jscomp$inline_82_udp$jscomp$inline_345_view$jscomp$inline_339_view$jscomp$inline_344$$)));
      }
    }
  } else {
    $packet$jscomp$6$$.arp && 1 === $packet$jscomp$6$$.arp.oper && 2048 === $packet$jscomp$6$$.arp.ptype && ($arp$jscomp$inline_350_bop$jscomp$inline_83_data$jscomp$118_icmp$jscomp$inline_340_now_n$jscomp$inline_92_packet_subnet$jscomp$inline_107_payload$jscomp$inline_78_reply$jscomp$inline_103_reply$jscomp$inline_109_reply$jscomp$inline_354_reply$jscomp$inline_99_tcp$jscomp$inline_342_tuple$jscomp$inline_82_udp$jscomp$inline_345_view$jscomp$inline_339_view$jscomp$inline_344$$ = $iptolong$$module$src$browser$fake_network$$($packet$jscomp$6$$.arp.tpa) & 
    4294967040, $answers$jscomp$inline_355_data$jscomp$inline_471_dhcp$jscomp$inline_465_ethertype$jscomp$inline_76_flags$jscomp$inline_343_now_n_f$jscomp$inline_93_proto$jscomp$inline_335_reply$jscomp$inline_84_router_subnet$jscomp$inline_108_view$jscomp$inline_341_view$jscomp$inline_349_view$jscomp$inline_464_view$jscomp$inline_473$$ = $iptolong$$module$src$browser$fake_network$$($adapter$jscomp$6$$.router_ip) & 4294967040, !$adapter$jscomp$6$$.masquerade && $arp$jscomp$inline_350_bop$jscomp$inline_83_data$jscomp$118_icmp$jscomp$inline_340_now_n$jscomp$inline_92_packet_subnet$jscomp$inline_107_payload$jscomp$inline_78_reply$jscomp$inline_103_reply$jscomp$inline_109_reply$jscomp$inline_354_reply$jscomp$inline_99_tcp$jscomp$inline_342_tuple$jscomp$inline_82_udp$jscomp$inline_345_view$jscomp$inline_339_view$jscomp$inline_344$$ !== 
    $answers$jscomp$inline_355_data$jscomp$inline_471_dhcp$jscomp$inline_465_ethertype$jscomp$inline_76_flags$jscomp$inline_343_now_n_f$jscomp$inline_93_proto$jscomp$inline_335_reply$jscomp$inline_84_router_subnet$jscomp$inline_108_view$jscomp$inline_341_view$jscomp$inline_349_view$jscomp$inline_464_view$jscomp$inline_473$$ || $arp$jscomp$inline_350_bop$jscomp$inline_83_data$jscomp$118_icmp$jscomp$inline_340_now_n$jscomp$inline_92_packet_subnet$jscomp$inline_107_payload$jscomp$inline_78_reply$jscomp$inline_103_reply$jscomp$inline_109_reply$jscomp$inline_354_reply$jscomp$inline_99_tcp$jscomp$inline_342_tuple$jscomp$inline_82_udp$jscomp$inline_345_view$jscomp$inline_339_view$jscomp$inline_344$$ === 
    $answers$jscomp$inline_355_data$jscomp$inline_471_dhcp$jscomp$inline_465_ethertype$jscomp$inline_76_flags$jscomp$inline_343_now_n_f$jscomp$inline_93_proto$jscomp$inline_335_reply$jscomp$inline_84_router_subnet$jscomp$inline_108_view$jscomp$inline_341_view$jscomp$inline_349_view$jscomp$inline_464_view$jscomp$inline_473$$ && 99 < $packet$jscomp$6$$.arp.tpa[3] || ($arp$jscomp$inline_350_bop$jscomp$inline_83_data$jscomp$118_icmp$jscomp$inline_340_now_n$jscomp$inline_92_packet_subnet$jscomp$inline_107_payload$jscomp$inline_78_reply$jscomp$inline_103_reply$jscomp$inline_109_reply$jscomp$inline_354_reply$jscomp$inline_99_tcp$jscomp$inline_342_tuple$jscomp$inline_82_udp$jscomp$inline_345_view$jscomp$inline_339_view$jscomp$inline_344$$ = 
    {}, $arp$jscomp$inline_350_bop$jscomp$inline_83_data$jscomp$118_icmp$jscomp$inline_340_now_n$jscomp$inline_92_packet_subnet$jscomp$inline_107_payload$jscomp$inline_78_reply$jscomp$inline_103_reply$jscomp$inline_109_reply$jscomp$inline_354_reply$jscomp$inline_99_tcp$jscomp$inline_342_tuple$jscomp$inline_82_udp$jscomp$inline_345_view$jscomp$inline_339_view$jscomp$inline_344$$.eth = {ethertype:2054, src:$adapter$jscomp$6$$.router_mac, dest:$packet$jscomp$6$$.eth.src}, $arp$jscomp$inline_350_bop$jscomp$inline_83_data$jscomp$118_icmp$jscomp$inline_340_now_n$jscomp$inline_92_packet_subnet$jscomp$inline_107_payload$jscomp$inline_78_reply$jscomp$inline_103_reply$jscomp$inline_109_reply$jscomp$inline_354_reply$jscomp$inline_99_tcp$jscomp$inline_342_tuple$jscomp$inline_82_udp$jscomp$inline_345_view$jscomp$inline_339_view$jscomp$inline_344$$.arp = 
    {htype:1, ptype:2048, oper:2, sha:$adapter$jscomp$6$$.router_mac, spa:$packet$jscomp$6$$.arp.tpa, tha:$packet$jscomp$6$$.eth.src, tpa:$packet$jscomp$6$$.arp.spa}, $adapter$jscomp$6$$.receive($make_packet$$module$src$browser$fake_network$$($adapter$jscomp$6$$.eth_encoder_buf, $arp$jscomp$inline_350_bop$jscomp$inline_83_data$jscomp$118_icmp$jscomp$inline_340_now_n$jscomp$inline_92_packet_subnet$jscomp$inline_107_payload$jscomp$inline_78_reply$jscomp$inline_103_reply$jscomp$inline_109_reply$jscomp$inline_354_reply$jscomp$inline_99_tcp$jscomp$inline_342_tuple$jscomp$inline_82_udp$jscomp$inline_345_view$jscomp$inline_339_view$jscomp$inline_344$$))));
  }
}
function $parse_dns$$module$src$browser$fake_network$$($data$jscomp$124$$, $o$jscomp$6$$) {
  function $read_dstr$$() {
    let $o$jscomp$7$$ = [], $len$jscomp$19$$;
    do {
      $len$jscomp$19$$ = $view$jscomp$18$$.getUint8($offset$jscomp$44$$), $o$jscomp$7$$.push((new TextDecoder).decode($data$jscomp$124$$.subarray($offset$jscomp$44$$ + 1, $offset$jscomp$44$$ + 1 + $len$jscomp$19$$))), $offset$jscomp$44$$ += $len$jscomp$19$$ + 1;
    } while (0 < $len$jscomp$19$$);
    return $o$jscomp$7$$;
  }
  let $view$jscomp$18$$ = new DataView($data$jscomp$124$$.buffer, $data$jscomp$124$$.byteOffset, $data$jscomp$124$$.byteLength), $dns$$ = {id:$view$jscomp$18$$.getUint16(0), flags:$view$jscomp$18$$.getUint16(2), questions:[], answers:[]};
  var $i$jscomp$47_qdcount$$ = $view$jscomp$18$$.getUint16(4);
  let $ancount$$ = $view$jscomp$18$$.getUint16(6);
  $view$jscomp$18$$.getUint16(8);
  $view$jscomp$18$$.getUint16(10);
  let $offset$jscomp$44$$ = 12;
  for (var $ans_i$jscomp$46$$ = 0; $ans_i$jscomp$46$$ < $i$jscomp$47_qdcount$$; $ans_i$jscomp$46$$++) {
    $dns$$.questions.push({name:$read_dstr$$(), type:$view$jscomp$18$$.getInt16($offset$jscomp$44$$), class:$view$jscomp$18$$.getInt16($offset$jscomp$44$$ + 2)}), $offset$jscomp$44$$ += 4;
  }
  for ($i$jscomp$47_qdcount$$ = 0; $i$jscomp$47_qdcount$$ < $ancount$$; $i$jscomp$47_qdcount$$++) {
    $ans_i$jscomp$46$$ = {name:$read_dstr$$(), type:$view$jscomp$18$$.getInt16($offset$jscomp$44$$), class:$view$jscomp$18$$.getUint16($offset$jscomp$44$$ + 2), ttl:$view$jscomp$18$$.getUint32($offset$jscomp$44$$ + 4)};
    $offset$jscomp$44$$ += 8;
    let $rdlen$$ = $view$jscomp$18$$.getUint16($offset$jscomp$44$$);
    $offset$jscomp$44$$ += 2;
    $ans_i$jscomp$46$$.data = $data$jscomp$124$$.subarray($offset$jscomp$44$$, $offset$jscomp$44$$ + $rdlen$$);
    $offset$jscomp$44$$ += $rdlen$$;
    $dns$$.answers.push($ans_i$jscomp$46$$);
  }
  $o$jscomp$6$$.dns = $dns$$;
}
function $fake_tcp_connect$$module$src$browser$fake_network$$($dport$$, $adapter$jscomp$7$$) {
  var $conn_vm_ip_str$$ = $adapter$jscomp$7$$.vm_ip.join(".");
  const $router_ip_str$$ = $adapter$jscomp$7$$.router_ip.join("."), $sport_0$$ = 16383 * Math.random() | 0;
  let $sport$$, $tuple$jscomp$1$$, $sport_i$$ = 0;
  do {
    $sport$$ = 49152 + ($sport_0$$ + $sport_i$$) % 16383, $tuple$jscomp$1$$ = `${$conn_vm_ip_str$$}:${$dport$$}:${$router_ip_str$$}:${$sport$$}`;
  } while (16383 > ++$sport_i$$ && $adapter$jscomp$7$$.tcp_conn[$tuple$jscomp$1$$]);
  if ($adapter$jscomp$7$$.tcp_conn[$tuple$jscomp$1$$]) {
    throw Error("pool of dynamic TCP port numbers exhausted, connection aborted");
  }
  $conn_vm_ip_str$$ = new $TCPConnection$$module$src$browser$fake_network$$;
  $conn_vm_ip_str$$.tuple = $tuple$jscomp$1$$;
  $conn_vm_ip_str$$.hsrc = $adapter$jscomp$7$$.router_mac;
  $conn_vm_ip_str$$.psrc = $adapter$jscomp$7$$.router_ip;
  $conn_vm_ip_str$$.sport = $sport$$;
  $conn_vm_ip_str$$.hdest = $adapter$jscomp$7$$.vm_mac;
  $conn_vm_ip_str$$.dport = $dport$$;
  $conn_vm_ip_str$$.pdest = $adapter$jscomp$7$$.vm_ip;
  $conn_vm_ip_str$$.net = $adapter$jscomp$7$$;
  $adapter$jscomp$7$$.tcp_conn[$tuple$jscomp$1$$] = $conn_vm_ip_str$$;
  $conn_vm_ip_str$$.connect();
  return $conn_vm_ip_str$$;
}
function $fake_tcp_probe$$module$src$browser$fake_network$$($dport$jscomp$1$$, $adapter$jscomp$8$$) {
  return new Promise($res$$ => {
    let $handle$jscomp$12$$ = $fake_tcp_connect$$module$src$browser$fake_network$$($dport$jscomp$1$$, $adapter$jscomp$8$$);
    $handle$jscomp$12$$.state = "syn-probe";
    $handle$jscomp$12$$.on("probe", $res$$);
  });
}
function $TCPConnection$$module$src$browser$fake_network$$() {
  this.state = "closed";
  this.net = null;
  this.send_buffer = new $GrowableRingbuffer$$module$src$browser$fake_network$$(2048, 0);
  this.send_chunk_buf = new Uint8Array(1460);
  this.delayed_send_fin = this.in_active_close = !1;
  this.delayed_state = void 0;
  this.events_handlers = {};
}
$TCPConnection$$module$src$browser$fake_network$$.prototype.on = function($event$jscomp$7$$, $handler$jscomp$12$$) {
  this.events_handlers[$event$jscomp$7$$] = $handler$jscomp$12$$;
};
$TCPConnection$$module$src$browser$fake_network$$.prototype.emit = function($event$jscomp$8$$, ...$args$$) {
  this.events_handlers[$event$jscomp$8$$] && this.events_handlers[$event$jscomp$8$$].apply(this, $args$$);
};
$TCPConnection$$module$src$browser$fake_network$$.prototype.ipv4_reply = function() {
  let $reply$jscomp$5$$ = {};
  $reply$jscomp$5$$.eth = {ethertype:2048, src:this.hsrc, dest:this.hdest};
  $reply$jscomp$5$$.ipv4 = {proto:6, src:this.psrc, dest:this.pdest};
  $reply$jscomp$5$$.tcp = {sport:this.sport, dport:this.dport, winsize:this.winsize, ackn:this.ack, seq:this.seq, ack:!0};
  return $reply$jscomp$5$$;
};
$TCPConnection$$module$src$browser$fake_network$$.prototype.packet_reply = function($packet$jscomp$7_reply_tcp$$, $reply$jscomp$6_tcp_options$$) {
  $packet$jscomp$7_reply_tcp$$ = {sport:$packet$jscomp$7_reply_tcp$$.tcp.dport, dport:$packet$jscomp$7_reply_tcp$$.tcp.sport, winsize:$packet$jscomp$7_reply_tcp$$.tcp.winsize, ackn:this.ack, seq:this.seq};
  if ($reply$jscomp$6_tcp_options$$) {
    for (const $opt$jscomp$1$$ in $reply$jscomp$6_tcp_options$$) {
      $packet$jscomp$7_reply_tcp$$[$opt$jscomp$1$$] = $reply$jscomp$6_tcp_options$$[$opt$jscomp$1$$];
    }
  }
  $reply$jscomp$6_tcp_options$$ = this.ipv4_reply();
  $reply$jscomp$6_tcp_options$$.tcp = $packet$jscomp$7_reply_tcp$$;
  return $reply$jscomp$6_tcp_options$$;
};
$TCPConnection$$module$src$browser$fake_network$$.prototype.connect = function() {
  this.seq = 1338;
  this.ack = 1;
  this.start_seq = 0;
  this.winsize = 64240;
  this.state = "syn-sent";
  let $reply$jscomp$7$$ = this.ipv4_reply();
  $reply$jscomp$7$$.ipv4.id = 2345;
  $reply$jscomp$7$$.tcp = {sport:this.sport, dport:this.dport, seq:1337, ackn:0, winsize:0, syn:!0, };
  this.net.receive($make_packet$$module$src$browser$fake_network$$(this.net.eth_encoder_buf, $reply$jscomp$7$$));
};
$TCPConnection$$module$src$browser$fake_network$$.prototype.accept = function($packet$jscomp$8$$) {
  this.seq = 1338;
  this.ack = $packet$jscomp$8$$.tcp.seq + 1;
  this.start_seq = $packet$jscomp$8$$.tcp.seq;
  this.hsrc = this.net.router_mac;
  this.psrc = $packet$jscomp$8$$.ipv4.dest;
  this.sport = $packet$jscomp$8$$.tcp.dport;
  this.hdest = $packet$jscomp$8$$.eth.src;
  this.dport = $packet$jscomp$8$$.tcp.sport;
  this.pdest = $packet$jscomp$8$$.ipv4.src;
  this.winsize = $packet$jscomp$8$$.tcp.winsize;
  let $reply$jscomp$8$$ = this.ipv4_reply();
  $reply$jscomp$8$$.tcp = {sport:this.sport, dport:this.dport, seq:1337, ackn:this.ack, winsize:$packet$jscomp$8$$.tcp.winsize, syn:!0, ack:!0};
  this.state = "established";
  this.net.receive($make_packet$$module$src$browser$fake_network$$(this.net.eth_encoder_buf, $reply$jscomp$8$$));
};
$TCPConnection$$module$src$browser$fake_network$$.prototype.process = function($packet$jscomp$9_reply$jscomp$12_reply$jscomp$13_reply$jscomp$15_reply$jscomp$9$$) {
  if ("closed" === this.state) {
    $packet$jscomp$9_reply$jscomp$12_reply$jscomp$13_reply$jscomp$15_reply$jscomp$9$$ = this.packet_reply($packet$jscomp$9_reply$jscomp$12_reply$jscomp$13_reply$jscomp$15_reply$jscomp$9$$, {rst:!0}), this.net.receive($make_packet$$module$src$browser$fake_network$$(this.net.eth_encoder_buf, $packet$jscomp$9_reply$jscomp$12_reply$jscomp$13_reply$jscomp$15_reply$jscomp$9$$));
  } else {
    if ($packet$jscomp$9_reply$jscomp$12_reply$jscomp$13_reply$jscomp$15_reply$jscomp$9$$.tcp.rst) {
      if ("syn-probe" === this.state) {
        this.emit("probe", !1);
      } else {
        this.on_close();
      }
      this.release();
    } else {
      if ($packet$jscomp$9_reply$jscomp$12_reply$jscomp$13_reply$jscomp$15_reply$jscomp$9$$.tcp.syn) {
        if ("syn-sent" === this.state && $packet$jscomp$9_reply$jscomp$12_reply$jscomp$13_reply$jscomp$15_reply$jscomp$9$$.tcp.ack) {
          this.ack = $packet$jscomp$9_reply$jscomp$12_reply$jscomp$13_reply$jscomp$15_reply$jscomp$9$$.tcp.seq + 1;
          this.start_seq = $packet$jscomp$9_reply$jscomp$12_reply$jscomp$13_reply$jscomp$15_reply$jscomp$9$$.tcp.seq;
          this.last_received_ackn = $packet$jscomp$9_reply$jscomp$12_reply$jscomp$13_reply$jscomp$15_reply$jscomp$9$$.tcp.ackn;
          var $n_ack_reply$jscomp$10_reply$jscomp$11_reply$jscomp$14_reply$jscomp$16$$ = this.ipv4_reply();
          this.net.receive($make_packet$$module$src$browser$fake_network$$(this.net.eth_encoder_buf, $n_ack_reply$jscomp$10_reply$jscomp$11_reply$jscomp$14_reply$jscomp$16$$));
          this.state = "established";
          this.emit("connect");
        } else {
          "syn-probe" === this.state && $packet$jscomp$9_reply$jscomp$12_reply$jscomp$13_reply$jscomp$15_reply$jscomp$9$$.tcp.ack ? (this.emit("probe", !0), $n_ack_reply$jscomp$10_reply$jscomp$11_reply$jscomp$14_reply$jscomp$16$$ = this.packet_reply($packet$jscomp$9_reply$jscomp$12_reply$jscomp$13_reply$jscomp$15_reply$jscomp$9$$, {rst:!0}), this.net.receive($make_packet$$module$src$browser$fake_network$$(this.net.eth_encoder_buf, $n_ack_reply$jscomp$10_reply$jscomp$11_reply$jscomp$14_reply$jscomp$16$$)), 
          this.release()) : $dbg_log$$module$src$log$$(`TCP[${this.tuple}]: WARNING: unexpected SYN packet dropped`, 16777216);
        }
        $packet$jscomp$9_reply$jscomp$12_reply$jscomp$13_reply$jscomp$15_reply$jscomp$9$$.tcp_data.length && $dbg_log$$module$src$log$$(`TCP[${this.tuple}]: WARNING: ${$packet$jscomp$9_reply$jscomp$12_reply$jscomp$13_reply$jscomp$15_reply$jscomp$9$$.tcp_data.length} bytes of unexpected SYN packet payload dropped`, 16777216);
      } else {
        if ($packet$jscomp$9_reply$jscomp$12_reply$jscomp$13_reply$jscomp$15_reply$jscomp$9$$.tcp.ack) {
          if ("syn-received" === this.state) {
            this.state = "established";
          } else {
            if ("fin-wait-1" === this.state) {
              $packet$jscomp$9_reply$jscomp$12_reply$jscomp$13_reply$jscomp$15_reply$jscomp$9$$.tcp.fin || (this.state = "fin-wait-2");
            } else {
              if ("closing" === this.state || "last-ack" === this.state) {
                this.release();
                return;
              }
            }
          }
        }
        if (void 0 === this.last_received_ackn) {
          this.last_received_ackn = $packet$jscomp$9_reply$jscomp$12_reply$jscomp$13_reply$jscomp$15_reply$jscomp$9$$.tcp.ackn;
        } else {
          if ($n_ack_reply$jscomp$10_reply$jscomp$11_reply$jscomp$14_reply$jscomp$16$$ = $packet$jscomp$9_reply$jscomp$12_reply$jscomp$13_reply$jscomp$15_reply$jscomp$9$$.tcp.ackn - this.last_received_ackn, 0 < $n_ack_reply$jscomp$10_reply$jscomp$11_reply$jscomp$14_reply$jscomp$16$$) {
            if (this.last_received_ackn = $packet$jscomp$9_reply$jscomp$12_reply$jscomp$13_reply$jscomp$15_reply$jscomp$9$$.tcp.ackn, this.send_buffer.remove($n_ack_reply$jscomp$10_reply$jscomp$11_reply$jscomp$14_reply$jscomp$16$$), this.seq += $n_ack_reply$jscomp$10_reply$jscomp$11_reply$jscomp$14_reply$jscomp$16$$, this.pending = !1, this.delayed_send_fin && !this.send_buffer.length) {
              this.delayed_send_fin = !1;
              this.state = this.delayed_state;
              $packet$jscomp$9_reply$jscomp$12_reply$jscomp$13_reply$jscomp$15_reply$jscomp$9$$ = this.ipv4_reply();
              $packet$jscomp$9_reply$jscomp$12_reply$jscomp$13_reply$jscomp$15_reply$jscomp$9$$.tcp.fin = !0;
              this.net.receive($make_packet$$module$src$browser$fake_network$$(this.net.eth_encoder_buf, $packet$jscomp$9_reply$jscomp$12_reply$jscomp$13_reply$jscomp$15_reply$jscomp$9$$));
              return;
            }
          } else {
            if (0 > $n_ack_reply$jscomp$10_reply$jscomp$11_reply$jscomp$14_reply$jscomp$16$$) {
              $dbg_log$$module$src$log$$(`TCP[${this.tuple}]: ERROR: ack underflow (pkt=${$packet$jscomp$9_reply$jscomp$12_reply$jscomp$13_reply$jscomp$15_reply$jscomp$9$$.tcp.ackn} last=${this.last_received_ackn}), resetting`, 16777216);
              $packet$jscomp$9_reply$jscomp$12_reply$jscomp$13_reply$jscomp$15_reply$jscomp$9$$ = this.packet_reply($packet$jscomp$9_reply$jscomp$12_reply$jscomp$13_reply$jscomp$15_reply$jscomp$9$$, {rst:!0});
              this.net.receive($make_packet$$module$src$browser$fake_network$$(this.net.eth_encoder_buf, $packet$jscomp$9_reply$jscomp$12_reply$jscomp$13_reply$jscomp$15_reply$jscomp$9$$));
              this.on_close();
              this.release();
              return;
            }
          }
        }
        $packet$jscomp$9_reply$jscomp$12_reply$jscomp$13_reply$jscomp$15_reply$jscomp$9$$.tcp.fin ? (this.ack !== $packet$jscomp$9_reply$jscomp$12_reply$jscomp$13_reply$jscomp$15_reply$jscomp$9$$.tcp.seq && $dbg_log$$module$src$log$$(`TCP[${this.tuple}]: WARNING: closing connection in state "${this.state}" with invalid seq (${this.ack} != ${$packet$jscomp$9_reply$jscomp$12_reply$jscomp$13_reply$jscomp$15_reply$jscomp$9$$.tcp.seq})`, 16777216), ++this.ack, $n_ack_reply$jscomp$10_reply$jscomp$11_reply$jscomp$14_reply$jscomp$16$$ = 
        this.packet_reply($packet$jscomp$9_reply$jscomp$12_reply$jscomp$13_reply$jscomp$15_reply$jscomp$9$$, {}), "established" === this.state ? ($n_ack_reply$jscomp$10_reply$jscomp$11_reply$jscomp$14_reply$jscomp$16$$.tcp.ack = !0, this.state = "close-wait", this.on_shutdown()) : "fin-wait-1" === this.state ? ($packet$jscomp$9_reply$jscomp$12_reply$jscomp$13_reply$jscomp$15_reply$jscomp$9$$.tcp.ack ? this.release() : this.state = "closing", $n_ack_reply$jscomp$10_reply$jscomp$11_reply$jscomp$14_reply$jscomp$16$$.tcp.ack = 
        !0) : "fin-wait-2" === this.state ? (this.release(), $n_ack_reply$jscomp$10_reply$jscomp$11_reply$jscomp$14_reply$jscomp$16$$.tcp.ack = !0) : (this.release(), this.on_close(), $n_ack_reply$jscomp$10_reply$jscomp$11_reply$jscomp$14_reply$jscomp$16$$.tcp.rst = !0), this.net.receive($make_packet$$module$src$browser$fake_network$$(this.net.eth_encoder_buf, $n_ack_reply$jscomp$10_reply$jscomp$11_reply$jscomp$14_reply$jscomp$16$$))) : this.ack !== $packet$jscomp$9_reply$jscomp$12_reply$jscomp$13_reply$jscomp$15_reply$jscomp$9$$.tcp.seq ? 
        (this.ack !== $packet$jscomp$9_reply$jscomp$12_reply$jscomp$13_reply$jscomp$15_reply$jscomp$9$$.tcp.seq + 1 && $dbg_log$$module$src$log$$(`Packet seq was wrong ex: ${this.ack} ~${this.ack - this.start_seq} ` + `pk: ${$packet$jscomp$9_reply$jscomp$12_reply$jscomp$13_reply$jscomp$15_reply$jscomp$9$$.tcp.seq} ~${this.start_seq - $packet$jscomp$9_reply$jscomp$12_reply$jscomp$13_reply$jscomp$15_reply$jscomp$9$$.tcp.seq} ` + `(${this.ack - $packet$jscomp$9_reply$jscomp$12_reply$jscomp$13_reply$jscomp$15_reply$jscomp$9$$.tcp.seq}) = ${this.name}`, 
        16777216), $packet$jscomp$9_reply$jscomp$12_reply$jscomp$13_reply$jscomp$15_reply$jscomp$9$$ = this.packet_reply($packet$jscomp$9_reply$jscomp$12_reply$jscomp$13_reply$jscomp$15_reply$jscomp$9$$, {ack:!0}), this.net.receive($make_packet$$module$src$browser$fake_network$$(this.net.eth_encoder_buf, $packet$jscomp$9_reply$jscomp$12_reply$jscomp$13_reply$jscomp$15_reply$jscomp$9$$))) : $packet$jscomp$9_reply$jscomp$12_reply$jscomp$13_reply$jscomp$15_reply$jscomp$9$$.tcp.ack && 0 < $packet$jscomp$9_reply$jscomp$12_reply$jscomp$13_reply$jscomp$15_reply$jscomp$9$$.tcp_data.length && 
        (this.ack += $packet$jscomp$9_reply$jscomp$12_reply$jscomp$13_reply$jscomp$15_reply$jscomp$9$$.tcp_data.length, $n_ack_reply$jscomp$10_reply$jscomp$11_reply$jscomp$14_reply$jscomp$16$$ = this.ipv4_reply(), this.net.receive($make_packet$$module$src$browser$fake_network$$(this.net.eth_encoder_buf, $n_ack_reply$jscomp$10_reply$jscomp$11_reply$jscomp$14_reply$jscomp$16$$)), this.emit("data", $packet$jscomp$9_reply$jscomp$12_reply$jscomp$13_reply$jscomp$15_reply$jscomp$9$$.tcp_data));
        this.pump();
      }
    }
  }
};
$TCPConnection$$module$src$browser$fake_network$$.prototype.write = function($data$jscomp$128$$) {
  this.in_active_close || this.send_buffer.write($data$jscomp$128$$);
  this.pump();
};
$TCPConnection$$module$src$browser$fake_network$$.prototype.writev = function($data_array$$) {
  if (!this.in_active_close) {
    for (const $data$jscomp$129$$ of $data_array$$) {
      this.send_buffer.write($data$jscomp$129$$);
    }
  }
  this.pump();
};
$TCPConnection$$module$src$browser$fake_network$$.prototype.close = function() {
  if (!this.in_active_close) {
    this.in_active_close = !0;
    if ("established" === this.state || "syn-received" === this.state) {
      var $next_state_reply$jscomp$17$$ = "fin-wait-1";
    } else {
      if ("close-wait" === this.state) {
        $next_state_reply$jscomp$17$$ = "last-ack";
      } else {
        "syn-sent" !== this.state && $dbg_log$$module$src$log$$(`TCP[${this.tuple}]: active close in unexpected state "${this.state}"`, 16777216);
        this.release();
        return;
      }
    }
    this.send_buffer.length || this.pending ? (this.delayed_send_fin = !0, this.delayed_state = $next_state_reply$jscomp$17$$) : (this.state = $next_state_reply$jscomp$17$$, $next_state_reply$jscomp$17$$ = this.ipv4_reply(), $next_state_reply$jscomp$17$$.tcp.fin = !0, this.net.receive($make_packet$$module$src$browser$fake_network$$(this.net.eth_encoder_buf, $next_state_reply$jscomp$17$$)));
  }
  this.pump();
};
$TCPConnection$$module$src$browser$fake_network$$.prototype.on_shutdown = function() {
  this.emit("shutdown");
};
$TCPConnection$$module$src$browser$fake_network$$.prototype.on_close = function() {
  this.emit("close");
};
$TCPConnection$$module$src$browser$fake_network$$.prototype.release = function() {
  this.net.tcp_conn[this.tuple] && (this.state = "closed", delete this.net.tcp_conn[this.tuple]);
};
$TCPConnection$$module$src$browser$fake_network$$.prototype.pump = function() {
  if (this.send_buffer.length && !this.pending) {
    const $data$jscomp$130$$ = this.send_chunk_buf, $n_ready$$ = this.send_buffer.peek($data$jscomp$130$$), $reply$jscomp$18$$ = this.ipv4_reply();
    $reply$jscomp$18$$.tcp.psh = !0;
    $reply$jscomp$18$$.tcp_data = $data$jscomp$130$$.subarray(0, $n_ready$$);
    this.net.receive($make_packet$$module$src$browser$fake_network$$(this.net.eth_encoder_buf, $reply$jscomp$18$$));
    this.pending = !0;
  }
};
function $FetchNetworkAdapter$$module$src$browser$fetch_network$$($bus$jscomp$8$$, $config$jscomp$2$$) {
  $config$jscomp$2$$ = $config$jscomp$2$$ || {};
  this.bus = $bus$jscomp$8$$;
  this.id = $config$jscomp$2$$.id || 0;
  this.router_mac = new Uint8Array(($config$jscomp$2$$.router_mac || "52:54:0:1:2:3").split(":").map(function($x$jscomp$104$$) {
    return parseInt($x$jscomp$104$$, 16);
  }));
  this.router_ip = new Uint8Array(($config$jscomp$2$$.router_ip || "192.168.86.1").split(".").map(function($x$jscomp$105$$) {
    return parseInt($x$jscomp$105$$, 10);
  }));
  this.vm_ip = new Uint8Array(($config$jscomp$2$$.vm_ip || "192.168.86.100").split(".").map(function($x$jscomp$106$$) {
    return parseInt($x$jscomp$106$$, 10);
  }));
  this.masquerade = void 0 === $config$jscomp$2$$.masquerade || !!$config$jscomp$2$$.masquerade;
  this.vm_mac = new Uint8Array(6);
  this.dns_method = $config$jscomp$2$$.dns_method || "static";
  this.doh_server = $config$jscomp$2$$.doh_server;
  this.tcp_conn = {};
  this.eth_encoder_buf = $create_eth_encoder_buf$$module$src$browser$fake_network$$();
  this.fetch = (...$args$jscomp$1$$) => fetch(...$args$jscomp$1$$);
  this.cors_proxy = $config$jscomp$2$$.cors_proxy;
  this.bus.register("net" + this.id + "-mac", function($mac$$) {
    this.vm_mac = new Uint8Array($mac$$.split(":").map(function($x$jscomp$107$$) {
      return parseInt($x$jscomp$107$$, 16);
    }));
  }, this);
  this.bus.register("net" + this.id + "-send", function($data$jscomp$131$$) {
    this.send($data$jscomp$131$$);
  }, this);
}
$FetchNetworkAdapter$$module$src$browser$fetch_network$$.prototype.destroy = function() {
};
$FetchNetworkAdapter$$module$src$browser$fetch_network$$.prototype.on_tcp_connection = function($packet$jscomp$13$$, $tuple$jscomp$2$$) {
  if (80 === $packet$jscomp$13$$.tcp.dport) {
    let $conn$jscomp$1$$ = new $TCPConnection$$module$src$browser$fake_network$$;
    $conn$jscomp$1$$.state = "syn-received";
    $conn$jscomp$1$$.net = this;
    $conn$jscomp$1$$.on("data", $on_data_http$$module$src$browser$fetch_network$$);
    $conn$jscomp$1$$.tuple = $tuple$jscomp$2$$;
    $conn$jscomp$1$$.accept($packet$jscomp$13$$);
    this.tcp_conn[$tuple$jscomp$2$$] = $conn$jscomp$1$$;
    return !0;
  }
  return !1;
};
$FetchNetworkAdapter$$module$src$browser$fetch_network$$.prototype.connect = function($port$$) {
  return $fake_tcp_connect$$module$src$browser$fake_network$$($port$$, this);
};
$FetchNetworkAdapter$$module$src$browser$fetch_network$$.prototype.tcp_probe = function($port$jscomp$1$$) {
  return $fake_tcp_probe$$module$src$browser$fake_network$$($port$jscomp$1$$, this);
};
async function $on_data_http$$module$src$browser$fetch_network$$($data$jscomp$132_data$jscomp$133_offset$jscomp$48$$) {
  this.read = this.read || "";
  if ((this.read += (new TextDecoder).decode($data$jscomp$132_data$jscomp$133_offset$jscomp$48$$)) && -1 !== this.read.indexOf("\r\n\r\n")) {
    $data$jscomp$132_data$jscomp$133_offset$jscomp$48$$ = this.read.indexOf("\r\n\r\n");
    var $headers_localport_opts$$ = this.read.substring(0, $data$jscomp$132_data$jscomp$133_offset$jscomp$48$$).split(/\r\n/);
    $data$jscomp$132_data$jscomp$133_offset$jscomp$48$$ = this.read.substring($data$jscomp$132_data$jscomp$133_offset$jscomp$48$$ + 4);
    this.read = "";
    let $first_line$$ = $headers_localport_opts$$[0].split(" "), $target$jscomp$93$$;
    $target$jscomp$93$$ = /^https?:/.test($first_line$$[1]) ? new URL($first_line$$[1]) : new URL("http://host" + $first_line$$[1]);
    "undefined" !== typeof window && "http:" === $target$jscomp$93$$.protocol && "https:" === window.location.protocol && ($target$jscomp$93$$.protocol = "https:");
    let $req_headers$$ = new Headers;
    for (let $i$jscomp$51$$ = 1; $i$jscomp$51$$ < $headers_localport_opts$$.length; ++$i$jscomp$51$$) {
      const $header$jscomp$3$$ = this.net.parse_http_header($headers_localport_opts$$[$i$jscomp$51$$]);
      if (!$header$jscomp$3$$) {
        console.warn('The request contains an invalid header: "%s"', $headers_localport_opts$$[$i$jscomp$51$$]);
        this.net.respond_text_and_close(this, 400, "Bad Request", `Invalid header in request: ${$headers_localport_opts$$[$i$jscomp$51$$]}`);
        return;
      }
      "host" === $header$jscomp$3$$.key.toLowerCase() ? $target$jscomp$93$$.host = $header$jscomp$3$$.value : $req_headers$$.append($header$jscomp$3$$.key, $header$jscomp$3$$.value);
    }
    if (!this.net.cors_proxy && /^\d+\.external$/.test($target$jscomp$93$$.hostname)) {
      if ($dbg_log$$module$src$log$$("Request to localhost: " + $target$jscomp$93$$.href, 16777216), $headers_localport_opts$$ = parseInt($target$jscomp$93$$.hostname.split(".")[0], 10), !isNaN($headers_localport_opts$$) && 0 < $headers_localport_opts$$ && 65536 > $headers_localport_opts$$) {
        $target$jscomp$93$$.protocol = "http:", $target$jscomp$93$$.hostname = "localhost", $target$jscomp$93$$.port = $headers_localport_opts$$.toString(10);
      } else {
        console.warn('Unknown port for localhost: "%s"', $target$jscomp$93$$.href);
        this.net.respond_text_and_close(this, 400, "Bad Request", `Unknown port for localhost: ${$target$jscomp$93$$.href}`);
        return;
      }
    }
    $dbg_log$$module$src$log$$("HTTP Dispatch: " + $target$jscomp$93$$.href, 16777216);
    this.name = $target$jscomp$93$$.href;
    $headers_localport_opts$$ = {method:$first_line$$[0], headers:$req_headers$$, };
    -1 !== ["put", "post"].indexOf($headers_localport_opts$$.method.toLowerCase()) && ($headers_localport_opts$$.body = $data$jscomp$132_data$jscomp$133_offset$jscomp$48$$);
    const $fetch_url$jscomp$1$$ = this.net.cors_proxy ? this.net.cors_proxy + encodeURIComponent($target$jscomp$93$$.href) : $target$jscomp$93$$.href;
    new TextEncoder;
    let $response_started$$ = !1;
    this.net.fetch($fetch_url$jscomp$1$$, $headers_localport_opts$$).then($resp$jscomp$1$$ => {
      let $resp_headers$$ = new Headers($resp$jscomp$1$$.headers);
      $resp_headers$$.delete("content-encoding");
      $resp_headers$$.delete("keep-alive");
      $resp_headers$$.delete("content-length");
      $resp_headers$$.delete("transfer-encoding");
      $resp_headers$$.set("x-was-fetch-redirected", `${!!$resp$jscomp$1$$.redirected}`);
      $resp_headers$$.set("x-fetch-resp-url", $resp$jscomp$1$$.url);
      $resp_headers$$.set("connection", "close");
      this.write(this.net.form_response_head($resp$jscomp$1$$.status, $resp$jscomp$1$$.statusText, $resp_headers$$));
      $response_started$$ = !0;
      if ($resp$jscomp$1$$.body && $resp$jscomp$1$$.body.getReader) {
        const $resp_reader$$ = $resp$jscomp$1$$.body.getReader(), $pump$$ = ({value:$value$jscomp$136$$, done:$done$jscomp$3$$}) => {
          $value$jscomp$136$$ && this.write($value$jscomp$136$$);
          if ($done$jscomp$3$$) {
            this.close();
          } else {
            return $resp_reader$$.read().then($pump$$);
          }
        };
        $resp_reader$$.read().then($pump$$);
      } else {
        $resp$jscomp$1$$.arrayBuffer().then($buffer$jscomp$36$$ => {
          this.write(new Uint8Array($buffer$jscomp$36$$));
          this.close();
        });
      }
    }).catch($e$jscomp$17$$ => {
      console.warn("Fetch Failed: " + $fetch_url$jscomp$1$$ + "\n" + $e$jscomp$17$$);
      $response_started$$ || this.net.respond_text_and_close(this, 502, "Fetch Error", `Fetch ${$fetch_url$jscomp$1$$} failed:\n\n${$e$jscomp$17$$.stack || $e$jscomp$17$$.message}`);
      this.close();
    });
  }
}
$FetchNetworkAdapter$$module$src$browser$fetch_network$$.prototype.fetch = async function($url$jscomp$25$$, $options$jscomp$39$$) {
  this.cors_proxy && ($url$jscomp$25$$ = this.cors_proxy + encodeURIComponent($url$jscomp$25$$));
  try {
    const $resp$jscomp$2$$ = await fetch($url$jscomp$25$$, $options$jscomp$39$$), $ab$jscomp$1$$ = await $resp$jscomp$2$$.arrayBuffer();
    return [$resp$jscomp$2$$, $ab$jscomp$1$$];
  } catch ($e$jscomp$18$$) {
    return console.warn("Fetch Failed: " + $url$jscomp$25$$ + "\n" + $e$jscomp$18$$), [{status:502, statusText:"Fetch Error", headers:new Headers({"Content-Type":"text/plain"}), }, (new TextEncoder).encode(`Fetch ${$url$jscomp$25$$} failed:\n\n${$e$jscomp$18$$.stack}`).buffer];
  }
};
$FetchNetworkAdapter$$module$src$browser$fetch_network$$.prototype.form_response_head = function($lines_status_code$$, $status_text$$, $headers$jscomp$1$$) {
  $lines_status_code$$ = [`HTTP/1.1 ${$lines_status_code$$} ${$status_text$$}`];
  for (const [$key$jscomp$37$$, $value$jscomp$137$$] of $headers$jscomp$1$$.entries()) {
    $lines_status_code$$.push(`${$key$jscomp$37$$}: ${$value$jscomp$137$$}`);
  }
  return (new TextEncoder).encode($lines_status_code$$.join("\r\n") + "\r\n\r\n");
};
$FetchNetworkAdapter$$module$src$browser$fetch_network$$.prototype.respond_text_and_close = function($conn$jscomp$2$$, $status_code$jscomp$1$$, $status_text$jscomp$1$$, $body$jscomp$1$$) {
  const $headers$jscomp$2$$ = new Headers({"content-type":"text/plain", "content-length":$body$jscomp$1$$.length.toString(10), connection:"close"});
  $conn$jscomp$2$$.writev([this.form_response_head($status_code$jscomp$1$$, $status_text$jscomp$1$$, $headers$jscomp$2$$), (new TextEncoder).encode($body$jscomp$1$$)]);
  $conn$jscomp$2$$.close();
};
$FetchNetworkAdapter$$module$src$browser$fetch_network$$.prototype.parse_http_header = function($header$jscomp$4_key$jscomp$38$$) {
  var $parts$jscomp$3_value$jscomp$138$$ = $header$jscomp$4_key$jscomp$38$$.match(/^([^:]*):(.*)$/);
  if ($parts$jscomp$3_value$jscomp$138$$) {
    if ($header$jscomp$4_key$jscomp$38$$ = $parts$jscomp$3_value$jscomp$138$$[1], $parts$jscomp$3_value$jscomp$138$$ = $parts$jscomp$3_value$jscomp$138$$[2].trim(), 0 === $header$jscomp$4_key$jscomp$38$$.length) {
      $dbg_log$$module$src$log$$("Header key is empty, raw header", 16777216);
    } else {
      if (0 === $parts$jscomp$3_value$jscomp$138$$.length) {
        $dbg_log$$module$src$log$$("Header value is empty", 16777216);
      } else {
        if (/^[\w-]+$/.test($header$jscomp$4_key$jscomp$38$$)) {
          if (/^[\x20-\x7E]+$/.test($parts$jscomp$3_value$jscomp$138$$)) {
            return {key:$header$jscomp$4_key$jscomp$38$$, value:$parts$jscomp$3_value$jscomp$138$$};
          }
          $dbg_log$$module$src$log$$("Header value contains forbidden characters", 16777216);
        } else {
          $dbg_log$$module$src$log$$("Header key contains forbidden characters", 16777216);
        }
      }
    }
  } else {
    $dbg_log$$module$src$log$$("Unable to parse HTTP header", 16777216);
  }
};
$FetchNetworkAdapter$$module$src$browser$fetch_network$$.prototype.send = function($data$jscomp$134$$) {
  $handle_fake_networking$$module$src$browser$fake_network$$($data$jscomp$134$$, this);
};
$FetchNetworkAdapter$$module$src$browser$fetch_network$$.prototype.receive = function($data$jscomp$135$$) {
  this.bus.send("net" + this.id + "-receive", new Uint8Array($data$jscomp$135$$));
};
function $WispNetworkAdapter$$module$src$browser$wisp_network$$($wisp_url$$, $bus$jscomp$9$$, $config$jscomp$3$$) {
  this.register_ws($wisp_url$$);
  this.last_stream = 1;
  this.connections = {0:{congestion:0}};
  this.congested_buffer = [];
  $config$jscomp$3$$ = $config$jscomp$3$$ || {};
  this.bus = $bus$jscomp$9$$;
  this.id = $config$jscomp$3$$.id || 0;
  this.router_mac = new Uint8Array(($config$jscomp$3$$.router_mac || "52:54:0:1:2:3").split(":").map(function($x$jscomp$108$$) {
    return parseInt($x$jscomp$108$$, 16);
  }));
  this.router_ip = new Uint8Array(($config$jscomp$3$$.router_ip || "192.168.86.1").split(".").map(function($x$jscomp$109$$) {
    return parseInt($x$jscomp$109$$, 10);
  }));
  this.vm_ip = new Uint8Array(($config$jscomp$3$$.vm_ip || "192.168.86.100").split(".").map(function($x$jscomp$110$$) {
    return parseInt($x$jscomp$110$$, 10);
  }));
  this.masquerade = void 0 === $config$jscomp$3$$.masquerade || !!$config$jscomp$3$$.masquerade;
  this.vm_mac = new Uint8Array(6);
  this.dns_method = $config$jscomp$3$$.dns_method || "doh";
  this.doh_server = $config$jscomp$3$$.doh_server;
  this.tcp_conn = {};
  this.eth_encoder_buf = $create_eth_encoder_buf$$module$src$browser$fake_network$$();
  this.bus.register("net" + this.id + "-mac", function($mac$jscomp$1$$) {
    this.vm_mac = new Uint8Array($mac$jscomp$1$$.split(":").map(function($x$jscomp$111$$) {
      return parseInt($x$jscomp$111$$, 16);
    }));
  }, this);
  this.bus.register("net" + this.id + "-send", function($data$jscomp$136$$) {
    this.send($data$jscomp$136$$);
  }, this);
}
$WispNetworkAdapter$$module$src$browser$wisp_network$$.prototype.register_ws = function($wisp_url$jscomp$1$$) {
  this.wispws = new WebSocket($wisp_url$jscomp$1$$.replace("wisp://", "ws://").replace("wisps://", "wss://"));
  this.wispws.binaryType = "arraybuffer";
  this.wispws.onmessage = $event$jscomp$9$$ => {
    this.process_incoming_wisp_frame(new Uint8Array($event$jscomp$9$$.data));
  };
  this.wispws.onclose = () => {
    setTimeout(() => {
      this.register_ws($wisp_url$jscomp$1$$);
    }, 10000);
  };
};
$WispNetworkAdapter$$module$src$browser$wisp_network$$.prototype.send_packet = function($data$jscomp$137$$, $type$jscomp$151$$, $stream_id$$) {
  this.connections[$stream_id$$] && (0 < this.connections[$stream_id$$].congestion ? ("DATA" === $type$jscomp$151$$ && this.connections[$stream_id$$].congestion--, this.wispws.send($data$jscomp$137$$)) : (this.connections[$stream_id$$].congested = !0, this.congested_buffer.push({data:$data$jscomp$137$$, type:$type$jscomp$151$$})));
};
$WispNetworkAdapter$$module$src$browser$wisp_network$$.prototype.process_incoming_wisp_frame = function($frame$$) {
  const $view$jscomp$26$$ = new DataView($frame$$.buffer), $stream_id$jscomp$1$$ = $view$jscomp$26$$.getUint32(1, !0);
  switch($frame$$[0]) {
    case 1:
      $dbg_log$$module$src$log$$("Server sent client-only packet CONNECT", 1048576);
      break;
    case 2:
      if (this.connections[$stream_id$jscomp$1$$]) {
        this.connections[$stream_id$jscomp$1$$].data_callback($frame$$.slice(5));
      } else {
        throw Error("Got a DATA packet but stream not registered. ID: " + $stream_id$jscomp$1$$);
      }
      break;
    case 3:
      this.connections[$stream_id$jscomp$1$$] && (this.connections[$stream_id$jscomp$1$$].congestion = $view$jscomp$26$$.getUint32(5, !0));
      if (this.connections[$stream_id$jscomp$1$$].congested) {
        for (const $packet$jscomp$14$$ of this.congested_buffer) {
          this.send_packet($packet$jscomp$14$$.data, $packet$jscomp$14$$.type, $stream_id$jscomp$1$$);
        }
        this.connections[$stream_id$jscomp$1$$].congested = !1;
      }
      break;
    case 4:
      this.connections[$stream_id$jscomp$1$$] && this.connections[$stream_id$jscomp$1$$].close_callback($view$jscomp$26$$.getUint8(5));
      delete this.connections[$stream_id$jscomp$1$$];
      break;
    case 5:
      $dbg_log$$module$src$log$$("got a wisp V2 upgrade request, ignoring", 1048576);
      break;
    default:
      $dbg_log$$module$src$log$$("Wisp server returned unknown packet: " + $frame$$[0], 1048576);
  }
};
$WispNetworkAdapter$$module$src$browser$wisp_network$$.prototype.send_wisp_frame = function($frame_obj$$) {
  let $full_packet$$, $view$jscomp$27$$;
  switch($frame_obj$$.type) {
    case "CONNECT":
      const $hostname_buffer$$ = (new TextEncoder).encode($frame_obj$$.hostname);
      $full_packet$$ = new Uint8Array(8 + $hostname_buffer$$.length);
      $view$jscomp$27$$ = new DataView($full_packet$$.buffer);
      $view$jscomp$27$$.setUint8(0, 1);
      $view$jscomp$27$$.setUint32(1, $frame_obj$$.stream_id, !0);
      $view$jscomp$27$$.setUint8(5, 1);
      $view$jscomp$27$$.setUint16(6, $frame_obj$$.port, !0);
      $full_packet$$.set($hostname_buffer$$, 8);
      this.connections[$frame_obj$$.stream_id] = {data_callback:$frame_obj$$.data_callback, close_callback:$frame_obj$$.close_callback, congestion:this.connections[0].congestion};
      break;
    case "DATA":
      $full_packet$$ = new Uint8Array(5 + $frame_obj$$.data.length);
      $view$jscomp$27$$ = new DataView($full_packet$$.buffer);
      $view$jscomp$27$$.setUint8(0, 2);
      $view$jscomp$27$$.setUint32(1, $frame_obj$$.stream_id, !0);
      $full_packet$$.set($frame_obj$$.data, 5);
      break;
    case "CLOSE":
      $full_packet$$ = new Uint8Array(6);
      $view$jscomp$27$$ = new DataView($full_packet$$.buffer);
      $view$jscomp$27$$.setUint8(0, 4);
      $view$jscomp$27$$.setUint32(1, $frame_obj$$.stream_id, !0);
      $view$jscomp$27$$.setUint8(5, $frame_obj$$.reason);
      break;
    default:
      $dbg_log$$module$src$log$$("Client tried to send unknown packet: " + $frame_obj$$.type, 1048576);
  }
  this.send_packet($full_packet$$, $frame_obj$$.type, $frame_obj$$.stream_id);
};
$WispNetworkAdapter$$module$src$browser$wisp_network$$.prototype.destroy = function() {
  this.wispws && (this.wispws.onmessage = null, this.wispws.onclose = null, this.wispws.close(), this.wispws = null);
};
$WispNetworkAdapter$$module$src$browser$wisp_network$$.prototype.on_tcp_connection = function($packet$jscomp$15$$, $tuple$jscomp$3$$) {
  let $conn$jscomp$3$$ = new $TCPConnection$$module$src$browser$fake_network$$;
  $conn$jscomp$3$$.state = "syn-received";
  $conn$jscomp$3$$.net = this;
  $conn$jscomp$3$$.tuple = $tuple$jscomp$3$$;
  $conn$jscomp$3$$.stream_id = this.last_stream++;
  this.tcp_conn[$tuple$jscomp$3$$] = $conn$jscomp$3$$;
  $conn$jscomp$3$$.on("data", $data$jscomp$138$$ => {
    0 !== $data$jscomp$138$$.length && this.send_wisp_frame({type:"DATA", stream_id:$conn$jscomp$3$$.stream_id, data:$data$jscomp$138$$});
  });
  $conn$jscomp$3$$.on_close = () => {
    this.send_wisp_frame({type:"CLOSE", stream_id:$conn$jscomp$3$$.stream_id, reason:2});
  };
  $conn$jscomp$3$$.on_shutdown = $conn$jscomp$3$$.on_close;
  this.send_wisp_frame({type:"CONNECT", stream_id:$conn$jscomp$3$$.stream_id, hostname:$packet$jscomp$15$$.ipv4.dest.join("."), port:$packet$jscomp$15$$.tcp.dport, data_callback:$data$jscomp$139$$ => {
    $conn$jscomp$3$$.write($data$jscomp$139$$);
  }, close_callback:() => {
    $conn$jscomp$3$$.close();
  }});
  $conn$jscomp$3$$.accept($packet$jscomp$15$$);
  return !0;
};
$WispNetworkAdapter$$module$src$browser$wisp_network$$.prototype.send = function($data$jscomp$141$$) {
  $handle_fake_networking$$module$src$browser$fake_network$$($data$jscomp$141$$, this);
};
$WispNetworkAdapter$$module$src$browser$wisp_network$$.prototype.receive = function($data$jscomp$142$$) {
  this.bus.send("net" + this.id + "-receive", new Uint8Array($data$jscomp$142$$));
};
const $PLATFOM_WINDOWS$$module$src$browser$keyboard$$ = "undefined" !== typeof window && 0 <= window.navigator.platform.toString().toLowerCase().search("win");
function $KeyboardAdapter$$module$src$browser$keyboard$$($bus$jscomp$10$$) {
  function $may_handle$$($e$jscomp$19$$) {
    return $e$jscomp$19$$.shiftKey && $e$jscomp$19$$.ctrlKey && (73 === $e$jscomp$19$$.keyCode || 74 === $e$jscomp$19$$.keyCode || 75 === $e$jscomp$19$$.keyCode) || !$keyboard$$.emu_enabled ? !1 : $e$jscomp$19$$.target ? $e$jscomp$19$$.target.classList.contains("phone_keyboard") || "INPUT" !== $e$jscomp$19$$.target.nodeName && "TEXTAREA" !== $e$jscomp$19$$.target.nodeName : !0;
  }
  function $keyup_handler$$($e$jscomp$21$$) {
    !$e$jscomp$21$$.altKey && $keys_pressed$$[56] && $handle_code$$(56, !1);
    return $handler$jscomp$13$$($e$jscomp$21$$, !1);
  }
  function $keydown_handler$$($e$jscomp$22$$) {
    !$e$jscomp$22$$.altKey && $keys_pressed$$[56] && $handle_code$$(56, !1);
    return $handler$jscomp$13$$($e$jscomp$22$$, !0);
  }
  function $blur_handler$$() {
    for (var $keys$$ = Object.keys($keys_pressed$$), $key$jscomp$39$$, $i$jscomp$52$$ = 0; $i$jscomp$52$$ < $keys$$.length; $i$jscomp$52$$++) {
      $key$jscomp$39$$ = +$keys$$[$i$jscomp$52$$], $keys_pressed$$[$key$jscomp$39$$] && $handle_code$$($key$jscomp$39$$, !1);
    }
    $keys_pressed$$ = {};
  }
  function $handler$jscomp$13$$($e$jscomp$24$$, $keydown$$) {
    if ($keyboard$$.bus && $may_handle$$($e$jscomp$24$$)) {
      $e$jscomp$24$$.preventDefault && $e$jscomp$24$$.preventDefault();
      if ($PLATFOM_WINDOWS$$module$src$browser$keyboard$$ && ($deferred_event$$ && (clearTimeout($deferred_timeout_id$$), $e$jscomp$24$$.getModifierState && $e$jscomp$24$$.getModifierState("AltGraph") && $deferred_keydown$$ === $keydown$$ && "ControlLeft" === $deferred_event$$.code && "AltRight" === $e$jscomp$24$$.code || $handle_event$$($deferred_event$$, $deferred_keydown$$), $deferred_event$$ = null), "ControlLeft" === $e$jscomp$24$$.code)) {
        return $deferred_event$$ = $e$jscomp$24$$, $deferred_keydown$$ = $keydown$$, $deferred_timeout_id$$ = setTimeout(() => {
          $handle_event$$($deferred_event$$, $deferred_keydown$$);
          $deferred_event$$ = null;
        }, 10), !1;
      }
      $handle_event$$($e$jscomp$24$$, $keydown$$);
      return !1;
    }
  }
  function $handle_event$$($e$jscomp$25$$, $keydown$jscomp$1$$) {
    a: {
      if (void 0 !== $e$jscomp$25$$.code) {
        var $code$jscomp$4_code$jscomp$inline_154$$ = $codemap$$[$e$jscomp$25$$.code];
        if (void 0 !== $code$jscomp$4_code$jscomp$inline_154$$) {
          break a;
        }
      }
      $code$jscomp$4_code$jscomp$inline_154$$ = $charmap$jscomp$1$$[$e$jscomp$25$$.keyCode];
    }
    $code$jscomp$4_code$jscomp$inline_154$$ ? $handle_code$$($code$jscomp$4_code$jscomp$inline_154$$, $keydown$jscomp$1$$, $e$jscomp$25$$.repeat) : console.log("Missing char in map: keyCode=" + ($e$jscomp$25$$.keyCode || -1).toString(16) + " code=" + $e$jscomp$25$$.code);
  }
  function $handle_code$$($code$jscomp$5$$, $keydown$jscomp$2$$, $is_repeat$$) {
    if ($keydown$jscomp$2$$) {
      $keys_pressed$$[$code$jscomp$5$$] && !$is_repeat$$ && $handle_code$$($code$jscomp$5$$, !1);
    } else {
      if (!$keys_pressed$$[$code$jscomp$5$$]) {
        return;
      }
    }
    ($keys_pressed$$[$code$jscomp$5$$] = $keydown$jscomp$2$$) || ($code$jscomp$5$$ |= 128);
    255 < $code$jscomp$5$$ ? ($send_to_controller$$($code$jscomp$5$$ >> 8), $send_to_controller$$($code$jscomp$5$$ & 255)) : $send_to_controller$$($code$jscomp$5$$);
  }
  function $send_to_controller$$($code$jscomp$6$$) {
    $keyboard$$.bus.send("keyboard-code", $code$jscomp$6$$);
  }
  var $keys_pressed$$ = {}, $deferred_event$$ = null, $deferred_keydown$$ = !1, $deferred_timeout_id$$ = 0, $keyboard$$ = this;
  this.emu_enabled = !0;
  const $charmap$jscomp$1$$ = new Uint16Array([0, 0, 0, 0, 0, 0, 0, 0, 14, 15, 0, 0, 0, 28, 0, 0, 42, 29, 56, 0, 58, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 57, 57417, 57425, 57423, 57415, 57419, 57416, 57421, 80, 0, 0, 0, 0, 82, 83, 0, 11, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0, 39, 0, 13, 0, 0, 0, 30, 48, 46, 32, 18, 33, 34, 35, 23, 36, 37, 38, 50, 49, 24, 25, 16, 19, 31, 20, 22, 47, 17, 45, 21, 44, 57435, 57436, 57437, 0, 0, 82, 79, 80, 81, 75, 76, 77, 71, 72, 73, 0, 0, 0, 0, 0, 0, 59, 60, 61, 62, 63, 64, 65, 
  66, 67, 68, 87, 88, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 69, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 39, 13, 51, 12, 52, 53, 41, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 26, 43, 27, 40, 0, 57435, 57400, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ]), $asciimap$$ = {8:8, 10:13, 32:32, 39:222, 44:188, 45:189, 46:190, 47:191, 48:48, 49:49, 50:50, 51:51, 52:52, 
  53:53, 54:54, 55:55, 56:56, 57:57, 59:186, 61:187, 91:219, 92:220, 93:221, 96:192, 97:65, 98:66, 99:67, 100:68, 101:69, 102:70, 103:71, 104:72, 105:73, 106:74, 107:75, 108:76, 109:77, 110:78, 111:79, 112:80, 113:81, 114:82, 115:83, 116:84, 117:85, 118:86, 119:87, 120:88, 121:89, 122:90}, $asciimap_shift$$ = {33:49, 34:222, 35:51, 36:52, 37:53, 38:55, 40:57, 41:48, 42:56, 43:187, 58:186, 60:188, 62:190, 63:191, 64:50, 65:65, 66:66, 67:67, 68:68, 69:69, 70:70, 71:71, 72:72, 73:73, 74:74, 75:75, 76:76, 
  77:77, 78:78, 79:79, 80:80, 81:81, 82:82, 83:83, 84:84, 85:85, 86:86, 87:87, 88:88, 89:89, 90:90, 94:54, 95:189, 123:219, 124:220, 125:221, 126:192};
  var $codemap$$ = {Escape:1, Digit1:2, Digit2:3, Digit3:4, Digit4:5, Digit5:6, Digit6:7, Digit7:8, Digit8:9, Digit9:10, Digit0:11, Minus:12, Equal:13, Backspace:14, Tab:15, KeyQ:16, KeyW:17, KeyE:18, KeyR:19, KeyT:20, KeyY:21, KeyU:22, KeyI:23, KeyO:24, KeyP:25, BracketLeft:26, BracketRight:27, Enter:28, ControlLeft:29, KeyA:30, KeyS:31, KeyD:32, KeyF:33, KeyG:34, KeyH:35, KeyJ:36, KeyK:37, KeyL:38, Semicolon:39, Quote:40, Backquote:41, ShiftLeft:42, Backslash:43, KeyZ:44, KeyX:45, KeyC:46, KeyV:47, 
  KeyB:48, KeyN:49, KeyM:50, Comma:51, Period:52, Slash:53, IntlRo:53, ShiftRight:54, NumpadMultiply:55, AltLeft:56, Space:57, CapsLock:58, F1:59, F2:60, F3:61, F4:62, F5:63, F6:64, F7:65, F8:66, F9:67, F10:68, NumLock:69, ScrollLock:70, Numpad7:71, Numpad8:72, Numpad9:73, NumpadSubtract:74, Numpad4:75, Numpad5:76, Numpad6:77, NumpadAdd:78, Numpad1:79, Numpad2:80, Numpad3:81, Numpad0:82, NumpadDecimal:83, IntlBackslash:86, F11:87, F12:88, NumpadEnter:57372, ControlRight:57373, NumpadDivide:57397, 
  AltRight:57400, Home:57415, ArrowUp:57416, PageUp:57417, ArrowLeft:57419, ArrowRight:57421, End:57423, ArrowDown:57424, PageDown:57425, Insert:57426, Delete:57427, OSLeft:57435, OSRight:57436, ContextMenu:57437, };
  this.bus = $bus$jscomp$10$$;
  this.destroy = function() {
    "undefined" !== typeof window && (window.removeEventListener("keyup", $keyup_handler$$, !1), window.removeEventListener("keydown", $keydown_handler$$, !1), window.removeEventListener("blur", $blur_handler$$, !1));
  };
  this.init = function() {
    "undefined" !== typeof window && (this.destroy(), window.addEventListener("keyup", $keyup_handler$$, !1), window.addEventListener("keydown", $keydown_handler$$, !1), window.addEventListener("blur", $blur_handler$$, !1));
  };
  this.init();
  this.simulate_press = function($code$jscomp$1_ev$jscomp$1$$) {
    $code$jscomp$1_ev$jscomp$1$$ = {keyCode:$code$jscomp$1_ev$jscomp$1$$};
    $handler$jscomp$13$$($code$jscomp$1_ev$jscomp$1$$, !0);
    $handler$jscomp$13$$($code$jscomp$1_ev$jscomp$1$$, !1);
  };
  this.simulate_char = function($chr$jscomp$3$$) {
    var $code$jscomp$2$$ = $chr$jscomp$3$$.charCodeAt(0);
    $code$jscomp$2$$ in $asciimap$$ ? this.simulate_press($asciimap$$[$code$jscomp$2$$]) : $code$jscomp$2$$ in $asciimap_shift$$ ? ($send_to_controller$$(42), this.simulate_press($asciimap_shift$$[$code$jscomp$2$$]), $send_to_controller$$(170)) : console.log("ascii -> keyCode not found: ", $code$jscomp$2$$, $chr$jscomp$3$$);
  };
}
;function $MouseAdapter$$module$src$browser$mouse$$($bus$jscomp$11$$, $screen_container$jscomp$1$$) {
  function $may_handle$jscomp$1$$($child$jscomp$inline_360_e$jscomp$26$$) {
    if (!$mouse$$.enabled || !$mouse$$.emu_enabled) {
      return !1;
    }
    var $parent$jscomp$5$$ = $screen_container$jscomp$1$$ || document.body, $JSCompiler_temp$jscomp$284$$;
    if (!($JSCompiler_temp$jscomp$284$$ = document.pointerLockElement)) {
      a: {
        for ($child$jscomp$inline_360_e$jscomp$26$$ = $child$jscomp$inline_360_e$jscomp$26$$.target; $child$jscomp$inline_360_e$jscomp$26$$.parentNode;) {
          if ($child$jscomp$inline_360_e$jscomp$26$$ === $parent$jscomp$5$$) {
            $JSCompiler_temp$jscomp$284$$ = !0;
            break a;
          }
          $child$jscomp$inline_360_e$jscomp$26$$ = $child$jscomp$inline_360_e$jscomp$26$$.parentNode;
        }
        $JSCompiler_temp$jscomp$284$$ = !1;
      }
    }
    return $JSCompiler_temp$jscomp$284$$;
  }
  function $touch_start_handler$$($e$jscomp$27_touch_touches$jscomp$2$$) {
    $may_handle$jscomp$1$$($e$jscomp$27_touch_touches$jscomp$2$$) && ($e$jscomp$27_touch_touches$jscomp$2$$ = $e$jscomp$27_touch_touches$jscomp$2$$.changedTouches) && $e$jscomp$27_touch_touches$jscomp$2$$.length && ($e$jscomp$27_touch_touches$jscomp$2$$ = $e$jscomp$27_touch_touches$jscomp$2$$[$e$jscomp$27_touch_touches$jscomp$2$$.length - 1], $last_x$$ = $e$jscomp$27_touch_touches$jscomp$2$$.clientX, $last_y$$ = $e$jscomp$27_touch_touches$jscomp$2$$.clientY);
  }
  function $touch_end_handler$$() {
    if ($left_down$$ || $middle_down$$ || $right_down$$) {
      $mouse$$.bus.send("mouse-click", [!1, !1, !1]), $left_down$$ = $middle_down$$ = $right_down$$ = !1;
    }
  }
  function $mousemove_handler$$($e$jscomp$29$$) {
    if ($mouse$$.bus && $may_handle$jscomp$1$$($e$jscomp$29$$) && $mouse$$.is_running) {
      var $delta_x$$ = 0, $delta_y$$ = 0, $touch$jscomp$1_touches$jscomp$3$$ = $e$jscomp$29$$.changedTouches;
      $touch$jscomp$1_touches$jscomp$3$$ ? $touch$jscomp$1_touches$jscomp$3$$.length && ($touch$jscomp$1_touches$jscomp$3$$ = $touch$jscomp$1_touches$jscomp$3$$[$touch$jscomp$1_touches$jscomp$3$$.length - 1], $delta_x$$ = $touch$jscomp$1_touches$jscomp$3$$.clientX - $last_x$$, $delta_y$$ = $touch$jscomp$1_touches$jscomp$3$$.clientY - $last_y$$, $last_x$$ = $touch$jscomp$1_touches$jscomp$3$$.clientX, $last_y$$ = $touch$jscomp$1_touches$jscomp$3$$.clientY, $e$jscomp$29$$.preventDefault()) : "number" === 
      typeof $e$jscomp$29$$.movementX ? ($delta_x$$ = $e$jscomp$29$$.movementX, $delta_y$$ = $e$jscomp$29$$.movementY) : "number" === typeof $e$jscomp$29$$.webkitMovementX ? ($delta_x$$ = $e$jscomp$29$$.webkitMovementX, $delta_y$$ = $e$jscomp$29$$.webkitMovementY) : "number" === typeof $e$jscomp$29$$.mozMovementX ? ($delta_x$$ = $e$jscomp$29$$.mozMovementX, $delta_y$$ = $e$jscomp$29$$.mozMovementY) : ($delta_x$$ = $e$jscomp$29$$.clientX - $last_x$$, $delta_y$$ = $e$jscomp$29$$.clientY - $last_y$$, 
      $last_x$$ = $e$jscomp$29$$.clientX, $last_y$$ = $e$jscomp$29$$.clientY);
      $mouse$$.bus.send("mouse-delta", [0.15 * $delta_x$$, -(0.15 * $delta_y$$)]);
      $screen_container$jscomp$1$$ && $mouse$$.bus.send("mouse-absolute", [$e$jscomp$29$$.pageX - $screen_container$jscomp$1$$.offsetLeft, $e$jscomp$29$$.pageY - $screen_container$jscomp$1$$.offsetTop, $screen_container$jscomp$1$$.offsetWidth, $screen_container$jscomp$1$$.offsetHeight]);
    }
  }
  function $mousedown_handler$$($e$jscomp$30$$) {
    $may_handle$jscomp$1$$($e$jscomp$30$$) && $click_event$$($e$jscomp$30$$, !0);
  }
  function $mouseup_handler$$($e$jscomp$31$$) {
    $may_handle$jscomp$1$$($e$jscomp$31$$) && $click_event$$($e$jscomp$31$$, !1);
  }
  function $click_event$$($e$jscomp$32$$, $down$$) {
    $mouse$$.bus && (1 === $e$jscomp$32$$.which ? $left_down$$ = $down$$ : 2 === $e$jscomp$32$$.which ? $middle_down$$ = $down$$ : 3 === $e$jscomp$32$$.which ? $right_down$$ = $down$$ : $dbg_log$$module$src$log$$("Unknown event.which: " + $e$jscomp$32$$.which), $mouse$$.bus.send("mouse-click", [$left_down$$, $middle_down$$, $right_down$$]), $e$jscomp$32$$.preventDefault());
  }
  function $mousewheel_handler$$($e$jscomp$33$$) {
    if ($may_handle$jscomp$1$$($e$jscomp$33$$)) {
      var $delta_x$jscomp$1$$ = $e$jscomp$33$$.wheelDelta || -$e$jscomp$33$$.detail;
      0 > $delta_x$jscomp$1$$ ? $delta_x$jscomp$1$$ = -1 : 0 < $delta_x$jscomp$1$$ && ($delta_x$jscomp$1$$ = 1);
      $mouse$$.bus.send("mouse-wheel", [$delta_x$jscomp$1$$, 0]);
      $e$jscomp$33$$.preventDefault();
    }
  }
  var $left_down$$ = !1, $right_down$$ = !1, $middle_down$$ = !1, $last_x$$ = 0, $last_y$$ = 0, $mouse$$ = this;
  this.enabled = !1;
  this.emu_enabled = !0;
  this.bus = $bus$jscomp$11$$;
  this.bus.register("mouse-enable", function($enabled$jscomp$3$$) {
    this.enabled = $enabled$jscomp$3$$;
  }, this);
  this.is_running = !1;
  this.bus.register("emulator-stopped", function() {
    this.is_running = !1;
  }, this);
  this.bus.register("emulator-started", function() {
    this.is_running = !0;
  }, this);
  this.destroy = function() {
    "undefined" !== typeof window && (window.removeEventListener("touchstart", $touch_start_handler$$, !1), window.removeEventListener("touchend", $touch_end_handler$$, !1), window.removeEventListener("touchmove", $mousemove_handler$$, !1), window.removeEventListener("mousemove", $mousemove_handler$$, !1), window.removeEventListener("mousedown", $mousedown_handler$$, !1), window.removeEventListener("mouseup", $mouseup_handler$$, !1), window.removeEventListener("wheel", $mousewheel_handler$$, {passive:!1}));
  };
  this.init = function() {
    "undefined" !== typeof window && (this.destroy(), window.addEventListener("touchstart", $touch_start_handler$$, !1), window.addEventListener("touchend", $touch_end_handler$$, !1), window.addEventListener("touchmove", $mousemove_handler$$, !1), window.addEventListener("mousemove", $mousemove_handler$$, !1), window.addEventListener("mousedown", $mousedown_handler$$, !1), window.addEventListener("mouseup", $mouseup_handler$$, !1), window.addEventListener("wheel", $mousewheel_handler$$, {passive:!1}));
  };
  this.init();
}
;function $DummyScreenAdapter$$module$src$browser$dummy_screen$$() {
  var $text_mode_data$jscomp$1$$, $text_mode_width$jscomp$1$$ = 0, $text_mode_height$jscomp$1$$ = 0;
  this.put_char = function($row$jscomp$3$$, $col$jscomp$2$$, $chr$jscomp$4$$) {
    $dbg_assert$$module$src$log$$(0 <= $row$jscomp$3$$ && $row$jscomp$3$$ < $text_mode_height$jscomp$1$$);
    $dbg_assert$$module$src$log$$(0 <= $col$jscomp$2$$ && $col$jscomp$2$$ < $text_mode_width$jscomp$1$$);
    $text_mode_data$jscomp$1$$[$row$jscomp$3$$ * $text_mode_width$jscomp$1$$ + $col$jscomp$2$$] = $chr$jscomp$4$$;
  };
  this.destroy = function() {
  };
  this.pause = function() {
  };
  this.continue = function() {
  };
  this.set_mode = function() {
  };
  this.set_font_bitmap = function() {
  };
  this.set_font_page = function() {
  };
  this.clear_screen = function() {
  };
  this.set_size_text = function($cols$jscomp$1$$, $rows$jscomp$1$$) {
    if ($cols$jscomp$1$$ !== $text_mode_width$jscomp$1$$ || $rows$jscomp$1$$ !== $text_mode_height$jscomp$1$$) {
      $text_mode_data$jscomp$1$$ = new Uint8Array($cols$jscomp$1$$ * $rows$jscomp$1$$), $text_mode_width$jscomp$1$$ = $cols$jscomp$1$$, $text_mode_height$jscomp$1$$ = $rows$jscomp$1$$;
    }
  };
  this.set_size_graphical = function() {
  };
  this.set_scale = function() {
  };
  this.update_cursor_scanline = function() {
  };
  this.update_cursor = function() {
  };
  this.update_buffer = function() {
  };
  this.get_text_screen = function() {
    for (var $screen$jscomp$2$$ = [], $i$jscomp$53$$ = 0; $i$jscomp$53$$ < $text_mode_height$jscomp$1$$; $i$jscomp$53$$++) {
      $screen$jscomp$2$$.push(this.get_text_row($i$jscomp$53$$));
    }
    return $screen$jscomp$2$$;
  };
  this.get_text_row = function($i$jscomp$54_offset$jscomp$49$$) {
    $i$jscomp$54_offset$jscomp$49$$ *= $text_mode_width$jscomp$1$$;
    return String.fromCharCode.apply(String, $text_mode_data$jscomp$1$$.subarray($i$jscomp$54_offset$jscomp$49$$, $i$jscomp$54_offset$jscomp$49$$ + $text_mode_width$jscomp$1$$));
  };
  this.set_size_text(80, 25);
}
;function $SerialAdapter$$module$src$browser$serial$$($element$jscomp$8$$, $bus$jscomp$12$$) {
  function $keypress_handler$$($e$jscomp$35$$) {
    $serial$$.bus && $serial$$.enabled && ($serial$$.send_char($e$jscomp$35$$.which), $e$jscomp$35$$.preventDefault());
  }
  function $keydown_handler$jscomp$1$$($e$jscomp$36$$) {
    var $chr$jscomp$8$$ = $e$jscomp$36$$.which;
    8 === $chr$jscomp$8$$ ? ($serial$$.send_char(127), $e$jscomp$36$$.preventDefault()) : 9 === $chr$jscomp$8$$ && ($serial$$.send_char(9), $e$jscomp$36$$.preventDefault());
  }
  function $paste_handler$$($e$jscomp$37$$) {
    if ($serial$$.enabled) {
      for (var $data$jscomp$143$$ = $e$jscomp$37$$.clipboardData.getData("text/plain"), $i$jscomp$55$$ = 0; $i$jscomp$55$$ < $data$jscomp$143$$.length; $i$jscomp$55$$++) {
        $serial$$.send_char($data$jscomp$143$$.charCodeAt($i$jscomp$55$$));
      }
      $e$jscomp$37$$.preventDefault();
    }
  }
  function $window_click_handler$$($e$jscomp$38$$) {
    $e$jscomp$38$$.target !== $element$jscomp$8$$ && $element$jscomp$8$$.blur();
  }
  var $serial$$ = this;
  this.enabled = !0;
  this.bus = $bus$jscomp$12$$;
  this.text = "";
  this.text_new_line = !1;
  this.last_update = 0;
  this.bus.register("serial0-output-byte", function($byte_chr$jscomp$5$$) {
    $byte_chr$jscomp$5$$ = String.fromCharCode($byte_chr$jscomp$5$$);
    this.show_char($byte_chr$jscomp$5$$);
  }, this);
  this.destroy = function() {
    $element$jscomp$8$$.removeEventListener("keypress", $keypress_handler$$, !1);
    $element$jscomp$8$$.removeEventListener("keydown", $keydown_handler$jscomp$1$$, !1);
    $element$jscomp$8$$.removeEventListener("paste", $paste_handler$$, !1);
    window.removeEventListener("mousedown", $window_click_handler$$, !1);
  };
  this.init = function() {
    this.destroy();
    $element$jscomp$8$$.style.display = "block";
    $element$jscomp$8$$.addEventListener("keypress", $keypress_handler$$, !1);
    $element$jscomp$8$$.addEventListener("keydown", $keydown_handler$jscomp$1$$, !1);
    $element$jscomp$8$$.addEventListener("paste", $paste_handler$$, !1);
    window.addEventListener("mousedown", $window_click_handler$$, !1);
  };
  this.init();
  this.show_char = function($chr$jscomp$6$$) {
    "\b" === $chr$jscomp$6$$ ? (this.text = this.text.slice(0, -1), this.update()) : "\r" !== $chr$jscomp$6$$ && (this.text += $chr$jscomp$6$$, "\n" === $chr$jscomp$6$$ && (this.text_new_line = !0), this.update());
  };
  this.update = function() {
    var $now$jscomp$8$$ = Date.now(), $delta$jscomp$3$$ = $now$jscomp$8$$ - this.last_update;
    16 > $delta$jscomp$3$$ ? void 0 === this.update_timer && (this.update_timer = setTimeout(() => {
      this.update_timer = void 0;
      var $now$jscomp$9$$ = Date.now();
      $dbg_assert$$module$src$log$$(15 <= $now$jscomp$9$$ - this.last_update);
      this.last_update = $now$jscomp$9$$;
      this.render();
    }, 16 - $delta$jscomp$3$$)) : (void 0 !== this.update_timer && (clearTimeout(this.update_timer), this.update_timer = void 0), this.last_update = $now$jscomp$8$$, this.render());
  };
  this.render = function() {
    $element$jscomp$8$$.value = this.text;
    this.text_new_line && (this.text_new_line = !1, $element$jscomp$8$$.scrollTop = 1e9);
  };
  this.send_char = function($chr_code$$) {
    $serial$$.bus && $serial$$.bus.send("serial0-input", $chr_code$$);
  };
}
function $SerialAdapterXtermJS$$module$src$browser$serial$$($element$jscomp$9$$, $bus$jscomp$14$$) {
  this.element = $element$jscomp$9$$;
  if (window.Terminal) {
    var $term$$ = this.term = new window.Terminal({logLevel:"off", convertEol:"true", });
    $term$$.write("This is the serial console. Whatever you type or paste here will be sent to COM1");
    var $on_data_disposable$$ = $term$$.onData(function($data$jscomp$144$$) {
      for (let $i$jscomp$56$$ = 0; $i$jscomp$56$$ < $data$jscomp$144$$.length; $i$jscomp$56$$++) {
        $bus$jscomp$14$$.send("serial0-input", $data$jscomp$144$$.charCodeAt($i$jscomp$56$$));
      }
    });
    $bus$jscomp$14$$.register("serial0-output-byte", function($byte$jscomp$2$$) {
      $term$$.write(Uint8Array.of($byte$jscomp$2$$));
    }, this);
    this.destroy = function() {
      $on_data_disposable$$.dispose();
      $term$$.dispose();
    };
  }
}
$SerialAdapterXtermJS$$module$src$browser$serial$$.prototype.show = function() {
  this.term && this.term.open(this.element);
};
function $InBrowserNetworkAdapter$$module$src$browser$inbrowser_network$$($bus$jscomp$15$$, $config$jscomp$4_id$jscomp$6$$) {
  $config$jscomp$4_id$jscomp$6$$ = $config$jscomp$4_id$jscomp$6$$.id || 0;
  this.bus = $bus$jscomp$15$$;
  this.bus_send_msgid = `net${$config$jscomp$4_id$jscomp$6$$}-send`;
  this.bus_recv_msgid = `net${$config$jscomp$4_id$jscomp$6$$}-receive`;
  this.channel = new BroadcastChannel(`v86-inbrowser-${$config$jscomp$4_id$jscomp$6$$}`);
  this.is_open = !0;
  this.nic_to_hub_fn = $eth_frame$jscomp$2$$ => {
    this.channel.postMessage($eth_frame$jscomp$2$$);
  };
  this.bus.register(this.bus_send_msgid, this.nic_to_hub_fn, this);
  this.hub_to_nic_fn = $ev$jscomp$2$$ => {
    this.bus.send(this.bus_recv_msgid, $ev$jscomp$2$$.data);
  };
  this.channel.addEventListener("message", this.hub_to_nic_fn);
}
$InBrowserNetworkAdapter$$module$src$browser$inbrowser_network$$.prototype.destroy = function() {
  this.is_open && (this.bus.unregister(this.bus_send_msgid, this.nic_to_hub_fn), this.channel.removeEventListener("message", this.hub_to_nic_fn), this.channel.close(), this.is_open = !1);
};
function $MemoryFileStorage$$module$src$browser$filestorage$$() {
  this.filedata = new Map;
}
$MemoryFileStorage$$module$src$browser$filestorage$$.prototype.read = async function($data$jscomp$146_sha256sum$jscomp$3$$, $offset$jscomp$51$$, $count$jscomp$48$$) {
  $dbg_assert$$module$src$log$$($data$jscomp$146_sha256sum$jscomp$3$$, "MemoryFileStorage read: sha256sum should be a non-empty string");
  return ($data$jscomp$146_sha256sum$jscomp$3$$ = this.filedata.get($data$jscomp$146_sha256sum$jscomp$3$$)) ? $data$jscomp$146_sha256sum$jscomp$3$$.subarray($offset$jscomp$51$$, $offset$jscomp$51$$ + $count$jscomp$48$$) : null;
};
$MemoryFileStorage$$module$src$browser$filestorage$$.prototype.cache = async function($sha256sum$jscomp$4$$, $data$jscomp$147$$) {
  $dbg_assert$$module$src$log$$($sha256sum$jscomp$4$$, "MemoryFileStorage cache: sha256sum should be a non-empty string");
  this.filedata.set($sha256sum$jscomp$4$$, $data$jscomp$147$$);
};
$MemoryFileStorage$$module$src$browser$filestorage$$.prototype.uncache = function($sha256sum$jscomp$5$$) {
  this.filedata.delete($sha256sum$jscomp$5$$);
};
function $ServerFileStorageWrapper$$module$src$browser$filestorage$$($file_storage$$, $baseurl$$) {
  $dbg_assert$$module$src$log$$($baseurl$$, "ServerMemoryFileStorage: baseurl should not be empty");
  $baseurl$$.endsWith("/") || ($baseurl$$ += "/");
  this.storage = $file_storage$$;
  this.baseurl = $baseurl$$;
}
$ServerFileStorageWrapper$$module$src$browser$filestorage$$.prototype.load_from_server = function($sha256sum$jscomp$6$$) {
  return new Promise($resolve$jscomp$1$$ => {
    $load_file$$module$src$lib$$(this.baseurl + $sha256sum$jscomp$6$$, {done:async $buffer$jscomp$37_data$jscomp$148$$ => {
      $buffer$jscomp$37_data$jscomp$148$$ = new Uint8Array($buffer$jscomp$37_data$jscomp$148$$);
      await this.cache($sha256sum$jscomp$6$$, $buffer$jscomp$37_data$jscomp$148$$);
      $resolve$jscomp$1$$($buffer$jscomp$37_data$jscomp$148$$);
    }});
  });
};
$ServerFileStorageWrapper$$module$src$browser$filestorage$$.prototype.read = async function($sha256sum$jscomp$7$$, $offset$jscomp$52$$, $count$jscomp$49$$) {
  const $data$jscomp$149$$ = await this.storage.read($sha256sum$jscomp$7$$, $offset$jscomp$52$$, $count$jscomp$49$$);
  return $data$jscomp$149$$ ? $data$jscomp$149$$ : (await this.load_from_server($sha256sum$jscomp$7$$)).subarray($offset$jscomp$52$$, $offset$jscomp$52$$ + $count$jscomp$49$$);
};
$ServerFileStorageWrapper$$module$src$browser$filestorage$$.prototype.cache = async function($sha256sum$jscomp$8$$, $data$jscomp$150$$) {
  return await this.storage.cache($sha256sum$jscomp$8$$, $data$jscomp$150$$);
};
$ServerFileStorageWrapper$$module$src$browser$filestorage$$.prototype.uncache = function($sha256sum$jscomp$9$$) {
  this.storage.uncache($sha256sum$jscomp$9$$);
};
const $textde$$module$lib$marshall$$ = new TextDecoder, $texten$$module$lib$marshall$$ = new TextEncoder;
function $Marshall$$module$lib$marshall$$($typelist$$, $input$jscomp$10$$, $struct$$, $offset$jscomp$53$$) {
  for (var $item$jscomp$8_stringBytes$$, $size$jscomp$30$$ = 0, $i$jscomp$57$$ = 0; $i$jscomp$57$$ < $typelist$$.length; $i$jscomp$57$$++) {
    switch($item$jscomp$8_stringBytes$$ = $input$jscomp$10$$[$i$jscomp$57$$], $typelist$$[$i$jscomp$57$$]) {
      case "w":
        $struct$$[$offset$jscomp$53$$++] = $item$jscomp$8_stringBytes$$ & 255;
        $struct$$[$offset$jscomp$53$$++] = $item$jscomp$8_stringBytes$$ >> 8 & 255;
        $struct$$[$offset$jscomp$53$$++] = $item$jscomp$8_stringBytes$$ >> 16 & 255;
        $struct$$[$offset$jscomp$53$$++] = $item$jscomp$8_stringBytes$$ >> 24 & 255;
        $size$jscomp$30$$ += 4;
        break;
      case "d":
        $struct$$[$offset$jscomp$53$$++] = $item$jscomp$8_stringBytes$$ & 255;
        $struct$$[$offset$jscomp$53$$++] = $item$jscomp$8_stringBytes$$ >> 8 & 255;
        $struct$$[$offset$jscomp$53$$++] = $item$jscomp$8_stringBytes$$ >> 16 & 255;
        $struct$$[$offset$jscomp$53$$++] = $item$jscomp$8_stringBytes$$ >> 24 & 255;
        $struct$$[$offset$jscomp$53$$++] = 0;
        $struct$$[$offset$jscomp$53$$++] = 0;
        $struct$$[$offset$jscomp$53$$++] = 0;
        $struct$$[$offset$jscomp$53$$++] = 0;
        $size$jscomp$30$$ += 8;
        break;
      case "h":
        $struct$$[$offset$jscomp$53$$++] = $item$jscomp$8_stringBytes$$ & 255;
        $struct$$[$offset$jscomp$53$$++] = $item$jscomp$8_stringBytes$$ >> 8;
        $size$jscomp$30$$ += 2;
        break;
      case "b":
        $struct$$[$offset$jscomp$53$$++] = $item$jscomp$8_stringBytes$$;
        $size$jscomp$30$$ += 1;
        break;
      case "s":
        var $lengthoffset$$ = $offset$jscomp$53$$, $length$jscomp$22$$ = 0;
        $struct$$[$offset$jscomp$53$$++] = 0;
        $struct$$[$offset$jscomp$53$$++] = 0;
        $size$jscomp$30$$ += 2;
        $item$jscomp$8_stringBytes$$ = $texten$$module$lib$marshall$$.encode($item$jscomp$8_stringBytes$$);
        $size$jscomp$30$$ += $item$jscomp$8_stringBytes$$.byteLength;
        $length$jscomp$22$$ += $item$jscomp$8_stringBytes$$.byteLength;
        $struct$$.set($item$jscomp$8_stringBytes$$, $offset$jscomp$53$$);
        $offset$jscomp$53$$ += $item$jscomp$8_stringBytes$$.byteLength;
        $struct$$[$lengthoffset$$ + 0] = $length$jscomp$22$$ & 255;
        $struct$$[$lengthoffset$$ + 1] = $length$jscomp$22$$ >> 8 & 255;
        break;
      case "Q":
        $Marshall$$module$lib$marshall$$(["b", "w", "d"], [$item$jscomp$8_stringBytes$$.type, $item$jscomp$8_stringBytes$$.version, $item$jscomp$8_stringBytes$$.path], $struct$$, $offset$jscomp$53$$);
        $offset$jscomp$53$$ += 13;
        $size$jscomp$30$$ += 13;
        break;
      default:
        $dbg_log$$module$src$log$$("Marshall: Unknown type=" + $typelist$$[$i$jscomp$57$$]);
    }
  }
  return $size$jscomp$30$$;
}
function $Unmarshall$$module$lib$marshall$$($typelist$jscomp$1$$, $struct$jscomp$1$$, $state$jscomp$16$$) {
  let $offset$jscomp$54$$ = $state$jscomp$16$$.offset;
  for (var $output$jscomp$2$$ = [], $i$jscomp$58$$ = 0; $i$jscomp$58$$ < $typelist$jscomp$1$$.length; $i$jscomp$58$$++) {
    switch($typelist$jscomp$1$$[$i$jscomp$58$$]) {
      case "w":
        var $len$jscomp$21_qid_val$$ = $struct$jscomp$1$$[$offset$jscomp$54$$++];
        $len$jscomp$21_qid_val$$ += $struct$jscomp$1$$[$offset$jscomp$54$$++] << 8;
        $len$jscomp$21_qid_val$$ += $struct$jscomp$1$$[$offset$jscomp$54$$++] << 16;
        $len$jscomp$21_qid_val$$ += $struct$jscomp$1$$[$offset$jscomp$54$$++] << 24 >>> 0;
        $output$jscomp$2$$.push($len$jscomp$21_qid_val$$);
        break;
      case "d":
        $len$jscomp$21_qid_val$$ = $struct$jscomp$1$$[$offset$jscomp$54$$++];
        $len$jscomp$21_qid_val$$ += $struct$jscomp$1$$[$offset$jscomp$54$$++] << 8;
        $len$jscomp$21_qid_val$$ += $struct$jscomp$1$$[$offset$jscomp$54$$++] << 16;
        $len$jscomp$21_qid_val$$ += $struct$jscomp$1$$[$offset$jscomp$54$$++] << 24 >>> 0;
        $offset$jscomp$54$$ += 4;
        $output$jscomp$2$$.push($len$jscomp$21_qid_val$$);
        break;
      case "h":
        $len$jscomp$21_qid_val$$ = $struct$jscomp$1$$[$offset$jscomp$54$$++];
        $output$jscomp$2$$.push($len$jscomp$21_qid_val$$ + ($struct$jscomp$1$$[$offset$jscomp$54$$++] << 8));
        break;
      case "b":
        $output$jscomp$2$$.push($struct$jscomp$1$$[$offset$jscomp$54$$++]);
        break;
      case "s":
        $len$jscomp$21_qid_val$$ = $struct$jscomp$1$$[$offset$jscomp$54$$++];
        $len$jscomp$21_qid_val$$ += $struct$jscomp$1$$[$offset$jscomp$54$$++] << 8;
        var $stringBytes$jscomp$1$$ = $struct$jscomp$1$$.slice($offset$jscomp$54$$, $offset$jscomp$54$$ + $len$jscomp$21_qid_val$$);
        $offset$jscomp$54$$ += $len$jscomp$21_qid_val$$;
        $output$jscomp$2$$.push($textde$$module$lib$marshall$$.decode($stringBytes$jscomp$1$$));
        break;
      case "Q":
        $state$jscomp$16$$.offset = $offset$jscomp$54$$;
        $len$jscomp$21_qid_val$$ = $Unmarshall$$module$lib$marshall$$(["b", "w", "d"], $struct$jscomp$1$$, $state$jscomp$16$$);
        $offset$jscomp$54$$ = $state$jscomp$16$$.offset;
        $output$jscomp$2$$.push({type:$len$jscomp$21_qid_val$$[0], version:$len$jscomp$21_qid_val$$[1], path:$len$jscomp$21_qid_val$$[2], });
        break;
      default:
        $dbg_log$$module$src$log$$("Error in Unmarshall: Unknown type=" + $typelist$jscomp$1$$[$i$jscomp$58$$]);
    }
  }
  $state$jscomp$16$$.offset = $offset$jscomp$54$$;
  return $output$jscomp$2$$;
}
;const $texten$$module$lib$filesystem$$ = new TextEncoder;
function $FS$$module$lib$filesystem$$($storage$$, $qidcounter$$) {
  this.inodes = [];
  this.events = [];
  this.storage = $storage$$;
  this.qidcounter = $qidcounter$$ || {last_qidnumber:0};
  this.inodedata = {};
  this.total_size = 274877906944;
  this.used_size = 0;
  this.mounts = [];
  this.CreateDirectory("", -1);
}
$FS$$module$lib$filesystem$$.prototype.get_state = function() {
  let $state$jscomp$17$$ = [];
  $state$jscomp$17$$[0] = this.inodes;
  $state$jscomp$17$$[1] = this.qidcounter.last_qidnumber;
  $state$jscomp$17$$[2] = [];
  for (const [$id$jscomp$7$$, $data$jscomp$151$$] of Object.entries(this.inodedata)) {
    0 === (this.inodes[$id$jscomp$7$$].mode & 16384) && $state$jscomp$17$$[2].push([$id$jscomp$7$$, $data$jscomp$151$$]);
  }
  $state$jscomp$17$$[3] = this.total_size;
  $state$jscomp$17$$[4] = this.used_size;
  return $state$jscomp$17$$ = $state$jscomp$17$$.concat(this.mounts);
};
$FS$$module$lib$filesystem$$.prototype.set_state = function($state$jscomp$18$$) {
  this.inodes = $state$jscomp$18$$[0].map($state$jscomp$19$$ => {
    const $inode$$ = new $Inode$$module$lib$filesystem$$(0);
    $inode$$.set_state($state$jscomp$19$$);
    return $inode$$;
  });
  this.qidcounter.last_qidnumber = $state$jscomp$18$$[1];
  this.inodedata = {};
  for (let [$key$jscomp$40$$, $value$jscomp$139$$] of $state$jscomp$18$$[2]) {
    $value$jscomp$139$$.buffer.byteLength !== $value$jscomp$139$$.byteLength && ($value$jscomp$139$$ = $value$jscomp$139$$.slice()), this.inodedata[$key$jscomp$40$$] = $value$jscomp$139$$;
  }
  this.total_size = $state$jscomp$18$$[3];
  this.used_size = $state$jscomp$18$$[4];
  this.mounts = $state$jscomp$18$$.slice(5);
};
$FS$$module$lib$filesystem$$.prototype.AddEvent = function($id$jscomp$8$$, $OnEvent$$) {
  var $inode$jscomp$1$$ = this.inodes[$id$jscomp$8$$];
  0 === $inode$jscomp$1$$.status || 2 === $inode$jscomp$1$$.status ? $OnEvent$$() : this.is_forwarder($inode$jscomp$1$$) ? this.follow_fs($inode$jscomp$1$$).AddEvent($inode$jscomp$1$$.foreign_id, $OnEvent$$) : this.events.push({id:$id$jscomp$8$$, OnEvent:$OnEvent$$});
};
$FS$$module$lib$filesystem$$.prototype.HandleEvent = function($id$jscomp$9$$) {
  var $inode$jscomp$2_newevents$$ = this.inodes[$id$jscomp$9$$];
  this.is_forwarder($inode$jscomp$2_newevents$$) && this.follow_fs($inode$jscomp$2_newevents$$).HandleEvent($inode$jscomp$2_newevents$$.foreign_id);
  $inode$jscomp$2_newevents$$ = [];
  for (var $i$jscomp$59$$ = 0; $i$jscomp$59$$ < this.events.length; $i$jscomp$59$$++) {
    this.events[$i$jscomp$59$$].id === $id$jscomp$9$$ ? this.events[$i$jscomp$59$$].OnEvent() : $inode$jscomp$2_newevents$$.push(this.events[$i$jscomp$59$$]);
  }
  this.events = $inode$jscomp$2_newevents$$;
};
$FS$$module$lib$filesystem$$.prototype.load_from_json = function($fs$jscomp$1_i$jscomp$60$$) {
  $dbg_assert$$module$src$log$$($fs$jscomp$1_i$jscomp$60$$, "Invalid fs passed to load_from_json");
  if (3 !== $fs$jscomp$1_i$jscomp$60$$.version) {
    throw "The filesystem JSON format has changed. Please update your fs2json (https://github.com/copy/fs2json) and recreate the filesystem JSON.";
  }
  var $fsroot$$ = $fs$jscomp$1_i$jscomp$60$$.fsroot;
  this.used_size = $fs$jscomp$1_i$jscomp$60$$.size;
  for ($fs$jscomp$1_i$jscomp$60$$ = 0; $fs$jscomp$1_i$jscomp$60$$ < $fsroot$$.length; $fs$jscomp$1_i$jscomp$60$$++) {
    this.LoadRecursive($fsroot$$[$fs$jscomp$1_i$jscomp$60$$], 0);
  }
};
$FS$$module$lib$filesystem$$.prototype.LoadRecursive = function($data$jscomp$152$$, $parentid$$) {
  var $inode$jscomp$3$$ = this.CreateInode();
  const $name$jscomp$83$$ = $data$jscomp$152$$[0];
  $inode$jscomp$3$$.size = $data$jscomp$152$$[1];
  $inode$jscomp$3$$.mtime = $data$jscomp$152$$[2];
  $inode$jscomp$3$$.ctime = $inode$jscomp$3$$.mtime;
  $inode$jscomp$3$$.atime = $inode$jscomp$3$$.mtime;
  $inode$jscomp$3$$.mode = $data$jscomp$152$$[3];
  $inode$jscomp$3$$.uid = $data$jscomp$152$$[4];
  $inode$jscomp$3$$.gid = $data$jscomp$152$$[5];
  var $ifmt$$ = $inode$jscomp$3$$.mode & 61440;
  16384 === $ifmt$$ ? (this.PushInode($inode$jscomp$3$$, $parentid$$, $name$jscomp$83$$), this.LoadDir(this.inodes.length - 1, $data$jscomp$152$$[6])) : 32768 === $ifmt$$ ? ($inode$jscomp$3$$.status = 2, $inode$jscomp$3$$.sha256sum = $data$jscomp$152$$[6], $dbg_assert$$module$src$log$$($inode$jscomp$3$$.sha256sum), this.PushInode($inode$jscomp$3$$, $parentid$$, $name$jscomp$83$$)) : 40960 === $ifmt$$ ? ($inode$jscomp$3$$.symlink = $data$jscomp$152$$[6], this.PushInode($inode$jscomp$3$$, $parentid$$, 
  $name$jscomp$83$$)) : 49152 !== $ifmt$$ && $dbg_log$$module$src$log$$("Unexpected ifmt: " + $h$$module$src$lib$$($ifmt$$) + " (" + $name$jscomp$83$$ + ")", 4194304);
};
$FS$$module$lib$filesystem$$.prototype.LoadDir = function($parentid$jscomp$1$$, $children$jscomp$2$$) {
  for (var $i$jscomp$61$$ = 0; $i$jscomp$61$$ < $children$jscomp$2$$.length; $i$jscomp$61$$++) {
    this.LoadRecursive($children$jscomp$2$$[$i$jscomp$61$$], $parentid$jscomp$1$$);
  }
};
$FS$$module$lib$filesystem$$.prototype.should_be_linked = function($inode$jscomp$4$$) {
  return !this.is_forwarder($inode$jscomp$4$$) || 0 === $inode$jscomp$4$$.foreign_id;
};
$FS$$module$lib$filesystem$$.prototype.link_under_dir = function($parentid$jscomp$2$$, $idx$$, $name$jscomp$84$$) {
  const $inode$jscomp$5$$ = this.inodes[$idx$$], $parent_inode$$ = this.inodes[$parentid$jscomp$2$$];
  $dbg_assert$$module$src$log$$(!this.is_forwarder($parent_inode$$), "Filesystem: Shouldn't link under fowarder parents");
  $dbg_assert$$module$src$log$$(this.IsDirectory($parentid$jscomp$2$$), "Filesystem: Can't link under non-directories");
  $dbg_assert$$module$src$log$$(this.should_be_linked($inode$jscomp$5$$), "Filesystem: Can't link across filesystems apart from their root");
  $dbg_assert$$module$src$log$$(0 <= $inode$jscomp$5$$.nlinks, "Filesystem: Found negative nlinks value of " + $inode$jscomp$5$$.nlinks);
  $dbg_assert$$module$src$log$$(!$parent_inode$$.direntries.has($name$jscomp$84$$), "Filesystem: Name '" + $name$jscomp$84$$ + "' is already taken");
  $parent_inode$$.direntries.set($name$jscomp$84$$, $idx$$);
  $inode$jscomp$5$$.nlinks++;
  this.IsDirectory($idx$$) && ($dbg_assert$$module$src$log$$(!$inode$jscomp$5$$.direntries.has(".."), "Filesystem: Cannot link a directory twice"), $inode$jscomp$5$$.direntries.has(".") || $inode$jscomp$5$$.nlinks++, $inode$jscomp$5$$.direntries.set(".", $idx$$), $inode$jscomp$5$$.direntries.set("..", $parentid$jscomp$2$$), $parent_inode$$.nlinks++);
};
$FS$$module$lib$filesystem$$.prototype.unlink_from_dir = function($parentid$jscomp$3$$, $name$jscomp$85$$) {
  const $idx$jscomp$1$$ = this.Search($parentid$jscomp$3$$, $name$jscomp$85$$), $inode$jscomp$6$$ = this.inodes[$idx$jscomp$1$$], $parent_inode$jscomp$1$$ = this.inodes[$parentid$jscomp$3$$];
  $dbg_assert$$module$src$log$$(!this.is_forwarder($parent_inode$jscomp$1$$), "Filesystem: Can't unlink from forwarders");
  $dbg_assert$$module$src$log$$(this.IsDirectory($parentid$jscomp$3$$), "Filesystem: Can't unlink from non-directories");
  $parent_inode$jscomp$1$$.direntries.delete($name$jscomp$85$$) ? ($inode$jscomp$6$$.nlinks--, this.IsDirectory($idx$jscomp$1$$) && ($dbg_assert$$module$src$log$$($inode$jscomp$6$$.direntries.get("..") === $parentid$jscomp$3$$, "Filesystem: Found directory with bad parent id"), $inode$jscomp$6$$.direntries.delete(".."), $parent_inode$jscomp$1$$.nlinks--), $dbg_assert$$module$src$log$$(0 <= $inode$jscomp$6$$.nlinks, "Filesystem: Found negative nlinks value of " + $inode$jscomp$6$$.nlinks)) : $dbg_assert$$module$src$log$$(!1, 
  "Filesystem: Can't unlink non-existent file: " + $name$jscomp$85$$);
};
$FS$$module$lib$filesystem$$.prototype.PushInode = function($inode$jscomp$7$$, $parentid$jscomp$4$$, $name$jscomp$86$$) {
  -1 !== $parentid$jscomp$4$$ ? (this.inodes.push($inode$jscomp$7$$), $inode$jscomp$7$$.fid = this.inodes.length - 1, this.link_under_dir($parentid$jscomp$4$$, $inode$jscomp$7$$.fid, $name$jscomp$86$$)) : 0 === this.inodes.length ? (this.inodes.push($inode$jscomp$7$$), $inode$jscomp$7$$.direntries.set(".", 0), $inode$jscomp$7$$.direntries.set("..", 0), $inode$jscomp$7$$.nlinks = 2) : $dbg_assert$$module$src$log$$(!1, "Error in Filesystem: Pushed inode with name = " + $name$jscomp$86$$ + " has no parent");
};
function $Inode$$module$lib$filesystem$$($qidnumber$$) {
  this.direntries = new Map;
  this.minor = this.major = this.mtime = this.atime = this.ctime = this.fid = this.gid = this.uid = this.size = this.status = 0;
  this.symlink = "";
  this.mode = 493;
  this.qid = {type:0, version:0, path:$qidnumber$$, };
  this.caps = void 0;
  this.nlinks = 0;
  this.sha256sum = "";
  this.locks = [];
  this.foreign_id = this.mount_id = -1;
}
$Inode$$module$lib$filesystem$$.prototype.get_state = function() {
  const $state$jscomp$20$$ = [];
  $state$jscomp$20$$[0] = this.mode;
  $state$jscomp$20$$[1] = 16384 === (this.mode & 61440) ? [...this.direntries] : 32768 === (this.mode & 61440) ? this.sha256sum : 40960 === (this.mode & 61440) ? this.symlink : 49152 === (this.mode & 61440) ? [this.minor, this.major] : null;
  $state$jscomp$20$$[2] = this.locks;
  $state$jscomp$20$$[3] = this.status;
  $state$jscomp$20$$[4] = this.size;
  $state$jscomp$20$$[5] = this.uid;
  $state$jscomp$20$$[6] = this.gid;
  $state$jscomp$20$$[7] = this.fid;
  $state$jscomp$20$$[8] = this.ctime;
  $state$jscomp$20$$[9] = this.atime;
  $state$jscomp$20$$[10] = this.mtime;
  $state$jscomp$20$$[11] = this.qid.version;
  $state$jscomp$20$$[12] = this.qid.path;
  $state$jscomp$20$$[13] = this.nlinks;
  return $state$jscomp$20$$;
};
$Inode$$module$lib$filesystem$$.prototype.set_state = function($state$jscomp$21$$) {
  this.mode = $state$jscomp$21$$[0];
  if (16384 === (this.mode & 61440)) {
    this.direntries = new Map;
    for (const [$name$jscomp$87$$, $entry$jscomp$6$$] of $state$jscomp$21$$[1]) {
      this.direntries.set($name$jscomp$87$$, $entry$jscomp$6$$);
    }
  } else {
    32768 === (this.mode & 61440) ? this.sha256sum = $state$jscomp$21$$[1] : 40960 === (this.mode & 61440) ? this.symlink = $state$jscomp$21$$[1] : 49152 === (this.mode & 61440) && ([this.minor, this.major] = $state$jscomp$21$$[1]);
  }
  this.locks = [];
  for (const $lock_state$$ of $state$jscomp$21$$[2]) {
    const $lock$$ = new $FSLockRegion$$module$lib$filesystem$$;
    $lock$$.set_state($lock_state$$);
    this.locks.push($lock$$);
  }
  this.status = $state$jscomp$21$$[3];
  this.size = $state$jscomp$21$$[4];
  this.uid = $state$jscomp$21$$[5];
  this.gid = $state$jscomp$21$$[6];
  this.fid = $state$jscomp$21$$[7];
  this.ctime = $state$jscomp$21$$[8];
  this.atime = $state$jscomp$21$$[9];
  this.mtime = $state$jscomp$21$$[10];
  this.qid.type = (this.mode & 61440) >> 8;
  this.qid.version = $state$jscomp$21$$[11];
  this.qid.path = $state$jscomp$21$$[12];
  this.nlinks = $state$jscomp$21$$[13];
};
$FS$$module$lib$filesystem$$.prototype.divert = function($parentid$jscomp$5$$, $filename$jscomp$6$$) {
  const $old_idx$$ = this.Search($parentid$jscomp$5$$, $filename$jscomp$6$$), $old_inode$$ = this.inodes[$old_idx$$], $new_inode$$ = new $Inode$$module$lib$filesystem$$(-1);
  $dbg_assert$$module$src$log$$($old_inode$$, "Filesystem divert: name (" + $filename$jscomp$6$$ + ") not found");
  $dbg_assert$$module$src$log$$(this.IsDirectory($old_idx$$) || 1 >= $old_inode$$.nlinks, "Filesystem: can't divert hardlinked file '" + $filename$jscomp$6$$ + "' with nlinks=" + $old_inode$$.nlinks);
  Object.assign($new_inode$$, $old_inode$$);
  const $idx$jscomp$2$$ = this.inodes.length;
  this.inodes.push($new_inode$$);
  $new_inode$$.fid = $idx$jscomp$2$$;
  this.is_forwarder($old_inode$$) && this.mounts[$old_inode$$.mount_id].backtrack.set($old_inode$$.foreign_id, $idx$jscomp$2$$);
  this.should_be_linked($old_inode$$) && (this.unlink_from_dir($parentid$jscomp$5$$, $filename$jscomp$6$$), this.link_under_dir($parentid$jscomp$5$$, $idx$jscomp$2$$, $filename$jscomp$6$$));
  if (this.IsDirectory($old_idx$$) && !this.is_forwarder($old_inode$$)) {
    for (const [$name$jscomp$88$$, $child_id$$] of $new_inode$$.direntries) {
      "." !== $name$jscomp$88$$ && ".." !== $name$jscomp$88$$ && this.IsDirectory($child_id$$) && this.inodes[$child_id$$].direntries.set("..", $idx$jscomp$2$$);
    }
  }
  this.inodedata[$idx$jscomp$2$$] = this.inodedata[$old_idx$$];
  delete this.inodedata[$old_idx$$];
  $old_inode$$.direntries = new Map;
  $old_inode$$.nlinks = 0;
  return $idx$jscomp$2$$;
};
$FS$$module$lib$filesystem$$.prototype.copy_inode = function($src_inode$$, $dest_inode$$) {
  Object.assign($dest_inode$$, $src_inode$$, {fid:$dest_inode$$.fid, direntries:$dest_inode$$.direntries, nlinks:$dest_inode$$.nlinks, });
};
$FS$$module$lib$filesystem$$.prototype.CreateInode = function() {
  const $now$jscomp$10$$ = Math.round(Date.now() / 1000), $inode$jscomp$8$$ = new $Inode$$module$lib$filesystem$$(++this.qidcounter.last_qidnumber);
  $inode$jscomp$8$$.atime = $inode$jscomp$8$$.ctime = $inode$jscomp$8$$.mtime = $now$jscomp$10$$;
  return $inode$jscomp$8$$;
};
$FS$$module$lib$filesystem$$.prototype.CreateDirectory = function($foreign_id_name$jscomp$89$$, $foreign_parentid_parentid$jscomp$6$$) {
  var $parent_inode$jscomp$2_x$jscomp$112$$ = this.inodes[$foreign_parentid_parentid$jscomp$6$$];
  if (0 <= $foreign_parentid_parentid$jscomp$6$$ && this.is_forwarder($parent_inode$jscomp$2_x$jscomp$112$$)) {
    return $foreign_parentid_parentid$jscomp$6$$ = $parent_inode$jscomp$2_x$jscomp$112$$.foreign_id, $foreign_id_name$jscomp$89$$ = this.follow_fs($parent_inode$jscomp$2_x$jscomp$112$$).CreateDirectory($foreign_id_name$jscomp$89$$, $foreign_parentid_parentid$jscomp$6$$), this.create_forwarder($parent_inode$jscomp$2_x$jscomp$112$$.mount_id, $foreign_id_name$jscomp$89$$);
  }
  $parent_inode$jscomp$2_x$jscomp$112$$ = this.CreateInode();
  $parent_inode$jscomp$2_x$jscomp$112$$.mode = 16895;
  0 <= $foreign_parentid_parentid$jscomp$6$$ && ($parent_inode$jscomp$2_x$jscomp$112$$.uid = this.inodes[$foreign_parentid_parentid$jscomp$6$$].uid, $parent_inode$jscomp$2_x$jscomp$112$$.gid = this.inodes[$foreign_parentid_parentid$jscomp$6$$].gid, $parent_inode$jscomp$2_x$jscomp$112$$.mode = this.inodes[$foreign_parentid_parentid$jscomp$6$$].mode & 511 | 16384);
  $parent_inode$jscomp$2_x$jscomp$112$$.qid.type = 64;
  this.PushInode($parent_inode$jscomp$2_x$jscomp$112$$, $foreign_parentid_parentid$jscomp$6$$, $foreign_id_name$jscomp$89$$);
  this.NotifyListeners(this.inodes.length - 1, "newdir");
  return this.inodes.length - 1;
};
$FS$$module$lib$filesystem$$.prototype.CreateFile = function($filename$jscomp$7_foreign_id$jscomp$1$$, $foreign_parentid$jscomp$1_parentid$jscomp$7$$) {
  var $parent_inode$jscomp$3_x$jscomp$113$$ = this.inodes[$foreign_parentid$jscomp$1_parentid$jscomp$7$$];
  if (this.is_forwarder($parent_inode$jscomp$3_x$jscomp$113$$)) {
    return $foreign_parentid$jscomp$1_parentid$jscomp$7$$ = $parent_inode$jscomp$3_x$jscomp$113$$.foreign_id, $filename$jscomp$7_foreign_id$jscomp$1$$ = this.follow_fs($parent_inode$jscomp$3_x$jscomp$113$$).CreateFile($filename$jscomp$7_foreign_id$jscomp$1$$, $foreign_parentid$jscomp$1_parentid$jscomp$7$$), this.create_forwarder($parent_inode$jscomp$3_x$jscomp$113$$.mount_id, $filename$jscomp$7_foreign_id$jscomp$1$$);
  }
  $parent_inode$jscomp$3_x$jscomp$113$$ = this.CreateInode();
  $parent_inode$jscomp$3_x$jscomp$113$$.uid = this.inodes[$foreign_parentid$jscomp$1_parentid$jscomp$7$$].uid;
  $parent_inode$jscomp$3_x$jscomp$113$$.gid = this.inodes[$foreign_parentid$jscomp$1_parentid$jscomp$7$$].gid;
  $parent_inode$jscomp$3_x$jscomp$113$$.qid.type = 128;
  $parent_inode$jscomp$3_x$jscomp$113$$.mode = this.inodes[$foreign_parentid$jscomp$1_parentid$jscomp$7$$].mode & 438 | 32768;
  this.PushInode($parent_inode$jscomp$3_x$jscomp$113$$, $foreign_parentid$jscomp$1_parentid$jscomp$7$$, $filename$jscomp$7_foreign_id$jscomp$1$$);
  this.NotifyListeners(this.inodes.length - 1, "newfile");
  return this.inodes.length - 1;
};
$FS$$module$lib$filesystem$$.prototype.CreateNode = function($filename$jscomp$8_foreign_id$jscomp$2$$, $foreign_parentid$jscomp$2_parentid$jscomp$8$$, $major$$, $minor$$) {
  var $parent_inode$jscomp$4_x$jscomp$114$$ = this.inodes[$foreign_parentid$jscomp$2_parentid$jscomp$8$$];
  if (this.is_forwarder($parent_inode$jscomp$4_x$jscomp$114$$)) {
    return $foreign_parentid$jscomp$2_parentid$jscomp$8$$ = $parent_inode$jscomp$4_x$jscomp$114$$.foreign_id, $filename$jscomp$8_foreign_id$jscomp$2$$ = this.follow_fs($parent_inode$jscomp$4_x$jscomp$114$$).CreateNode($filename$jscomp$8_foreign_id$jscomp$2$$, $foreign_parentid$jscomp$2_parentid$jscomp$8$$, $major$$, $minor$$), this.create_forwarder($parent_inode$jscomp$4_x$jscomp$114$$.mount_id, $filename$jscomp$8_foreign_id$jscomp$2$$);
  }
  $parent_inode$jscomp$4_x$jscomp$114$$ = this.CreateInode();
  $parent_inode$jscomp$4_x$jscomp$114$$.major = $major$$;
  $parent_inode$jscomp$4_x$jscomp$114$$.minor = $minor$$;
  $parent_inode$jscomp$4_x$jscomp$114$$.uid = this.inodes[$foreign_parentid$jscomp$2_parentid$jscomp$8$$].uid;
  $parent_inode$jscomp$4_x$jscomp$114$$.gid = this.inodes[$foreign_parentid$jscomp$2_parentid$jscomp$8$$].gid;
  $parent_inode$jscomp$4_x$jscomp$114$$.qid.type = 192;
  $parent_inode$jscomp$4_x$jscomp$114$$.mode = this.inodes[$foreign_parentid$jscomp$2_parentid$jscomp$8$$].mode & 438;
  this.PushInode($parent_inode$jscomp$4_x$jscomp$114$$, $foreign_parentid$jscomp$2_parentid$jscomp$8$$, $filename$jscomp$8_foreign_id$jscomp$2$$);
  return this.inodes.length - 1;
};
$FS$$module$lib$filesystem$$.prototype.CreateSymlink = function($filename$jscomp$9_foreign_id$jscomp$3$$, $foreign_parentid$jscomp$3_parentid$jscomp$9$$, $symlink$$) {
  var $parent_inode$jscomp$5_x$jscomp$115$$ = this.inodes[$foreign_parentid$jscomp$3_parentid$jscomp$9$$];
  if (this.is_forwarder($parent_inode$jscomp$5_x$jscomp$115$$)) {
    return $foreign_parentid$jscomp$3_parentid$jscomp$9$$ = $parent_inode$jscomp$5_x$jscomp$115$$.foreign_id, $filename$jscomp$9_foreign_id$jscomp$3$$ = this.follow_fs($parent_inode$jscomp$5_x$jscomp$115$$).CreateSymlink($filename$jscomp$9_foreign_id$jscomp$3$$, $foreign_parentid$jscomp$3_parentid$jscomp$9$$, $symlink$$), this.create_forwarder($parent_inode$jscomp$5_x$jscomp$115$$.mount_id, $filename$jscomp$9_foreign_id$jscomp$3$$);
  }
  $parent_inode$jscomp$5_x$jscomp$115$$ = this.CreateInode();
  $parent_inode$jscomp$5_x$jscomp$115$$.uid = this.inodes[$foreign_parentid$jscomp$3_parentid$jscomp$9$$].uid;
  $parent_inode$jscomp$5_x$jscomp$115$$.gid = this.inodes[$foreign_parentid$jscomp$3_parentid$jscomp$9$$].gid;
  $parent_inode$jscomp$5_x$jscomp$115$$.qid.type = 160;
  $parent_inode$jscomp$5_x$jscomp$115$$.symlink = $symlink$$;
  $parent_inode$jscomp$5_x$jscomp$115$$.mode = 40960;
  this.PushInode($parent_inode$jscomp$5_x$jscomp$115$$, $foreign_parentid$jscomp$3_parentid$jscomp$9$$, $filename$jscomp$9_foreign_id$jscomp$3$$);
  return this.inodes.length - 1;
};
$FS$$module$lib$filesystem$$.prototype.CreateTextFile = async function($data$jscomp$153_filename$jscomp$10$$, $foreign_parentid$jscomp$4_j$jscomp$7_parentid$jscomp$10_x$jscomp$116$$, $foreign_id$jscomp$4_str$jscomp$10$$) {
  var $id$jscomp$10_parent_inode$jscomp$6$$ = this.inodes[$foreign_parentid$jscomp$4_j$jscomp$7_parentid$jscomp$10_x$jscomp$116$$];
  if (this.is_forwarder($id$jscomp$10_parent_inode$jscomp$6$$)) {
    return $foreign_parentid$jscomp$4_j$jscomp$7_parentid$jscomp$10_x$jscomp$116$$ = $id$jscomp$10_parent_inode$jscomp$6$$.foreign_id, $foreign_id$jscomp$4_str$jscomp$10$$ = await this.follow_fs($id$jscomp$10_parent_inode$jscomp$6$$).CreateTextFile($data$jscomp$153_filename$jscomp$10$$, $foreign_parentid$jscomp$4_j$jscomp$7_parentid$jscomp$10_x$jscomp$116$$, $foreign_id$jscomp$4_str$jscomp$10$$), this.create_forwarder($id$jscomp$10_parent_inode$jscomp$6$$.mount_id, $foreign_id$jscomp$4_str$jscomp$10$$);
  }
  $id$jscomp$10_parent_inode$jscomp$6$$ = this.CreateFile($data$jscomp$153_filename$jscomp$10$$, $foreign_parentid$jscomp$4_j$jscomp$7_parentid$jscomp$10_x$jscomp$116$$);
  $foreign_parentid$jscomp$4_j$jscomp$7_parentid$jscomp$10_x$jscomp$116$$ = this.inodes[$id$jscomp$10_parent_inode$jscomp$6$$];
  $data$jscomp$153_filename$jscomp$10$$ = new Uint8Array($foreign_id$jscomp$4_str$jscomp$10$$.length);
  $foreign_parentid$jscomp$4_j$jscomp$7_parentid$jscomp$10_x$jscomp$116$$.size = $foreign_id$jscomp$4_str$jscomp$10$$.length;
  for ($foreign_parentid$jscomp$4_j$jscomp$7_parentid$jscomp$10_x$jscomp$116$$ = 0; $foreign_parentid$jscomp$4_j$jscomp$7_parentid$jscomp$10_x$jscomp$116$$ < $foreign_id$jscomp$4_str$jscomp$10$$.length; $foreign_parentid$jscomp$4_j$jscomp$7_parentid$jscomp$10_x$jscomp$116$$++) {
    $data$jscomp$153_filename$jscomp$10$$[$foreign_parentid$jscomp$4_j$jscomp$7_parentid$jscomp$10_x$jscomp$116$$] = $foreign_id$jscomp$4_str$jscomp$10$$.charCodeAt($foreign_parentid$jscomp$4_j$jscomp$7_parentid$jscomp$10_x$jscomp$116$$);
  }
  await this.set_data($id$jscomp$10_parent_inode$jscomp$6$$, $data$jscomp$153_filename$jscomp$10$$);
  return $id$jscomp$10_parent_inode$jscomp$6$$;
};
$FS$$module$lib$filesystem$$.prototype.CreateBinaryFile = async function($filename$jscomp$11_x$jscomp$117$$, $data$jscomp$154_foreign_parentid$jscomp$5_parentid$jscomp$11$$, $buffer$jscomp$38_foreign_id$jscomp$5$$) {
  var $id$jscomp$11_parent_inode$jscomp$7$$ = this.inodes[$data$jscomp$154_foreign_parentid$jscomp$5_parentid$jscomp$11$$];
  if (this.is_forwarder($id$jscomp$11_parent_inode$jscomp$7$$)) {
    return $data$jscomp$154_foreign_parentid$jscomp$5_parentid$jscomp$11$$ = $id$jscomp$11_parent_inode$jscomp$7$$.foreign_id, $buffer$jscomp$38_foreign_id$jscomp$5$$ = await this.follow_fs($id$jscomp$11_parent_inode$jscomp$7$$).CreateBinaryFile($filename$jscomp$11_x$jscomp$117$$, $data$jscomp$154_foreign_parentid$jscomp$5_parentid$jscomp$11$$, $buffer$jscomp$38_foreign_id$jscomp$5$$), this.create_forwarder($id$jscomp$11_parent_inode$jscomp$7$$.mount_id, $buffer$jscomp$38_foreign_id$jscomp$5$$);
  }
  $id$jscomp$11_parent_inode$jscomp$7$$ = this.CreateFile($filename$jscomp$11_x$jscomp$117$$, $data$jscomp$154_foreign_parentid$jscomp$5_parentid$jscomp$11$$);
  $filename$jscomp$11_x$jscomp$117$$ = this.inodes[$id$jscomp$11_parent_inode$jscomp$7$$];
  $data$jscomp$154_foreign_parentid$jscomp$5_parentid$jscomp$11$$ = new Uint8Array($buffer$jscomp$38_foreign_id$jscomp$5$$.length);
  $data$jscomp$154_foreign_parentid$jscomp$5_parentid$jscomp$11$$.set($buffer$jscomp$38_foreign_id$jscomp$5$$);
  await this.set_data($id$jscomp$11_parent_inode$jscomp$7$$, $data$jscomp$154_foreign_parentid$jscomp$5_parentid$jscomp$11$$);
  $filename$jscomp$11_x$jscomp$117$$.size = $buffer$jscomp$38_foreign_id$jscomp$5$$.length;
  return $id$jscomp$11_parent_inode$jscomp$7$$;
};
$FS$$module$lib$filesystem$$.prototype.OpenInode = function($id$jscomp$12$$, $mode$jscomp$20$$) {
  var $inode$jscomp$9$$ = this.inodes[$id$jscomp$12$$];
  if (this.is_forwarder($inode$jscomp$9$$)) {
    return this.follow_fs($inode$jscomp$9$$).OpenInode($inode$jscomp$9$$.foreign_id, $mode$jscomp$20$$);
  }
  16384 === ($inode$jscomp$9$$.mode & 61440) && this.FillDirectory($id$jscomp$12$$);
  return !0;
};
$FS$$module$lib$filesystem$$.prototype.CloseInode = async function($id$jscomp$13$$) {
  var $inode$jscomp$10$$ = this.inodes[$id$jscomp$13$$];
  if (this.is_forwarder($inode$jscomp$10$$)) {
    return await this.follow_fs($inode$jscomp$10$$).CloseInode($inode$jscomp$10$$.foreign_id);
  }
  2 === $inode$jscomp$10$$.status && this.storage.uncache($inode$jscomp$10$$.sha256sum);
  4 === $inode$jscomp$10$$.status && ($inode$jscomp$10$$.status = -1, await this.DeleteData($id$jscomp$13$$));
};
$FS$$module$lib$filesystem$$.prototype.Rename = async function($olddirid_ret$jscomp$3_ret$jscomp$4$$, $oldname$$, $foreign_fs_new_real_inode_newdirid$$, $foreign_id$jscomp$6_newname$$) {
  if ($olddirid_ret$jscomp$3_ret$jscomp$4$$ === $foreign_fs_new_real_inode_newdirid$$ && $oldname$$ === $foreign_id$jscomp$6_newname$$) {
    return 0;
  }
  var $oldid$$ = this.Search($olddirid_ret$jscomp$3_ret$jscomp$4$$, $oldname$$);
  if (-1 === $oldid$$) {
    return -2;
  }
  var $oldpath$$ = this.GetFullPath($olddirid_ret$jscomp$3_ret$jscomp$4$$) + "/" + $oldname$$;
  if (-1 !== this.Search($foreign_fs_new_real_inode_newdirid$$, $foreign_id$jscomp$6_newname$$) && ($newdir_ret$jscomp$2_ret$jscomp$5$$ = this.Unlink($foreign_fs_new_real_inode_newdirid$$, $foreign_id$jscomp$6_newname$$), 0 > $newdir_ret$jscomp$2_ret$jscomp$5$$)) {
    return $newdir_ret$jscomp$2_ret$jscomp$5$$;
  }
  var $inode$jscomp$11$$ = this.inodes[$oldid$$], $diverted_old_idx_olddir$$ = this.inodes[$olddirid_ret$jscomp$3_ret$jscomp$4$$], $newdir_ret$jscomp$2_ret$jscomp$5$$ = this.inodes[$foreign_fs_new_real_inode_newdirid$$];
  if (this.is_forwarder($diverted_old_idx_olddir$$) || this.is_forwarder($newdir_ret$jscomp$2_ret$jscomp$5$$)) {
    if (this.is_forwarder($diverted_old_idx_olddir$$) && $diverted_old_idx_olddir$$.mount_id === $newdir_ret$jscomp$2_ret$jscomp$5$$.mount_id) {
      if ($olddirid_ret$jscomp$3_ret$jscomp$4$$ = await this.follow_fs($diverted_old_idx_olddir$$).Rename($diverted_old_idx_olddir$$.foreign_id, $oldname$$, $newdir_ret$jscomp$2_ret$jscomp$5$$.foreign_id, $foreign_id$jscomp$6_newname$$), 0 > $olddirid_ret$jscomp$3_ret$jscomp$4$$) {
        return $olddirid_ret$jscomp$3_ret$jscomp$4$$;
      }
    } else {
      if (this.is_a_root($oldid$$)) {
        return $dbg_log$$module$src$log$$("XXX: Attempted to move mountpoint (" + $oldname$$ + ") - skipped", 4194304), -1;
      }
      if (!this.IsDirectory($oldid$$) && 1 < this.GetInode($oldid$$).nlinks) {
        return $dbg_log$$module$src$log$$("XXX: Attempted to move hardlinked file (" + $oldname$$ + ") across filesystems - skipped", 4194304), -1;
      }
      $diverted_old_idx_olddir$$ = this.divert($olddirid_ret$jscomp$3_ret$jscomp$4$$, $oldname$$);
      const $old_real_inode$$ = this.GetInode($oldid$$), $data$jscomp$155$$ = await this.Read($diverted_old_idx_olddir$$, 0, $old_real_inode$$.size);
      this.is_forwarder($newdir_ret$jscomp$2_ret$jscomp$5$$) ? ($foreign_fs_new_real_inode_newdirid$$ = this.follow_fs($newdir_ret$jscomp$2_ret$jscomp$5$$), $foreign_id$jscomp$6_newname$$ = this.IsDirectory($diverted_old_idx_olddir$$) ? $foreign_fs_new_real_inode_newdirid$$.CreateDirectory($foreign_id$jscomp$6_newname$$, $newdir_ret$jscomp$2_ret$jscomp$5$$.foreign_id) : $foreign_fs_new_real_inode_newdirid$$.CreateFile($foreign_id$jscomp$6_newname$$, $newdir_ret$jscomp$2_ret$jscomp$5$$.foreign_id), 
      $foreign_fs_new_real_inode_newdirid$$ = $foreign_fs_new_real_inode_newdirid$$.GetInode($foreign_id$jscomp$6_newname$$), this.copy_inode($old_real_inode$$, $foreign_fs_new_real_inode_newdirid$$), this.set_forwarder($oldid$$, $newdir_ret$jscomp$2_ret$jscomp$5$$.mount_id, $foreign_id$jscomp$6_newname$$)) : (this.delete_forwarder($inode$jscomp$11$$), this.copy_inode($old_real_inode$$, $inode$jscomp$11$$), this.link_under_dir($foreign_fs_new_real_inode_newdirid$$, $oldid$$, $foreign_id$jscomp$6_newname$$));
      await this.ChangeSize($oldid$$, $old_real_inode$$.size);
      $data$jscomp$155$$ && $data$jscomp$155$$.length && await this.Write($oldid$$, 0, $data$jscomp$155$$.length, $data$jscomp$155$$);
      if (this.IsDirectory($oldid$$)) {
        for (const $child_filename$$ of this.GetChildren($diverted_old_idx_olddir$$)) {
          if ($newdir_ret$jscomp$2_ret$jscomp$5$$ = await this.Rename($diverted_old_idx_olddir$$, $child_filename$$, $oldid$$, $child_filename$$), 0 > $newdir_ret$jscomp$2_ret$jscomp$5$$) {
            return $newdir_ret$jscomp$2_ret$jscomp$5$$;
          }
        }
      }
      await this.DeleteData($diverted_old_idx_olddir$$);
      $olddirid_ret$jscomp$3_ret$jscomp$4$$ = this.Unlink($olddirid_ret$jscomp$3_ret$jscomp$4$$, $oldname$$);
      if (0 > $olddirid_ret$jscomp$3_ret$jscomp$4$$) {
        return $olddirid_ret$jscomp$3_ret$jscomp$4$$;
      }
    }
  } else {
    this.unlink_from_dir($olddirid_ret$jscomp$3_ret$jscomp$4$$, $oldname$$), this.link_under_dir($foreign_fs_new_real_inode_newdirid$$, $oldid$$, $foreign_id$jscomp$6_newname$$), $inode$jscomp$11$$.qid.version++;
  }
  this.NotifyListeners($oldid$$, "rename", {oldpath:$oldpath$$});
  return 0;
};
$FS$$module$lib$filesystem$$.prototype.Write = async function($foreign_id$jscomp$7_id$jscomp$14$$, $offset$jscomp$55$$, $count$jscomp$50$$, $buffer$jscomp$39$$) {
  this.NotifyListeners($foreign_id$jscomp$7_id$jscomp$14$$, "write");
  var $inode$jscomp$12$$ = this.inodes[$foreign_id$jscomp$7_id$jscomp$14$$];
  if (this.is_forwarder($inode$jscomp$12$$)) {
    $foreign_id$jscomp$7_id$jscomp$14$$ = $inode$jscomp$12$$.foreign_id, await this.follow_fs($inode$jscomp$12$$).Write($foreign_id$jscomp$7_id$jscomp$14$$, $offset$jscomp$55$$, $count$jscomp$50$$, $buffer$jscomp$39$$);
  } else {
    var $data$jscomp$156$$ = await this.get_buffer($foreign_id$jscomp$7_id$jscomp$14$$);
    !$data$jscomp$156$$ || $data$jscomp$156$$.length < $offset$jscomp$55$$ + $count$jscomp$50$$ ? (await this.ChangeSize($foreign_id$jscomp$7_id$jscomp$14$$, Math.floor(3 * ($offset$jscomp$55$$ + $count$jscomp$50$$) / 2)), $inode$jscomp$12$$.size = $offset$jscomp$55$$ + $count$jscomp$50$$, $data$jscomp$156$$ = await this.get_buffer($foreign_id$jscomp$7_id$jscomp$14$$)) : $inode$jscomp$12$$.size < $offset$jscomp$55$$ + $count$jscomp$50$$ && ($inode$jscomp$12$$.size = $offset$jscomp$55$$ + $count$jscomp$50$$);
    $buffer$jscomp$39$$ && $data$jscomp$156$$.set($buffer$jscomp$39$$.subarray(0, $count$jscomp$50$$), $offset$jscomp$55$$);
    await this.set_data($foreign_id$jscomp$7_id$jscomp$14$$, $data$jscomp$156$$);
  }
};
$FS$$module$lib$filesystem$$.prototype.Read = async function($foreign_id$jscomp$8_inodeid$$, $offset$jscomp$56$$, $count$jscomp$51$$) {
  const $inode$jscomp$13$$ = this.inodes[$foreign_id$jscomp$8_inodeid$$];
  return this.is_forwarder($inode$jscomp$13$$) ? ($foreign_id$jscomp$8_inodeid$$ = $inode$jscomp$13$$.foreign_id, await this.follow_fs($inode$jscomp$13$$).Read($foreign_id$jscomp$8_inodeid$$, $offset$jscomp$56$$, $count$jscomp$51$$)) : await this.get_data($foreign_id$jscomp$8_inodeid$$, $offset$jscomp$56$$, $count$jscomp$51$$);
};
$FS$$module$lib$filesystem$$.prototype.Search = function($parent_inode$jscomp$8_parentid$jscomp$12$$, $childid_foreign_id$jscomp$9_name$jscomp$90$$) {
  $parent_inode$jscomp$8_parentid$jscomp$12$$ = this.inodes[$parent_inode$jscomp$8_parentid$jscomp$12$$];
  if (this.is_forwarder($parent_inode$jscomp$8_parentid$jscomp$12$$)) {
    const $foreign_parentid$jscomp$6$$ = $parent_inode$jscomp$8_parentid$jscomp$12$$.foreign_id;
    $childid_foreign_id$jscomp$9_name$jscomp$90$$ = this.follow_fs($parent_inode$jscomp$8_parentid$jscomp$12$$).Search($foreign_parentid$jscomp$6$$, $childid_foreign_id$jscomp$9_name$jscomp$90$$);
    return -1 === $childid_foreign_id$jscomp$9_name$jscomp$90$$ ? -1 : this.get_forwarder($parent_inode$jscomp$8_parentid$jscomp$12$$.mount_id, $childid_foreign_id$jscomp$9_name$jscomp$90$$);
  }
  $childid_foreign_id$jscomp$9_name$jscomp$90$$ = $parent_inode$jscomp$8_parentid$jscomp$12$$.direntries.get($childid_foreign_id$jscomp$9_name$jscomp$90$$);
  return void 0 === $childid_foreign_id$jscomp$9_name$jscomp$90$$ ? -1 : $childid_foreign_id$jscomp$9_name$jscomp$90$$;
};
$FS$$module$lib$filesystem$$.prototype.CountUsedInodes = function() {
  let $count$jscomp$52$$ = this.inodes.length;
  for (const {fs:$fs$jscomp$2$$, backtrack:$backtrack$$} of this.mounts) {
    $count$jscomp$52$$ += $fs$jscomp$2$$.CountUsedInodes(), $count$jscomp$52$$ -= $backtrack$$.size;
  }
  return $count$jscomp$52$$;
};
$FS$$module$lib$filesystem$$.prototype.CountFreeInodes = function() {
  let $count$jscomp$53$$ = 1048576;
  for (const {fs:$fs$jscomp$3$$} of this.mounts) {
    $count$jscomp$53$$ += $fs$jscomp$3$$.CountFreeInodes();
  }
  return $count$jscomp$53$$;
};
$FS$$module$lib$filesystem$$.prototype.GetTotalSize = function() {
  let $size$jscomp$31$$ = this.used_size;
  for (const {fs:$fs$jscomp$4$$} of this.mounts) {
    $size$jscomp$31$$ += $fs$jscomp$4$$.GetTotalSize();
  }
  return $size$jscomp$31$$;
};
$FS$$module$lib$filesystem$$.prototype.GetSpace = function() {
  let $size$jscomp$32$$ = this.total_size;
  for (const {fs:$fs$jscomp$5$$} of this.mounts) {
    $size$jscomp$32$$ += $fs$jscomp$5$$.GetSpace();
  }
  return this.total_size;
};
$FS$$module$lib$filesystem$$.prototype.GetDirectoryName = function($idx$jscomp$4$$) {
  const $parent_inode$jscomp$9$$ = this.inodes[this.GetParent($idx$jscomp$4$$)];
  if (this.is_forwarder($parent_inode$jscomp$9$$)) {
    return this.follow_fs($parent_inode$jscomp$9$$).GetDirectoryName(this.inodes[$idx$jscomp$4$$].foreign_id);
  }
  if (!$parent_inode$jscomp$9$$) {
    return "";
  }
  for (const [$name$jscomp$91$$, $childid$jscomp$1$$] of $parent_inode$jscomp$9$$.direntries) {
    if ($childid$jscomp$1$$ === $idx$jscomp$4$$) {
      return $name$jscomp$91$$;
    }
  }
  $dbg_assert$$module$src$log$$(!1, "Filesystem: Found directory inode whose parent doesn't link to it");
  return "";
};
$FS$$module$lib$filesystem$$.prototype.GetFullPath = function($idx$jscomp$5$$) {
  $dbg_assert$$module$src$log$$(this.IsDirectory($idx$jscomp$5$$), "Filesystem: Cannot get full path of non-directory inode");
  for (var $path$jscomp$6$$ = ""; 0 !== $idx$jscomp$5$$;) {
    $path$jscomp$6$$ = "/" + this.GetDirectoryName($idx$jscomp$5$$) + $path$jscomp$6$$, $idx$jscomp$5$$ = this.GetParent($idx$jscomp$5$$);
  }
  return $path$jscomp$6$$.substring(1);
};
$FS$$module$lib$filesystem$$.prototype.Link = function($parentid$jscomp$13$$, $targetid$$, $name$jscomp$92$$) {
  if (this.IsDirectory($targetid$$)) {
    return -1;
  }
  const $parent_inode$jscomp$10$$ = this.inodes[$parentid$jscomp$13$$], $inode$jscomp$14$$ = this.inodes[$targetid$$];
  if (this.is_forwarder($parent_inode$jscomp$10$$)) {
    return this.is_forwarder($inode$jscomp$14$$) && $inode$jscomp$14$$.mount_id === $parent_inode$jscomp$10$$.mount_id ? this.follow_fs($parent_inode$jscomp$10$$).Link($parent_inode$jscomp$10$$.foreign_id, $inode$jscomp$14$$.foreign_id, $name$jscomp$92$$) : ($dbg_log$$module$src$log$$("XXX: Attempted to hardlink a file into a child filesystem - skipped", 4194304), -1);
  }
  if (this.is_forwarder($inode$jscomp$14$$)) {
    return $dbg_log$$module$src$log$$("XXX: Attempted to hardlink file across filesystems - skipped", 4194304), -1;
  }
  this.link_under_dir($parentid$jscomp$13$$, $targetid$$, $name$jscomp$92$$);
  return 0;
};
$FS$$module$lib$filesystem$$.prototype.Unlink = function($foreign_parentid$jscomp$7_parentid$jscomp$14$$, $name$jscomp$93$$) {
  if ("." === $name$jscomp$93$$ || ".." === $name$jscomp$93$$) {
    return -1;
  }
  const $idx$jscomp$6$$ = this.Search($foreign_parentid$jscomp$7_parentid$jscomp$14$$, $name$jscomp$93$$), $inode$jscomp$15$$ = this.inodes[$idx$jscomp$6$$], $parent_inode$jscomp$11$$ = this.inodes[$foreign_parentid$jscomp$7_parentid$jscomp$14$$];
  if (this.is_forwarder($parent_inode$jscomp$11$$)) {
    return $dbg_assert$$module$src$log$$(this.is_forwarder($inode$jscomp$15$$), "Children of forwarders should be forwarders"), $foreign_parentid$jscomp$7_parentid$jscomp$14$$ = $parent_inode$jscomp$11$$.foreign_id, this.follow_fs($parent_inode$jscomp$11$$).Unlink($foreign_parentid$jscomp$7_parentid$jscomp$14$$, $name$jscomp$93$$);
  }
  if (this.IsDirectory($idx$jscomp$6$$) && !this.IsEmpty($idx$jscomp$6$$)) {
    return -39;
  }
  this.unlink_from_dir($foreign_parentid$jscomp$7_parentid$jscomp$14$$, $name$jscomp$93$$);
  0 === $inode$jscomp$15$$.nlinks && ($inode$jscomp$15$$.status = 4, this.NotifyListeners($idx$jscomp$6$$, "delete"));
  return 0;
};
$FS$$module$lib$filesystem$$.prototype.DeleteData = async function($idx$jscomp$7$$) {
  const $inode$jscomp$16$$ = this.inodes[$idx$jscomp$7$$];
  this.is_forwarder($inode$jscomp$16$$) ? await this.follow_fs($inode$jscomp$16$$).DeleteData($inode$jscomp$16$$.foreign_id) : ($inode$jscomp$16$$.size = 0, delete this.inodedata[$idx$jscomp$7$$]);
};
$FS$$module$lib$filesystem$$.prototype.get_buffer = async function($idx$jscomp$8$$) {
  const $inode$jscomp$17$$ = this.inodes[$idx$jscomp$8$$];
  $dbg_assert$$module$src$log$$($inode$jscomp$17$$, `Filesystem get_buffer: idx ${$idx$jscomp$8$$} does not point to an inode`);
  return this.inodedata[$idx$jscomp$8$$] ? this.inodedata[$idx$jscomp$8$$] : 2 === $inode$jscomp$17$$.status ? ($dbg_assert$$module$src$log$$($inode$jscomp$17$$.sha256sum, "Filesystem get_data: found inode on server without sha256sum"), await this.storage.read($inode$jscomp$17$$.sha256sum, 0, $inode$jscomp$17$$.size)) : null;
};
$FS$$module$lib$filesystem$$.prototype.get_data = async function($idx$jscomp$9$$, $offset$jscomp$57$$, $count$jscomp$54$$) {
  const $inode$jscomp$18$$ = this.inodes[$idx$jscomp$9$$];
  $dbg_assert$$module$src$log$$($inode$jscomp$18$$, `Filesystem get_data: idx ${$idx$jscomp$9$$} does not point to an inode`);
  return this.inodedata[$idx$jscomp$9$$] ? this.inodedata[$idx$jscomp$9$$].subarray($offset$jscomp$57$$, $offset$jscomp$57$$ + $count$jscomp$54$$) : 2 === $inode$jscomp$18$$.status ? ($dbg_assert$$module$src$log$$($inode$jscomp$18$$.sha256sum, "Filesystem get_data: found inode on server without sha256sum"), await this.storage.read($inode$jscomp$18$$.sha256sum, $offset$jscomp$57$$, $count$jscomp$54$$)) : null;
};
$FS$$module$lib$filesystem$$.prototype.set_data = async function($idx$jscomp$10$$, $buffer$jscomp$40$$) {
  this.inodedata[$idx$jscomp$10$$] = $buffer$jscomp$40$$;
  2 === this.inodes[$idx$jscomp$10$$].status && (this.inodes[$idx$jscomp$10$$].status = 0, this.storage.uncache(this.inodes[$idx$jscomp$10$$].sha256sum));
};
$FS$$module$lib$filesystem$$.prototype.GetInode = function($idx$jscomp$11_inode$jscomp$19$$) {
  $dbg_assert$$module$src$log$$(!isNaN($idx$jscomp$11_inode$jscomp$19$$), "Filesystem GetInode: NaN idx");
  $dbg_assert$$module$src$log$$(0 <= $idx$jscomp$11_inode$jscomp$19$$ && $idx$jscomp$11_inode$jscomp$19$$ < this.inodes.length, "Filesystem GetInode: out of range idx:" + $idx$jscomp$11_inode$jscomp$19$$);
  $idx$jscomp$11_inode$jscomp$19$$ = this.inodes[$idx$jscomp$11_inode$jscomp$19$$];
  return this.is_forwarder($idx$jscomp$11_inode$jscomp$19$$) ? this.follow_fs($idx$jscomp$11_inode$jscomp$19$$).GetInode($idx$jscomp$11_inode$jscomp$19$$.foreign_id) : $idx$jscomp$11_inode$jscomp$19$$;
};
$FS$$module$lib$filesystem$$.prototype.ChangeSize = async function($idx$jscomp$12$$, $newsize$$) {
  var $inode$jscomp$20$$ = this.GetInode($idx$jscomp$12$$), $temp$$ = await this.get_data($idx$jscomp$12$$, 0, $inode$jscomp$20$$.size);
  if ($newsize$$ !== $inode$jscomp$20$$.size) {
    var $data$jscomp$157$$ = new Uint8Array($newsize$$);
    $inode$jscomp$20$$.size = $newsize$$;
    $temp$$ && $data$jscomp$157$$.set($temp$$.subarray(0, Math.min($temp$$.length, $inode$jscomp$20$$.size)), 0);
    await this.set_data($idx$jscomp$12$$, $data$jscomp$157$$);
  }
};
$FS$$module$lib$filesystem$$.prototype.SearchPath = function($path$jscomp$7_walk$$) {
  $path$jscomp$7_walk$$ = $path$jscomp$7_walk$$.replace("//", "/");
  $path$jscomp$7_walk$$ = $path$jscomp$7_walk$$.split("/");
  0 < $path$jscomp$7_walk$$.length && 0 === $path$jscomp$7_walk$$[$path$jscomp$7_walk$$.length - 1].length && $path$jscomp$7_walk$$.pop();
  0 < $path$jscomp$7_walk$$.length && 0 === $path$jscomp$7_walk$$[0].length && $path$jscomp$7_walk$$.shift();
  const $n$jscomp$9$$ = $path$jscomp$7_walk$$.length;
  var $parentid$jscomp$15$$ = -1, $id$jscomp$15$$ = 0;
  let $forward_path$$ = null;
  for (var $i$jscomp$62$$ = 0; $i$jscomp$62$$ < $n$jscomp$9$$; $i$jscomp$62$$++) {
    if ($parentid$jscomp$15$$ = $id$jscomp$15$$, $id$jscomp$15$$ = this.Search($parentid$jscomp$15$$, $path$jscomp$7_walk$$[$i$jscomp$62$$]), !$forward_path$$ && this.is_forwarder(this.inodes[$parentid$jscomp$15$$]) && ($forward_path$$ = "/" + $path$jscomp$7_walk$$.slice($i$jscomp$62$$).join("/")), -1 === $id$jscomp$15$$) {
      return $i$jscomp$62$$ < $n$jscomp$9$$ - 1 ? {id:-1, parentid:-1, name:$path$jscomp$7_walk$$[$i$jscomp$62$$], forward_path:$forward_path$$} : {id:-1, parentid:$parentid$jscomp$15$$, name:$path$jscomp$7_walk$$[$i$jscomp$62$$], forward_path:$forward_path$$};
    }
  }
  return {id:$id$jscomp$15$$, parentid:$parentid$jscomp$15$$, name:$path$jscomp$7_walk$$[$i$jscomp$62$$], forward_path:$forward_path$$};
};
$FS$$module$lib$filesystem$$.prototype.GetRecursiveList = function($dirid_i$jscomp$63$$, $list$$) {
  if (this.is_forwarder(this.inodes[$dirid_i$jscomp$63$$])) {
    const $foreign_fs$jscomp$1$$ = this.follow_fs(this.inodes[$dirid_i$jscomp$63$$]), $mount_id$$ = this.inodes[$dirid_i$jscomp$63$$].mount_id, $foreign_start$$ = $list$$.length;
    $foreign_fs$jscomp$1$$.GetRecursiveList(this.inodes[$dirid_i$jscomp$63$$].foreign_id, $list$$);
    for ($dirid_i$jscomp$63$$ = $foreign_start$$; $dirid_i$jscomp$63$$ < $list$$.length; $dirid_i$jscomp$63$$++) {
      $list$$[$dirid_i$jscomp$63$$].parentid = this.get_forwarder($mount_id$$, $list$$[$dirid_i$jscomp$63$$].parentid);
    }
  } else {
    for (const [$name$jscomp$94$$, $id$jscomp$16$$] of this.inodes[$dirid_i$jscomp$63$$].direntries) {
      "." !== $name$jscomp$94$$ && ".." !== $name$jscomp$94$$ && ($list$$.push({parentid:$dirid_i$jscomp$63$$, name:$name$jscomp$94$$}), this.IsDirectory($id$jscomp$16$$) && this.GetRecursiveList($id$jscomp$16$$, $list$$));
    }
  }
};
$FS$$module$lib$filesystem$$.prototype.RecursiveDelete = function($i$jscomp$64_ids_path$jscomp$8$$) {
  var $toDelete$$ = [];
  $i$jscomp$64_ids_path$jscomp$8$$ = this.SearchPath($i$jscomp$64_ids_path$jscomp$8$$);
  if (-1 !== $i$jscomp$64_ids_path$jscomp$8$$.id) {
    for (this.GetRecursiveList($i$jscomp$64_ids_path$jscomp$8$$.id, $toDelete$$), $i$jscomp$64_ids_path$jscomp$8$$ = $toDelete$$.length - 1; 0 <= $i$jscomp$64_ids_path$jscomp$8$$; $i$jscomp$64_ids_path$jscomp$8$$--) {
      const $ret$jscomp$6$$ = this.Unlink($toDelete$$[$i$jscomp$64_ids_path$jscomp$8$$].parentid, $toDelete$$[$i$jscomp$64_ids_path$jscomp$8$$].name);
      $dbg_assert$$module$src$log$$(0 === $ret$jscomp$6$$, "Filesystem RecursiveDelete failed at parent=" + $toDelete$$[$i$jscomp$64_ids_path$jscomp$8$$].parentid + ", name='" + $toDelete$$[$i$jscomp$64_ids_path$jscomp$8$$].name + "' with error code: " + -$ret$jscomp$6$$);
    }
  }
};
$FS$$module$lib$filesystem$$.prototype.DeleteNode = function($path$jscomp$9_ret$jscomp$7_ret$jscomp$8$$) {
  var $ids$jscomp$1$$ = this.SearchPath($path$jscomp$9_ret$jscomp$7_ret$jscomp$8$$);
  -1 !== $ids$jscomp$1$$.id && (32768 === (this.inodes[$ids$jscomp$1$$.id].mode & 61440) ? ($path$jscomp$9_ret$jscomp$7_ret$jscomp$8$$ = this.Unlink($ids$jscomp$1$$.parentid, $ids$jscomp$1$$.name), $dbg_assert$$module$src$log$$(0 === $path$jscomp$9_ret$jscomp$7_ret$jscomp$8$$, "Filesystem DeleteNode failed with error code: " + -$path$jscomp$9_ret$jscomp$7_ret$jscomp$8$$)) : 16384 === (this.inodes[$ids$jscomp$1$$.id].mode & 61440) && (this.RecursiveDelete($path$jscomp$9_ret$jscomp$7_ret$jscomp$8$$), 
  $path$jscomp$9_ret$jscomp$7_ret$jscomp$8$$ = this.Unlink($ids$jscomp$1$$.parentid, $ids$jscomp$1$$.name), $dbg_assert$$module$src$log$$(0 === $path$jscomp$9_ret$jscomp$7_ret$jscomp$8$$, "Filesystem DeleteNode failed with error code: " + -$path$jscomp$9_ret$jscomp$7_ret$jscomp$8$$)));
};
$FS$$module$lib$filesystem$$.prototype.NotifyListeners = function() {
};
$FS$$module$lib$filesystem$$.prototype.Check = function() {
  for (var $i$jscomp$65$$ = 1; $i$jscomp$65$$ < this.inodes.length; $i$jscomp$65$$++) {
    if (-1 !== this.inodes[$i$jscomp$65$$].status) {
      var $inode$jscomp$21_inode$jscomp$22$$ = this.GetInode($i$jscomp$65$$);
      0 > $inode$jscomp$21_inode$jscomp$22$$.nlinks && $dbg_log$$module$src$log$$("Error in filesystem: negative nlinks=" + $inode$jscomp$21_inode$jscomp$22$$.nlinks + " at id =" + $i$jscomp$65$$, 4194304);
      if (this.IsDirectory($i$jscomp$65$$)) {
        $inode$jscomp$21_inode$jscomp$22$$ = this.GetInode($i$jscomp$65$$);
        this.IsDirectory($i$jscomp$65$$) && 0 > this.GetParent($i$jscomp$65$$) && $dbg_log$$module$src$log$$("Error in filesystem: negative parent id " + $i$jscomp$65$$, 4194304);
        for (const [$name$jscomp$95$$, $id$jscomp$18$$] of $inode$jscomp$21_inode$jscomp$22$$.direntries) {
          0 === $name$jscomp$95$$.length && $dbg_log$$module$src$log$$("Error in filesystem: inode with no name and id " + $id$jscomp$18$$, 4194304);
          for (const $c$jscomp$1$$ of $name$jscomp$95$$) {
            32 > $c$jscomp$1$$ && $dbg_log$$module$src$log$$("Error in filesystem: Unallowed char in filename", 4194304);
          }
        }
      }
    }
  }
};
$FS$$module$lib$filesystem$$.prototype.FillDirectory = function($data$jscomp$158_dirid$jscomp$1$$) {
  var $child$jscomp$1_inode$jscomp$23$$ = this.inodes[$data$jscomp$158_dirid$jscomp$1$$];
  if (this.is_forwarder($child$jscomp$1_inode$jscomp$23$$)) {
    this.follow_fs($child$jscomp$1_inode$jscomp$23$$).FillDirectory($child$jscomp$1_inode$jscomp$23$$.foreign_id);
  } else {
    var $offset$jscomp$58_size$jscomp$34$$ = 0;
    for (const $name$jscomp$96$$ of $child$jscomp$1_inode$jscomp$23$$.direntries.keys()) {
      $offset$jscomp$58_size$jscomp$34$$ += 24 + $texten$$module$lib$filesystem$$.encode($name$jscomp$96$$).length;
    }
    $data$jscomp$158_dirid$jscomp$1$$ = this.inodedata[$data$jscomp$158_dirid$jscomp$1$$] = new Uint8Array($offset$jscomp$58_size$jscomp$34$$);
    $child$jscomp$1_inode$jscomp$23$$.size = $offset$jscomp$58_size$jscomp$34$$;
    $offset$jscomp$58_size$jscomp$34$$ = 0;
    for (const [$name$jscomp$97$$, $id$jscomp$19$$] of $child$jscomp$1_inode$jscomp$23$$.direntries) {
      $child$jscomp$1_inode$jscomp$23$$ = this.GetInode($id$jscomp$19$$), $offset$jscomp$58_size$jscomp$34$$ += $Marshall$$module$lib$marshall$$(["Q", "d", "b", "s"], [$child$jscomp$1_inode$jscomp$23$$.qid, $offset$jscomp$58_size$jscomp$34$$ + 13 + 8 + 1 + 2 + $texten$$module$lib$filesystem$$.encode($name$jscomp$97$$).length, $child$jscomp$1_inode$jscomp$23$$.mode >> 12, $name$jscomp$97$$], $data$jscomp$158_dirid$jscomp$1$$, $offset$jscomp$58_size$jscomp$34$$);
    }
  }
};
$FS$$module$lib$filesystem$$.prototype.RoundToDirentry = function($dirid$jscomp$2_offset$jscomp$59$$, $offset_target$$) {
  const $data$jscomp$159$$ = this.inodedata[$dirid$jscomp$2_offset$jscomp$59$$];
  $dbg_assert$$module$src$log$$($data$jscomp$159$$, `FS directory data for dirid=${$dirid$jscomp$2_offset$jscomp$59$$} should be generated`);
  $dbg_assert$$module$src$log$$($data$jscomp$159$$.length, "FS directory should have at least an entry");
  if ($offset_target$$ >= $data$jscomp$159$$.length) {
    return $data$jscomp$159$$.length;
  }
  for ($dirid$jscomp$2_offset$jscomp$59$$ = 0;;) {
    const $next_offset$$ = $Unmarshall$$module$lib$marshall$$(["Q", "d"], $data$jscomp$159$$, {offset:$dirid$jscomp$2_offset$jscomp$59$$})[1];
    if ($next_offset$$ > $offset_target$$) {
      break;
    }
    $dirid$jscomp$2_offset$jscomp$59$$ = $next_offset$$;
  }
  return $dirid$jscomp$2_offset$jscomp$59$$;
};
$FS$$module$lib$filesystem$$.prototype.IsDirectory = function($idx$jscomp$13_inode$jscomp$24$$) {
  $idx$jscomp$13_inode$jscomp$24$$ = this.inodes[$idx$jscomp$13_inode$jscomp$24$$];
  return this.is_forwarder($idx$jscomp$13_inode$jscomp$24$$) ? this.follow_fs($idx$jscomp$13_inode$jscomp$24$$).IsDirectory($idx$jscomp$13_inode$jscomp$24$$.foreign_id) : 16384 === ($idx$jscomp$13_inode$jscomp$24$$.mode & 61440);
};
$FS$$module$lib$filesystem$$.prototype.IsEmpty = function($idx$jscomp$14_inode$jscomp$25$$) {
  $idx$jscomp$14_inode$jscomp$25$$ = this.inodes[$idx$jscomp$14_inode$jscomp$25$$];
  if (this.is_forwarder($idx$jscomp$14_inode$jscomp$25$$)) {
    return this.follow_fs($idx$jscomp$14_inode$jscomp$25$$).IsDirectory($idx$jscomp$14_inode$jscomp$25$$.foreign_id);
  }
  for (const $name$jscomp$98$$ of $idx$jscomp$14_inode$jscomp$25$$.direntries.keys()) {
    if ("." !== $name$jscomp$98$$ && ".." !== $name$jscomp$98$$) {
      return !1;
    }
  }
  return !0;
};
$FS$$module$lib$filesystem$$.prototype.GetChildren = function($idx$jscomp$15_inode$jscomp$26$$) {
  $dbg_assert$$module$src$log$$(this.IsDirectory($idx$jscomp$15_inode$jscomp$26$$), "Filesystem: cannot get children of non-directory inode");
  $idx$jscomp$15_inode$jscomp$26$$ = this.inodes[$idx$jscomp$15_inode$jscomp$26$$];
  if (this.is_forwarder($idx$jscomp$15_inode$jscomp$26$$)) {
    return this.follow_fs($idx$jscomp$15_inode$jscomp$26$$).GetChildren($idx$jscomp$15_inode$jscomp$26$$.foreign_id);
  }
  const $children$jscomp$3$$ = [];
  for (const $name$jscomp$99$$ of $idx$jscomp$15_inode$jscomp$26$$.direntries.keys()) {
    "." !== $name$jscomp$99$$ && ".." !== $name$jscomp$99$$ && $children$jscomp$3$$.push($name$jscomp$99$$);
  }
  return $children$jscomp$3$$;
};
$FS$$module$lib$filesystem$$.prototype.GetParent = function($idx$jscomp$16_inode$jscomp$27$$) {
  $dbg_assert$$module$src$log$$(this.IsDirectory($idx$jscomp$16_inode$jscomp$27$$), "Filesystem: cannot get parent of non-directory inode");
  $idx$jscomp$16_inode$jscomp$27$$ = this.inodes[$idx$jscomp$16_inode$jscomp$27$$];
  if (this.should_be_linked($idx$jscomp$16_inode$jscomp$27$$)) {
    return $idx$jscomp$16_inode$jscomp$27$$.direntries.get("..");
  }
  const $foreign_dirid$jscomp$1$$ = this.follow_fs($idx$jscomp$16_inode$jscomp$27$$).GetParent($idx$jscomp$16_inode$jscomp$27$$.foreign_id);
  $dbg_assert$$module$src$log$$(-1 !== $foreign_dirid$jscomp$1$$, "Filesystem: should not have invalid parent ids");
  return this.get_forwarder($idx$jscomp$16_inode$jscomp$27$$.mount_id, $foreign_dirid$jscomp$1$$);
};
$FS$$module$lib$filesystem$$.prototype.PrepareCAPs = function($id$jscomp$20_inode$jscomp$28$$) {
  $id$jscomp$20_inode$jscomp$28$$ = this.GetInode($id$jscomp$20_inode$jscomp$28$$);
  if ($id$jscomp$20_inode$jscomp$28$$.caps) {
    return $id$jscomp$20_inode$jscomp$28$$.caps.length;
  }
  $id$jscomp$20_inode$jscomp$28$$.caps = new Uint8Array(20);
  $id$jscomp$20_inode$jscomp$28$$.caps[0] = 0;
  $id$jscomp$20_inode$jscomp$28$$.caps[1] = 0;
  $id$jscomp$20_inode$jscomp$28$$.caps[2] = 0;
  $id$jscomp$20_inode$jscomp$28$$.caps[3] = 2;
  $id$jscomp$20_inode$jscomp$28$$.caps[4] = 255;
  $id$jscomp$20_inode$jscomp$28$$.caps[5] = 255;
  $id$jscomp$20_inode$jscomp$28$$.caps[6] = 255;
  $id$jscomp$20_inode$jscomp$28$$.caps[7] = 255;
  $id$jscomp$20_inode$jscomp$28$$.caps[8] = 255;
  $id$jscomp$20_inode$jscomp$28$$.caps[9] = 255;
  $id$jscomp$20_inode$jscomp$28$$.caps[10] = 255;
  $id$jscomp$20_inode$jscomp$28$$.caps[11] = 255;
  $id$jscomp$20_inode$jscomp$28$$.caps[12] = 63;
  $id$jscomp$20_inode$jscomp$28$$.caps[13] = 0;
  $id$jscomp$20_inode$jscomp$28$$.caps[14] = 0;
  $id$jscomp$20_inode$jscomp$28$$.caps[15] = 0;
  $id$jscomp$20_inode$jscomp$28$$.caps[16] = 63;
  $id$jscomp$20_inode$jscomp$28$$.caps[17] = 0;
  $id$jscomp$20_inode$jscomp$28$$.caps[18] = 0;
  $id$jscomp$20_inode$jscomp$28$$.caps[19] = 0;
  return $id$jscomp$20_inode$jscomp$28$$.caps.length;
};
function $FSMountInfo$$module$lib$filesystem$$($filesystem$$) {
  this.fs = $filesystem$$;
  this.backtrack = new Map;
}
$FSMountInfo$$module$lib$filesystem$$.prototype.get_state = function() {
  const $state$jscomp$22$$ = [];
  $state$jscomp$22$$[0] = this.fs;
  $state$jscomp$22$$[1] = [...this.backtrack];
  return $state$jscomp$22$$;
};
$FSMountInfo$$module$lib$filesystem$$.prototype.set_state = function($state$jscomp$23$$) {
  this.fs = $state$jscomp$23$$[0];
  this.backtrack = new Map($state$jscomp$23$$[1]);
};
$FS$$module$lib$filesystem$$.prototype.set_forwarder = function($idx$jscomp$17$$, $mount_id$jscomp$1$$, $foreign_id$jscomp$10$$) {
  const $inode$jscomp$29$$ = this.inodes[$idx$jscomp$17$$];
  $dbg_assert$$module$src$log$$(0 === $inode$jscomp$29$$.nlinks, "Filesystem: attempted to convert an inode into forwarder before unlinking the inode");
  this.is_forwarder($inode$jscomp$29$$) && this.mounts[$inode$jscomp$29$$.mount_id].backtrack.delete($inode$jscomp$29$$.foreign_id);
  $inode$jscomp$29$$.status = 5;
  $inode$jscomp$29$$.mount_id = $mount_id$jscomp$1$$;
  $inode$jscomp$29$$.foreign_id = $foreign_id$jscomp$10$$;
  this.mounts[$mount_id$jscomp$1$$].backtrack.set($foreign_id$jscomp$10$$, $idx$jscomp$17$$);
};
$FS$$module$lib$filesystem$$.prototype.create_forwarder = function($mount_id$jscomp$2$$, $foreign_id$jscomp$11$$) {
  const $inode$jscomp$30$$ = this.CreateInode(), $idx$jscomp$18$$ = this.inodes.length;
  this.inodes.push($inode$jscomp$30$$);
  $inode$jscomp$30$$.fid = $idx$jscomp$18$$;
  this.set_forwarder($idx$jscomp$18$$, $mount_id$jscomp$2$$, $foreign_id$jscomp$11$$);
  return $idx$jscomp$18$$;
};
$FS$$module$lib$filesystem$$.prototype.is_forwarder = function($inode$jscomp$31$$) {
  return 5 === $inode$jscomp$31$$.status;
};
$FS$$module$lib$filesystem$$.prototype.is_a_root = function($idx$jscomp$19$$) {
  return 0 === this.GetInode($idx$jscomp$19$$).fid;
};
$FS$$module$lib$filesystem$$.prototype.get_forwarder = function($mount_id$jscomp$3$$, $foreign_id$jscomp$12$$) {
  var $mount_result$jscomp$9$$ = this.mounts[$mount_id$jscomp$3$$];
  $dbg_assert$$module$src$log$$(0 <= $foreign_id$jscomp$12$$, "Filesystem get_forwarder: invalid foreign_id: " + $foreign_id$jscomp$12$$);
  $dbg_assert$$module$src$log$$($mount_result$jscomp$9$$, "Filesystem get_forwarder: invalid mount number: " + $mount_id$jscomp$3$$);
  $mount_result$jscomp$9$$ = $mount_result$jscomp$9$$.backtrack.get($foreign_id$jscomp$12$$);
  return void 0 === $mount_result$jscomp$9$$ ? this.create_forwarder($mount_id$jscomp$3$$, $foreign_id$jscomp$12$$) : $mount_result$jscomp$9$$;
};
$FS$$module$lib$filesystem$$.prototype.delete_forwarder = function($inode$jscomp$32$$) {
  $dbg_assert$$module$src$log$$(this.is_forwarder($inode$jscomp$32$$), "Filesystem delete_forwarder: expected forwarder");
  $inode$jscomp$32$$.status = -1;
  this.mounts[$inode$jscomp$32$$.mount_id].backtrack.delete($inode$jscomp$32$$.foreign_id);
};
$FS$$module$lib$filesystem$$.prototype.follow_fs = function($inode$jscomp$33$$) {
  const $mount$jscomp$1$$ = this.mounts[$inode$jscomp$33$$.mount_id];
  $dbg_assert$$module$src$log$$(this.is_forwarder($inode$jscomp$33$$), "Filesystem follow_fs: inode should be a forwarding inode");
  $dbg_assert$$module$src$log$$($mount$jscomp$1$$, "Filesystem follow_fs: inode<id=" + $inode$jscomp$33$$.fid + "> should point to valid mounted FS");
  return $mount$jscomp$1$$.fs;
};
$FS$$module$lib$filesystem$$.prototype.Mount = function($mount_id$jscomp$4_parent$jscomp$6_path$jscomp$10$$, $fs$jscomp$6_idx$jscomp$20$$) {
  $dbg_assert$$module$src$log$$($fs$jscomp$6_idx$jscomp$20$$.qidcounter === this.qidcounter, "Cannot mount filesystem whose qid numbers aren't synchronised with current filesystem.");
  var $path_infos_ret$jscomp$9$$ = this.SearchPath($mount_id$jscomp$4_parent$jscomp$6_path$jscomp$10$$);
  if (-1 === $path_infos_ret$jscomp$9$$.parentid) {
    return $dbg_log$$module$src$log$$("Mount failed: parent for path not found: " + $mount_id$jscomp$4_parent$jscomp$6_path$jscomp$10$$, 4194304), -2;
  }
  if (-1 !== $path_infos_ret$jscomp$9$$.id) {
    return $dbg_log$$module$src$log$$("Mount failed: file already exists at path: " + $mount_id$jscomp$4_parent$jscomp$6_path$jscomp$10$$, 4194304), -17;
  }
  if ($path_infos_ret$jscomp$9$$.forward_path) {
    return $mount_id$jscomp$4_parent$jscomp$6_path$jscomp$10$$ = this.inodes[$path_infos_ret$jscomp$9$$.parentid], $path_infos_ret$jscomp$9$$ = this.follow_fs($mount_id$jscomp$4_parent$jscomp$6_path$jscomp$10$$).Mount($path_infos_ret$jscomp$9$$.forward_path, $fs$jscomp$6_idx$jscomp$20$$), 0 > $path_infos_ret$jscomp$9$$ ? $path_infos_ret$jscomp$9$$ : this.get_forwarder($mount_id$jscomp$4_parent$jscomp$6_path$jscomp$10$$.mount_id, $path_infos_ret$jscomp$9$$);
  }
  $mount_id$jscomp$4_parent$jscomp$6_path$jscomp$10$$ = this.mounts.length;
  this.mounts.push(new $FSMountInfo$$module$lib$filesystem$$($fs$jscomp$6_idx$jscomp$20$$));
  $fs$jscomp$6_idx$jscomp$20$$ = this.create_forwarder($mount_id$jscomp$4_parent$jscomp$6_path$jscomp$10$$, 0);
  this.link_under_dir($path_infos_ret$jscomp$9$$.parentid, $fs$jscomp$6_idx$jscomp$20$$, $path_infos_ret$jscomp$9$$.name);
  return $fs$jscomp$6_idx$jscomp$20$$;
};
function $FSLockRegion$$module$lib$filesystem$$() {
  this.type = 2;
  this.start = 0;
  this.length = Infinity;
  this.proc_id = -1;
  this.client_id = "";
}
$FSLockRegion$$module$lib$filesystem$$.prototype.get_state = function() {
  const $state$jscomp$24$$ = [];
  $state$jscomp$24$$[0] = this.type;
  $state$jscomp$24$$[1] = this.start;
  $state$jscomp$24$$[2] = Infinity === this.length ? 0 : this.length;
  $state$jscomp$24$$[3] = this.proc_id;
  $state$jscomp$24$$[4] = this.client_id;
  return $state$jscomp$24$$;
};
$FSLockRegion$$module$lib$filesystem$$.prototype.set_state = function($state$jscomp$25$$) {
  this.type = $state$jscomp$25$$[0];
  this.start = $state$jscomp$25$$[1];
  this.length = 0 === $state$jscomp$25$$[2] ? Infinity : $state$jscomp$25$$[2];
  this.proc_id = $state$jscomp$25$$[3];
  this.client_id = $state$jscomp$25$$[4];
};
$FSLockRegion$$module$lib$filesystem$$.prototype.clone = function() {
  const $new_region$$ = new $FSLockRegion$$module$lib$filesystem$$;
  $new_region$$.set_state(this.get_state());
  return $new_region$$;
};
$FSLockRegion$$module$lib$filesystem$$.prototype.conflicts_with = function($region$$) {
  return this.proc_id === $region$$.proc_id && this.client_id === $region$$.client_id || 2 === this.type || 2 === $region$$.type || 1 !== this.type && 1 !== $region$$.type || this.start + this.length <= $region$$.start || $region$$.start + $region$$.length <= this.start ? !1 : !0;
};
$FSLockRegion$$module$lib$filesystem$$.prototype.is_alike = function($region$jscomp$1$$) {
  return $region$jscomp$1$$.proc_id === this.proc_id && $region$jscomp$1$$.client_id === this.client_id && $region$jscomp$1$$.type === this.type;
};
$FSLockRegion$$module$lib$filesystem$$.prototype.may_merge_after = function($region$jscomp$2$$) {
  return this.is_alike($region$jscomp$2$$) && $region$jscomp$2$$.start + $region$jscomp$2$$.length === this.start;
};
$FS$$module$lib$filesystem$$.prototype.DescribeLock = function($type$jscomp$152$$, $start$jscomp$27$$, $length$jscomp$23$$, $proc_id$$, $client_id$$) {
  $dbg_assert$$module$src$log$$(0 === $type$jscomp$152$$ || 1 === $type$jscomp$152$$ || 2 === $type$jscomp$152$$, "Filesystem: Invalid lock type: " + $type$jscomp$152$$);
  $dbg_assert$$module$src$log$$(0 <= $start$jscomp$27$$, "Filesystem: Invalid negative lock starting offset: " + $start$jscomp$27$$);
  $dbg_assert$$module$src$log$$(0 < $length$jscomp$23$$, "Filesystem: Invalid non-positive lock length: " + $length$jscomp$23$$);
  const $lock$jscomp$1$$ = new $FSLockRegion$$module$lib$filesystem$$;
  $lock$jscomp$1$$.type = $type$jscomp$152$$;
  $lock$jscomp$1$$.start = $start$jscomp$27$$;
  $lock$jscomp$1$$.length = $length$jscomp$23$$;
  $lock$jscomp$1$$.proc_id = $proc_id$$;
  $lock$jscomp$1$$.client_id = $client_id$$;
  return $lock$jscomp$1$$;
};
$FS$$module$lib$filesystem$$.prototype.GetLock = function($id$jscomp$21_inode$jscomp$34$$, $request$jscomp$5$$) {
  $id$jscomp$21_inode$jscomp$34$$ = this.inodes[$id$jscomp$21_inode$jscomp$34$$];
  if (this.is_forwarder($id$jscomp$21_inode$jscomp$34$$)) {
    var $foreign_id$jscomp$13_region$jscomp$3$$ = $id$jscomp$21_inode$jscomp$34$$.foreign_id;
    return this.follow_fs($id$jscomp$21_inode$jscomp$34$$).GetLock($foreign_id$jscomp$13_region$jscomp$3$$, $request$jscomp$5$$);
  }
  for ($foreign_id$jscomp$13_region$jscomp$3$$ of $id$jscomp$21_inode$jscomp$34$$.locks) {
    if ($request$jscomp$5$$.conflicts_with($foreign_id$jscomp$13_region$jscomp$3$$)) {
      return $foreign_id$jscomp$13_region$jscomp$3$$.clone();
    }
  }
  return null;
};
$FS$$module$lib$filesystem$$.prototype.Lock = function($foreign_id$jscomp$14_has_merged_id$jscomp$22_region$jscomp$4$$, $request$jscomp$6$$, $flags$jscomp$10_i$jscomp$66_new_region$jscomp$1$$) {
  const $inode$jscomp$35$$ = this.inodes[$foreign_id$jscomp$14_has_merged_id$jscomp$22_region$jscomp$4$$];
  if (this.is_forwarder($inode$jscomp$35$$)) {
    return $foreign_id$jscomp$14_has_merged_id$jscomp$22_region$jscomp$4$$ = $inode$jscomp$35$$.foreign_id, this.follow_fs($inode$jscomp$35$$).Lock($foreign_id$jscomp$14_has_merged_id$jscomp$22_region$jscomp$4$$, $request$jscomp$6$$, $flags$jscomp$10_i$jscomp$66_new_region$jscomp$1$$);
  }
  $request$jscomp$6$$ = $request$jscomp$6$$.clone();
  if (2 !== $request$jscomp$6$$.type && this.GetLock($foreign_id$jscomp$14_has_merged_id$jscomp$22_region$jscomp$4$$, $request$jscomp$6$$)) {
    return 1;
  }
  for ($flags$jscomp$10_i$jscomp$66_new_region$jscomp$1$$ = 0; $flags$jscomp$10_i$jscomp$66_new_region$jscomp$1$$ < $inode$jscomp$35$$.locks.length; $flags$jscomp$10_i$jscomp$66_new_region$jscomp$1$$++) {
    $foreign_id$jscomp$14_has_merged_id$jscomp$22_region$jscomp$4$$ = $inode$jscomp$35$$.locks[$flags$jscomp$10_i$jscomp$66_new_region$jscomp$1$$];
    $dbg_assert$$module$src$log$$(0 < $foreign_id$jscomp$14_has_merged_id$jscomp$22_region$jscomp$4$$.length, "Filesystem: Found non-positive lock region length: " + $foreign_id$jscomp$14_has_merged_id$jscomp$22_region$jscomp$4$$.length);
    $dbg_assert$$module$src$log$$(0 === $foreign_id$jscomp$14_has_merged_id$jscomp$22_region$jscomp$4$$.type || 1 === $foreign_id$jscomp$14_has_merged_id$jscomp$22_region$jscomp$4$$.type, "Filesystem: Found invalid lock type: " + $foreign_id$jscomp$14_has_merged_id$jscomp$22_region$jscomp$4$$.type);
    $dbg_assert$$module$src$log$$(!$inode$jscomp$35$$.locks[$flags$jscomp$10_i$jscomp$66_new_region$jscomp$1$$ - 1] || $inode$jscomp$35$$.locks[$flags$jscomp$10_i$jscomp$66_new_region$jscomp$1$$ - 1].start <= $foreign_id$jscomp$14_has_merged_id$jscomp$22_region$jscomp$4$$.start, "Filesystem: Locks should be sorted by starting offset");
    if ($foreign_id$jscomp$14_has_merged_id$jscomp$22_region$jscomp$4$$.start + $foreign_id$jscomp$14_has_merged_id$jscomp$22_region$jscomp$4$$.length <= $request$jscomp$6$$.start) {
      continue;
    }
    if ($request$jscomp$6$$.start + $request$jscomp$6$$.length <= $foreign_id$jscomp$14_has_merged_id$jscomp$22_region$jscomp$4$$.start) {
      break;
    }
    if ($foreign_id$jscomp$14_has_merged_id$jscomp$22_region$jscomp$4$$.proc_id !== $request$jscomp$6$$.proc_id || $foreign_id$jscomp$14_has_merged_id$jscomp$22_region$jscomp$4$$.client_id !== $request$jscomp$6$$.client_id) {
      $dbg_assert$$module$src$log$$(!$foreign_id$jscomp$14_has_merged_id$jscomp$22_region$jscomp$4$$.conflicts_with($request$jscomp$6$$), "Filesytem: Found conflicting lock region, despite already checked for conflicts");
      continue;
    }
    var $i$jscomp$67_start2$$ = $request$jscomp$6$$.start + $request$jscomp$6$$.length;
    const $length1$$ = $request$jscomp$6$$.start - $foreign_id$jscomp$14_has_merged_id$jscomp$22_region$jscomp$4$$.start, $length2$$ = $foreign_id$jscomp$14_has_merged_id$jscomp$22_region$jscomp$4$$.start + $foreign_id$jscomp$14_has_merged_id$jscomp$22_region$jscomp$4$$.length - $i$jscomp$67_start2$$;
    if (0 < $length1$$ && 0 < $length2$$ && $foreign_id$jscomp$14_has_merged_id$jscomp$22_region$jscomp$4$$.type === $request$jscomp$6$$.type) {
      return 0;
    }
    0 < $length1$$ && ($foreign_id$jscomp$14_has_merged_id$jscomp$22_region$jscomp$4$$.length = $length1$$);
    if (0 >= $length1$$ && 0 < $length2$$) {
      $foreign_id$jscomp$14_has_merged_id$jscomp$22_region$jscomp$4$$.start = $i$jscomp$67_start2$$, $foreign_id$jscomp$14_has_merged_id$jscomp$22_region$jscomp$4$$.length = $length2$$;
    } else {
      if (0 < $length2$$) {
        for (; $flags$jscomp$10_i$jscomp$66_new_region$jscomp$1$$ < $inode$jscomp$35$$.locks.length && $inode$jscomp$35$$.locks[$flags$jscomp$10_i$jscomp$66_new_region$jscomp$1$$].start < $i$jscomp$67_start2$$;) {
          $flags$jscomp$10_i$jscomp$66_new_region$jscomp$1$$++;
        }
        $inode$jscomp$35$$.locks.splice($flags$jscomp$10_i$jscomp$66_new_region$jscomp$1$$, 0, this.DescribeLock($foreign_id$jscomp$14_has_merged_id$jscomp$22_region$jscomp$4$$.type, $i$jscomp$67_start2$$, $length2$$, $foreign_id$jscomp$14_has_merged_id$jscomp$22_region$jscomp$4$$.proc_id, $foreign_id$jscomp$14_has_merged_id$jscomp$22_region$jscomp$4$$.client_id));
      } else {
        0 >= $length1$$ && ($inode$jscomp$35$$.locks.splice($flags$jscomp$10_i$jscomp$66_new_region$jscomp$1$$, 1), $flags$jscomp$10_i$jscomp$66_new_region$jscomp$1$$--);
      }
    }
  }
  if (2 !== $request$jscomp$6$$.type) {
    $flags$jscomp$10_i$jscomp$66_new_region$jscomp$1$$ = $request$jscomp$6$$;
    $foreign_id$jscomp$14_has_merged_id$jscomp$22_region$jscomp$4$$ = !1;
    for ($i$jscomp$67_start2$$ = 0; $i$jscomp$67_start2$$ < $inode$jscomp$35$$.locks.length && !($flags$jscomp$10_i$jscomp$66_new_region$jscomp$1$$.may_merge_after($inode$jscomp$35$$.locks[$i$jscomp$67_start2$$]) && ($inode$jscomp$35$$.locks[$i$jscomp$67_start2$$].length += $request$jscomp$6$$.length, $flags$jscomp$10_i$jscomp$66_new_region$jscomp$1$$ = $inode$jscomp$35$$.locks[$i$jscomp$67_start2$$], $foreign_id$jscomp$14_has_merged_id$jscomp$22_region$jscomp$4$$ = !0), $request$jscomp$6$$.start <= 
    $inode$jscomp$35$$.locks[$i$jscomp$67_start2$$].start); $i$jscomp$67_start2$$++) {
    }
    $foreign_id$jscomp$14_has_merged_id$jscomp$22_region$jscomp$4$$ || ($inode$jscomp$35$$.locks.splice($i$jscomp$67_start2$$, 0, $flags$jscomp$10_i$jscomp$66_new_region$jscomp$1$$), $i$jscomp$67_start2$$++);
    for (; $i$jscomp$67_start2$$ < $inode$jscomp$35$$.locks.length; $i$jscomp$67_start2$$++) {
      if ($inode$jscomp$35$$.locks[$i$jscomp$67_start2$$].is_alike($flags$jscomp$10_i$jscomp$66_new_region$jscomp$1$$)) {
        $inode$jscomp$35$$.locks[$i$jscomp$67_start2$$].may_merge_after($flags$jscomp$10_i$jscomp$66_new_region$jscomp$1$$) && ($flags$jscomp$10_i$jscomp$66_new_region$jscomp$1$$.length += $inode$jscomp$35$$.locks[$i$jscomp$67_start2$$].length, $inode$jscomp$35$$.locks.splice($i$jscomp$67_start2$$, 1));
        break;
      }
    }
  }
  return 0;
};
$FS$$module$lib$filesystem$$.prototype.read_dir = function($dir_p$jscomp$1_path$jscomp$11$$) {
  $dir_p$jscomp$1_path$jscomp$11$$ = this.SearchPath($dir_p$jscomp$1_path$jscomp$11$$);
  if (-1 !== $dir_p$jscomp$1_path$jscomp$11$$.id) {
    return $dir_p$jscomp$1_path$jscomp$11$$ = this.GetInode($dir_p$jscomp$1_path$jscomp$11$$.id), Array.from($dir_p$jscomp$1_path$jscomp$11$$.direntries.keys()).filter($path$jscomp$12$$ => "." !== $path$jscomp$12$$ && ".." !== $path$jscomp$12$$);
  }
};
$FS$$module$lib$filesystem$$.prototype.read_file = function($file$jscomp$3_p$jscomp$2$$) {
  $file$jscomp$3_p$jscomp$2$$ = this.SearchPath($file$jscomp$3_p$jscomp$2$$);
  if (-1 === $file$jscomp$3_p$jscomp$2$$.id) {
    return Promise.resolve(null);
  }
  const $inode$jscomp$36$$ = this.GetInode($file$jscomp$3_p$jscomp$2$$.id);
  return this.Read($file$jscomp$3_p$jscomp$2$$.id, 0, $inode$jscomp$36$$.size);
};
function $V86$$module$src$browser$starter$$($options$jscomp$40$$) {
  "number" === typeof $options$jscomp$40$$.log_level && ($LOG_LEVEL$$module$src$log$$ = $options$jscomp$40$$.log_level);
  this.cpu_is_running = !1;
  this.cpu_exception_hook = function() {
  };
  var $bus$jscomp$16_wasm_shared_funcs$$ = $Bus$$module$src$bus$$.create();
  this.bus = $bus$jscomp$16_wasm_shared_funcs$$[0];
  this.emulator_bus = $bus$jscomp$16_wasm_shared_funcs$$[1];
  var $cpu$jscomp$12$$, $wasm_memory$$;
  const $wasm_table$$ = new WebAssembly.Table({element:"anyfunc", initial:1924});
  $bus$jscomp$16_wasm_shared_funcs$$ = {cpu_exception_hook:$n$jscomp$11$$ => this.cpu_exception_hook($n$jscomp$11$$), run_hardware_timers:function($a$jscomp$6$$, $t$jscomp$4$$) {
    return $cpu$jscomp$12$$.run_hardware_timers($a$jscomp$6$$, $t$jscomp$4$$);
  }, cpu_event_halt:() => {
    this.emulator_bus.send("cpu-event-halt");
  }, abort:function() {
    $dbg_assert$$module$src$log$$(!1);
  }, microtick:$v86$$module$src$main$$.microtick, get_rand_int:function() {
    return $get_rand_int$$module$src$lib$$();
  }, apic_acknowledge_irq:function() {
    return $cpu$jscomp$12$$.devices.apic.acknowledge_irq();
  }, stop_idling:function() {
    return $cpu$jscomp$12$$.stop_idling();
  }, io_port_read8:function($addr$jscomp$11$$) {
    return $cpu$jscomp$12$$.io.port_read8($addr$jscomp$11$$);
  }, io_port_read16:function($addr$jscomp$12$$) {
    return $cpu$jscomp$12$$.io.port_read16($addr$jscomp$12$$);
  }, io_port_read32:function($addr$jscomp$13$$) {
    return $cpu$jscomp$12$$.io.port_read32($addr$jscomp$13$$);
  }, io_port_write8:function($addr$jscomp$14$$, $value$jscomp$140$$) {
    $cpu$jscomp$12$$.io.port_write8($addr$jscomp$14$$, $value$jscomp$140$$);
  }, io_port_write16:function($addr$jscomp$15$$, $value$jscomp$141$$) {
    $cpu$jscomp$12$$.io.port_write16($addr$jscomp$15$$, $value$jscomp$141$$);
  }, io_port_write32:function($addr$jscomp$16$$, $value$jscomp$142$$) {
    $cpu$jscomp$12$$.io.port_write32($addr$jscomp$16$$, $value$jscomp$142$$);
  }, mmap_read8:function($addr$jscomp$17$$) {
    return $cpu$jscomp$12$$.mmap_read8($addr$jscomp$17$$);
  }, mmap_read16:function($addr$jscomp$18$$) {
    return $cpu$jscomp$12$$.mmap_read16($addr$jscomp$18$$);
  }, mmap_read32:function($addr$jscomp$19$$) {
    return $cpu$jscomp$12$$.mmap_read32($addr$jscomp$19$$);
  }, mmap_write8:function($addr$jscomp$20$$, $value$jscomp$143$$) {
    $cpu$jscomp$12$$.mmap_write8($addr$jscomp$20$$, $value$jscomp$143$$);
  }, mmap_write16:function($addr$jscomp$21$$, $value$jscomp$144$$) {
    $cpu$jscomp$12$$.mmap_write16($addr$jscomp$21$$, $value$jscomp$144$$);
  }, mmap_write32:function($addr$jscomp$22$$, $value$jscomp$145$$) {
    $cpu$jscomp$12$$.mmap_write32($addr$jscomp$22$$, $value$jscomp$145$$);
  }, mmap_write64:function($addr$jscomp$23$$, $value0$$, $value1$jscomp$7$$) {
    $cpu$jscomp$12$$.mmap_write64($addr$jscomp$23$$, $value0$$, $value1$jscomp$7$$);
  }, mmap_write128:function($addr$jscomp$24$$, $value0$jscomp$1$$, $value1$jscomp$8$$, $value2$jscomp$7$$, $value3$jscomp$4$$) {
    $cpu$jscomp$12$$.mmap_write128($addr$jscomp$24$$, $value0$jscomp$1$$, $value1$jscomp$8$$, $value2$jscomp$7$$, $value3$jscomp$4$$);
  }, log_from_wasm:function($offset$jscomp$60_str$jscomp$11$$, $len$jscomp$22$$) {
    $offset$jscomp$60_str$jscomp$11$$ = String.fromCharCode(...(new Uint8Array($wasm_memory$$.buffer, $offset$jscomp$60_str$jscomp$11$$ >>> 0, $len$jscomp$22$$ >>> 0)));
    $dbg_log$$module$src$log$$($offset$jscomp$60_str$jscomp$11$$, 2);
  }, console_log_from_wasm:function($offset$jscomp$61_str$jscomp$12$$, $len$jscomp$23$$) {
    $offset$jscomp$61_str$jscomp$12$$ = String.fromCharCode(...(new Uint8Array($wasm_memory$$.buffer, $offset$jscomp$61_str$jscomp$12$$ >>> 0, $len$jscomp$23$$ >>> 0)));
    console.error($offset$jscomp$61_str$jscomp$12$$);
  }, dbg_trace_from_wasm:function() {
    $dbg_log$$module$src$log$$(Error().stack, 2);
  }, codegen_finalize:($wasm_table_index$$, $start$jscomp$28$$, $state_flags$$, $ptr$jscomp$4$$, $len$jscomp$24$$) => {
    $cpu$jscomp$12$$.codegen_finalize($wasm_table_index$$, $start$jscomp$28$$, $state_flags$$, $ptr$jscomp$4$$, $len$jscomp$24$$);
  }, jit_clear_func:$wasm_table_index$jscomp$1$$ => $cpu$jscomp$12$$.jit_clear_func($wasm_table_index$jscomp$1$$), jit_clear_all_funcs:() => $cpu$jscomp$12$$.jit_clear_all_funcs(), __indirect_function_table:$wasm_table$$, };
  let $wasm_fn$$ = $options$jscomp$40$$.wasm_fn;
  $wasm_fn$$ || ($wasm_fn$$ = $env$$ => new Promise($resolve$jscomp$2$$ => {
    let $v86_bin$$ = "v86-debug.wasm", $v86_bin_fallback$$ = "v86-fallback.wasm";
    $options$jscomp$40$$.wasm_path ? ($v86_bin$$ = $options$jscomp$40$$.wasm_path, $v86_bin_fallback$$ = $v86_bin$$.replace("v86.wasm", "v86-fallback.wasm")) : "undefined" === typeof window && "string" === typeof __dirname ? ($v86_bin$$ = __dirname + "/" + $v86_bin$$, $v86_bin_fallback$$ = __dirname + "/" + $v86_bin_fallback$$) : ($v86_bin$$ = "build/" + $v86_bin$$, $v86_bin_fallback$$ = "build/" + $v86_bin_fallback$$);
    $load_file$$module$src$lib$$($v86_bin$$, {done:async $bytes$jscomp$4$$ => {
      try {
        const {instance:$instance$$} = await WebAssembly.instantiate($bytes$jscomp$4$$, $env$$);
        this.wasm_source = $bytes$jscomp$4$$;
        $resolve$jscomp$2$$($instance$$.exports);
      } catch ($err$jscomp$3$$) {
        $load_file$$module$src$lib$$($v86_bin_fallback$$, {done:async $bytes$jscomp$5$$ => {
          const {instance:$instance$jscomp$1$$} = await WebAssembly.instantiate($bytes$jscomp$5$$, $env$$);
          this.wasm_source = $bytes$jscomp$5$$;
          $resolve$jscomp$2$$($instance$jscomp$1$$.exports);
        }, });
      }
    }, progress:$e$jscomp$39$$ => {
      this.emulator_bus.send("download-progress", {file_index:0, file_count:1, file_name:$v86_bin$$, lengthComputable:$e$jscomp$39$$.lengthComputable, total:$e$jscomp$39$$.total, loaded:$e$jscomp$39$$.loaded, });
    }});
  }));
  $wasm_fn$$({env:$bus$jscomp$16_wasm_shared_funcs$$}).then($emulator_exports$$ => {
    $wasm_memory$$ = $emulator_exports$$.memory;
    $emulator_exports$$.rust_init();
    $emulator_exports$$ = this.v86 = new $v86$$module$src$main$$(this.emulator_bus, {exports:$emulator_exports$$, wasm_table:$wasm_table$$});
    $cpu$jscomp$12$$ = $emulator_exports$$.cpu;
    this.continue_init($emulator_exports$$, $options$jscomp$40$$);
  });
  this.zstd_worker = null;
  this.zstd_worker_request_id = 0;
}
$V86$$module$src$browser$starter$$.prototype.continue_init = async function($emulator$jscomp$1$$, $options$jscomp$41$$) {
  function $put_on_settings$$($name$jscomp$100$$, $buffer$jscomp$41$$) {
    switch($name$jscomp$100$$) {
      case "hda":
        $settings$$.hda = this.disk_images.hda = $buffer$jscomp$41$$;
        break;
      case "hdb":
        $settings$$.hdb = this.disk_images.hdb = $buffer$jscomp$41$$;
        break;
      case "cdrom":
        $settings$$.cdrom = this.disk_images.cdrom = $buffer$jscomp$41$$;
        break;
      case "fda":
        $settings$$.fda = this.disk_images.fda = $buffer$jscomp$41$$;
        break;
      case "fdb":
        $settings$$.fdb = this.disk_images.fdb = $buffer$jscomp$41$$;
        break;
      case "multiboot":
        $settings$$.multiboot = this.disk_images.multiboot = $buffer$jscomp$41$$.buffer;
        break;
      case "bzimage":
        $settings$$.bzimage = this.disk_images.bzimage = $buffer$jscomp$41$$.buffer;
        break;
      case "initrd":
        $settings$$.initrd = this.disk_images.initrd = $buffer$jscomp$41$$.buffer;
        break;
      case "bios":
        $settings$$.bios = $buffer$jscomp$41$$.buffer;
        break;
      case "vga_bios":
        $settings$$.vga_bios = $buffer$jscomp$41$$.buffer;
        break;
      case "initial_state":
        $settings$$.initial_state = $buffer$jscomp$41$$.buffer;
        break;
      case "fs9p_json":
        $settings$$.fs9p_json = $buffer$jscomp$41$$;
        break;
      default:
        $dbg_assert$$module$src$log$$(!1, $name$jscomp$100$$);
    }
  }
  async function $done$jscomp$4$$() {
    if ($settings$$.fs9p && $settings$$.fs9p_json) {
      if ($settings$$.initial_state) {
        $dbg_log$$module$src$log$$("Filesystem basefs ignored: Overridden by state image");
      } else {
        if ($settings$$.fs9p.load_from_json($settings$$.fs9p_json), $options$jscomp$41$$.bzimage_initrd_from_filesystem) {
          const {bzimage_path:$bzimage_path$$, initrd_path:$initrd_path$$} = this.get_bzimage_initrd_from_filesystem($settings$$.fs9p);
          $dbg_log$$module$src$log$$("Found bzimage: " + $bzimage_path$$ + " and initrd: " + $initrd_path$$);
          const [$initrd$$, $bzimage$$] = await Promise.all([$settings$$.fs9p.read_file($initrd_path$$), $settings$$.fs9p.read_file($bzimage_path$$), ]);
          $put_on_settings$$.call(this, "initrd", new $SyncBuffer$$module$src$buffer$$($initrd$$.buffer));
          $put_on_settings$$.call(this, "bzimage", new $SyncBuffer$$module$src$buffer$$($bzimage$$.buffer));
        }
      }
    } else {
      $dbg_assert$$module$src$log$$(!$options$jscomp$41$$.bzimage_initrd_from_filesystem || $settings$$.initial_state, "bzimage_initrd_from_filesystem: Requires a filesystem");
    }
    this.serial_adapter && this.serial_adapter.show && this.serial_adapter.show();
    this.v86.init($settings$$);
    $settings$$.initial_state && ($emulator$jscomp$1$$.restore_state($settings$$.initial_state), $settings$$.initial_state = void 0);
    $options$jscomp$41$$.autostart && this.v86.run();
    this.emulator_bus.send("emulator-loaded");
  }
  this.bus.register("emulator-stopped", function() {
    this.cpu_is_running = !1;
    this.screen_adapter.pause();
  }, this);
  this.bus.register("emulator-started", function() {
    this.cpu_is_running = !0;
    this.screen_adapter.continue();
  }, this);
  var $settings$$ = {};
  this.disk_images = {fda:void 0, fdb:void 0, hda:void 0, hdb:void 0, cdrom:void 0, };
  var $add_file_boot_order_fs_url_relay_url_screen_options$$ = $options$jscomp$41$$.boot_order ? $options$jscomp$41$$.boot_order : $options$jscomp$41$$.fda ? 801 : $options$jscomp$41$$.hda ? 786 : 291;
  $settings$$.acpi = $options$jscomp$41$$.acpi;
  $settings$$.disable_jit = $options$jscomp$41$$.disable_jit;
  $settings$$.load_devices = !0;
  $settings$$.memory_size = $options$jscomp$41$$.memory_size || 67108864;
  $settings$$.vga_memory_size = $options$jscomp$41$$.vga_memory_size || 8388608;
  $settings$$.boot_order = $add_file_boot_order_fs_url_relay_url_screen_options$$;
  $settings$$.fastboot = $options$jscomp$41$$.fastboot || !1;
  $settings$$.fda = void 0;
  $settings$$.fdb = void 0;
  $settings$$.uart1 = $options$jscomp$41$$.uart1;
  $settings$$.uart2 = $options$jscomp$41$$.uart2;
  $settings$$.uart3 = $options$jscomp$41$$.uart3;
  $settings$$.cmdline = $options$jscomp$41$$.cmdline;
  $settings$$.preserve_mac_from_state_image = $options$jscomp$41$$.preserve_mac_from_state_image;
  $settings$$.mac_address_translation = $options$jscomp$41$$.mac_address_translation;
  $settings$$.cpuid_level = $options$jscomp$41$$.cpuid_level;
  $settings$$.virtio_balloon = $options$jscomp$41$$.virtio_balloon;
  $settings$$.virtio_console = $options$jscomp$41$$.virtio_console;
  $settings$$.virtio_net = $options$jscomp$41$$.virtio_net;
  $settings$$.screen_options = $options$jscomp$41$$.screen_options;
  if ($add_file_boot_order_fs_url_relay_url_screen_options$$ = $options$jscomp$41$$.network_relay_url || $options$jscomp$41$$.net_device && $options$jscomp$41$$.net_device.relay_url) {
    "fetch" === $add_file_boot_order_fs_url_relay_url_screen_options$$ ? this.network_adapter = new $FetchNetworkAdapter$$module$src$browser$fetch_network$$(this.bus, $options$jscomp$41$$.net_device) : "inbrowser" === $add_file_boot_order_fs_url_relay_url_screen_options$$ ? this.network_adapter = new $InBrowserNetworkAdapter$$module$src$browser$inbrowser_network$$(this.bus, $options$jscomp$41$$.net_device) : $add_file_boot_order_fs_url_relay_url_screen_options$$.startsWith("wisp://") || $add_file_boot_order_fs_url_relay_url_screen_options$$.startsWith("wisps://") ? 
    this.network_adapter = new $WispNetworkAdapter$$module$src$browser$wisp_network$$($add_file_boot_order_fs_url_relay_url_screen_options$$, this.bus, $options$jscomp$41$$.net_device) : this.network_adapter = new $NetworkAdapter$$module$src$browser$network$$($add_file_boot_order_fs_url_relay_url_screen_options$$, this.bus);
  }
  $settings$$.net_device = $options$jscomp$41$$.net_device || {type:"ne2k"};
  $add_file_boot_order_fs_url_relay_url_screen_options$$ = $options$jscomp$41$$.screen || {};
  $options$jscomp$41$$.screen_container && ($add_file_boot_order_fs_url_relay_url_screen_options$$.container = $options$jscomp$41$$.screen_container);
  $options$jscomp$41$$.disable_keyboard || (this.keyboard_adapter = new $KeyboardAdapter$$module$src$browser$keyboard$$(this.bus));
  $options$jscomp$41$$.disable_mouse || (this.mouse_adapter = new $MouseAdapter$$module$src$browser$mouse$$(this.bus, $add_file_boot_order_fs_url_relay_url_screen_options$$.container));
  this.screen_adapter = $add_file_boot_order_fs_url_relay_url_screen_options$$.container ? new $ScreenAdapter$$module$src$browser$screen$$($add_file_boot_order_fs_url_relay_url_screen_options$$, () => this.v86.cpu.devices.vga && this.v86.cpu.devices.vga.screen_fill_buffer()) : new $DummyScreenAdapter$$module$src$browser$dummy_screen$$;
  $settings$$.screen = this.screen_adapter;
  $settings$$.screen_options = $add_file_boot_order_fs_url_relay_url_screen_options$$;
  $options$jscomp$41$$.serial_container && (this.serial_adapter = new $SerialAdapter$$module$src$browser$serial$$($options$jscomp$41$$.serial_container, this.bus));
  $options$jscomp$41$$.serial_container_xtermjs && (this.serial_adapter = new $SerialAdapterXtermJS$$module$src$browser$serial$$($options$jscomp$41$$.serial_container_xtermjs, this.bus));
  $options$jscomp$41$$.disable_speaker || (this.speaker_adapter = new $SpeakerAdapter$$module$src$browser$speaker$$(this.bus));
  var $files_to_load$$ = [];
  $add_file_boot_order_fs_url_relay_url_screen_options$$ = ($name$jscomp$101$$, $file$jscomp$4$$) => {
    if ($file$jscomp$4$$) {
      if ($file$jscomp$4$$.get && $file$jscomp$4$$.set && $file$jscomp$4$$.load) {
        $files_to_load$$.push({name:$name$jscomp$101$$, loadable:$file$jscomp$4$$, });
      } else {
        if ("bios" === $name$jscomp$101$$ || "vga_bios" === $name$jscomp$101$$ || "initial_state" === $name$jscomp$101$$ || "multiboot" === $name$jscomp$101$$ || "bzimage" === $name$jscomp$101$$ || "initrd" === $name$jscomp$101$$) {
          $file$jscomp$4$$.async = !1;
        }
        if ("fda" === $name$jscomp$101$$ || "fdb" === $name$jscomp$101$$) {
          $file$jscomp$4$$.async = !1;
        }
        $file$jscomp$4$$.url && !$file$jscomp$4$$.async ? $files_to_load$$.push({name:$name$jscomp$101$$, url:$file$jscomp$4$$.url, size:$file$jscomp$4$$.size, }) : $files_to_load$$.push({name:$name$jscomp$101$$, loadable:$buffer_from_object$$module$src$buffer$$($file$jscomp$4$$, this.zstd_decompress_worker.bind(this)), });
      }
    }
  };
  $options$jscomp$41$$.state && console.warn("Warning: Unknown option 'state'. Did you mean 'initial_state'?");
  $add_file_boot_order_fs_url_relay_url_screen_options$$("bios", $options$jscomp$41$$.bios);
  $add_file_boot_order_fs_url_relay_url_screen_options$$("vga_bios", $options$jscomp$41$$.vga_bios);
  $add_file_boot_order_fs_url_relay_url_screen_options$$("cdrom", $options$jscomp$41$$.cdrom);
  $add_file_boot_order_fs_url_relay_url_screen_options$$("hda", $options$jscomp$41$$.hda);
  $add_file_boot_order_fs_url_relay_url_screen_options$$("hdb", $options$jscomp$41$$.hdb);
  $add_file_boot_order_fs_url_relay_url_screen_options$$("fda", $options$jscomp$41$$.fda);
  $add_file_boot_order_fs_url_relay_url_screen_options$$("fdb", $options$jscomp$41$$.fdb);
  $add_file_boot_order_fs_url_relay_url_screen_options$$("initial_state", $options$jscomp$41$$.initial_state);
  $add_file_boot_order_fs_url_relay_url_screen_options$$("multiboot", $options$jscomp$41$$.multiboot);
  $add_file_boot_order_fs_url_relay_url_screen_options$$("bzimage", $options$jscomp$41$$.bzimage);
  $add_file_boot_order_fs_url_relay_url_screen_options$$("initrd", $options$jscomp$41$$.initrd);
  if ($options$jscomp$41$$.filesystem) {
    $add_file_boot_order_fs_url_relay_url_screen_options$$ = $options$jscomp$41$$.filesystem.basefs;
    var $base_url$$ = $options$jscomp$41$$.filesystem.baseurl;
    let $file_storage$jscomp$1$$ = new $MemoryFileStorage$$module$src$browser$filestorage$$;
    $base_url$$ && ($file_storage$jscomp$1$$ = new $ServerFileStorageWrapper$$module$src$browser$filestorage$$($file_storage$jscomp$1$$, $base_url$$));
    $settings$$.fs9p = this.fs9p = new $FS$$module$lib$filesystem$$($file_storage$jscomp$1$$);
    if ($add_file_boot_order_fs_url_relay_url_screen_options$$) {
      $dbg_assert$$module$src$log$$($base_url$$, "Filesystem: baseurl must be specified");
      if ("object" === typeof $add_file_boot_order_fs_url_relay_url_screen_options$$) {
        var $size$jscomp$35$$ = $add_file_boot_order_fs_url_relay_url_screen_options$$.size;
        $add_file_boot_order_fs_url_relay_url_screen_options$$ = $add_file_boot_order_fs_url_relay_url_screen_options$$.url;
      }
      $dbg_assert$$module$src$log$$("string" === typeof $add_file_boot_order_fs_url_relay_url_screen_options$$);
      $files_to_load$$.push({name:"fs9p_json", url:$add_file_boot_order_fs_url_relay_url_screen_options$$, size:$size$jscomp$35$$, as_json:!0, });
    }
  }
  var $starter$$ = this, $total$jscomp$1$$ = $files_to_load$$.length, $cont$$ = function($index$jscomp$83$$) {
    if ($index$jscomp$83$$ === $total$jscomp$1$$) {
      setTimeout($done$jscomp$4$$.bind(this), 0);
    } else {
      var $f$jscomp$1$$ = $files_to_load$$[$index$jscomp$83$$];
      $f$jscomp$1$$.loadable ? ($f$jscomp$1$$.loadable.onload = function() {
        $put_on_settings$$.call(this, $f$jscomp$1$$.name, $f$jscomp$1$$.loadable);
        $cont$$($index$jscomp$83$$ + 1);
      }.bind(this), $f$jscomp$1$$.loadable.load()) : $load_file$$module$src$lib$$($f$jscomp$1$$.url, {done:function($result$jscomp$10$$) {
        $f$jscomp$1$$.url.endsWith(".zst") && "initial_state" !== $f$jscomp$1$$.name && ($dbg_assert$$module$src$log$$($f$jscomp$1$$.size, "A size must be provided for compressed images"), $result$jscomp$10$$ = this.zstd_decompress($f$jscomp$1$$.size, new Uint8Array($result$jscomp$10$$)));
        $put_on_settings$$.call(this, $f$jscomp$1$$.name, $f$jscomp$1$$.as_json ? $result$jscomp$10$$ : new $SyncBuffer$$module$src$buffer$$($result$jscomp$10$$));
        $cont$$($index$jscomp$83$$ + 1);
      }.bind(this), progress:function($e$jscomp$41$$) {
        200 === $e$jscomp$41$$.target.status ? $starter$$.emulator_bus.send("download-progress", {file_index:$index$jscomp$83$$, file_count:$total$jscomp$1$$, file_name:$f$jscomp$1$$.url, lengthComputable:$e$jscomp$41$$.lengthComputable, total:$e$jscomp$41$$.total || $f$jscomp$1$$.size, loaded:$e$jscomp$41$$.loaded, }) : $starter$$.emulator_bus.send("download-error", {file_index:$index$jscomp$83$$, file_count:$total$jscomp$1$$, file_name:$f$jscomp$1$$.url, request:$e$jscomp$41$$.target, });
      }, as_json:$f$jscomp$1$$.as_json, });
    }
  }.bind(this);
  $cont$$(0);
};
$V86$$module$src$browser$starter$$.prototype.zstd_decompress = function($decompressed_size$$, $ptr$jscomp$5_src$jscomp$4$$) {
  const $cpu$jscomp$13$$ = this.v86.cpu;
  $dbg_assert$$module$src$log$$(!this.zstd_context);
  this.zstd_context = $cpu$jscomp$13$$.zstd_create_ctx($ptr$jscomp$5_src$jscomp$4$$.length);
  (new Uint8Array($cpu$jscomp$13$$.wasm_memory.buffer)).set($ptr$jscomp$5_src$jscomp$4$$, $cpu$jscomp$13$$.zstd_get_src_ptr(this.zstd_context));
  $ptr$jscomp$5_src$jscomp$4$$ = $cpu$jscomp$13$$.zstd_read(this.zstd_context, $decompressed_size$$);
  const $result$jscomp$11$$ = $cpu$jscomp$13$$.wasm_memory.buffer.slice($ptr$jscomp$5_src$jscomp$4$$, $ptr$jscomp$5_src$jscomp$4$$ + $decompressed_size$$);
  $cpu$jscomp$13$$.zstd_read_free($ptr$jscomp$5_src$jscomp$4$$, $decompressed_size$$);
  $cpu$jscomp$13$$.zstd_free_ctx(this.zstd_context);
  this.zstd_context = null;
  return $result$jscomp$11$$;
};
$V86$$module$src$browser$starter$$.prototype.zstd_decompress_worker = async function($decompressed_size$jscomp$1$$, $src$jscomp$5$$) {
  if (!this.zstd_worker) {
    const $url$jscomp$26$$ = URL.createObjectURL(new Blob(["(" + function() {
      let $wasm$$;
      globalThis.onmessage = function($e$jscomp$42_exports$jscomp$1$$) {
        if ($wasm$$) {
          var {src:$src$jscomp$6$$, decompressed_size:$decompressed_size$jscomp$2$$, id:$id$jscomp$23$$} = $e$jscomp$42_exports$jscomp$1$$.data;
          $e$jscomp$42_exports$jscomp$1$$ = $wasm$$.exports;
          var $env$jscomp$1_zstd_context$$ = $e$jscomp$42_exports$jscomp$1$$.zstd_create_ctx($src$jscomp$6$$.length);
          (new Uint8Array($e$jscomp$42_exports$jscomp$1$$.memory.buffer)).set($src$jscomp$6$$, $e$jscomp$42_exports$jscomp$1$$.zstd_get_src_ptr($env$jscomp$1_zstd_context$$));
          var $ptr$jscomp$6$$ = $e$jscomp$42_exports$jscomp$1$$.zstd_read($env$jscomp$1_zstd_context$$, $decompressed_size$jscomp$2$$), $result$jscomp$12$$ = $e$jscomp$42_exports$jscomp$1$$.memory.buffer.slice($ptr$jscomp$6$$, $ptr$jscomp$6$$ + $decompressed_size$jscomp$2$$);
          $e$jscomp$42_exports$jscomp$1$$.zstd_read_free($ptr$jscomp$6$$, $decompressed_size$jscomp$2$$);
          $e$jscomp$42_exports$jscomp$1$$.zstd_free_ctx($env$jscomp$1_zstd_context$$);
          postMessage({result:$result$jscomp$12$$, id:$id$jscomp$23$$}, [$result$jscomp$12$$]);
        } else {
          $env$jscomp$1_zstd_context$$ = Object.fromEntries("cpu_exception_hook run_hardware_timers cpu_event_halt microtick get_rand_int apic_acknowledge_irq stop_idling io_port_read8 io_port_read16 io_port_read32 io_port_write8 io_port_write16 io_port_write32 mmap_read8 mmap_read16 mmap_read32 mmap_write8 mmap_write16 mmap_write32 mmap_write64 mmap_write128 codegen_finalize jit_clear_func jit_clear_all_funcs".split(" ").map($f$jscomp$2$$ => [$f$jscomp$2$$, () => console.error("zstd worker unexpectedly called " + 
          $f$jscomp$2$$)])), $env$jscomp$1_zstd_context$$.__indirect_function_table = new WebAssembly.Table({element:"anyfunc", initial:1024}), $env$jscomp$1_zstd_context$$.abort = () => {
            throw Error("zstd worker aborted");
          }, $env$jscomp$1_zstd_context$$.log_from_wasm = $env$jscomp$1_zstd_context$$.console_log_from_wasm = ($off$$, $len$jscomp$25$$) => {
            console.log(String.fromCharCode(...(new Uint8Array($wasm$$.exports.memory.buffer, $off$$, $len$jscomp$25$$))));
          }, $env$jscomp$1_zstd_context$$.dbg_trace_from_wasm = () => console.trace(), $wasm$$ = new WebAssembly.Instance(new WebAssembly.Module($e$jscomp$42_exports$jscomp$1$$.data), {env:$env$jscomp$1_zstd_context$$});
        }
      };
    }.toString() + ")()"], {type:"text/javascript"}));
    this.zstd_worker = new Worker($url$jscomp$26$$);
    URL.revokeObjectURL($url$jscomp$26$$);
    this.zstd_worker.postMessage(this.wasm_source, [this.wasm_source]);
  }
  return new Promise($resolve$jscomp$3$$ => {
    const $id$jscomp$24$$ = this.zstd_worker_request_id++, $done$jscomp$5$$ = async $e$jscomp$43$$ => {
      $e$jscomp$43$$.data.id === $id$jscomp$24$$ && (this.zstd_worker.removeEventListener("message", $done$jscomp$5$$), $dbg_assert$$module$src$log$$($decompressed_size$jscomp$1$$ === $e$jscomp$43$$.data.result.byteLength), $resolve$jscomp$3$$($e$jscomp$43$$.data.result));
    };
    this.zstd_worker.addEventListener("message", $done$jscomp$5$$);
    this.zstd_worker.postMessage({src:$src$jscomp$5$$, decompressed_size:$decompressed_size$jscomp$1$$, id:$id$jscomp$24$$}, [$src$jscomp$5$$.buffer]);
  });
};
$V86$$module$src$browser$starter$$.prototype.get_bzimage_initrd_from_filesystem = function($boot_filesystem$jscomp$1$$) {
  const $root$jscomp$3$$ = ($boot_filesystem$jscomp$1$$.read_dir("/") || []).map($x$jscomp$118$$ => "/" + $x$jscomp$118$$);
  $boot_filesystem$jscomp$1$$ = ($boot_filesystem$jscomp$1$$.read_dir("/boot/") || []).map($x$jscomp$119$$ => "/boot/" + $x$jscomp$119$$);
  let $initrd_path$jscomp$1$$, $bzimage_path$jscomp$1$$;
  for (const $f$jscomp$3$$ of [].concat($root$jscomp$3$$, $boot_filesystem$jscomp$1$$)) {
    const $old$$ = /old/i.test($f$jscomp$3$$) || /fallback/i.test($f$jscomp$3$$), $is_bzimage$$ = /vmlinuz/i.test($f$jscomp$3$$) || /bzimage/i.test($f$jscomp$3$$), $is_initrd$$ = /initrd/i.test($f$jscomp$3$$) || /initramfs/i.test($f$jscomp$3$$);
    !$is_bzimage$$ || $bzimage_path$jscomp$1$$ && $old$$ || ($bzimage_path$jscomp$1$$ = $f$jscomp$3$$);
    !$is_initrd$$ || $initrd_path$jscomp$1$$ && $old$$ || ($initrd_path$jscomp$1$$ = $f$jscomp$3$$);
  }
  $initrd_path$jscomp$1$$ && $bzimage_path$jscomp$1$$ || (console.log("Failed to find bzimage or initrd in filesystem. Files:"), console.log($root$jscomp$3$$.join(" ")), console.log($boot_filesystem$jscomp$1$$.join(" ")));
  return {initrd_path:$initrd_path$jscomp$1$$, bzimage_path:$bzimage_path$jscomp$1$$};
};
$V86$$module$src$browser$starter$$.prototype.run = async function() {
  this.v86.run();
};
$V86$$module$src$browser$starter$$.prototype.stop = async function() {
  this.cpu_is_running && await new Promise($resolve$jscomp$4$$ => {
    const $listener$jscomp$65$$ = () => {
      this.remove_listener("emulator-stopped", $listener$jscomp$65$$);
      $resolve$jscomp$4$$();
    };
    this.add_listener("emulator-stopped", $listener$jscomp$65$$);
    this.v86.stop();
  });
};
$V86$$module$src$browser$starter$$.prototype.destroy = async function() {
  await this.stop();
  this.v86.destroy();
  this.keyboard_adapter && this.keyboard_adapter.destroy();
  this.network_adapter && this.network_adapter.destroy();
  this.mouse_adapter && this.mouse_adapter.destroy();
  this.screen_adapter && this.screen_adapter.destroy();
  this.serial_adapter && this.serial_adapter.destroy();
  this.speaker_adapter && this.speaker_adapter.destroy();
};
$V86$$module$src$browser$starter$$.prototype.restart = function() {
  this.v86.restart();
};
$V86$$module$src$browser$starter$$.prototype.add_listener = function($event$jscomp$10$$, $listener$jscomp$66$$) {
  this.bus.register($event$jscomp$10$$, $listener$jscomp$66$$, this);
};
$V86$$module$src$browser$starter$$.prototype.remove_listener = function($event$jscomp$11$$, $listener$jscomp$67$$) {
  this.bus.unregister($event$jscomp$11$$, $listener$jscomp$67$$);
};
$V86$$module$src$browser$starter$$.prototype.restore_state = async function($state$jscomp$26$$) {
  $dbg_assert$$module$src$log$$(1 === arguments.length);
  this.v86.restore_state($state$jscomp$26$$);
};
$V86$$module$src$browser$starter$$.prototype.save_state = async function() {
  $dbg_assert$$module$src$log$$(0 === arguments.length);
  return this.v86.save_state();
};
$V86$$module$src$browser$starter$$.prototype.get_instruction_counter = function() {
  return this.v86 ? this.v86.cpu.instruction_counter[0] >>> 0 : 0;
};
$V86$$module$src$browser$starter$$.prototype.is_running = function() {
  return this.cpu_is_running;
};
$V86$$module$src$browser$starter$$.prototype.set_fda = async function($file$jscomp$5$$) {
  if ($file$jscomp$5$$.url && !$file$jscomp$5$$.async) {
    $load_file$$module$src$lib$$($file$jscomp$5$$.url, {done:$result$jscomp$13$$ => {
      this.v86.cpu.devices.fdc.set_fda(new $SyncBuffer$$module$src$buffer$$($result$jscomp$13$$));
    }, });
  } else {
    const $image$jscomp$4$$ = $buffer_from_object$$module$src$buffer$$($file$jscomp$5$$, this.zstd_decompress_worker.bind(this));
    $image$jscomp$4$$.onload = () => {
      this.v86.cpu.devices.fdc.set_fda($image$jscomp$4$$);
    };
    await $image$jscomp$4$$.load();
  }
};
$V86$$module$src$browser$starter$$.prototype.eject_fda = function() {
  this.v86.cpu.devices.fdc.eject_fda();
};
$V86$$module$src$browser$starter$$.prototype.set_cdrom = async function($file$jscomp$6$$) {
  if ($file$jscomp$6$$.url && !$file$jscomp$6$$.async) {
    $load_file$$module$src$lib$$($file$jscomp$6$$.url, {done:$result$jscomp$14$$ => {
      this.v86.cpu.devices.cdrom.set_cdrom(new $SyncBuffer$$module$src$buffer$$($result$jscomp$14$$));
    }, });
  } else {
    const $image$jscomp$5$$ = $buffer_from_object$$module$src$buffer$$($file$jscomp$6$$, this.zstd_decompress_worker.bind(this));
    $image$jscomp$5$$.onload = () => {
      this.v86.cpu.devices.cdrom.set_cdrom($image$jscomp$5$$);
    };
    await $image$jscomp$5$$.load();
  }
};
$V86$$module$src$browser$starter$$.prototype.eject_cdrom = function() {
  this.v86.cpu.devices.cdrom.eject();
};
$V86$$module$src$browser$starter$$.prototype.keyboard_send_scancodes = function($codes$$) {
  for (var $i$jscomp$68$$ = 0; $i$jscomp$68$$ < $codes$$.length; $i$jscomp$68$$++) {
    this.bus.send("keyboard-code", $codes$$[$i$jscomp$68$$]);
  }
};
$V86$$module$src$browser$starter$$.prototype.keyboard_send_keys = function($codes$jscomp$1$$) {
  for (var $i$jscomp$69$$ = 0; $i$jscomp$69$$ < $codes$jscomp$1$$.length; $i$jscomp$69$$++) {
    this.keyboard_adapter.simulate_press($codes$jscomp$1$$[$i$jscomp$69$$]);
  }
};
$V86$$module$src$browser$starter$$.prototype.keyboard_send_text = function($string$jscomp$3$$) {
  for (var $i$jscomp$70$$ = 0; $i$jscomp$70$$ < $string$jscomp$3$$.length; $i$jscomp$70$$++) {
    this.keyboard_adapter.simulate_char($string$jscomp$3$$[$i$jscomp$70$$]);
  }
};
$V86$$module$src$browser$starter$$.prototype.screen_make_screenshot = function() {
  return this.screen_adapter ? this.screen_adapter.make_screenshot() : null;
};
$V86$$module$src$browser$starter$$.prototype.screen_set_scale = function($sx$jscomp$3$$, $sy$jscomp$4$$) {
  this.screen_adapter && this.screen_adapter.set_scale($sx$jscomp$3$$, $sy$jscomp$4$$);
};
$V86$$module$src$browser$starter$$.prototype.screen_go_fullscreen = function() {
  if (this.screen_adapter) {
    var $elem$jscomp$2_focus_element$$ = document.getElementById("screen_container");
    if ($elem$jscomp$2_focus_element$$) {
      var $fn$jscomp$16$$ = $elem$jscomp$2_focus_element$$.requestFullScreen || $elem$jscomp$2_focus_element$$.webkitRequestFullscreen || $elem$jscomp$2_focus_element$$.mozRequestFullScreen || $elem$jscomp$2_focus_element$$.msRequestFullScreen;
      $fn$jscomp$16$$ && ($fn$jscomp$16$$.call($elem$jscomp$2_focus_element$$), ($elem$jscomp$2_focus_element$$ = document.getElementsByClassName("phone_keyboard")[0]) && $elem$jscomp$2_focus_element$$.focus());
      try {
        navigator.keyboard.lock();
      } catch ($e$jscomp$44$$) {
      }
      this.lock_mouse();
    }
  }
};
$V86$$module$src$browser$starter$$.prototype.lock_mouse = function() {
  var $elem$jscomp$3$$ = document.body, $fn$jscomp$17$$ = $elem$jscomp$3$$.requestPointerLock || $elem$jscomp$3$$.mozRequestPointerLock || $elem$jscomp$3$$.webkitRequestPointerLock;
  $fn$jscomp$17$$ && $fn$jscomp$17$$.call($elem$jscomp$3$$);
};
$V86$$module$src$browser$starter$$.prototype.mouse_set_status = function($enabled$jscomp$4$$) {
  this.mouse_adapter && (this.mouse_adapter.emu_enabled = $enabled$jscomp$4$$);
};
$V86$$module$src$browser$starter$$.prototype.keyboard_set_status = function($enabled$jscomp$5$$) {
  this.keyboard_adapter && (this.keyboard_adapter.emu_enabled = $enabled$jscomp$5$$);
};
$V86$$module$src$browser$starter$$.prototype.serial0_send = function($data$jscomp$160$$) {
  for (var $i$jscomp$71$$ = 0; $i$jscomp$71$$ < $data$jscomp$160$$.length; $i$jscomp$71$$++) {
    this.bus.send("serial0-input", $data$jscomp$160$$.charCodeAt($i$jscomp$71$$));
  }
};
$V86$$module$src$browser$starter$$.prototype.serial_send_bytes = function($serial$jscomp$2$$, $data$jscomp$161$$) {
  for (var $i$jscomp$72$$ = 0; $i$jscomp$72$$ < $data$jscomp$161$$.length; $i$jscomp$72$$++) {
    this.bus.send("serial" + $serial$jscomp$2$$ + "-input", $data$jscomp$161$$[$i$jscomp$72$$]);
  }
};
$V86$$module$src$browser$starter$$.prototype.serial_set_modem_status = function($serial$jscomp$3$$, $status$jscomp$1$$) {
  this.bus.send("serial" + $serial$jscomp$3$$ + "-modem-status-input", $status$jscomp$1$$);
};
$V86$$module$src$browser$starter$$.prototype.serial_set_carrier_detect = function($serial$jscomp$4$$, $status$jscomp$2$$) {
  this.bus.send("serial" + $serial$jscomp$4$$ + "-carrier-detect-input", $status$jscomp$2$$);
};
$V86$$module$src$browser$starter$$.prototype.serial_set_ring_indicator = function($serial$jscomp$5$$, $status$jscomp$3$$) {
  this.bus.send("serial" + $serial$jscomp$5$$ + "-ring-indicator-input", $status$jscomp$3$$);
};
$V86$$module$src$browser$starter$$.prototype.serial_set_data_set_ready = function($serial$jscomp$6$$, $status$jscomp$4$$) {
  this.bus.send("serial" + $serial$jscomp$6$$ + "-data-set-ready-input", $status$jscomp$4$$);
};
$V86$$module$src$browser$starter$$.prototype.serial_set_clear_to_send = function($serial$jscomp$7$$, $status$jscomp$5$$) {
  this.bus.send("serial" + $serial$jscomp$7$$ + "-clear-to-send-input", $status$jscomp$5$$);
};
$V86$$module$src$browser$starter$$.prototype.mount_fs = async function($idx$jscomp$21_path$jscomp$13$$, $baseurl$jscomp$1$$, $basefs$$) {
  var $file_storage$jscomp$2_newfs$$ = new $MemoryFileStorage$$module$src$browser$filestorage$$;
  $baseurl$jscomp$1$$ && ($file_storage$jscomp$2_newfs$$ = new $ServerFileStorageWrapper$$module$src$browser$filestorage$$($file_storage$jscomp$2_newfs$$, $baseurl$jscomp$1$$));
  $file_storage$jscomp$2_newfs$$ = new $FS$$module$lib$filesystem$$($file_storage$jscomp$2_newfs$$, this.fs9p.qidcounter);
  $baseurl$jscomp$1$$ && ($dbg_assert$$module$src$log$$("object" === typeof $basefs$$, "Filesystem: basefs must be a JSON object"), $file_storage$jscomp$2_newfs$$.load_from_json($basefs$$));
  $idx$jscomp$21_path$jscomp$13$$ = this.fs9p.Mount($idx$jscomp$21_path$jscomp$13$$, $file_storage$jscomp$2_newfs$$);
  if (-2 === $idx$jscomp$21_path$jscomp$13$$) {
    throw new $FileNotFoundError$$module$src$browser$starter$$;
  }
  if (-17 === $idx$jscomp$21_path$jscomp$13$$) {
    throw new $FileExistsError$$module$src$browser$starter$$;
  }
  if (0 > $idx$jscomp$21_path$jscomp$13$$) {
    throw $dbg_assert$$module$src$log$$(!1, "Unexpected error code: " + -$idx$jscomp$21_path$jscomp$13$$), Error("Failed to mount. Error number: " + -$idx$jscomp$21_path$jscomp$13$$);
  }
};
$V86$$module$src$browser$starter$$.prototype.create_file = async function($file$jscomp$7$$, $data$jscomp$162$$) {
  $dbg_assert$$module$src$log$$(2 === arguments.length);
  var $fs$jscomp$7$$ = this.fs9p;
  if ($fs$jscomp$7$$) {
    var $filename$jscomp$12_parts$jscomp$4$$ = $file$jscomp$7$$.split("/");
    $filename$jscomp$12_parts$jscomp$4$$ = $filename$jscomp$12_parts$jscomp$4$$[$filename$jscomp$12_parts$jscomp$4$$.length - 1];
    var $parent_id$$ = $fs$jscomp$7$$.SearchPath($file$jscomp$7$$).parentid;
    if ("" !== $filename$jscomp$12_parts$jscomp$4$$ && -1 !== $parent_id$$) {
      await $fs$jscomp$7$$.CreateBinaryFile($filename$jscomp$12_parts$jscomp$4$$, $parent_id$$, $data$jscomp$162$$);
    } else {
      return Promise.reject(new $FileNotFoundError$$module$src$browser$starter$$);
    }
  }
};
$V86$$module$src$browser$starter$$.prototype.read_file = async function($file$jscomp$8$$) {
  $dbg_assert$$module$src$log$$(1 === arguments.length);
  var $fs$jscomp$8_result$jscomp$15$$ = this.fs9p;
  if ($fs$jscomp$8_result$jscomp$15$$) {
    return ($fs$jscomp$8_result$jscomp$15$$ = await $fs$jscomp$8_result$jscomp$15$$.read_file($file$jscomp$8$$)) ? $fs$jscomp$8_result$jscomp$15$$ : Promise.reject(new $FileNotFoundError$$module$src$browser$starter$$);
  }
};
$V86$$module$src$browser$starter$$.prototype.automatically = function($steps$$) {
  const $run$$ = $steps$jscomp$1$$ => {
    const $step$$ = $steps$jscomp$1$$[0];
    if ($step$$) {
      var $remaining_steps$$ = $steps$jscomp$1$$.slice(1);
      $step$$.sleep ? setTimeout(() => $run$$($remaining_steps$$), 1000 * $step$$.sleep) : $step$$.vga_text ? this.wait_until_vga_screen_contains($step$$.vga_text).then(() => $run$$($remaining_steps$$)) : $step$$.keyboard_send ? (Array.isArray($step$$.keyboard_send) ? this.keyboard_send_scancodes($step$$.keyboard_send) : ($dbg_assert$$module$src$log$$("string" === typeof $step$$.keyboard_send), this.keyboard_send_text($step$$.keyboard_send)), $run$$($remaining_steps$$)) : $step$$.call ? ($step$$.call(), 
      $run$$($remaining_steps$$)) : $dbg_assert$$module$src$log$$(!1, $step$$);
    }
  };
  $run$$($steps$$);
};
$V86$$module$src$browser$starter$$.prototype.wait_until_vga_screen_contains = function($text$jscomp$13$$) {
  return new Promise($resolve$jscomp$5$$ => {
    function $test_line$$($line$jscomp$2$$) {
      return "string" === typeof $text$jscomp$13$$ ? $line$jscomp$2$$.includes($text$jscomp$13$$) : $text$jscomp$13$$.test($line$jscomp$2$$);
    }
    function $put_char$$($args$jscomp$2_row$jscomp$5$$) {
      [$args$jscomp$2_row$jscomp$5$$] = $args$jscomp$2_row$jscomp$5$$;
      $changed_rows$jscomp$1$$.add($args$jscomp$2_row$jscomp$5$$);
    }
    for (const $line$jscomp$3$$ of this.screen_adapter.get_text_screen()) {
      if ($test_line$$($line$jscomp$3$$)) {
        $resolve$jscomp$5$$(!0);
        return;
      }
    }
    const $changed_rows$jscomp$1$$ = new Set, $check$$ = () => {
      for (const $row$jscomp$6$$ of $changed_rows$jscomp$1$$) {
        const $line$jscomp$4$$ = this.screen_adapter.get_text_row($row$jscomp$6$$);
        if ($test_line$$($line$jscomp$4$$)) {
          this.remove_listener("screen-put-char", $put_char$$);
          $resolve$jscomp$5$$();
          return;
        }
      }
      $changed_rows$jscomp$1$$.clear();
      setTimeout($check$$, 100);
    };
    $check$$();
    this.add_listener("screen-put-char", $put_char$$);
  });
};
$V86$$module$src$browser$starter$$.prototype.read_memory = function($offset$jscomp$62$$, $length$jscomp$24$$) {
  return this.v86.cpu.read_blob($offset$jscomp$62$$, $length$jscomp$24$$);
};
$V86$$module$src$browser$starter$$.prototype.write_memory = function($blob$jscomp$13$$, $offset$jscomp$63$$) {
  this.v86.cpu.write_blob($blob$jscomp$13$$, $offset$jscomp$63$$);
};
$V86$$module$src$browser$starter$$.prototype.set_serial_container_xtermjs = function($element$jscomp$10$$) {
  this.serial_adapter && this.serial_adapter.destroy && this.serial_adapter.destroy();
  this.serial_adapter = new $SerialAdapterXtermJS$$module$src$browser$serial$$($element$jscomp$10$$, this.bus);
  this.serial_adapter.show();
};
$V86$$module$src$browser$starter$$.prototype.get_instruction_stats = function() {
  var $JSCompiler_inline_result$jscomp$inline_375_cpu$jscomp$inline_367$$ = this.v86.cpu;
  var $JSCompiler_inline_result$jscomp$inline_368_text$jscomp$inline_369$$ = "";
  var $stat_names$jscomp$inline_370_tlb_entries$jscomp$inline_373$$ = "COMPILE COMPILE_SKIPPED_NO_NEW_ENTRY_POINTS COMPILE_WRONG_ADDRESS_SPACE COMPILE_CUT_OFF_AT_END_OF_PAGE COMPILE_WITH_LOOP_SAFETY COMPILE_PAGE COMPILE_PAGE/COMPILE COMPILE_BASIC_BLOCK COMPILE_DUPLICATED_BASIC_BLOCK COMPILE_WASM_BLOCK COMPILE_WASM_LOOP COMPILE_DISPATCHER COMPILE_ENTRY_POINT COMPILE_WASM_TOTAL_BYTES COMPILE_WASM_TOTAL_BYTES/COMPILE_PAGE RUN_INTERPRETED RUN_INTERPRETED_NEW_PAGE RUN_INTERPRETED_PAGE_HAS_CODE RUN_INTERPRETED_PAGE_HAS_ENTRY_AFTER_PAGE_WALK RUN_INTERPRETED_NEAR_END_OF_PAGE RUN_INTERPRETED_DIFFERENT_STATE RUN_INTERPRETED_DIFFERENT_STATE_CPL3 RUN_INTERPRETED_DIFFERENT_STATE_FLAT RUN_INTERPRETED_DIFFERENT_STATE_IS32 RUN_INTERPRETED_DIFFERENT_STATE_SS32 RUN_INTERPRETED_MISSED_COMPILED_ENTRY_RUN_INTERPRETED RUN_INTERPRETED_STEPS RUN_FROM_CACHE RUN_FROM_CACHE_STEPS RUN_FROM_CACHE_STEPS/RUN_FROM_CACHE RUN_FROM_CACHE_STEPS/RUN_INTERPRETED_STEPS DIRECT_EXIT INDIRECT_JUMP INDIRECT_JUMP_NO_ENTRY NORMAL_PAGE_CHANGE NORMAL_FALLTHRU NORMAL_FALLTHRU_WITH_TARGET_BLOCK NORMAL_BRANCH NORMAL_BRANCH_WITH_TARGET_BLOCK CONDITIONAL_JUMP CONDITIONAL_JUMP_PAGE_CHANGE CONDITIONAL_JUMP_EXIT CONDITIONAL_JUMP_FALLTHRU CONDITIONAL_JUMP_FALLTHRU_WITH_TARGET_BLOCK CONDITIONAL_JUMP_BRANCH CONDITIONAL_JUMP_BRANCH_WITH_TARGET_BLOCK DISPATCHER_SMALL DISPATCHER_LARGE LOOP LOOP_SAFETY CONDITION_OPTIMISED CONDITION_UNOPTIMISED CONDITION_UNOPTIMISED_PF CONDITION_UNOPTIMISED_UNHANDLED_L CONDITION_UNOPTIMISED_UNHANDLED_LE FAILED_PAGE_CHANGE SAFE_READ_FAST SAFE_READ_SLOW_PAGE_CROSSED SAFE_READ_SLOW_NOT_VALID SAFE_READ_SLOW_NOT_USER SAFE_READ_SLOW_IN_MAPPED_RANGE SAFE_WRITE_FAST SAFE_WRITE_SLOW_PAGE_CROSSED SAFE_WRITE_SLOW_NOT_VALID SAFE_WRITE_SLOW_NOT_USER SAFE_WRITE_SLOW_IN_MAPPED_RANGE SAFE_WRITE_SLOW_READ_ONLY SAFE_WRITE_SLOW_HAS_CODE SAFE_READ_WRITE_FAST SAFE_READ_WRITE_SLOW_PAGE_CROSSED SAFE_READ_WRITE_SLOW_NOT_VALID SAFE_READ_WRITE_SLOW_NOT_USER SAFE_READ_WRITE_SLOW_IN_MAPPED_RANGE SAFE_READ_WRITE_SLOW_READ_ONLY SAFE_READ_WRITE_SLOW_HAS_CODE PAGE_FAULT TLB_MISS MAIN_LOOP MAIN_LOOP_IDLE DO_MANY_CYCLES CYCLE_INTERNAL INVALIDATE_ALL_MODULES_NO_FREE_WASM_INDICES INVALIDATE_MODULE_WRITTEN_WHILE_COMPILED INVALIDATE_MODULE_UNUSED_AFTER_OVERWRITE INVALIDATE_MODULE_DIRTY_PAGE INVALIDATE_PAGE_HAD_CODE INVALIDATE_PAGE_HAD_ENTRY_POINTS DIRTY_PAGE_DID_NOT_HAVE_CODE RUN_FROM_CACHE_EXIT_SAME_PAGE RUN_FROM_CACHE_EXIT_NEAR_END_OF_PAGE RUN_FROM_CACHE_EXIT_DIFFERENT_PAGE CLEAR_TLB FULL_CLEAR_TLB TLB_FULL TLB_GLOBAL_FULL MODRM_SIMPLE_REG MODRM_SIMPLE_REG_WITH_OFFSET MODRM_SIMPLE_CONST_OFFSET MODRM_COMPLEX SEG_OFFSET_OPTIMISED SEG_OFFSET_NOT_OPTIMISED SEG_OFFSET_NOT_OPTIMISED_ES SEG_OFFSET_NOT_OPTIMISED_FS SEG_OFFSET_NOT_OPTIMISED_GS SEG_OFFSET_NOT_OPTIMISED_NOT_FLAT".split(" "), 
  $global_tlb_entries$jscomp$inline_374_j$jscomp$inline_371$$ = 0;
  const $stat_values$jscomp$inline_372$$ = {};
  for (let $i$jscomp$inline_376$$ = 0; $i$jscomp$inline_376$$ < $stat_names$jscomp$inline_370_tlb_entries$jscomp$inline_373$$.length; $i$jscomp$inline_376$$++) {
    const $name$jscomp$inline_377$$ = $stat_names$jscomp$inline_370_tlb_entries$jscomp$inline_373$$[$i$jscomp$inline_376$$];
    var $stat$jscomp$inline_381_value$jscomp$inline_378$$ = void 0;
    if ($name$jscomp$inline_377$$.includes("/")) {
      $global_tlb_entries$jscomp$inline_374_j$jscomp$inline_371$$++;
      const [$left$jscomp$inline_379$$, $right$jscomp$inline_380$$] = $name$jscomp$inline_377$$.split("/");
      $stat$jscomp$inline_381_value$jscomp$inline_378$$ = $stat_values$jscomp$inline_372$$[$left$jscomp$inline_379$$] / $stat_values$jscomp$inline_372$$[$right$jscomp$inline_380$$];
    } else {
      $stat$jscomp$inline_381_value$jscomp$inline_378$$ = $stat_values$jscomp$inline_372$$[$name$jscomp$inline_377$$] = $JSCompiler_inline_result$jscomp$inline_375_cpu$jscomp$inline_367$$.wm.exports.profiler_stat_get($i$jscomp$inline_376$$ - $global_tlb_entries$jscomp$inline_374_j$jscomp$inline_371$$), $stat$jscomp$inline_381_value$jscomp$inline_378$$ = 100e6 <= $stat$jscomp$inline_381_value$jscomp$inline_378$$ ? Math.round($stat$jscomp$inline_381_value$jscomp$inline_378$$ / 1e6) + "m" : 100e3 <= 
      $stat$jscomp$inline_381_value$jscomp$inline_378$$ ? Math.round($stat$jscomp$inline_381_value$jscomp$inline_378$$ / 1e3) + "k" : $stat$jscomp$inline_381_value$jscomp$inline_378$$;
    }
    $JSCompiler_inline_result$jscomp$inline_368_text$jscomp$inline_369$$ += $name$jscomp$inline_377$$ + "=" + $stat$jscomp$inline_381_value$jscomp$inline_378$$ + "\n";
  }
  $JSCompiler_inline_result$jscomp$inline_368_text$jscomp$inline_369$$ += "\n";
  $stat_names$jscomp$inline_370_tlb_entries$jscomp$inline_373$$ = $JSCompiler_inline_result$jscomp$inline_375_cpu$jscomp$inline_367$$.wm.exports.get_valid_tlb_entries_count();
  $global_tlb_entries$jscomp$inline_374_j$jscomp$inline_371$$ = $JSCompiler_inline_result$jscomp$inline_375_cpu$jscomp$inline_367$$.wm.exports.get_valid_global_tlb_entries_count();
  $JSCompiler_inline_result$jscomp$inline_368_text$jscomp$inline_369$$ = $JSCompiler_inline_result$jscomp$inline_368_text$jscomp$inline_369$$ + ("TLB_ENTRIES=" + $stat_names$jscomp$inline_370_tlb_entries$jscomp$inline_373$$ + " (" + $global_tlb_entries$jscomp$inline_374_j$jscomp$inline_371$$ + " global, " + ($stat_names$jscomp$inline_370_tlb_entries$jscomp$inline_373$$ - $global_tlb_entries$jscomp$inline_374_j$jscomp$inline_371$$) + " non-global)\nWASM_TABLE_FREE=") + ($JSCompiler_inline_result$jscomp$inline_375_cpu$jscomp$inline_367$$.wm.exports.jit_get_wasm_table_index_free_list_count() + 
  "\n");
  $JSCompiler_inline_result$jscomp$inline_368_text$jscomp$inline_369$$ += "JIT_CACHE_SIZE=" + $JSCompiler_inline_result$jscomp$inline_375_cpu$jscomp$inline_367$$.wm.exports.jit_get_cache_size() + "\n";
  $JSCompiler_inline_result$jscomp$inline_368_text$jscomp$inline_369$$ += "FLAT_SEGMENTS=" + $JSCompiler_inline_result$jscomp$inline_375_cpu$jscomp$inline_367$$.wm.exports.has_flat_segmentation() + "\n";
  $JSCompiler_inline_result$jscomp$inline_368_text$jscomp$inline_369$$ += "wasm memory size: " + ($JSCompiler_inline_result$jscomp$inline_375_cpu$jscomp$inline_367$$.wasm_memory.buffer.byteLength >> 20) + "m\n";
  $JSCompiler_inline_result$jscomp$inline_368_text$jscomp$inline_369$$ = $JSCompiler_inline_result$jscomp$inline_368_text$jscomp$inline_369$$ + "Config:\nJIT_DISABLED=" + ($JSCompiler_inline_result$jscomp$inline_375_cpu$jscomp$inline_367$$.wm.exports.get_jit_config(0) + "\n");
  $JSCompiler_inline_result$jscomp$inline_368_text$jscomp$inline_369$$ += "MAX_PAGES=" + $JSCompiler_inline_result$jscomp$inline_375_cpu$jscomp$inline_367$$.wm.exports.get_jit_config(1) + "\n";
  $JSCompiler_inline_result$jscomp$inline_368_text$jscomp$inline_369$$ += "JIT_USE_LOOP_SAFETY=" + !!$JSCompiler_inline_result$jscomp$inline_375_cpu$jscomp$inline_367$$.wm.exports.get_jit_config(2) + "\n";
  $JSCompiler_inline_result$jscomp$inline_368_text$jscomp$inline_369$$ += "MAX_EXTRA_BASIC_BLOCKS=" + $JSCompiler_inline_result$jscomp$inline_375_cpu$jscomp$inline_367$$.wm.exports.get_jit_config(3) + "\n";
  $JSCompiler_inline_result$jscomp$inline_375_cpu$jscomp$inline_367$$ = [$print_instruction_counts_offset$$module$src$browser$print_stats$$($JSCompiler_inline_result$jscomp$inline_375_cpu$jscomp$inline_367$$, !1, !1, !1, !1), $print_instruction_counts_offset$$module$src$browser$print_stats$$($JSCompiler_inline_result$jscomp$inline_375_cpu$jscomp$inline_367$$, !0, !1, !1, !1), $print_instruction_counts_offset$$module$src$browser$print_stats$$($JSCompiler_inline_result$jscomp$inline_375_cpu$jscomp$inline_367$$, 
  !1, !0, !1, !1), $print_instruction_counts_offset$$module$src$browser$print_stats$$($JSCompiler_inline_result$jscomp$inline_375_cpu$jscomp$inline_367$$, !1, !1, !0, !1), $print_instruction_counts_offset$$module$src$browser$print_stats$$($JSCompiler_inline_result$jscomp$inline_375_cpu$jscomp$inline_367$$, !1, !1, !1, !0), ].join("\n\n");
  return $JSCompiler_inline_result$jscomp$inline_368_text$jscomp$inline_369$$ + $JSCompiler_inline_result$jscomp$inline_375_cpu$jscomp$inline_367$$;
};
function $FileExistsError$$module$src$browser$starter$$($message$jscomp$31$$) {
  this.message = $message$jscomp$31$$ || "File already exists";
}
$FileExistsError$$module$src$browser$starter$$.prototype = Error.prototype;
function $FileNotFoundError$$module$src$browser$starter$$($message$jscomp$32$$) {
  this.message = $message$jscomp$32$$ || "File not found";
}
$FileNotFoundError$$module$src$browser$starter$$.prototype = Error.prototype;
"undefined" !== typeof module && "undefined" !== typeof module.exports ? module.exports.V86 = $V86$$module$src$browser$starter$$ : "undefined" !== typeof window ? window.V86 = $V86$$module$src$browser$starter$$ : "function" === typeof importScripts && (self.V86 = $V86$$module$src$browser$starter$$);
function $v86$$module$src$main$$($bus$jscomp$17$$, $wasm$jscomp$1$$) {
  this.stopping = this.running = !1;
  this.idle = !0;
  this.tick_counter = 0;
  this.worker = null;
  this.cpu = new $CPU$$module$src$cpu$$($bus$jscomp$17$$, $wasm$jscomp$1$$, () => {
    this.idle && this.next_tick(0);
  });
  this.bus = $bus$jscomp$17$$;
  this.register_yield();
}
$v86$$module$src$main$$.prototype.run = function() {
  this.stopping = !1;
  this.running || (this.running = !0, this.bus.send("emulator-started"));
  this.next_tick(0);
};
$v86$$module$src$main$$.prototype.do_tick = function() {
  if (this.stopping || !this.running) {
    this.stopping = this.running = !1, this.bus.send("emulator-stopped");
  } else {
    this.idle = !1;
    var $t$jscomp$5$$ = this.cpu.main_loop();
    this.next_tick($t$jscomp$5$$);
  }
};
$v86$$module$src$main$$.prototype.next_tick = function($t$jscomp$6$$) {
  const $tick$$ = ++this.tick_counter;
  this.idle = !0;
  this.yield($t$jscomp$6$$, $tick$$);
};
$v86$$module$src$main$$.prototype.yield_callback = function($tick$jscomp$1$$) {
  $tick$jscomp$1$$ === this.tick_counter && this.do_tick();
};
$v86$$module$src$main$$.prototype.stop = function() {
  this.running && (this.stopping = !0);
};
$v86$$module$src$main$$.prototype.destroy = function() {
  this.unregister_yield();
};
$v86$$module$src$main$$.prototype.restart = function() {
  this.cpu.reset_cpu();
  this.cpu.load_bios();
};
$v86$$module$src$main$$.prototype.init = function($settings$jscomp$1$$) {
  this.cpu.init($settings$jscomp$1$$, this.bus);
  this.bus.send("emulator-ready");
};
if ("undefined" !== typeof process) {
  $v86$$module$src$main$$.prototype.yield = function($t$jscomp$7$$, $tick$jscomp$2$$) {
    1 > $t$jscomp$7$$ ? global.setImmediate($tick$jscomp$3$$ => this.yield_callback($tick$jscomp$3$$), $tick$jscomp$2$$) : setTimeout($tick$jscomp$4$$ => this.yield_callback($tick$jscomp$4$$), $t$jscomp$7$$, $tick$jscomp$2$$);
  }, $v86$$module$src$main$$.prototype.register_yield = function() {
  }, $v86$$module$src$main$$.prototype.unregister_yield = function() {
  };
} else {
  if ("undefined" !== typeof Worker) {
    function $the_worker$jscomp$1$$() {
      let $timeout$jscomp$4$$;
      globalThis.onmessage = function($e$jscomp$45$$) {
        const $t$jscomp$8$$ = $e$jscomp$45$$.data.t;
        $timeout$jscomp$4$$ = $timeout$jscomp$4$$ && clearTimeout($timeout$jscomp$4$$);
        1 > $t$jscomp$8$$ ? postMessage($e$jscomp$45$$.data.tick) : $timeout$jscomp$4$$ = setTimeout(() => postMessage($e$jscomp$45$$.data.tick), $t$jscomp$8$$);
      };
    }
    $v86$$module$src$main$$.prototype.register_yield = function() {
      const $url$jscomp$27$$ = URL.createObjectURL(new Blob(["(" + $the_worker$jscomp$1$$.toString() + ")()"], {type:"text/javascript"}));
      this.worker = new Worker($url$jscomp$27$$);
      this.worker.onmessage = $e$jscomp$46$$ => this.yield_callback($e$jscomp$46$$.data);
      URL.revokeObjectURL($url$jscomp$27$$);
    };
    $v86$$module$src$main$$.prototype.yield = function($t$jscomp$9$$, $tick$jscomp$5$$) {
      this.worker.postMessage({t:$t$jscomp$9$$, tick:$tick$jscomp$5$$});
    };
    $v86$$module$src$main$$.prototype.unregister_yield = function() {
      this.worker && this.worker.terminate();
      this.worker = null;
    };
  } else {
    $v86$$module$src$main$$.prototype.yield = function($t$jscomp$10$$) {
      setTimeout(() => {
        this.do_tick();
      }, $t$jscomp$10$$);
    }, $v86$$module$src$main$$.prototype.register_yield = function() {
    }, $v86$$module$src$main$$.prototype.unregister_yield = function() {
    };
  }
}
$v86$$module$src$main$$.prototype.save_state = function() {
  for (var $saved_buffers$jscomp$inline_384$$ = [], $info_block$jscomp$inline_391_info_object$jscomp$inline_390_state$jscomp$inline_385$$ = $save_object$$module$src$state$$(this.cpu, $saved_buffers$jscomp$inline_384$$), $buffer_infos$jscomp$inline_386$$ = [], $result$jscomp$inline_394_total_buffer_size$jscomp$inline_387$$ = 0, $buffer_block_start$jscomp$inline_392_i$jscomp$inline_388$$ = 0; $buffer_block_start$jscomp$inline_392_i$jscomp$inline_388$$ < $saved_buffers$jscomp$inline_384$$.length; $buffer_block_start$jscomp$inline_392_i$jscomp$inline_388$$++) {
    var $buffer_block$jscomp$inline_396_len$jscomp$inline_389$$ = $saved_buffers$jscomp$inline_384$$[$buffer_block_start$jscomp$inline_392_i$jscomp$inline_388$$].byteLength;
    $buffer_infos$jscomp$inline_386$$[$buffer_block_start$jscomp$inline_392_i$jscomp$inline_388$$] = {offset:$result$jscomp$inline_394_total_buffer_size$jscomp$inline_387$$, length:$buffer_block$jscomp$inline_396_len$jscomp$inline_389$$, };
    $result$jscomp$inline_394_total_buffer_size$jscomp$inline_387$$ += $buffer_block$jscomp$inline_396_len$jscomp$inline_389$$;
    $result$jscomp$inline_394_total_buffer_size$jscomp$inline_387$$ = $result$jscomp$inline_394_total_buffer_size$jscomp$inline_387$$ + 3 & -4;
  }
  $info_block$jscomp$inline_391_info_object$jscomp$inline_390_state$jscomp$inline_385$$ = JSON.stringify({buffer_infos:$buffer_infos$jscomp$inline_386$$, state:$info_block$jscomp$inline_391_info_object$jscomp$inline_390_state$jscomp$inline_385$$, });
  $info_block$jscomp$inline_391_info_object$jscomp$inline_390_state$jscomp$inline_385$$ = (new TextEncoder).encode($info_block$jscomp$inline_391_info_object$jscomp$inline_390_state$jscomp$inline_385$$);
  $buffer_block_start$jscomp$inline_392_i$jscomp$inline_388$$ = 16 + $info_block$jscomp$inline_391_info_object$jscomp$inline_390_state$jscomp$inline_385$$.length;
  $buffer_block_start$jscomp$inline_392_i$jscomp$inline_388$$ = $buffer_block_start$jscomp$inline_392_i$jscomp$inline_388$$ + 3 & -4;
  var $buffer$jscomp$inline_397_total_size$jscomp$inline_393$$ = $buffer_block_start$jscomp$inline_392_i$jscomp$inline_388$$ + $result$jscomp$inline_394_total_buffer_size$jscomp$inline_387$$;
  $result$jscomp$inline_394_total_buffer_size$jscomp$inline_387$$ = new ArrayBuffer($buffer$jscomp$inline_397_total_size$jscomp$inline_393$$);
  var $header_block$jscomp$inline_395$$ = new Int32Array($result$jscomp$inline_394_total_buffer_size$jscomp$inline_387$$, 0, 4);
  (new Uint8Array($result$jscomp$inline_394_total_buffer_size$jscomp$inline_387$$, 16, $info_block$jscomp$inline_391_info_object$jscomp$inline_390_state$jscomp$inline_385$$.length)).set($info_block$jscomp$inline_391_info_object$jscomp$inline_390_state$jscomp$inline_385$$);
  $buffer_block$jscomp$inline_396_len$jscomp$inline_389$$ = new Uint8Array($result$jscomp$inline_394_total_buffer_size$jscomp$inline_387$$, $buffer_block_start$jscomp$inline_392_i$jscomp$inline_388$$);
  $header_block$jscomp$inline_395$$[0] = -2039052682;
  $header_block$jscomp$inline_395$$[1] = 6;
  $header_block$jscomp$inline_395$$[2] = $buffer$jscomp$inline_397_total_size$jscomp$inline_393$$;
  $header_block$jscomp$inline_395$$[3] = $info_block$jscomp$inline_391_info_object$jscomp$inline_390_state$jscomp$inline_385$$.length;
  for ($buffer_block_start$jscomp$inline_392_i$jscomp$inline_388$$ = 0; $buffer_block_start$jscomp$inline_392_i$jscomp$inline_388$$ < $saved_buffers$jscomp$inline_384$$.length; $buffer_block_start$jscomp$inline_392_i$jscomp$inline_388$$++) {
    $buffer$jscomp$inline_397_total_size$jscomp$inline_393$$ = $saved_buffers$jscomp$inline_384$$[$buffer_block_start$jscomp$inline_392_i$jscomp$inline_388$$], $dbg_assert$$module$src$log$$($buffer$jscomp$inline_397_total_size$jscomp$inline_393$$.constructor === Uint8Array), $buffer_block$jscomp$inline_396_len$jscomp$inline_389$$.set($buffer$jscomp$inline_397_total_size$jscomp$inline_393$$, $buffer_infos$jscomp$inline_386$$[$buffer_block_start$jscomp$inline_392_i$jscomp$inline_388$$].offset);
  }
  $dbg_log$$module$src$log$$("State: json size " + ($info_block$jscomp$inline_391_info_object$jscomp$inline_390_state$jscomp$inline_385$$.byteLength >> 10) + "k");
  $dbg_log$$module$src$log$$("State: Total buffers size " + ($buffer_block$jscomp$inline_396_len$jscomp$inline_389$$.byteLength >> 10) + "k");
  return $result$jscomp$inline_394_total_buffer_size$jscomp$inline_387$$;
};
$v86$$module$src$main$$.prototype.restore_state = function($state$jscomp$27$$) {
  return $restore_state$$module$src$state$$(this.cpu, $state$jscomp$27$$);
};
if ("object" === typeof performance && performance.now) {
  $v86$$module$src$main$$.microtick = performance.now.bind(performance);
} else {
  if ("function" === typeof require) {
    const {performance:$performance$jscomp$1$$} = require("perf_hooks");
    $v86$$module$src$main$$.microtick = $performance$jscomp$1$$.now.bind($performance$jscomp$1$$);
  } else {
    $v86$$module$src$main$$.microtick = "object" === typeof process && process.hrtime ? function() {
      var $t$jscomp$11$$ = process.hrtime();
      return 1000 * $t$jscomp$11$$[0] + $t$jscomp$11$$[1] / 1e6;
    } : Date.now;
  }
}
;const $DELIVERY_MODES$$module$src$apic$$ = "Fixed (0);Lowest Prio (1);SMI (2);Reserved (3);NMI (4);INIT (5);Reserved (6);ExtINT (7)".split(";"), $DESTINATION_MODES$$module$src$apic$$ = ["physical", "logical"];
function $APIC$$module$src$apic$$($cpu$jscomp$14$$) {
  this.cpu = $cpu$jscomp$14$$;
  this.timer_divider = this.apic_id = 0;
  this.timer_divider_shift = 1;
  this.timer_current_count = this.timer_initial_count = 0;
  this.next_tick = $v86$$module$src$main$$.microtick();
  this.lvt_error = this.lvt_int1 = this.lvt_int0 = this.lvt_perf_counter = this.lvt_thermal_sensor = this.lvt_timer = 65536;
  this.icr1 = this.icr0 = this.tpr = 0;
  this.irr = new Int32Array(8);
  this.isr = new Int32Array(8);
  this.tmr = new Int32Array(8);
  this.spurious_vector = 254;
  this.destination_format = -1;
  this.read_error = this.error = this.local_destination = 0;
  $cpu$jscomp$14$$.io.mmap_register(4276092928, 1048576, $addr$jscomp$25$$ => {
    $dbg_log$$module$src$log$$("Unsupported read8 from apic: " + $h$$module$src$lib$$($addr$jscomp$25$$ >>> 0), 524288);
    var $off$jscomp$1$$ = $addr$jscomp$25$$ & 3;
    return this.read32($addr$jscomp$25$$ & -4) >> 8 * $off$jscomp$1$$ & 255;
  }, ($addr$jscomp$26$$, $value$jscomp$146$$) => {
    $dbg_log$$module$src$log$$("Unsupported write8 from apic: " + $h$$module$src$lib$$($addr$jscomp$26$$) + " <- " + $h$$module$src$lib$$($value$jscomp$146$$), 524288);
    $dbg_log$$module$src$log$$(Error().stack, void 0);
    $dbg_assert$$module$src$log$$(!1);
  }, $addr$jscomp$27$$ => this.read32($addr$jscomp$27$$), ($addr$jscomp$28$$, $value$jscomp$147$$) => this.write32($addr$jscomp$28$$, $value$jscomp$147$$));
}
$APIC$$module$src$apic$$.prototype.read32 = function($addr$jscomp$29_index$jscomp$84$$) {
  $addr$jscomp$29_index$jscomp$84$$ = $addr$jscomp$29_index$jscomp$84$$ - 4276092928 | 0;
  switch($addr$jscomp$29_index$jscomp$84$$) {
    case 32:
      return $dbg_log$$module$src$log$$("APIC read id", 524288), this.apic_id;
    case 48:
      return $dbg_log$$module$src$log$$("APIC read version", 524288), 327700;
    case 128:
      return this.tpr;
    case 208:
      return $dbg_log$$module$src$log$$("Read local destination", 524288), this.local_destination;
    case 224:
      return $dbg_log$$module$src$log$$("Read destination format", 524288), this.destination_format;
    case 240:
      return this.spurious_vector;
    case 256:
    case 272:
    case 288:
    case 304:
    case 320:
    case 336:
    case 352:
    case 368:
      return $addr$jscomp$29_index$jscomp$84$$ = $addr$jscomp$29_index$jscomp$84$$ - 256 >> 4, $dbg_log$$module$src$log$$("Read isr " + $addr$jscomp$29_index$jscomp$84$$ + ": " + $h$$module$src$lib$$(this.isr[$addr$jscomp$29_index$jscomp$84$$] >>> 0, 8), 524288), this.isr[$addr$jscomp$29_index$jscomp$84$$];
    case 384:
    case 400:
    case 416:
    case 432:
    case 448:
    case 464:
    case 480:
    case 496:
      return $addr$jscomp$29_index$jscomp$84$$ = $addr$jscomp$29_index$jscomp$84$$ - 384 >> 4, $dbg_log$$module$src$log$$("Read tmr " + $addr$jscomp$29_index$jscomp$84$$ + ": " + $h$$module$src$lib$$(this.tmr[$addr$jscomp$29_index$jscomp$84$$] >>> 0, 8), 524288), this.tmr[$addr$jscomp$29_index$jscomp$84$$];
    case 512:
    case 528:
    case 544:
    case 560:
    case 576:
    case 592:
    case 608:
    case 624:
      return $addr$jscomp$29_index$jscomp$84$$ = $addr$jscomp$29_index$jscomp$84$$ - 512 >> 4, $dbg_log$$module$src$log$$("Read irr " + $addr$jscomp$29_index$jscomp$84$$ + ": " + $h$$module$src$lib$$(this.irr[$addr$jscomp$29_index$jscomp$84$$] >>> 0, 8), 524288), this.irr[$addr$jscomp$29_index$jscomp$84$$];
    case 640:
      return $dbg_log$$module$src$log$$("Read error: " + $h$$module$src$lib$$(this.read_error >>> 0, 8), 524288), this.read_error;
    case 768:
      return this.icr0;
    case 784:
      return $dbg_log$$module$src$log$$("APIC read icr1", 524288), this.icr1;
    case 800:
      return $dbg_log$$module$src$log$$("read timer lvt", 524288), this.lvt_timer;
    case 816:
      return $dbg_log$$module$src$log$$("read lvt thermal sensor", 524288), this.lvt_thermal_sensor;
    case 832:
      return $dbg_log$$module$src$log$$("read lvt perf counter", 524288), this.lvt_perf_counter;
    case 848:
      return $dbg_log$$module$src$log$$("read lvt int0", 524288), this.lvt_int0;
    case 864:
      return $dbg_log$$module$src$log$$("read lvt int1", 524288), this.lvt_int1;
    case 880:
      return $dbg_log$$module$src$log$$("read lvt error", 524288), this.lvt_error;
    case 992:
      return $dbg_log$$module$src$log$$("read timer divider", 524288), this.timer_divider;
    case 896:
      return $dbg_log$$module$src$log$$("read timer initial count", 524288), this.timer_initial_count;
    case 912:
      return $dbg_log$$module$src$log$$("read timer current count: " + $h$$module$src$lib$$(this.timer_current_count >>> 0, 8), 524288), this.timer_current_count;
    default:
      return $dbg_log$$module$src$log$$("APIC read " + $h$$module$src$lib$$($addr$jscomp$29_index$jscomp$84$$), 524288), $dbg_assert$$module$src$log$$(!1), 0;
  }
};
$APIC$$module$src$apic$$.prototype.write32 = function($addr$jscomp$30_vector$$, $divide_shift_highest_isr_value$jscomp$148$$) {
  $addr$jscomp$30_vector$$ = $addr$jscomp$30_vector$$ - 4276092928 | 0;
  switch($addr$jscomp$30_vector$$) {
    case 32:
      $dbg_log$$module$src$log$$("APIC write id: " + $h$$module$src$lib$$($divide_shift_highest_isr_value$jscomp$148$$ >>> 8, 8), 524288);
      this.apic_id = $divide_shift_highest_isr_value$jscomp$148$$;
      break;
    case 48:
      $dbg_log$$module$src$log$$("APIC write version: " + $h$$module$src$lib$$($divide_shift_highest_isr_value$jscomp$148$$ >>> 0, 8) + ", ignored", 524288);
      break;
    case 128:
      this.tpr = $divide_shift_highest_isr_value$jscomp$148$$ & 255;
      this.check_vector();
      break;
    case 176:
      $divide_shift_highest_isr_value$jscomp$148$$ = this.highest_isr();
      -1 !== $divide_shift_highest_isr_value$jscomp$148$$ ? (this.register_clear_bit(this.isr, $divide_shift_highest_isr_value$jscomp$148$$), this.register_get_bit(this.tmr, $divide_shift_highest_isr_value$jscomp$148$$) && this.cpu.devices.ioapic.remote_eoi($divide_shift_highest_isr_value$jscomp$148$$), this.check_vector()) : $dbg_log$$module$src$log$$("Bad eoi: No isr set", 524288);
      break;
    case 208:
      $dbg_log$$module$src$log$$("Set local destination: " + $h$$module$src$lib$$($divide_shift_highest_isr_value$jscomp$148$$ >>> 0, 8), 524288);
      this.local_destination = $divide_shift_highest_isr_value$jscomp$148$$ & 4278190080;
      break;
    case 224:
      $dbg_log$$module$src$log$$("Set destination format: " + $h$$module$src$lib$$($divide_shift_highest_isr_value$jscomp$148$$ >>> 0, 8), 524288);
      this.destination_format = $divide_shift_highest_isr_value$jscomp$148$$ | 16777215;
      break;
    case 240:
      $dbg_log$$module$src$log$$("Set spurious vector: " + $h$$module$src$lib$$($divide_shift_highest_isr_value$jscomp$148$$ >>> 0, 8), 524288);
      this.spurious_vector = $divide_shift_highest_isr_value$jscomp$148$$;
      break;
    case 640:
      $dbg_log$$module$src$log$$("Write error: " + $h$$module$src$lib$$($divide_shift_highest_isr_value$jscomp$148$$ >>> 0, 8), 524288);
      this.read_error = this.error;
      this.error = 0;
      break;
    case 768:
      $addr$jscomp$30_vector$$ = $divide_shift_highest_isr_value$jscomp$148$$ & 255;
      var $delivery_mode$$ = $divide_shift_highest_isr_value$jscomp$148$$ >> 8 & 7, $destination_mode$$ = $divide_shift_highest_isr_value$jscomp$148$$ >> 11 & 1, $is_level$$ = $divide_shift_highest_isr_value$jscomp$148$$ >> 15 & 1, $destination_shorthand$$ = $divide_shift_highest_isr_value$jscomp$148$$ >> 18 & 3, $destination$jscomp$3$$ = this.icr1 >>> 24;
      $dbg_log$$module$src$log$$("APIC write icr0: " + $h$$module$src$lib$$($divide_shift_highest_isr_value$jscomp$148$$, 8) + " vector=" + $h$$module$src$lib$$($addr$jscomp$30_vector$$, 2) + " destination_mode=" + $DESTINATION_MODES$$module$src$apic$$[$destination_mode$$] + " delivery_mode=" + $DELIVERY_MODES$$module$src$apic$$[$delivery_mode$$] + " destination_shorthand=" + ["no", "self", "all with self", "all without self"][$destination_shorthand$$], 524288);
      this.icr0 = $divide_shift_highest_isr_value$jscomp$148$$ & -4097;
      0 === $destination_shorthand$$ ? this.route($addr$jscomp$30_vector$$, $delivery_mode$$, $is_level$$, $destination$jscomp$3$$, $destination_mode$$) : 1 === $destination_shorthand$$ ? this.deliver($addr$jscomp$30_vector$$, 0, $is_level$$) : 2 === $destination_shorthand$$ ? this.deliver($addr$jscomp$30_vector$$, $delivery_mode$$, $is_level$$) : 3 !== $destination_shorthand$$ && $dbg_assert$$module$src$log$$(!1);
      break;
    case 784:
      $dbg_log$$module$src$log$$("APIC write icr1: " + $h$$module$src$lib$$($divide_shift_highest_isr_value$jscomp$148$$ >>> 0, 8), 524288);
      this.icr1 = $divide_shift_highest_isr_value$jscomp$148$$;
      break;
    case 800:
      $dbg_log$$module$src$log$$("timer lvt: " + $h$$module$src$lib$$($divide_shift_highest_isr_value$jscomp$148$$ >>> 0, 8), 524288);
      this.lvt_timer = $divide_shift_highest_isr_value$jscomp$148$$;
      break;
    case 816:
      $dbg_log$$module$src$log$$("lvt thermal sensor: " + $h$$module$src$lib$$($divide_shift_highest_isr_value$jscomp$148$$ >>> 0, 8), 524288);
      this.lvt_thermal_sensor = $divide_shift_highest_isr_value$jscomp$148$$;
      break;
    case 832:
      $dbg_log$$module$src$log$$("lvt perf counter: " + $h$$module$src$lib$$($divide_shift_highest_isr_value$jscomp$148$$ >>> 0, 8), 524288);
      this.lvt_perf_counter = $divide_shift_highest_isr_value$jscomp$148$$;
      break;
    case 848:
      $dbg_log$$module$src$log$$("lvt int0: " + $h$$module$src$lib$$($divide_shift_highest_isr_value$jscomp$148$$ >>> 0, 8), 524288);
      this.lvt_int0 = $divide_shift_highest_isr_value$jscomp$148$$;
      break;
    case 864:
      $dbg_log$$module$src$log$$("lvt int1: " + $h$$module$src$lib$$($divide_shift_highest_isr_value$jscomp$148$$ >>> 0, 8), 524288);
      this.lvt_int1 = $divide_shift_highest_isr_value$jscomp$148$$;
      break;
    case 880:
      $dbg_log$$module$src$log$$("lvt error: " + $h$$module$src$lib$$($divide_shift_highest_isr_value$jscomp$148$$ >>> 0, 8), 524288);
      this.lvt_error = $divide_shift_highest_isr_value$jscomp$148$$;
      break;
    case 992:
      $dbg_log$$module$src$log$$("timer divider: " + $h$$module$src$lib$$($divide_shift_highest_isr_value$jscomp$148$$ >>> 0, 8), 524288);
      this.timer_divider = $divide_shift_highest_isr_value$jscomp$148$$;
      $divide_shift_highest_isr_value$jscomp$148$$ = $divide_shift_highest_isr_value$jscomp$148$$ & 3 | ($divide_shift_highest_isr_value$jscomp$148$$ & 8) >> 1;
      this.timer_divider_shift = 7 === $divide_shift_highest_isr_value$jscomp$148$$ ? 0 : $divide_shift_highest_isr_value$jscomp$148$$ + 1;
      break;
    case 896:
      $dbg_log$$module$src$log$$("timer initial: " + $h$$module$src$lib$$($divide_shift_highest_isr_value$jscomp$148$$ >>> 0, 8), 524288);
      this.timer_initial_count = $divide_shift_highest_isr_value$jscomp$148$$ >>> 0;
      this.timer_current_count = $divide_shift_highest_isr_value$jscomp$148$$ >>> 0;
      this.next_tick = $v86$$module$src$main$$.microtick();
      this.timer_active = !0;
      break;
    case 912:
      $dbg_log$$module$src$log$$("timer current: " + $h$$module$src$lib$$($divide_shift_highest_isr_value$jscomp$148$$ >>> 0, 8), 524288);
      $dbg_assert$$module$src$log$$(!1, "read-only register");
      break;
    default:
      $dbg_log$$module$src$log$$("APIC write32 " + $h$$module$src$lib$$($addr$jscomp$30_vector$$) + " <- " + $h$$module$src$lib$$($divide_shift_highest_isr_value$jscomp$148$$ >>> 0, 8), 524288), $dbg_assert$$module$src$log$$(!1);
  }
};
$APIC$$module$src$apic$$.prototype.timer = function($mode$jscomp$21_now$jscomp$11_steps$jscomp$2$$) {
  if (0 === this.timer_current_count) {
    return 100;
  }
  const $freq$$ = 1E6 / (1 << this.timer_divider_shift);
  $mode$jscomp$21_now$jscomp$11_steps$jscomp$2$$ = ($mode$jscomp$21_now$jscomp$11_steps$jscomp$2$$ - this.next_tick) * $freq$$ >>> 0;
  this.next_tick += $mode$jscomp$21_now$jscomp$11_steps$jscomp$2$$ / $freq$$;
  this.timer_current_count -= $mode$jscomp$21_now$jscomp$11_steps$jscomp$2$$;
  0 >= this.timer_current_count && ($mode$jscomp$21_now$jscomp$11_steps$jscomp$2$$ = this.lvt_timer & 393216, 131072 === $mode$jscomp$21_now$jscomp$11_steps$jscomp$2$$ ? (this.timer_current_count %= this.timer_initial_count, 0 >= this.timer_current_count && (this.timer_current_count += this.timer_initial_count), $dbg_assert$$module$src$log$$(0 !== this.timer_current_count), 0 === (this.lvt_timer & 65536) && this.deliver(this.lvt_timer & 255, 0, !1)) : 0 === $mode$jscomp$21_now$jscomp$11_steps$jscomp$2$$ && 
  (this.timer_current_count = 0, $dbg_log$$module$src$log$$("APIC timer one shot end", 524288), 0 === (this.lvt_timer & 65536) && this.deliver(this.lvt_timer & 255, 0, !1)));
  return Math.max(0, this.timer_current_count / $freq$$);
};
$APIC$$module$src$apic$$.prototype.route = function($vector$jscomp$1$$, $mode$jscomp$22$$, $is_level$jscomp$1$$) {
  this.deliver($vector$jscomp$1$$, $mode$jscomp$22$$, $is_level$jscomp$1$$);
};
$APIC$$module$src$apic$$.prototype.deliver = function($vector$jscomp$2$$, $mode$jscomp$23$$, $is_level$jscomp$2$$) {
  5 !== $mode$jscomp$23$$ && 4 !== $mode$jscomp$23$$ && ((16 > $vector$jscomp$2$$ || 255 === $vector$jscomp$2$$) && $dbg_assert$$module$src$log$$(!1, "TODO: Invalid vector"), this.register_get_bit(this.irr, $vector$jscomp$2$$) ? $dbg_log$$module$src$log$$("Not delivered: irr already set, vector=" + $h$$module$src$lib$$($vector$jscomp$2$$, 2), 524288) : (this.register_set_bit(this.irr, $vector$jscomp$2$$), $is_level$jscomp$2$$ ? this.register_set_bit(this.tmr, $vector$jscomp$2$$) : this.register_clear_bit(this.tmr, 
  $vector$jscomp$2$$), this.check_vector()));
};
$APIC$$module$src$apic$$.prototype.highest_irr = function() {
  var $highest$$ = this.register_get_highest_bit(this.irr);
  $dbg_assert$$module$src$log$$(255 !== $highest$$);
  $dbg_assert$$module$src$log$$(16 <= $highest$$ || -1 === $highest$$);
  return $highest$$;
};
$APIC$$module$src$apic$$.prototype.highest_isr = function() {
  var $highest$jscomp$1$$ = this.register_get_highest_bit(this.isr);
  $dbg_assert$$module$src$log$$(255 !== $highest$jscomp$1$$);
  $dbg_assert$$module$src$log$$(16 <= $highest$jscomp$1$$ || -1 === $highest$jscomp$1$$);
  return $highest$jscomp$1$$;
};
$APIC$$module$src$apic$$.prototype.check_vector = function() {
  var $highest_irr$$ = this.highest_irr();
  -1 !== $highest_irr$$ && (this.highest_isr() >= $highest_irr$$ || ($highest_irr$$ & 240) <= (this.tpr & 240) || this.cpu.handle_irqs());
};
$APIC$$module$src$apic$$.prototype.acknowledge_irq = function() {
  var $highest_irr$jscomp$1$$ = this.highest_irr();
  if (-1 === $highest_irr$jscomp$1$$ || this.highest_isr() >= $highest_irr$jscomp$1$$ || ($highest_irr$jscomp$1$$ & 240) <= (this.tpr & 240)) {
    return -1;
  }
  this.register_clear_bit(this.irr, $highest_irr$jscomp$1$$);
  this.register_set_bit(this.isr, $highest_irr$jscomp$1$$);
  this.check_vector();
  return $highest_irr$jscomp$1$$;
};
$APIC$$module$src$apic$$.prototype.get_state = function() {
  var $state$jscomp$28$$ = [];
  $state$jscomp$28$$[0] = this.apic_id;
  $state$jscomp$28$$[1] = this.timer_divider;
  $state$jscomp$28$$[2] = this.timer_divider_shift;
  $state$jscomp$28$$[3] = this.timer_initial_count;
  $state$jscomp$28$$[4] = this.timer_current_count;
  $state$jscomp$28$$[5] = this.next_tick;
  $state$jscomp$28$$[6] = this.lvt_timer;
  $state$jscomp$28$$[7] = this.lvt_perf_counter;
  $state$jscomp$28$$[8] = this.lvt_int0;
  $state$jscomp$28$$[9] = this.lvt_int1;
  $state$jscomp$28$$[10] = this.lvt_error;
  $state$jscomp$28$$[11] = this.tpr;
  $state$jscomp$28$$[12] = this.icr0;
  $state$jscomp$28$$[13] = this.icr1;
  $state$jscomp$28$$[14] = this.irr;
  $state$jscomp$28$$[15] = this.isr;
  $state$jscomp$28$$[16] = this.tmr;
  $state$jscomp$28$$[17] = this.spurious_vector;
  $state$jscomp$28$$[18] = this.destination_format;
  $state$jscomp$28$$[19] = this.local_destination;
  $state$jscomp$28$$[20] = this.error;
  $state$jscomp$28$$[21] = this.read_error;
  $state$jscomp$28$$[22] = this.lvt_thermal_sensor;
  return $state$jscomp$28$$;
};
$APIC$$module$src$apic$$.prototype.set_state = function($state$jscomp$29$$) {
  this.apic_id = $state$jscomp$29$$[0];
  this.timer_divider = $state$jscomp$29$$[1];
  this.timer_divider_shift = $state$jscomp$29$$[2];
  this.timer_initial_count = $state$jscomp$29$$[3];
  this.timer_current_count = $state$jscomp$29$$[4];
  this.next_tick = $state$jscomp$29$$[5];
  this.lvt_timer = $state$jscomp$29$$[6];
  this.lvt_perf_counter = $state$jscomp$29$$[7];
  this.lvt_int0 = $state$jscomp$29$$[8];
  this.lvt_int1 = $state$jscomp$29$$[9];
  this.lvt_error = $state$jscomp$29$$[10];
  this.tpr = $state$jscomp$29$$[11];
  this.icr0 = $state$jscomp$29$$[12];
  this.icr1 = $state$jscomp$29$$[13];
  this.irr = $state$jscomp$29$$[14];
  this.isr = $state$jscomp$29$$[15];
  this.tmr = $state$jscomp$29$$[16];
  this.spurious_vector = $state$jscomp$29$$[17];
  this.destination_format = $state$jscomp$29$$[18];
  this.local_destination = $state$jscomp$29$$[19];
  this.error = $state$jscomp$29$$[20];
  this.read_error = $state$jscomp$29$$[21];
  this.lvt_thermal_sensor = $state$jscomp$29$$[22] || 65536;
};
$APIC$$module$src$apic$$.prototype.register_get_bit = function($v$jscomp$1$$, $bit$$) {
  $dbg_assert$$module$src$log$$(0 <= $bit$$ && 256 > $bit$$);
  return $v$jscomp$1$$[$bit$$ >> 5] >> ($bit$$ & 31) & 1;
};
$APIC$$module$src$apic$$.prototype.register_set_bit = function($v$jscomp$2$$, $bit$jscomp$1$$) {
  $dbg_assert$$module$src$log$$(0 <= $bit$jscomp$1$$ && 256 > $bit$jscomp$1$$);
  $v$jscomp$2$$[$bit$jscomp$1$$ >> 5] |= 1 << ($bit$jscomp$1$$ & 31);
};
$APIC$$module$src$apic$$.prototype.register_clear_bit = function($v$jscomp$3$$, $bit$jscomp$2$$) {
  $dbg_assert$$module$src$log$$(0 <= $bit$jscomp$2$$ && 256 > $bit$jscomp$2$$);
  $v$jscomp$3$$[$bit$jscomp$2$$ >> 5] &= ~(1 << ($bit$jscomp$2$$ & 31));
};
$APIC$$module$src$apic$$.prototype.register_get_highest_bit = function($v$jscomp$4$$) {
  for (var $i$jscomp$73$$ = 7; 0 <= $i$jscomp$73$$; $i$jscomp$73$$--) {
    var $word$$ = $v$jscomp$4$$[$i$jscomp$73$$];
    if ($word$$) {
      return $int_log2$$module$src$lib$$($word$$ >>> 0) | $i$jscomp$73$$ << 5;
    }
  }
  return -1;
};
function $IOAPIC$$module$src$ioapic$$($cpu$jscomp$15$$) {
  this.cpu = $cpu$jscomp$15$$;
  this.ioredtbl_config = new Int32Array(24);
  this.ioredtbl_destination = new Int32Array(24);
  for (var $i$jscomp$74$$ = 0; $i$jscomp$74$$ < this.ioredtbl_config.length; $i$jscomp$74$$++) {
    this.ioredtbl_config[$i$jscomp$74$$] = 65536;
  }
  this.irq_value = this.irr = this.ioapic_id = this.ioregsel = 0;
  $dbg_assert$$module$src$log$$(!0);
  $cpu$jscomp$15$$.io.mmap_register(4273995776, 131072, $addr$jscomp$31_byte$jscomp$3$$ => {
    $addr$jscomp$31_byte$jscomp$3$$ = $addr$jscomp$31_byte$jscomp$3$$ - 4273995776 | 0;
    if (16 <= $addr$jscomp$31_byte$jscomp$3$$ && 20 > $addr$jscomp$31_byte$jscomp$3$$) {
      return $addr$jscomp$31_byte$jscomp$3$$ -= 16, $dbg_log$$module$src$log$$("ioapic read8 byte " + $addr$jscomp$31_byte$jscomp$3$$ + " " + $h$$module$src$lib$$(this.ioregsel), 524288), this.read(this.ioregsel) >> 8 * $addr$jscomp$31_byte$jscomp$3$$ & 255;
    }
    $dbg_log$$module$src$log$$("Unexpected IOAPIC register read: " + $h$$module$src$lib$$($addr$jscomp$31_byte$jscomp$3$$ >>> 0), 524288);
    $dbg_assert$$module$src$log$$(!1);
    return 0;
  }, $addr$jscomp$32$$ => {
    $dbg_assert$$module$src$log$$(!1, "unsupported write8 from ioapic: " + $h$$module$src$lib$$($addr$jscomp$32$$ >>> 0));
  }, $addr$jscomp$33$$ => {
    $addr$jscomp$33$$ = $addr$jscomp$33$$ - 4273995776 | 0;
    if (0 === $addr$jscomp$33$$) {
      return this.ioregsel;
    }
    if (16 === $addr$jscomp$33$$) {
      return this.read(this.ioregsel);
    }
    $dbg_log$$module$src$log$$("Unexpected IOAPIC register read: " + $h$$module$src$lib$$($addr$jscomp$33$$ >>> 0), 524288);
    $dbg_assert$$module$src$log$$(!1);
    return 0;
  }, ($addr$jscomp$34$$, $value$jscomp$150$$) => {
    $addr$jscomp$34$$ = $addr$jscomp$34$$ - 4273995776 | 0;
    0 === $addr$jscomp$34$$ ? this.ioregsel = $value$jscomp$150$$ : 16 === $addr$jscomp$34$$ ? this.write(this.ioregsel, $value$jscomp$150$$) : ($dbg_log$$module$src$log$$("Unexpected IOAPIC register write: " + $h$$module$src$lib$$($addr$jscomp$34$$ >>> 0) + " <- " + $h$$module$src$lib$$($value$jscomp$150$$ >>> 0, 8), 524288), $dbg_assert$$module$src$log$$(!1));
  });
}
$IOAPIC$$module$src$ioapic$$.prototype.remote_eoi = function($vector$jscomp$3$$) {
  for (var $i$jscomp$75$$ = 0; 24 > $i$jscomp$75$$; $i$jscomp$75$$++) {
    var $config$jscomp$5$$ = this.ioredtbl_config[$i$jscomp$75$$];
    ($config$jscomp$5$$ & 255) === $vector$jscomp$3$$ && $config$jscomp$5$$ & 16384 && ($dbg_log$$module$src$log$$("Clear remote IRR for irq=" + $h$$module$src$lib$$($i$jscomp$75$$), 524288), this.ioredtbl_config[$i$jscomp$75$$] &= -16385, this.check_irq($i$jscomp$75$$));
  }
};
$IOAPIC$$module$src$ioapic$$.prototype.check_irq = function($irq$$) {
  var $mask$jscomp$7$$ = 1 << $irq$$;
  if (0 !== (this.irr & $mask$jscomp$7$$)) {
    var $config$jscomp$6$$ = this.ioredtbl_config[$irq$$];
    if (0 === ($config$jscomp$6$$ & 65536)) {
      var $delivery_mode$jscomp$1$$ = $config$jscomp$6$$ >> 8 & 7, $destination_mode$jscomp$2$$ = $config$jscomp$6$$ >> 11 & 1, $vector$jscomp$4$$ = $config$jscomp$6$$ & 255, $destination$jscomp$5$$ = this.ioredtbl_destination[$irq$$] >>> 24, $is_level$jscomp$3$$ = 32768 === ($config$jscomp$6$$ & 32768);
      if (0 === ($config$jscomp$6$$ & 32768)) {
        this.irr &= ~$mask$jscomp$7$$;
      } else {
        if (this.ioredtbl_config[$irq$$] |= 16384, $config$jscomp$6$$ & 16384) {
          $dbg_log$$module$src$log$$("No route: level interrupt and remote IRR still set", 524288);
          return;
        }
      }
      0 === $delivery_mode$jscomp$1$$ || 1 === $delivery_mode$jscomp$1$$ ? this.cpu.devices.apic.route($vector$jscomp$4$$, $delivery_mode$jscomp$1$$, $is_level$jscomp$3$$, $destination$jscomp$5$$, $destination_mode$jscomp$2$$) : $dbg_assert$$module$src$log$$(!1, "TODO");
      this.ioredtbl_config[$irq$$] &= -4097;
    }
  }
};
$IOAPIC$$module$src$ioapic$$.prototype.set_irq = function($i$jscomp$76$$) {
  if (24 <= $i$jscomp$76$$) {
    $dbg_assert$$module$src$log$$(!1, "Bad irq: " + $i$jscomp$76$$, 524288);
  } else {
    var $mask$jscomp$8$$ = 1 << $i$jscomp$76$$;
    0 === (this.irq_value & $mask$jscomp$8$$) && (this.irq_value |= $mask$jscomp$8$$, 65536 !== (this.ioredtbl_config[$i$jscomp$76$$] & 98304) && (this.irr |= $mask$jscomp$8$$, this.check_irq($i$jscomp$76$$)));
  }
};
$IOAPIC$$module$src$ioapic$$.prototype.clear_irq = function($i$jscomp$77$$) {
  if (24 <= $i$jscomp$77$$) {
    $dbg_assert$$module$src$log$$(!1, "Bad irq: " + $i$jscomp$77$$, 524288);
  } else {
    var $mask$jscomp$9$$ = 1 << $i$jscomp$77$$;
    (this.irq_value & $mask$jscomp$9$$) === $mask$jscomp$9$$ && (this.irq_value &= ~$mask$jscomp$9$$, this.ioredtbl_config[$i$jscomp$77$$] & 32768 && (this.irr &= ~$mask$jscomp$9$$));
  }
};
$IOAPIC$$module$src$ioapic$$.prototype.read = function($reg_value$jscomp$151$$) {
  if (0 === $reg_value$jscomp$151$$) {
    return $dbg_log$$module$src$log$$("IOAPIC Read id", 524288), this.ioapic_id << 24;
  }
  if (1 === $reg_value$jscomp$151$$) {
    return $dbg_log$$module$src$log$$("IOAPIC Read version", 524288), 1507345;
  }
  if (2 === $reg_value$jscomp$151$$) {
    return $dbg_log$$module$src$log$$("IOAPIC Read arbitration id", 524288), this.ioapic_id << 24;
  }
  if (16 <= $reg_value$jscomp$151$$ && 64 > $reg_value$jscomp$151$$) {
    var $irq$jscomp$1$$ = $reg_value$jscomp$151$$ - 16 >> 1;
    $reg_value$jscomp$151$$ & 1 ? ($reg_value$jscomp$151$$ = this.ioredtbl_destination[$irq$jscomp$1$$], $dbg_log$$module$src$log$$("IOAPIC Read destination irq=" + $h$$module$src$lib$$($irq$jscomp$1$$) + " -> " + $h$$module$src$lib$$($reg_value$jscomp$151$$, 8), 524288)) : ($reg_value$jscomp$151$$ = this.ioredtbl_config[$irq$jscomp$1$$], $dbg_log$$module$src$log$$("IOAPIC Read config irq=" + $h$$module$src$lib$$($irq$jscomp$1$$) + " -> " + $h$$module$src$lib$$($reg_value$jscomp$151$$, 8), 524288));
    return $reg_value$jscomp$151$$;
  }
  $dbg_log$$module$src$log$$("IOAPIC register read outside of range " + $h$$module$src$lib$$($reg_value$jscomp$151$$), 524288);
  $dbg_assert$$module$src$log$$(!1);
  return 0;
};
$IOAPIC$$module$src$ioapic$$.prototype.write = function($reg$jscomp$1_vector$jscomp$5$$, $value$jscomp$152$$) {
  if (0 === $reg$jscomp$1_vector$jscomp$5$$) {
    this.ioapic_id = $value$jscomp$152$$ >>> 24 & 15;
  } else {
    if (1 === $reg$jscomp$1_vector$jscomp$5$$ || 2 === $reg$jscomp$1_vector$jscomp$5$$) {
      $dbg_log$$module$src$log$$("Invalid write: " + $reg$jscomp$1_vector$jscomp$5$$, 524288);
    } else {
      if (16 <= $reg$jscomp$1_vector$jscomp$5$$ && 64 > $reg$jscomp$1_vector$jscomp$5$$) {
        var $irq$jscomp$2$$ = $reg$jscomp$1_vector$jscomp$5$$ - 16 >> 1;
        if ($reg$jscomp$1_vector$jscomp$5$$ & 1) {
          this.ioredtbl_destination[$irq$jscomp$2$$] = $value$jscomp$152$$ & 4278190080, $dbg_log$$module$src$log$$("Write destination " + $h$$module$src$lib$$($value$jscomp$152$$ >>> 0, 8) + " irq=" + $h$$module$src$lib$$($irq$jscomp$2$$) + " dest=" + $h$$module$src$lib$$($value$jscomp$152$$ >>> 24, 2), 524288);
        } else {
          this.ioredtbl_config[$irq$jscomp$2$$] = $value$jscomp$152$$ & 110591 | this.ioredtbl_config[$irq$jscomp$2$$] & -110592;
          $reg$jscomp$1_vector$jscomp$5$$ = $value$jscomp$152$$ & 255;
          var $delivery_mode$jscomp$2$$ = $value$jscomp$152$$ >> 8 & 7, $destination_mode$jscomp$3$$ = $value$jscomp$152$$ >> 11 & 1, $is_level$jscomp$4$$ = $value$jscomp$152$$ >> 15 & 1, $disabled$$ = $value$jscomp$152$$ >> 16 & 1;
          $dbg_log$$module$src$log$$("Write config " + $h$$module$src$lib$$($value$jscomp$152$$ >>> 0, 8) + " irq=" + $h$$module$src$lib$$($irq$jscomp$2$$) + " vector=" + $h$$module$src$lib$$($reg$jscomp$1_vector$jscomp$5$$, 2) + " deliverymode=" + $DELIVERY_MODES$$module$src$apic$$[$delivery_mode$jscomp$2$$] + " destmode=" + $DESTINATION_MODES$$module$src$apic$$[$destination_mode$jscomp$3$$] + " is_level=" + $is_level$jscomp$4$$ + " disabled=" + $disabled$$, 524288);
          this.check_irq($irq$jscomp$2$$);
        }
      } else {
        $dbg_log$$module$src$log$$("IOAPIC register write outside of range " + $h$$module$src$lib$$($reg$jscomp$1_vector$jscomp$5$$) + ": " + $h$$module$src$lib$$($value$jscomp$152$$ >>> 0, 8), 524288), $dbg_assert$$module$src$log$$(!1);
      }
    }
  }
};
$IOAPIC$$module$src$ioapic$$.prototype.get_state = function() {
  var $state$jscomp$30$$ = [];
  $state$jscomp$30$$[0] = this.ioredtbl_config;
  $state$jscomp$30$$[1] = this.ioredtbl_destination;
  $state$jscomp$30$$[2] = this.ioregsel;
  $state$jscomp$30$$[3] = this.ioapic_id;
  $state$jscomp$30$$[4] = this.irr;
  $state$jscomp$30$$[5] = this.irq_value;
  return $state$jscomp$30$$;
};
$IOAPIC$$module$src$ioapic$$.prototype.set_state = function($state$jscomp$31$$) {
  this.ioredtbl_config = $state$jscomp$31$$[0];
  this.ioredtbl_destination = $state$jscomp$31$$[1];
  this.ioregsel = $state$jscomp$31$$[2];
  this.ioapic_id = $state$jscomp$31$$[3];
  this.irr = $state$jscomp$31$$[4];
  this.irq_value = $state$jscomp$31$$[5];
};
function $ACPI$$module$src$acpi$$($cpu$jscomp$16$$) {
  this.cpu = $cpu$jscomp$16$$;
  var $io$jscomp$1$$ = $cpu$jscomp$16$$.io;
  $cpu$jscomp$16$$.devices.pci.register_device({pci_id:56, pci_space:[134, 128, 19, 113, 7, 0, 128, 2, 8, 0, 128, 6, 0, 0, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 1, 0, 0, ], pci_bars:[], name:"acpi", });
  this.timer_imprecision_offset = this.timer_last_value = 0;
  this.status = 1;
  this.pm1_enable = this.pm1_status = 0;
  this.last_timer = this.get_timer($v86$$module$src$main$$.microtick());
  this.gpe = new Uint8Array(4);
  $io$jscomp$1$$.register_read(45056, this, void 0, function() {
    $dbg_log$$module$src$log$$("ACPI pm1_status read", 262144);
    return this.pm1_status;
  });
  $io$jscomp$1$$.register_write(45056, this, void 0, function($value$jscomp$153$$) {
    $dbg_log$$module$src$log$$("ACPI pm1_status write: " + $h$$module$src$lib$$($value$jscomp$153$$, 4), 262144);
    this.pm1_status &= ~$value$jscomp$153$$;
  });
  $io$jscomp$1$$.register_read(45058, this, void 0, function() {
    $dbg_log$$module$src$log$$("ACPI pm1_enable read", 262144);
    return this.pm1_enable;
  });
  $io$jscomp$1$$.register_write(45058, this, void 0, function($value$jscomp$154$$) {
    $dbg_log$$module$src$log$$("ACPI pm1_enable write: " + $h$$module$src$lib$$($value$jscomp$154$$), 262144);
    this.pm1_enable = $value$jscomp$154$$;
  });
  $io$jscomp$1$$.register_read(45060, this, void 0, function() {
    $dbg_log$$module$src$log$$("ACPI status read", 262144);
    return this.status;
  });
  $io$jscomp$1$$.register_write(45060, this, void 0, function($value$jscomp$155$$) {
    $dbg_log$$module$src$log$$("ACPI status write: " + $h$$module$src$lib$$($value$jscomp$155$$), 262144);
    this.status = $value$jscomp$155$$;
  });
  $io$jscomp$1$$.register_read(45064, this, void 0, void 0, function() {
    return this.get_timer($v86$$module$src$main$$.microtick()) & 16777215;
  });
  $io$jscomp$1$$.register_read(45024, this, function() {
    $dbg_log$$module$src$log$$("Read gpe#0", 262144);
    return this.gpe[0];
  });
  $io$jscomp$1$$.register_read(45025, this, function() {
    $dbg_log$$module$src$log$$("Read gpe#1", 262144);
    return this.gpe[1];
  });
  $io$jscomp$1$$.register_read(45026, this, function() {
    $dbg_log$$module$src$log$$("Read gpe#2", 262144);
    return this.gpe[2];
  });
  $io$jscomp$1$$.register_read(45027, this, function() {
    $dbg_log$$module$src$log$$("Read gpe#3", 262144);
    return this.gpe[3];
  });
  $io$jscomp$1$$.register_write(45024, this, function($value$jscomp$157$$) {
    $dbg_log$$module$src$log$$("Write gpe#0: " + $h$$module$src$lib$$($value$jscomp$157$$), 262144);
    this.gpe[0] = $value$jscomp$157$$;
  });
  $io$jscomp$1$$.register_write(45025, this, function($value$jscomp$158$$) {
    $dbg_log$$module$src$log$$("Write gpe#1: " + $h$$module$src$lib$$($value$jscomp$158$$), 262144);
    this.gpe[1] = $value$jscomp$158$$;
  });
  $io$jscomp$1$$.register_write(45026, this, function($value$jscomp$159$$) {
    $dbg_log$$module$src$log$$("Write gpe#2: " + $h$$module$src$lib$$($value$jscomp$159$$), 262144);
    this.gpe[2] = $value$jscomp$159$$;
  });
  $io$jscomp$1$$.register_write(45027, this, function($value$jscomp$160$$) {
    $dbg_log$$module$src$log$$("Write gpe#3: " + $h$$module$src$lib$$($value$jscomp$160$$), 262144);
    this.gpe[3] = $value$jscomp$160$$;
  });
}
$ACPI$$module$src$acpi$$.prototype.timer = function($now$jscomp$12_timer$$) {
  $now$jscomp$12_timer$$ = this.get_timer($now$jscomp$12_timer$$);
  var $highest_bit_changed$$ = 0 !== (($now$jscomp$12_timer$$ ^ this.last_timer) & 8388608);
  this.pm1_enable & 1 && $highest_bit_changed$$ ? ($dbg_log$$module$src$log$$("ACPI raise irq", 262144), this.pm1_status |= 1, this.cpu.device_raise_irq(9)) : this.cpu.device_lower_irq(9);
  this.last_timer = $now$jscomp$12_timer$$;
  return 100;
};
$ACPI$$module$src$acpi$$.prototype.get_timer = function($now$jscomp$13_t$jscomp$12$$) {
  $now$jscomp$13_t$jscomp$12$$ = Math.round(3579.545 * $now$jscomp$13_t$jscomp$12$$);
  $now$jscomp$13_t$jscomp$12$$ === this.timer_last_value ? 3579.545 > this.timer_imprecision_offset && this.timer_imprecision_offset++ : ($dbg_assert$$module$src$log$$($now$jscomp$13_t$jscomp$12$$ > this.timer_last_value), this.timer_last_value + this.timer_imprecision_offset <= $now$jscomp$13_t$jscomp$12$$ ? (this.timer_imprecision_offset = 0, this.timer_last_value = $now$jscomp$13_t$jscomp$12$$) : $dbg_log$$module$src$log$$("Warning: Overshot pmtimer, waiting; current=" + $now$jscomp$13_t$jscomp$12$$ + 
  " last=" + this.timer_last_value + " offset=" + this.timer_imprecision_offset, 262144));
  return this.timer_last_value + this.timer_imprecision_offset;
};
$ACPI$$module$src$acpi$$.prototype.get_state = function() {
  var $state$jscomp$32$$ = [];
  $state$jscomp$32$$[0] = this.status;
  $state$jscomp$32$$[1] = this.pm1_status;
  $state$jscomp$32$$[2] = this.pm1_enable;
  $state$jscomp$32$$[3] = this.gpe;
  return $state$jscomp$32$$;
};
$ACPI$$module$src$acpi$$.prototype.set_state = function($state$jscomp$33$$) {
  this.status = $state$jscomp$33$$[0];
  this.pm1_status = $state$jscomp$33$$[1];
  this.pm1_enable = $state$jscomp$33$$[2];
  this.gpe = $state$jscomp$33$$[3];
};
function $UART$$module$src$uart$$($cpu$jscomp$17_io$jscomp$2$$, $port$jscomp$2$$, $bus$jscomp$18$$) {
  this.bus = $bus$jscomp$18$$;
  this.cpu = $cpu$jscomp$17_io$jscomp$2$$;
  this.ints = 4;
  this.line_control = this.baud_rate = 0;
  this.lsr = 96;
  this.ier = this.fifo_control = 0;
  this.iir = 1;
  this.irq = this.scratch_register = this.modem_status = this.modem_control = 0;
  this.input = [];
  this.current_line = "";
  switch($port$jscomp$2$$) {
    case 1016:
      this.com = 0;
      this.irq = 4;
      break;
    case 760:
      this.com = 1;
      this.irq = 3;
      break;
    case 1E3:
      this.com = 2;
      this.irq = 4;
      break;
    case 744:
      this.irq = this.com = 3;
      break;
    default:
      $dbg_log$$module$src$log$$("Invalid serial port: " + $h$$module$src$lib$$($port$jscomp$2$$), 16384), this.com = 0, this.irq = 4;
  }
  this.bus.register("serial" + this.com + "-input", function($data$jscomp$163$$) {
    this.data_received($data$jscomp$163$$);
  }, this);
  this.bus.register("serial" + this.com + "-modem-status-input", function($data$jscomp$164$$) {
    this.set_modem_status($data$jscomp$164$$);
  }, this);
  this.bus.register("serial" + this.com + "-carrier-detect-input", function($data$jscomp$165$$) {
    this.set_modem_status($data$jscomp$165$$ ? this.modem_status | 136 : this.modem_status & -137);
  }, this);
  this.bus.register("serial" + this.com + "-ring-indicator-input", function($data$jscomp$166$$) {
    this.set_modem_status($data$jscomp$166$$ ? this.modem_status | 68 : this.modem_status & -69);
  }, this);
  this.bus.register("serial" + this.com + "-data-set-ready-input", function($data$jscomp$167$$) {
    this.set_modem_status($data$jscomp$167$$ ? this.modem_status | 34 : this.modem_status & -35);
  }, this);
  this.bus.register("serial" + this.com + "-clear-to-send-input", function($data$jscomp$168$$) {
    this.set_modem_status($data$jscomp$168$$ ? this.modem_status | 17 : this.modem_status & -18);
  }, this);
  $cpu$jscomp$17_io$jscomp$2$$ = $cpu$jscomp$17_io$jscomp$2$$.io;
  $cpu$jscomp$17_io$jscomp$2$$.register_write($port$jscomp$2$$, this, function($out_byte$jscomp$1$$) {
    this.write_data($out_byte$jscomp$1$$);
  }, function($out_word$$) {
    this.write_data($out_word$$ & 255);
    this.write_data($out_word$$ >> 8);
  });
  $cpu$jscomp$17_io$jscomp$2$$.register_write($port$jscomp$2$$ | 1, this, function($out_byte$jscomp$2$$) {
    this.line_control & 128 ? (this.baud_rate = this.baud_rate & 255 | $out_byte$jscomp$2$$ << 8, $dbg_log$$module$src$log$$("baud rate: " + $h$$module$src$lib$$(this.baud_rate), 16384)) : (0 === (this.ier & 2) && $out_byte$jscomp$2$$ & 2 && this.ThrowInterrupt(2), this.ier = $out_byte$jscomp$2$$ & 15, $dbg_log$$module$src$log$$("interrupt enable: " + $h$$module$src$lib$$($out_byte$jscomp$2$$), 16384), this.CheckInterrupt());
  });
  $cpu$jscomp$17_io$jscomp$2$$.register_read($port$jscomp$2$$, this, function() {
    if (this.line_control & 128) {
      return this.baud_rate & 255;
    }
    let $data$jscomp$169$$ = 0;
    0 === this.input.length ? $dbg_log$$module$src$log$$("Read input empty", 16384) : ($data$jscomp$169$$ = this.input.shift(), $dbg_log$$module$src$log$$("Read input: " + $h$$module$src$lib$$($data$jscomp$169$$), 16384));
    0 === this.input.length && (this.lsr &= -2, this.ClearInterrupt(12), this.ClearInterrupt(4));
    return $data$jscomp$169$$;
  });
  $cpu$jscomp$17_io$jscomp$2$$.register_read($port$jscomp$2$$ | 1, this, function() {
    return this.line_control & 128 ? this.baud_rate >> 8 : this.ier & 15;
  });
  $cpu$jscomp$17_io$jscomp$2$$.register_read($port$jscomp$2$$ | 2, this, function() {
    var $ret$jscomp$10$$ = this.iir & 15;
    $dbg_log$$module$src$log$$("read interrupt identification: " + $h$$module$src$lib$$(this.iir), 16384);
    2 === this.iir && this.ClearInterrupt(2);
    this.fifo_control & 1 && ($ret$jscomp$10$$ |= 192);
    return $ret$jscomp$10$$;
  });
  $cpu$jscomp$17_io$jscomp$2$$.register_write($port$jscomp$2$$ | 2, this, function($out_byte$jscomp$3$$) {
    $dbg_log$$module$src$log$$("fifo control: " + $h$$module$src$lib$$($out_byte$jscomp$3$$), 16384);
    this.fifo_control = $out_byte$jscomp$3$$;
  });
  $cpu$jscomp$17_io$jscomp$2$$.register_read($port$jscomp$2$$ | 3, this, function() {
    $dbg_log$$module$src$log$$("read line control: " + $h$$module$src$lib$$(this.line_control), 16384);
    return this.line_control;
  });
  $cpu$jscomp$17_io$jscomp$2$$.register_write($port$jscomp$2$$ | 3, this, function($out_byte$jscomp$4$$) {
    $dbg_log$$module$src$log$$("line control: " + $h$$module$src$lib$$($out_byte$jscomp$4$$), 16384);
    this.line_control = $out_byte$jscomp$4$$;
  });
  $cpu$jscomp$17_io$jscomp$2$$.register_read($port$jscomp$2$$ | 4, this, function() {
    return this.modem_control;
  });
  $cpu$jscomp$17_io$jscomp$2$$.register_write($port$jscomp$2$$ | 4, this, function($out_byte$jscomp$5$$) {
    $dbg_log$$module$src$log$$("modem control: " + $h$$module$src$lib$$($out_byte$jscomp$5$$), 16384);
    this.modem_control = $out_byte$jscomp$5$$;
  });
  $cpu$jscomp$17_io$jscomp$2$$.register_read($port$jscomp$2$$ | 5, this, function() {
    $dbg_log$$module$src$log$$("read line status: " + $h$$module$src$lib$$(this.lsr), 16384);
    return this.lsr;
  });
  $cpu$jscomp$17_io$jscomp$2$$.register_write($port$jscomp$2$$ | 5, this, function() {
    $dbg_log$$module$src$log$$("Factory test write", 16384);
  });
  $cpu$jscomp$17_io$jscomp$2$$.register_read($port$jscomp$2$$ | 6, this, function() {
    $dbg_log$$module$src$log$$("read modem status: " + $h$$module$src$lib$$(this.modem_status), 16384);
    return this.modem_status &= 240;
  });
  $cpu$jscomp$17_io$jscomp$2$$.register_write($port$jscomp$2$$ | 6, this, function($out_byte$jscomp$7$$) {
    $dbg_log$$module$src$log$$("write modem status: " + $h$$module$src$lib$$($out_byte$jscomp$7$$), 16384);
    this.set_modem_status($out_byte$jscomp$7$$);
  });
  $cpu$jscomp$17_io$jscomp$2$$.register_read($port$jscomp$2$$ | 7, this, function() {
    return this.scratch_register;
  });
  $cpu$jscomp$17_io$jscomp$2$$.register_write($port$jscomp$2$$ | 7, this, function($out_byte$jscomp$8$$) {
    this.scratch_register = $out_byte$jscomp$8$$;
  });
}
$UART$$module$src$uart$$.prototype.get_state = function() {
  var $state$jscomp$34$$ = [];
  $state$jscomp$34$$[0] = this.ints;
  $state$jscomp$34$$[1] = this.baud_rate;
  $state$jscomp$34$$[2] = this.line_control;
  $state$jscomp$34$$[3] = this.lsr;
  $state$jscomp$34$$[4] = this.fifo_control;
  $state$jscomp$34$$[5] = this.ier;
  $state$jscomp$34$$[6] = this.iir;
  $state$jscomp$34$$[7] = this.modem_control;
  $state$jscomp$34$$[8] = this.modem_status;
  $state$jscomp$34$$[9] = this.scratch_register;
  $state$jscomp$34$$[10] = this.irq;
  return $state$jscomp$34$$;
};
$UART$$module$src$uart$$.prototype.set_state = function($state$jscomp$35$$) {
  this.ints = $state$jscomp$35$$[0];
  this.baud_rate = $state$jscomp$35$$[1];
  this.line_control = $state$jscomp$35$$[2];
  this.lsr = $state$jscomp$35$$[3];
  this.fifo_control = $state$jscomp$35$$[4];
  this.ier = $state$jscomp$35$$[5];
  this.iir = $state$jscomp$35$$[6];
  this.modem_control = $state$jscomp$35$$[7];
  this.modem_status = $state$jscomp$35$$[8];
  this.scratch_register = $state$jscomp$35$$[9];
  this.irq = $state$jscomp$35$$[10];
};
$UART$$module$src$uart$$.prototype.CheckInterrupt = function() {
  this.ints & 4096 && this.ier & 1 ? (this.iir = 12, this.cpu.device_raise_irq(this.irq)) : this.ints & 16 && this.ier & 1 ? (this.iir = 4, this.cpu.device_raise_irq(this.irq)) : this.ints & 4 && this.ier & 2 ? (this.iir = 2, this.cpu.device_raise_irq(this.irq)) : this.ints & 1 && this.ier & 8 ? (this.iir = 0, this.cpu.device_raise_irq(this.irq)) : (this.iir = 1, this.cpu.device_lower_irq(this.irq));
};
$UART$$module$src$uart$$.prototype.ThrowInterrupt = function($line$jscomp$5$$) {
  this.ints |= 1 << $line$jscomp$5$$;
  this.CheckInterrupt();
};
$UART$$module$src$uart$$.prototype.ClearInterrupt = function($line$jscomp$6$$) {
  this.ints &= ~(1 << $line$jscomp$6$$);
  this.CheckInterrupt();
};
$UART$$module$src$uart$$.prototype.data_received = function($data$jscomp$170$$) {
  $dbg_log$$module$src$log$$("input: " + $h$$module$src$lib$$($data$jscomp$170$$), 16384);
  this.input.push($data$jscomp$170$$);
  this.lsr |= 1;
  this.fifo_control & 1 ? this.ThrowInterrupt(12) : this.ThrowInterrupt(4);
};
$UART$$module$src$uart$$.prototype.write_data = function($char$jscomp$1_line$jscomp$7_out_byte$jscomp$9$$) {
  this.line_control & 128 ? this.baud_rate = this.baud_rate & -256 | $char$jscomp$1_line$jscomp$7_out_byte$jscomp$9$$ : ($dbg_log$$module$src$log$$("data: " + $h$$module$src$lib$$($char$jscomp$1_line$jscomp$7_out_byte$jscomp$9$$), 16384), this.ThrowInterrupt(2), this.bus.send("serial" + this.com + "-output-byte", $char$jscomp$1_line$jscomp$7_out_byte$jscomp$9$$), $char$jscomp$1_line$jscomp$7_out_byte$jscomp$9$$ = String.fromCharCode($char$jscomp$1_line$jscomp$7_out_byte$jscomp$9$$), this.current_line += 
  $char$jscomp$1_line$jscomp$7_out_byte$jscomp$9$$, "\n" === $char$jscomp$1_line$jscomp$7_out_byte$jscomp$9$$ && ($char$jscomp$1_line$jscomp$7_out_byte$jscomp$9$$ = this.current_line.trimRight().replace(/[\x00-\x08\x0b-\x1f\x7f\x80-\xff]/g, ""), $dbg_log$$module$src$log$$("SERIAL: " + $char$jscomp$1_line$jscomp$7_out_byte$jscomp$9$$), this.current_line = ""));
};
$UART$$module$src$uart$$.prototype.set_modem_status = function($status$jscomp$10$$) {
  $dbg_log$$module$src$log$$("modem status: " + $h$$module$src$lib$$($status$jscomp$10$$), 16384);
  const $prev_delta_bits$$ = this.modem_status & 15;
  let $delta$jscomp$4$$ = (this.modem_status ^ $status$jscomp$10$$) >> 4;
  this.modem_status = $status$jscomp$10$$;
  this.modem_status = this.modem_status | $delta$jscomp$4$$ | $prev_delta_bits$$;
};
function $PCI$$module$src$pci$$($cpu$jscomp$18$$) {
  this.pci_addr = new Uint8Array(4);
  this.pci_value = new Uint8Array(4);
  this.pci_response = new Uint8Array(4);
  this.pci_status = new Uint8Array(4);
  this.pci_addr32 = new Int32Array(this.pci_addr.buffer);
  this.pci_value32 = new Int32Array(this.pci_value.buffer);
  this.pci_response32 = new Int32Array(this.pci_response.buffer);
  this.pci_status32 = new Int32Array(this.pci_status.buffer);
  this.device_spaces = [];
  this.devices = [];
  this.cpu = $cpu$jscomp$18$$;
  for (var $i$jscomp$78$$ = 0; 256 > $i$jscomp$78$$; $i$jscomp$78$$++) {
    this.device_spaces[$i$jscomp$78$$] = void 0, this.devices[$i$jscomp$78$$] = void 0;
  }
  this.io = $cpu$jscomp$18$$.io;
  $cpu$jscomp$18$$.io.register_write(3324, this, function($value$jscomp$161$$) {
    this.pci_write8(this.pci_addr32[0], $value$jscomp$161$$);
  }, function($value$jscomp$162$$) {
    this.pci_write16(this.pci_addr32[0], $value$jscomp$162$$);
  }, function($value$jscomp$163$$) {
    this.pci_write32(this.pci_addr32[0], $value$jscomp$163$$);
  });
  $cpu$jscomp$18$$.io.register_write(3325, this, function($value$jscomp$164$$) {
    this.pci_write8(this.pci_addr32[0] + 1 | 0, $value$jscomp$164$$);
  });
  $cpu$jscomp$18$$.io.register_write(3326, this, function($value$jscomp$165$$) {
    this.pci_write8(this.pci_addr32[0] + 2 | 0, $value$jscomp$165$$);
  }, function($value$jscomp$166$$) {
    this.pci_write16(this.pci_addr32[0] + 2 | 0, $value$jscomp$166$$);
  });
  $cpu$jscomp$18$$.io.register_write(3327, this, function($value$jscomp$167$$) {
    this.pci_write8(this.pci_addr32[0] + 3 | 0, $value$jscomp$167$$);
  });
  $cpu$jscomp$18$$.io.register_read_consecutive(3324, this, function() {
    return this.pci_response[0];
  }, function() {
    return this.pci_response[1];
  }, function() {
    return this.pci_response[2];
  }, function() {
    return this.pci_response[3];
  });
  $cpu$jscomp$18$$.io.register_read_consecutive(3320, this, function() {
    return this.pci_status[0];
  }, function() {
    return this.pci_status[1];
  }, function() {
    return this.pci_status[2];
  }, function() {
    return this.pci_status[3];
  });
  $cpu$jscomp$18$$.io.register_write_consecutive(3320, this, function($out_byte$jscomp$10$$) {
    this.pci_addr[0] = $out_byte$jscomp$10$$ & 252;
  }, function($out_byte$jscomp$11$$) {
    2 === (this.pci_addr[1] & 6) && 6 === ($out_byte$jscomp$11$$ & 6) ? ($dbg_log$$module$src$log$$("CPU reboot via PCI"), $cpu$jscomp$18$$.reboot_internal()) : this.pci_addr[1] = $out_byte$jscomp$11$$;
  }, function($out_byte$jscomp$12$$) {
    this.pci_addr[2] = $out_byte$jscomp$12$$;
  }, function($out_byte$jscomp$13$$) {
    this.pci_addr[3] = $out_byte$jscomp$13$$;
    this.pci_query();
  });
  this.register_device({pci_id:0, pci_space:[134, 128, 55, 18, 0, 0, 0, 0, 2, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, ], pci_bars:[], name:"82441FX PMC", });
  this.isa_bridge = {pci_id:8, pci_space:[134, 128, 0, 112, 7, 0, 0, 2, 0, 0, 1, 6, 0, 0, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ], pci_bars:[], name:"82371SB PIIX3 ISA", };
  this.isa_bridge_space = this.register_device(this.isa_bridge);
  this.isa_bridge_space8 = new Uint8Array(this.isa_bridge_space.buffer);
}
$PCI$$module$src$pci$$.prototype.get_state = function() {
  for (var $state$jscomp$36$$ = [], $i$jscomp$79$$ = 0; 256 > $i$jscomp$79$$; $i$jscomp$79$$++) {
    $state$jscomp$36$$[$i$jscomp$79$$] = this.device_spaces[$i$jscomp$79$$];
  }
  $state$jscomp$36$$[256] = this.pci_addr;
  $state$jscomp$36$$[257] = this.pci_value;
  $state$jscomp$36$$[258] = this.pci_response;
  $state$jscomp$36$$[259] = this.pci_status;
  return $state$jscomp$36$$;
};
$PCI$$module$src$pci$$.prototype.set_state = function($state$jscomp$37$$) {
  for (var $i$jscomp$80$$ = 0; 256 > $i$jscomp$80$$; $i$jscomp$80$$++) {
    var $device$jscomp$4$$ = this.devices[$i$jscomp$80$$], $space$$ = $state$jscomp$37$$[$i$jscomp$80$$];
    if ($device$jscomp$4$$ && $space$$) {
      for (var $bar_nr$$ = 0; $bar_nr$$ < $device$jscomp$4$$.pci_bars.length; $bar_nr$$++) {
        var $value$jscomp$168$$ = $space$$[4 + $bar_nr$$];
        if ($value$jscomp$168$$ & 1) {
          var $bar$$ = $device$jscomp$4$$.pci_bars[$bar_nr$$];
          this.set_io_bars($bar$$, $bar$$.original_bar & 65534, $value$jscomp$168$$ & 65534);
        }
      }
      this.device_spaces[$i$jscomp$80$$].set($space$$);
    } else {
      $device$jscomp$4$$ && $dbg_log$$module$src$log$$("Warning: While restoring PCI device: Device exists in current configuration but not in snapshot (" + $device$jscomp$4$$.name + ")"), $space$$ && $dbg_log$$module$src$log$$("Warning: While restoring PCI device: Device doesn't exist in current configuration but does in snapshot (device " + $h$$module$src$lib$$($i$jscomp$80$$, 2) + ")");
    }
  }
  this.pci_addr.set($state$jscomp$37$$[256]);
  this.pci_value.set($state$jscomp$37$$[257]);
  this.pci_response.set($state$jscomp$37$$[258]);
  this.pci_status.set($state$jscomp$37$$[259]);
};
$PCI$$module$src$pci$$.prototype.pci_query = function() {
  var $bdf$$ = this.pci_addr[2] << 8 | this.pci_addr[1], $addr$jscomp$35$$ = this.pci_addr[0] & 252, $dev_device$jscomp$5$$ = $bdf$$ >> 3 & 31;
  var $dbg_line$$ = "query enabled=" + (this.pci_addr[3] >> 7) + (" bdf=" + $h$$module$src$lib$$($bdf$$, 4));
  $dbg_line$$ += " dev=" + $h$$module$src$lib$$($dev_device$jscomp$5$$, 2);
  $dbg_line$$ += " addr=" + $h$$module$src$lib$$($addr$jscomp$35$$, 2);
  $dev_device$jscomp$5$$ = this.device_spaces[$bdf$$];
  void 0 !== $dev_device$jscomp$5$$ ? (this.pci_status32[0] = -2147483648, this.pci_response32[0] = $addr$jscomp$35$$ < $dev_device$jscomp$5$$.byteLength ? $dev_device$jscomp$5$$[$addr$jscomp$35$$ >> 2] : 0, $dbg_line$$ += " " + $h$$module$src$lib$$(this.pci_addr32[0] >>> 0, 8) + " -> " + $h$$module$src$lib$$(this.pci_response32[0] >>> 0, 8), $addr$jscomp$35$$ >= $dev_device$jscomp$5$$.byteLength && ($dbg_line$$ += " (undef)"), $dbg_line$$ += " (" + this.devices[$bdf$$].name + ")", $dbg_log$$module$src$log$$($dbg_line$$, 
  2048)) : (this.pci_response32[0] = -1, this.pci_status32[0] = 0);
};
$PCI$$module$src$pci$$.prototype.pci_write8 = function($addr$jscomp$36_address$jscomp$19$$, $written$$) {
  var $bdf$jscomp$1$$ = $addr$jscomp$36_address$jscomp$19$$ >> 8 & 65535;
  $addr$jscomp$36_address$jscomp$19$$ &= 255;
  var $space$jscomp$1$$ = new Uint8Array(this.device_spaces[$bdf$jscomp$1$$].buffer), $device$jscomp$6$$ = this.devices[$bdf$jscomp$1$$];
  $space$jscomp$1$$ && ($dbg_assert$$module$src$log$$(!(16 <= $addr$jscomp$36_address$jscomp$19$$ && 44 > $addr$jscomp$36_address$jscomp$19$$ || 48 <= $addr$jscomp$36_address$jscomp$19$$ && 52 > $addr$jscomp$36_address$jscomp$19$$), "PCI: Expected 32-bit write, got 8-bit (addr: " + $h$$module$src$lib$$($addr$jscomp$36_address$jscomp$19$$) + ")"), $dbg_log$$module$src$log$$("PCI write8 dev=" + $h$$module$src$lib$$($bdf$jscomp$1$$ >> 3, 2) + " (" + $device$jscomp$6$$.name + ") addr=" + $h$$module$src$lib$$($addr$jscomp$36_address$jscomp$19$$, 
  4) + " value=" + $h$$module$src$lib$$($written$$, 2), 2048), $space$jscomp$1$$[$addr$jscomp$36_address$jscomp$19$$] = $written$$);
};
$PCI$$module$src$pci$$.prototype.pci_write16 = function($addr$jscomp$37_address$jscomp$20$$, $written$jscomp$1$$) {
  $dbg_assert$$module$src$log$$(0 === ($addr$jscomp$37_address$jscomp$20$$ & 1));
  var $bdf$jscomp$2$$ = $addr$jscomp$37_address$jscomp$20$$ >> 8 & 65535;
  $addr$jscomp$37_address$jscomp$20$$ &= 255;
  var $space$jscomp$2$$ = new Uint16Array(this.device_spaces[$bdf$jscomp$2$$].buffer), $device$jscomp$7$$ = this.devices[$bdf$jscomp$2$$];
  $space$jscomp$2$$ && (16 <= $addr$jscomp$37_address$jscomp$20$$ && 44 > $addr$jscomp$37_address$jscomp$20$$ ? $dbg_log$$module$src$log$$("Warning: PCI: Expected 32-bit write, got 16-bit (addr: " + $h$$module$src$lib$$($addr$jscomp$37_address$jscomp$20$$) + ")") : ($dbg_assert$$module$src$log$$(!(48 <= $addr$jscomp$37_address$jscomp$20$$ && 52 > $addr$jscomp$37_address$jscomp$20$$), "PCI: Expected 32-bit write, got 16-bit (addr: " + $h$$module$src$lib$$($addr$jscomp$37_address$jscomp$20$$) + ")"), 
  $dbg_log$$module$src$log$$("PCI writ16 dev=" + $h$$module$src$lib$$($bdf$jscomp$2$$ >> 3, 2) + " (" + $device$jscomp$7$$.name + ") addr=" + $h$$module$src$lib$$($addr$jscomp$37_address$jscomp$20$$, 4) + " value=" + $h$$module$src$lib$$($written$jscomp$1$$, 4), 2048), $space$jscomp$2$$[$addr$jscomp$37_address$jscomp$20$$ >>> 1] = $written$jscomp$1$$));
};
$PCI$$module$src$pci$$.prototype.pci_write32 = function($addr$jscomp$38_address$jscomp$21$$, $written$jscomp$2$$) {
  $dbg_assert$$module$src$log$$(0 === ($addr$jscomp$38_address$jscomp$21$$ & 3));
  var $bdf$jscomp$3_space_addr$$ = $addr$jscomp$38_address$jscomp$21$$ >> 8 & 65535;
  $addr$jscomp$38_address$jscomp$21$$ &= 255;
  var $space$jscomp$3$$ = this.device_spaces[$bdf$jscomp$3_space_addr$$], $device$jscomp$8_from$jscomp$1_type$jscomp$153$$ = this.devices[$bdf$jscomp$3_space_addr$$];
  if ($space$jscomp$3$$) {
    if (16 <= $addr$jscomp$38_address$jscomp$21$$ && 40 > $addr$jscomp$38_address$jscomp$21$$) {
      var $bar_nr$jscomp$1_original_bar_to$jscomp$1$$ = $addr$jscomp$38_address$jscomp$21$$ - 16 >> 2, $bar$jscomp$1$$ = $device$jscomp$8_from$jscomp$1_type$jscomp$153$$.pci_bars[$bar_nr$jscomp$1_original_bar_to$jscomp$1$$];
      $dbg_log$$module$src$log$$("BAR" + $bar_nr$jscomp$1_original_bar_to$jscomp$1$$ + " exists=" + ($bar$jscomp$1$$ ? "y" : "n") + " changed from " + $h$$module$src$lib$$($space$jscomp$3$$[$addr$jscomp$38_address$jscomp$21$$ >> 2]) + " to " + $h$$module$src$lib$$($written$jscomp$2$$ >>> 0) + " dev=" + $h$$module$src$lib$$($bdf$jscomp$3_space_addr$$ >> 3, 2) + " (" + $device$jscomp$8_from$jscomp$1_type$jscomp$153$$.name + ") ", 2048);
      $bar$jscomp$1$$ ? ($dbg_assert$$module$src$log$$(!($bar$jscomp$1$$.size & $bar$jscomp$1$$.size - 1), "bar size should be power of 2"), $bdf$jscomp$3_space_addr$$ = $addr$jscomp$38_address$jscomp$21$$ >> 2, $device$jscomp$8_from$jscomp$1_type$jscomp$153$$ = $space$jscomp$3$$[$bdf$jscomp$3_space_addr$$] & 1, -1 === ($written$jscomp$2$$ | 3 | $bar$jscomp$1$$.size - 1) ? ($written$jscomp$2$$ = ~($bar$jscomp$1$$.size - 1) | $device$jscomp$8_from$jscomp$1_type$jscomp$153$$, 0 === $device$jscomp$8_from$jscomp$1_type$jscomp$153$$ && 
      ($space$jscomp$3$$[$bdf$jscomp$3_space_addr$$] = $written$jscomp$2$$)) : 0 === $device$jscomp$8_from$jscomp$1_type$jscomp$153$$ && ($bar_nr$jscomp$1_original_bar_to$jscomp$1$$ = $bar$jscomp$1$$.original_bar, ($written$jscomp$2$$ & -16) !== ($bar_nr$jscomp$1_original_bar_to$jscomp$1$$ & -16) && $dbg_log$$module$src$log$$("Warning: Changing memory bar not supported, ignored", 2048), $space$jscomp$3$$[$bdf$jscomp$3_space_addr$$] = $bar_nr$jscomp$1_original_bar_to$jscomp$1$$), 1 === $device$jscomp$8_from$jscomp$1_type$jscomp$153$$ && 
      ($dbg_assert$$module$src$log$$(1 === $device$jscomp$8_from$jscomp$1_type$jscomp$153$$), $device$jscomp$8_from$jscomp$1_type$jscomp$153$$ = $space$jscomp$3$$[$bdf$jscomp$3_space_addr$$] & 65534, $bar_nr$jscomp$1_original_bar_to$jscomp$1$$ = $written$jscomp$2$$ & 65534, $dbg_log$$module$src$log$$("io bar changed from " + $h$$module$src$lib$$($device$jscomp$8_from$jscomp$1_type$jscomp$153$$ >>> 0, 8) + " to " + $h$$module$src$lib$$($bar_nr$jscomp$1_original_bar_to$jscomp$1$$ >>> 0, 8) + " size=" + 
      $bar$jscomp$1$$.size, 2048), this.set_io_bars($bar$jscomp$1$$, $device$jscomp$8_from$jscomp$1_type$jscomp$153$$, $bar_nr$jscomp$1_original_bar_to$jscomp$1$$), $space$jscomp$3$$[$bdf$jscomp$3_space_addr$$] = $written$jscomp$2$$ | 1)) : $space$jscomp$3$$[$addr$jscomp$38_address$jscomp$21$$ >> 2] = 0;
      $dbg_log$$module$src$log$$("BAR effective value: " + $h$$module$src$lib$$($space$jscomp$3$$[$addr$jscomp$38_address$jscomp$21$$ >> 2] >>> 0), 2048);
    } else {
      48 === $addr$jscomp$38_address$jscomp$21$$ ? ($dbg_log$$module$src$log$$("PCI write rom address dev=" + $h$$module$src$lib$$($bdf$jscomp$3_space_addr$$ >> 3, 2) + " (" + $device$jscomp$8_from$jscomp$1_type$jscomp$153$$.name + ") value=" + $h$$module$src$lib$$($written$jscomp$2$$ >>> 0, 8), 2048), $space$jscomp$3$$[$addr$jscomp$38_address$jscomp$21$$ >> 2] = $device$jscomp$8_from$jscomp$1_type$jscomp$153$$.pci_rom_size ? -1 === ($written$jscomp$2$$ | 2047) ? -$device$jscomp$8_from$jscomp$1_type$jscomp$153$$.pci_rom_size | 
      0 : $device$jscomp$8_from$jscomp$1_type$jscomp$153$$.pci_rom_address | 0 : 0) : 4 === $addr$jscomp$38_address$jscomp$21$$ ? $dbg_log$$module$src$log$$("PCI write dev=" + $h$$module$src$lib$$($bdf$jscomp$3_space_addr$$ >> 3, 2) + " (" + $device$jscomp$8_from$jscomp$1_type$jscomp$153$$.name + ") addr=" + $h$$module$src$lib$$($addr$jscomp$38_address$jscomp$21$$, 4) + " value=" + $h$$module$src$lib$$($written$jscomp$2$$ >>> 0, 8), 2048) : ($dbg_log$$module$src$log$$("PCI write dev=" + $h$$module$src$lib$$($bdf$jscomp$3_space_addr$$ >> 
      3, 2) + " (" + $device$jscomp$8_from$jscomp$1_type$jscomp$153$$.name + ") addr=" + $h$$module$src$lib$$($addr$jscomp$38_address$jscomp$21$$, 4) + " value=" + $h$$module$src$lib$$($written$jscomp$2$$ >>> 0, 8), 2048), $space$jscomp$3$$[$addr$jscomp$38_address$jscomp$21$$ >>> 2] = $written$jscomp$2$$);
    }
  }
};
$PCI$$module$src$pci$$.prototype.register_device = function($device$jscomp$9$$) {
  $dbg_assert$$module$src$log$$(void 0 !== $device$jscomp$9$$.pci_id);
  $dbg_assert$$module$src$log$$(void 0 !== $device$jscomp$9$$.pci_space);
  $dbg_assert$$module$src$log$$(void 0 !== $device$jscomp$9$$.pci_bars);
  var $bar_space_device_id$$ = $device$jscomp$9$$.pci_id;
  $dbg_log$$module$src$log$$("PCI register bdf=" + $h$$module$src$lib$$($bar_space_device_id$$) + " (" + $device$jscomp$9$$.name + ")", 2048);
  this.devices[$bar_space_device_id$$] && $dbg_log$$module$src$log$$("warning: overwriting device " + this.devices[$bar_space_device_id$$].name + " with " + $device$jscomp$9$$.name, 2048);
  $dbg_assert$$module$src$log$$(64 <= $device$jscomp$9$$.pci_space.length);
  $dbg_assert$$module$src$log$$($bar_space_device_id$$ < this.devices.length);
  var $space$jscomp$4$$ = new Int32Array(64);
  $space$jscomp$4$$.set(new Int32Array((new Uint8Array($device$jscomp$9$$.pci_space)).buffer));
  this.device_spaces[$bar_space_device_id$$] = $space$jscomp$4$$;
  this.devices[$bar_space_device_id$$] = $device$jscomp$9$$;
  $bar_space_device_id$$ = $space$jscomp$4$$.slice(4, 10);
  for (var $i$jscomp$81$$ = 0; $i$jscomp$81$$ < $device$jscomp$9$$.pci_bars.length; $i$jscomp$81$$++) {
    var $bar$jscomp$2$$ = $device$jscomp$9$$.pci_bars[$i$jscomp$81$$];
    if ($bar$jscomp$2$$) {
      var $bar_base_port$jscomp$3$$ = $bar_space_device_id$$[$i$jscomp$81$$], $j$jscomp$8_type$jscomp$154$$ = $bar_base_port$jscomp$3$$ & 1;
      $dbg_log$$module$src$log$$("device " + $device$jscomp$9$$.name + " register bar of size " + $bar$jscomp$2$$.size + " at " + $h$$module$src$lib$$($bar_base_port$jscomp$3$$), 2048);
      $bar$jscomp$2$$.original_bar = $bar_base_port$jscomp$3$$;
      $bar$jscomp$2$$.entries = [];
      if (0 !== $j$jscomp$8_type$jscomp$154$$) {
        for ($dbg_assert$$module$src$log$$(1 === $j$jscomp$8_type$jscomp$154$$), $bar_base_port$jscomp$3$$ &= -2, $j$jscomp$8_type$jscomp$154$$ = 0; $j$jscomp$8_type$jscomp$154$$ < $bar$jscomp$2$$.size; $j$jscomp$8_type$jscomp$154$$++) {
          $bar$jscomp$2$$.entries[$j$jscomp$8_type$jscomp$154$$] = this.io.ports[$bar_base_port$jscomp$3$$ + $j$jscomp$8_type$jscomp$154$$];
        }
      }
    }
  }
  return $space$jscomp$4$$;
};
$PCI$$module$src$pci$$.prototype.set_io_bars = function($bar$jscomp$3$$, $from$jscomp$2$$, $to$jscomp$2$$) {
  var $count$jscomp$55$$ = $bar$jscomp$3$$.size;
  $dbg_log$$module$src$log$$("Move io bars: from=" + $h$$module$src$lib$$($from$jscomp$2$$) + " to=" + $h$$module$src$lib$$($to$jscomp$2$$) + " count=" + $count$jscomp$55$$, 2048);
  for (var $ports$$ = this.io.ports, $i$jscomp$82$$ = 0; $i$jscomp$82$$ < $count$jscomp$55$$; $i$jscomp$82$$++) {
    4096 <= $from$jscomp$2$$ + $i$jscomp$82$$ && ($ports$$[$from$jscomp$2$$ + $i$jscomp$82$$] = this.io.create_empty_entry());
    var $entry$jscomp$7$$ = $bar$jscomp$3$$.entries[$i$jscomp$82$$], $empty_entry$$ = $ports$$[$to$jscomp$2$$ + $i$jscomp$82$$];
    $dbg_assert$$module$src$log$$($entry$jscomp$7$$ && $empty_entry$$);
    4096 <= $to$jscomp$2$$ + $i$jscomp$82$$ && ($ports$$[$to$jscomp$2$$ + $i$jscomp$82$$] = $entry$jscomp$7$$);
  }
};
$PCI$$module$src$pci$$.prototype.raise_irq = function($pci_id$$) {
  var $space$jscomp$5$$ = this.device_spaces[$pci_id$$];
  $dbg_assert$$module$src$log$$($space$jscomp$5$$);
  this.cpu.device_raise_irq(this.isa_bridge_space8[96 + (($space$jscomp$5$$[15] >> 8 & 255) - 1 + (($pci_id$$ >> 3) - 1 & 255) & 3)]);
};
$PCI$$module$src$pci$$.prototype.lower_irq = function($pci_id$jscomp$1$$) {
  var $space$jscomp$6$$ = this.device_spaces[$pci_id$jscomp$1$$];
  $dbg_assert$$module$src$log$$($space$jscomp$6$$);
  this.cpu.device_lower_irq(this.isa_bridge_space8[96 + (($space$jscomp$6$$[15] >> 8 & 255) + ($pci_id$jscomp$1$$ >> 3 & 255) - 2 & 3)]);
};
function $translate_mac_address$$module$src$ne2k$$($arp_packet_ipv4_packet_packet$jscomp$16_udp_packet$$, $search_mac$$, $replacement_mac$$) {
  $arp_packet_ipv4_packet_packet$jscomp$16_udp_packet$$[0] === $search_mac$$[0] && $arp_packet_ipv4_packet_packet$jscomp$16_udp_packet$$[1] === $search_mac$$[1] && $arp_packet_ipv4_packet_packet$jscomp$16_udp_packet$$[2] === $search_mac$$[2] && $arp_packet_ipv4_packet_packet$jscomp$16_udp_packet$$[3] === $search_mac$$[3] && $arp_packet_ipv4_packet_packet$jscomp$16_udp_packet$$[4] === $search_mac$$[4] && $arp_packet_ipv4_packet_packet$jscomp$16_udp_packet$$[5] === $search_mac$$[5] && ($dbg_log$$module$src$log$$("Replace mac in eth destination field", 
  1048576), $arp_packet_ipv4_packet_packet$jscomp$16_udp_packet$$[0] = $replacement_mac$$[0], $arp_packet_ipv4_packet_packet$jscomp$16_udp_packet$$[1] = $replacement_mac$$[1], $arp_packet_ipv4_packet_packet$jscomp$16_udp_packet$$[2] = $replacement_mac$$[2], $arp_packet_ipv4_packet_packet$jscomp$16_udp_packet$$[3] = $replacement_mac$$[3], $arp_packet_ipv4_packet_packet$jscomp$16_udp_packet$$[4] = $replacement_mac$$[4], $arp_packet_ipv4_packet_packet$jscomp$16_udp_packet$$[5] = $replacement_mac$$[5]);
  $arp_packet_ipv4_packet_packet$jscomp$16_udp_packet$$[6] === $search_mac$$[0] && $arp_packet_ipv4_packet_packet$jscomp$16_udp_packet$$[7] === $search_mac$$[1] && $arp_packet_ipv4_packet_packet$jscomp$16_udp_packet$$[8] === $search_mac$$[2] && $arp_packet_ipv4_packet_packet$jscomp$16_udp_packet$$[9] === $search_mac$$[3] && $arp_packet_ipv4_packet_packet$jscomp$16_udp_packet$$[10] === $search_mac$$[4] && $arp_packet_ipv4_packet_packet$jscomp$16_udp_packet$$[11] === $search_mac$$[5] && ($dbg_log$$module$src$log$$("Replace mac in eth source field", 
  1048576), $arp_packet_ipv4_packet_packet$jscomp$16_udp_packet$$[6] = $replacement_mac$$[0], $arp_packet_ipv4_packet_packet$jscomp$16_udp_packet$$[7] = $replacement_mac$$[1], $arp_packet_ipv4_packet_packet$jscomp$16_udp_packet$$[8] = $replacement_mac$$[2], $arp_packet_ipv4_packet_packet$jscomp$16_udp_packet$$[9] = $replacement_mac$$[3], $arp_packet_ipv4_packet_packet$jscomp$16_udp_packet$$[10] = $replacement_mac$$[4], $arp_packet_ipv4_packet_packet$jscomp$16_udp_packet$$[11] = $replacement_mac$$[5]);
  var $dhcp_packet_ethertype$jscomp$1_ipv4_version_source_port$$ = $arp_packet_ipv4_packet_packet$jscomp$16_udp_packet$$[12] << 8 | $arp_packet_ipv4_packet_packet$jscomp$16_udp_packet$$[13];
  if (2048 === $dhcp_packet_ethertype$jscomp$1_ipv4_version_source_port$$) {
    if ($arp_packet_ipv4_packet_packet$jscomp$16_udp_packet$$ = $arp_packet_ipv4_packet_packet$jscomp$16_udp_packet$$.subarray(14), $dhcp_packet_ethertype$jscomp$1_ipv4_version_source_port$$ = $arp_packet_ipv4_packet_packet$jscomp$16_udp_packet$$[0] >> 4, 4 !== $dhcp_packet_ethertype$jscomp$1_ipv4_version_source_port$$) {
      $dbg_log$$module$src$log$$("Expected ipv4.version==4 but got: " + $dhcp_packet_ethertype$jscomp$1_ipv4_version_source_port$$, 1048576);
    } else {
      if ($dbg_assert$$module$src$log$$(5 === ($arp_packet_ipv4_packet_packet$jscomp$16_udp_packet$$[0] & 15), "TODO: ihl!=5"), 17 === $arp_packet_ipv4_packet_packet$jscomp$16_udp_packet$$[9] && ($arp_packet_ipv4_packet_packet$jscomp$16_udp_packet$$ = $arp_packet_ipv4_packet_packet$jscomp$16_udp_packet$$.subarray(20), $dhcp_packet_ethertype$jscomp$1_ipv4_version_source_port$$ = $arp_packet_ipv4_packet_packet$jscomp$16_udp_packet$$[0] << 8 | $arp_packet_ipv4_packet_packet$jscomp$16_udp_packet$$[1], 
      $destination_port_dhcp_magic_offset$jscomp$64$$ = $arp_packet_ipv4_packet_packet$jscomp$16_udp_packet$$[2] << 8 | $arp_packet_ipv4_packet_packet$jscomp$16_udp_packet$$[3], $dbg_log$$module$src$log$$("udp srcport=" + $dhcp_packet_ethertype$jscomp$1_ipv4_version_source_port$$ + " dstport=" + $destination_port_dhcp_magic_offset$jscomp$64$$ + " checksum=" + $h$$module$src$lib$$($arp_packet_ipv4_packet_packet$jscomp$16_udp_packet$$[6] << 8 | $arp_packet_ipv4_packet_packet$jscomp$16_udp_packet$$[7], 
      4), 1048576), 67 === $dhcp_packet_ethertype$jscomp$1_ipv4_version_source_port$$ || 67 === $destination_port_dhcp_magic_offset$jscomp$64$$)) {
        if ($dhcp_packet_ethertype$jscomp$1_ipv4_version_source_port$$ = $arp_packet_ipv4_packet_packet$jscomp$16_udp_packet$$.subarray(8), $destination_port_dhcp_magic_offset$jscomp$64$$ = $dhcp_packet_ethertype$jscomp$1_ipv4_version_source_port$$[236] << 24 | $dhcp_packet_ethertype$jscomp$1_ipv4_version_source_port$$[237] << 16 | $dhcp_packet_ethertype$jscomp$1_ipv4_version_source_port$$[238] << 8 | $dhcp_packet_ethertype$jscomp$1_ipv4_version_source_port$$[239], 1669485411 !== $destination_port_dhcp_magic_offset$jscomp$64$$) {
          $dbg_log$$module$src$log$$("dhcp packet didn't match magic: " + $h$$module$src$lib$$($destination_port_dhcp_magic_offset$jscomp$64$$, 8));
        } else {
          $dhcp_packet_ethertype$jscomp$1_ipv4_version_source_port$$[28] === $search_mac$$[0] && $dhcp_packet_ethertype$jscomp$1_ipv4_version_source_port$$[29] === $search_mac$$[1] && $dhcp_packet_ethertype$jscomp$1_ipv4_version_source_port$$[30] === $search_mac$$[2] && $dhcp_packet_ethertype$jscomp$1_ipv4_version_source_port$$[31] === $search_mac$$[3] && $dhcp_packet_ethertype$jscomp$1_ipv4_version_source_port$$[32] === $search_mac$$[4] && $dhcp_packet_ethertype$jscomp$1_ipv4_version_source_port$$[33] === 
          $search_mac$$[5] && ($dbg_log$$module$src$log$$("Replace mac in dhcp.chaddr", 1048576), $dhcp_packet_ethertype$jscomp$1_ipv4_version_source_port$$[28] = $replacement_mac$$[0], $dhcp_packet_ethertype$jscomp$1_ipv4_version_source_port$$[29] = $replacement_mac$$[1], $dhcp_packet_ethertype$jscomp$1_ipv4_version_source_port$$[30] = $replacement_mac$$[2], $dhcp_packet_ethertype$jscomp$1_ipv4_version_source_port$$[31] = $replacement_mac$$[3], $dhcp_packet_ethertype$jscomp$1_ipv4_version_source_port$$[32] = 
          $replacement_mac$$[4], $dhcp_packet_ethertype$jscomp$1_ipv4_version_source_port$$[33] = $replacement_mac$$[5], $arp_packet_ipv4_packet_packet$jscomp$16_udp_packet$$[6] = $arp_packet_ipv4_packet_packet$jscomp$16_udp_packet$$[7] = 0);
          for (var $destination_port_dhcp_magic_offset$jscomp$64$$ = 240; $destination_port_dhcp_magic_offset$jscomp$64$$ < $dhcp_packet_ethertype$jscomp$1_ipv4_version_source_port$$.length;) {
            const $dhcp_option_type$$ = $dhcp_packet_ethertype$jscomp$1_ipv4_version_source_port$$[$destination_port_dhcp_magic_offset$jscomp$64$$++];
            if (255 === $dhcp_option_type$$) {
              break;
            }
            const $length$jscomp$25$$ = $dhcp_packet_ethertype$jscomp$1_ipv4_version_source_port$$[$destination_port_dhcp_magic_offset$jscomp$64$$++];
            61 === $dhcp_option_type$$ && 1 === $dhcp_packet_ethertype$jscomp$1_ipv4_version_source_port$$[$destination_port_dhcp_magic_offset$jscomp$64$$ + 0] && $dhcp_packet_ethertype$jscomp$1_ipv4_version_source_port$$[$destination_port_dhcp_magic_offset$jscomp$64$$ + 1] === $search_mac$$[0] && $dhcp_packet_ethertype$jscomp$1_ipv4_version_source_port$$[$destination_port_dhcp_magic_offset$jscomp$64$$ + 2] === $search_mac$$[1] && $dhcp_packet_ethertype$jscomp$1_ipv4_version_source_port$$[$destination_port_dhcp_magic_offset$jscomp$64$$ + 
            3] === $search_mac$$[2] && $dhcp_packet_ethertype$jscomp$1_ipv4_version_source_port$$[$destination_port_dhcp_magic_offset$jscomp$64$$ + 4] === $search_mac$$[3] && $dhcp_packet_ethertype$jscomp$1_ipv4_version_source_port$$[$destination_port_dhcp_magic_offset$jscomp$64$$ + 5] === $search_mac$$[4] && $dhcp_packet_ethertype$jscomp$1_ipv4_version_source_port$$[$destination_port_dhcp_magic_offset$jscomp$64$$ + 6] === $search_mac$$[5] && ($dbg_log$$module$src$log$$("Replace mac in dhcp.clientidentifier", 
            1048576), $dhcp_packet_ethertype$jscomp$1_ipv4_version_source_port$$[$destination_port_dhcp_magic_offset$jscomp$64$$ + 1] = $replacement_mac$$[0], $dhcp_packet_ethertype$jscomp$1_ipv4_version_source_port$$[$destination_port_dhcp_magic_offset$jscomp$64$$ + 2] = $replacement_mac$$[1], $dhcp_packet_ethertype$jscomp$1_ipv4_version_source_port$$[$destination_port_dhcp_magic_offset$jscomp$64$$ + 3] = $replacement_mac$$[2], $dhcp_packet_ethertype$jscomp$1_ipv4_version_source_port$$[$destination_port_dhcp_magic_offset$jscomp$64$$ + 
            4] = $replacement_mac$$[3], $dhcp_packet_ethertype$jscomp$1_ipv4_version_source_port$$[$destination_port_dhcp_magic_offset$jscomp$64$$ + 5] = $replacement_mac$$[4], $dhcp_packet_ethertype$jscomp$1_ipv4_version_source_port$$[$destination_port_dhcp_magic_offset$jscomp$64$$ + 6] = $replacement_mac$$[5], $arp_packet_ipv4_packet_packet$jscomp$16_udp_packet$$[6] = $arp_packet_ipv4_packet_packet$jscomp$16_udp_packet$$[7] = 0);
            $destination_port_dhcp_magic_offset$jscomp$64$$ += $length$jscomp$25$$;
          }
        }
      }
    }
  } else {
    2054 === $dhcp_packet_ethertype$jscomp$1_ipv4_version_source_port$$ && ($arp_packet_ipv4_packet_packet$jscomp$16_udp_packet$$ = $arp_packet_ipv4_packet_packet$jscomp$16_udp_packet$$.subarray(14), $dbg_log$$module$src$log$$("arp oper=" + $arp_packet_ipv4_packet_packet$jscomp$16_udp_packet$$[7] + " " + $format_mac$$module$src$ne2k$$($arp_packet_ipv4_packet_packet$jscomp$16_udp_packet$$.subarray(8, 14)) + " " + $format_mac$$module$src$ne2k$$($arp_packet_ipv4_packet_packet$jscomp$16_udp_packet$$.subarray(18, 
    24)), 1048576), $arp_packet_ipv4_packet_packet$jscomp$16_udp_packet$$[8] === $search_mac$$[0] && $arp_packet_ipv4_packet_packet$jscomp$16_udp_packet$$[9] === $search_mac$$[1] && $arp_packet_ipv4_packet_packet$jscomp$16_udp_packet$$[10] === $search_mac$$[2] && $arp_packet_ipv4_packet_packet$jscomp$16_udp_packet$$[11] === $search_mac$$[3] && $arp_packet_ipv4_packet_packet$jscomp$16_udp_packet$$[12] === $search_mac$$[4] && $arp_packet_ipv4_packet_packet$jscomp$16_udp_packet$$[13] === $search_mac$$[5] && 
    ($dbg_log$$module$src$log$$("Replace mac in arp.sha", 1048576), $arp_packet_ipv4_packet_packet$jscomp$16_udp_packet$$[8] = $replacement_mac$$[0], $arp_packet_ipv4_packet_packet$jscomp$16_udp_packet$$[9] = $replacement_mac$$[1], $arp_packet_ipv4_packet_packet$jscomp$16_udp_packet$$[10] = $replacement_mac$$[2], $arp_packet_ipv4_packet_packet$jscomp$16_udp_packet$$[11] = $replacement_mac$$[3], $arp_packet_ipv4_packet_packet$jscomp$16_udp_packet$$[12] = $replacement_mac$$[4], $arp_packet_ipv4_packet_packet$jscomp$16_udp_packet$$[13] = 
    $replacement_mac$$[5]));
  }
}
function $format_mac$$module$src$ne2k$$($mac$jscomp$2$$) {
  return [$mac$jscomp$2$$[0].toString(16).padStart(2, "0"), $mac$jscomp$2$$[1].toString(16).padStart(2, "0"), $mac$jscomp$2$$[2].toString(16).padStart(2, "0"), $mac$jscomp$2$$[3].toString(16).padStart(2, "0"), $mac$jscomp$2$$[4].toString(16).padStart(2, "0"), $mac$jscomp$2$$[5].toString(16).padStart(2, "0"), ].join(":");
}
function $Ne2k$$module$src$ne2k$$($cpu$jscomp$19$$, $bus$jscomp$19_i$jscomp$83_io$jscomp$3$$, $preserve_mac_from_state_image$$, $mac_address_translation$$, $id$jscomp$25$$) {
  this.cpu = $cpu$jscomp$19$$;
  this.pci = $cpu$jscomp$19$$.devices.pci;
  this.id = $id$jscomp$25$$ || 0;
  this.preserve_mac_from_state_image = $preserve_mac_from_state_image$$;
  this.mac_address_translation = $mac_address_translation$$;
  this.bus = $bus$jscomp$19_i$jscomp$83_io$jscomp$3$$;
  this.bus.register("net" + this.id + "-receive", function($data$jscomp$171$$) {
    this.receive($data$jscomp$171$$);
  }, this);
  this.port = 768 + 256 * this.id;
  this.name = "ne2k";
  this.pci_space = [236, 16, 41, 128, 3, 1, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, this.port & 255 | 1, this.port >> 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 244, 26, 0, 17, 0, 0, 184, 254, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, ];
  this.pci_id = (0 === this.id ? 5 : 7 + this.id) << 3;
  this.pci_bars = [{size:32, }, ];
  this.imr = this.isr = 0;
  this.cr = 1;
  this.tpsr = this.tcnt = this.rcnt = this.dcfg = 0;
  this.memory = new Uint8Array(32768);
  this.txcr = this.rxcr = 0;
  this.tsr = 1;
  this.mac = new Uint8Array([0, 34, 21, 255 * Math.random() | 0, 255 * Math.random() | 0, 255 * Math.random() | 0, ]);
  this.bus.send("net" + this.id + "-mac", $format_mac$$module$src$ne2k$$(this.mac));
  this.mar = Uint8Array.of(255, 255, 255, 255, 255, 255, 255, 255);
  this.mac_address_in_state = null;
  for ($bus$jscomp$19_i$jscomp$83_io$jscomp$3$$ = 0; 6 > $bus$jscomp$19_i$jscomp$83_io$jscomp$3$$; $bus$jscomp$19_i$jscomp$83_io$jscomp$3$$++) {
    this.memory[$bus$jscomp$19_i$jscomp$83_io$jscomp$3$$ << 1] = this.memory[$bus$jscomp$19_i$jscomp$83_io$jscomp$3$$ << 1 | 1] = this.mac[$bus$jscomp$19_i$jscomp$83_io$jscomp$3$$];
  }
  this.memory[28] = this.memory[29] = 87;
  this.memory[30] = this.memory[31] = 87;
  $dbg_log$$module$src$log$$("Mac: " + $format_mac$$module$src$ne2k$$(this.mac), 1048576);
  this.rsar = 0;
  this.pstart = 64;
  this.pstop = 128;
  this.boundary = this.curpg = 76;
  $bus$jscomp$19_i$jscomp$83_io$jscomp$3$$ = $cpu$jscomp$19$$.io;
  $bus$jscomp$19_i$jscomp$83_io$jscomp$3$$.register_read(this.port | 0, this, function() {
    $dbg_log$$module$src$log$$("Read cmd", 1048576);
    return this.cr;
  });
  $bus$jscomp$19_i$jscomp$83_io$jscomp$3$$.register_write(this.port | 0, this, function($data$jscomp$172_data_byte$jscomp$9_start$jscomp$29$$) {
    this.cr = $data$jscomp$172_data_byte$jscomp$9_start$jscomp$29$$;
    $dbg_log$$module$src$log$$("Write command: " + $h$$module$src$lib$$($data$jscomp$172_data_byte$jscomp$9_start$jscomp$29$$, 2) + " newpg=" + (this.cr >> 6) + " txcr=" + $h$$module$src$lib$$(this.txcr, 2), 1048576);
    this.cr & 1 || ($data$jscomp$172_data_byte$jscomp$9_start$jscomp$29$$ & 24 && 0 === this.rcnt && this.do_interrupt(64), $data$jscomp$172_data_byte$jscomp$9_start$jscomp$29$$ & 4 && ($data$jscomp$172_data_byte$jscomp$9_start$jscomp$29$$ = this.tpsr << 8, $data$jscomp$172_data_byte$jscomp$9_start$jscomp$29$$ = this.memory.subarray($data$jscomp$172_data_byte$jscomp$9_start$jscomp$29$$, $data$jscomp$172_data_byte$jscomp$9_start$jscomp$29$$ + this.tcnt), this.mac_address_in_state && ($data$jscomp$172_data_byte$jscomp$9_start$jscomp$29$$ = 
    new Uint8Array($data$jscomp$172_data_byte$jscomp$9_start$jscomp$29$$), $translate_mac_address$$module$src$ne2k$$($data$jscomp$172_data_byte$jscomp$9_start$jscomp$29$$, this.mac_address_in_state, this.mac)), this.bus.send("net" + this.id + "-send", $data$jscomp$172_data_byte$jscomp$9_start$jscomp$29$$), this.bus.send("eth-transmit-end", [$data$jscomp$172_data_byte$jscomp$9_start$jscomp$29$$.length]), this.cr &= -5, this.do_interrupt(2), $dbg_log$$module$src$log$$("Command: Transfer. length=" + 
    $h$$module$src$lib$$($data$jscomp$172_data_byte$jscomp$9_start$jscomp$29$$.byteLength), 1048576)));
  });
  $bus$jscomp$19_i$jscomp$83_io$jscomp$3$$.register_read(this.port | 13, this, function() {
    var $pg$$ = this.get_page();
    if (1 === $pg$$) {
      return $dbg_log$$module$src$log$$("Read mar5", 1048576), this.mar[5];
    }
    $dbg_log$$module$src$log$$("Read counter0 pg=" + $pg$$, 1048576);
    return 0;
  });
  $bus$jscomp$19_i$jscomp$83_io$jscomp$3$$.register_read(this.port | 14, this, function() {
    var $pg$jscomp$1$$ = this.get_page();
    if (1 === $pg$jscomp$1$$) {
      return $dbg_log$$module$src$log$$("Read mar6", 1048576), this.mar[6];
    }
    $dbg_log$$module$src$log$$("Read8 counter1 pg=" + $pg$jscomp$1$$, 1048576);
    return 0;
  }, function() {
    $dbg_log$$module$src$log$$("Read16 counter1 pg=" + this.get_page(), 1048576);
    return 0;
  });
  $bus$jscomp$19_i$jscomp$83_io$jscomp$3$$.register_read(this.port | 15, this, function() {
    var $pg$jscomp$2$$ = this.get_page();
    if (1 === $pg$jscomp$2$$) {
      return $dbg_log$$module$src$log$$("Read mar7", 1048576), this.mar[7];
    }
    $dbg_log$$module$src$log$$("Read counter2 pg=" + $pg$jscomp$2$$, 1048576);
    return 0;
  });
  $bus$jscomp$19_i$jscomp$83_io$jscomp$3$$.register_read(this.port | 31, this, function() {
    this.get_page();
    $dbg_log$$module$src$log$$("Read reset", 1048576);
    this.do_interrupt(128);
    return 0;
  });
  $bus$jscomp$19_i$jscomp$83_io$jscomp$3$$.register_write(this.port | 31, this, function($data_byte$jscomp$10$$) {
    this.get_page();
    $dbg_log$$module$src$log$$("Write reset: " + $h$$module$src$lib$$($data_byte$jscomp$10$$, 2), 1048576);
  });
  $bus$jscomp$19_i$jscomp$83_io$jscomp$3$$.register_read(this.port | 1, this, function() {
    var $pg$jscomp$5$$ = this.get_page();
    if (0 === $pg$jscomp$5$$) {
      return this.pstart;
    }
    if (1 === $pg$jscomp$5$$) {
      return $dbg_log$$module$src$log$$("Read pg1/01 (mac[0])", 1048576), this.mac[0];
    }
    if (2 === $pg$jscomp$5$$) {
      return this.pstart;
    }
    $dbg_log$$module$src$log$$("Read pg" + $pg$jscomp$5$$ + "/01");
    $dbg_assert$$module$src$log$$(!1);
    return 0;
  });
  $bus$jscomp$19_i$jscomp$83_io$jscomp$3$$.register_write(this.port | 1, this, function($data_byte$jscomp$11$$) {
    var $pg$jscomp$6$$ = this.get_page();
    0 === $pg$jscomp$6$$ ? ($dbg_log$$module$src$log$$("start page: " + $h$$module$src$lib$$($data_byte$jscomp$11$$, 2), 1048576), this.pstart = $data_byte$jscomp$11$$) : 1 === $pg$jscomp$6$$ ? ($dbg_log$$module$src$log$$("mac[0] = " + $h$$module$src$lib$$($data_byte$jscomp$11$$), 1048576), this.mac[0] = $data_byte$jscomp$11$$) : 3 === $pg$jscomp$6$$ ? $dbg_log$$module$src$log$$("Unimplemented: Write pg3/01 (9346CR): " + $h$$module$src$lib$$($data_byte$jscomp$11$$), 1048576) : ($dbg_log$$module$src$log$$("Write pg" + 
    $pg$jscomp$6$$ + "/01: " + $h$$module$src$lib$$($data_byte$jscomp$11$$), 1048576), $dbg_assert$$module$src$log$$(!1));
  });
  $bus$jscomp$19_i$jscomp$83_io$jscomp$3$$.register_read(this.port | 2, this, function() {
    var $pg$jscomp$7$$ = this.get_page();
    if (0 === $pg$jscomp$7$$) {
      return this.pstop;
    }
    if (1 === $pg$jscomp$7$$) {
      return $dbg_log$$module$src$log$$("Read pg1/02 (mac[1])", 1048576), this.mac[1];
    }
    if (2 === $pg$jscomp$7$$) {
      return this.pstop;
    }
    $dbg_log$$module$src$log$$("Read pg" + $pg$jscomp$7$$ + "/02", 1048576);
    $dbg_assert$$module$src$log$$(!1);
    return 0;
  });
  $bus$jscomp$19_i$jscomp$83_io$jscomp$3$$.register_write(this.port | 2, this, function($data_byte$jscomp$12$$) {
    var $pg$jscomp$8$$ = this.get_page();
    0 === $pg$jscomp$8$$ ? ($dbg_log$$module$src$log$$("stop page: " + $h$$module$src$lib$$($data_byte$jscomp$12$$, 2), 1048576), $data_byte$jscomp$12$$ > this.memory.length >> 8 && ($data_byte$jscomp$12$$ = this.memory.length >> 8, $dbg_log$$module$src$log$$("XXX: Adjusting stop page to " + $h$$module$src$lib$$($data_byte$jscomp$12$$), 1048576)), this.pstop = $data_byte$jscomp$12$$) : 1 === $pg$jscomp$8$$ ? ($dbg_log$$module$src$log$$("mac[1] = " + $h$$module$src$lib$$($data_byte$jscomp$12$$), 1048576), 
    this.mac[1] = $data_byte$jscomp$12$$) : ($dbg_log$$module$src$log$$("Write pg" + $pg$jscomp$8$$ + "/02: " + $h$$module$src$lib$$($data_byte$jscomp$12$$), 1048576), $dbg_assert$$module$src$log$$(!1));
  });
  $bus$jscomp$19_i$jscomp$83_io$jscomp$3$$.register_read(this.port | 7, this, function() {
    var $pg$jscomp$9$$ = this.get_page();
    if (0 === $pg$jscomp$9$$) {
      return $dbg_log$$module$src$log$$("Read isr: " + $h$$module$src$lib$$(this.isr, 2), 1048576), this.isr;
    }
    if (1 === $pg$jscomp$9$$) {
      return $dbg_log$$module$src$log$$("Read curpg: " + $h$$module$src$lib$$(this.curpg, 2), 1048576), this.curpg;
    }
    $dbg_assert$$module$src$log$$(!1);
    return 0;
  });
  $bus$jscomp$19_i$jscomp$83_io$jscomp$3$$.register_write(this.port | 7, this, function($data_byte$jscomp$13$$) {
    var $pg$jscomp$10$$ = this.get_page();
    0 === $pg$jscomp$10$$ ? ($dbg_log$$module$src$log$$("Write isr: " + $h$$module$src$lib$$($data_byte$jscomp$13$$, 2), 1048576), this.isr &= ~$data_byte$jscomp$13$$, this.update_irq()) : 1 === $pg$jscomp$10$$ ? ($dbg_log$$module$src$log$$("Write curpg: " + $h$$module$src$lib$$($data_byte$jscomp$13$$, 2), 1048576), this.curpg = $data_byte$jscomp$13$$) : $dbg_assert$$module$src$log$$(!1);
  });
  $bus$jscomp$19_i$jscomp$83_io$jscomp$3$$.register_write(this.port | 13, this, function($data_byte$jscomp$14$$) {
    var $pg$jscomp$11$$ = this.get_page();
    0 === $pg$jscomp$11$$ ? (this.txcr = $data_byte$jscomp$14$$, $dbg_log$$module$src$log$$("Write tx config: " + $h$$module$src$lib$$($data_byte$jscomp$14$$, 2), 1048576)) : $dbg_log$$module$src$log$$("Unimplemented: Write pg" + $pg$jscomp$11$$ + "/0d " + $h$$module$src$lib$$($data_byte$jscomp$14$$, 2), 1048576);
  });
  $bus$jscomp$19_i$jscomp$83_io$jscomp$3$$.register_write(this.port | 14, this, function($data_byte$jscomp$15$$) {
    var $pg$jscomp$12$$ = this.get_page();
    0 === $pg$jscomp$12$$ ? ($dbg_log$$module$src$log$$("Write data configuration: " + $h$$module$src$lib$$($data_byte$jscomp$15$$, 2), 1048576), this.dcfg = $data_byte$jscomp$15$$) : $dbg_log$$module$src$log$$("Unimplemented: Write pg" + $pg$jscomp$12$$ + "/0e " + $h$$module$src$lib$$($data_byte$jscomp$15$$, 2), 1048576);
  });
  $bus$jscomp$19_i$jscomp$83_io$jscomp$3$$.register_read(this.port | 10, this, function() {
    var $pg$jscomp$13$$ = this.get_page();
    if (0 === $pg$jscomp$13$$) {
      return $dbg_log$$module$src$log$$("Read pg0/0a", 1048576), 80;
    }
    if (1 === $pg$jscomp$13$$) {
      return $dbg_log$$module$src$log$$("Read mar2", 1048576), this.mar[2];
    }
    $dbg_assert$$module$src$log$$(!1, "TODO");
    return 0;
  });
  $bus$jscomp$19_i$jscomp$83_io$jscomp$3$$.register_write(this.port | 10, this, function($data_byte$jscomp$16$$) {
    var $pg$jscomp$14$$ = this.get_page();
    0 === $pg$jscomp$14$$ ? ($dbg_log$$module$src$log$$("Write remote byte count low: " + $h$$module$src$lib$$($data_byte$jscomp$16$$, 2), 1048576), this.rcnt = this.rcnt & 65280 | $data_byte$jscomp$16$$ & 255) : $dbg_log$$module$src$log$$("Unimplemented: Write pg" + $pg$jscomp$14$$ + "/0a " + $h$$module$src$lib$$($data_byte$jscomp$16$$, 2), 1048576);
  });
  $bus$jscomp$19_i$jscomp$83_io$jscomp$3$$.register_read(this.port | 11, this, function() {
    var $pg$jscomp$15$$ = this.get_page();
    if (0 === $pg$jscomp$15$$) {
      return $dbg_log$$module$src$log$$("Read pg0/0b", 1048576), 67;
    }
    if (1 === $pg$jscomp$15$$) {
      return $dbg_log$$module$src$log$$("Read mar3", 1048576), this.mar[3];
    }
    $dbg_assert$$module$src$log$$(!1, "TODO");
    return 0;
  });
  $bus$jscomp$19_i$jscomp$83_io$jscomp$3$$.register_write(this.port | 11, this, function($data_byte$jscomp$17$$) {
    var $pg$jscomp$16$$ = this.get_page();
    0 === $pg$jscomp$16$$ ? ($dbg_log$$module$src$log$$("Write remote byte count high: " + $h$$module$src$lib$$($data_byte$jscomp$17$$, 2), 1048576), this.rcnt = this.rcnt & 255 | $data_byte$jscomp$17$$ << 8 & 65280) : $dbg_log$$module$src$log$$("Unimplemented: Write pg" + $pg$jscomp$16$$ + "/0b " + $h$$module$src$lib$$($data_byte$jscomp$17$$, 2), 1048576);
  });
  $bus$jscomp$19_i$jscomp$83_io$jscomp$3$$.register_read(this.port | 8, this, function() {
    var $pg$jscomp$17$$ = this.get_page();
    if (0 === $pg$jscomp$17$$) {
      return $dbg_log$$module$src$log$$("Read remote start address low", 1048576), this.rsar & 255;
    }
    if (1 === $pg$jscomp$17$$) {
      return $dbg_log$$module$src$log$$("Read mar0", 1048576), this.mar[0];
    }
    $dbg_log$$module$src$log$$("Unimplemented: Read pg" + $pg$jscomp$17$$ + "/08", 1048576);
    $dbg_assert$$module$src$log$$(!1);
    return 0;
  });
  $bus$jscomp$19_i$jscomp$83_io$jscomp$3$$.register_write(this.port | 8, this, function($data_byte$jscomp$18$$) {
    var $pg$jscomp$18$$ = this.get_page();
    0 === $pg$jscomp$18$$ ? ($dbg_log$$module$src$log$$("Write remote start address low: " + $h$$module$src$lib$$($data_byte$jscomp$18$$, 2), 1048576), this.rsar = this.rsar & 65280 | $data_byte$jscomp$18$$ & 255) : $dbg_log$$module$src$log$$("Unimplemented: Write pg" + $pg$jscomp$18$$ + "/08 " + $h$$module$src$lib$$($data_byte$jscomp$18$$, 2), 1048576);
  });
  $bus$jscomp$19_i$jscomp$83_io$jscomp$3$$.register_read(this.port | 9, this, function() {
    var $pg$jscomp$19$$ = this.get_page();
    if (0 === $pg$jscomp$19$$) {
      return $dbg_log$$module$src$log$$("Read remote start address high", 1048576), this.rsar >> 8 & 255;
    }
    if (1 === $pg$jscomp$19$$) {
      return $dbg_log$$module$src$log$$("Read mar1", 1048576), this.mar[1];
    }
    $dbg_log$$module$src$log$$("Unimplemented: Read pg" + $pg$jscomp$19$$ + "/09", 1048576);
    $dbg_assert$$module$src$log$$(!1);
    return 0;
  });
  $bus$jscomp$19_i$jscomp$83_io$jscomp$3$$.register_write(this.port | 9, this, function($data_byte$jscomp$19$$) {
    var $pg$jscomp$20$$ = this.get_page();
    0 === $pg$jscomp$20$$ ? ($dbg_log$$module$src$log$$("Write remote start address low: " + $h$$module$src$lib$$($data_byte$jscomp$19$$, 2), 1048576), this.rsar = this.rsar & 255 | $data_byte$jscomp$19$$ << 8 & 65280) : $dbg_log$$module$src$log$$("Unimplemented: Write pg" + $pg$jscomp$20$$ + "/09 " + $h$$module$src$lib$$($data_byte$jscomp$19$$, 2), 1048576);
  });
  $bus$jscomp$19_i$jscomp$83_io$jscomp$3$$.register_write(this.port | 15, this, function($data_byte$jscomp$20$$) {
    var $pg$jscomp$21$$ = this.get_page();
    0 === $pg$jscomp$21$$ ? ($dbg_log$$module$src$log$$("Write interrupt mask register: " + $h$$module$src$lib$$($data_byte$jscomp$20$$, 2) + " isr=" + $h$$module$src$lib$$(this.isr, 2), 1048576), this.imr = $data_byte$jscomp$20$$, this.update_irq()) : $dbg_log$$module$src$log$$("Unimplemented: Write pg" + $pg$jscomp$21$$ + "/0f " + $h$$module$src$lib$$($data_byte$jscomp$20$$, 2), 1048576);
  });
  $bus$jscomp$19_i$jscomp$83_io$jscomp$3$$.register_read(this.port | 3, this, function() {
    var $pg$jscomp$22$$ = this.get_page();
    if (0 === $pg$jscomp$22$$) {
      return $dbg_log$$module$src$log$$("Read boundary: " + $h$$module$src$lib$$(this.boundary, 2), 1048576), this.boundary;
    }
    if (1 === $pg$jscomp$22$$) {
      return $dbg_log$$module$src$log$$("Read pg1/03 (mac[2])", 1048576), this.mac[2];
    }
    3 === $pg$jscomp$22$$ ? $dbg_log$$module$src$log$$("Unimplemented: Read pg3/03 (CONFIG0)", 1048576) : ($dbg_log$$module$src$log$$("Read pg" + $pg$jscomp$22$$ + "/03", 1048576), $dbg_assert$$module$src$log$$(!1));
    return 0;
  });
  $bus$jscomp$19_i$jscomp$83_io$jscomp$3$$.register_write(this.port | 3, this, function($data_byte$jscomp$21$$) {
    var $pg$jscomp$23$$ = this.get_page();
    0 === $pg$jscomp$23$$ ? ($dbg_log$$module$src$log$$("Write boundary: " + $h$$module$src$lib$$($data_byte$jscomp$21$$, 2), 1048576), this.boundary = $data_byte$jscomp$21$$) : 1 === $pg$jscomp$23$$ ? ($dbg_log$$module$src$log$$("mac[2] = " + $h$$module$src$lib$$($data_byte$jscomp$21$$), 1048576), this.mac[2] = $data_byte$jscomp$21$$) : ($dbg_log$$module$src$log$$("Write pg" + $pg$jscomp$23$$ + "/03: " + $h$$module$src$lib$$($data_byte$jscomp$21$$), 1048576), $dbg_assert$$module$src$log$$(!1));
  });
  $bus$jscomp$19_i$jscomp$83_io$jscomp$3$$.register_read(this.port | 4, this, function() {
    var $pg$jscomp$24$$ = this.get_page();
    if (0 === $pg$jscomp$24$$) {
      return this.tsr;
    }
    if (1 === $pg$jscomp$24$$) {
      return $dbg_log$$module$src$log$$("Read pg1/04 (mac[3])", 1048576), this.mac[3];
    }
    $dbg_log$$module$src$log$$("Read pg" + $pg$jscomp$24$$ + "/04", 1048576);
    $dbg_assert$$module$src$log$$(!1);
    return 0;
  });
  $bus$jscomp$19_i$jscomp$83_io$jscomp$3$$.register_write(this.port | 4, this, function($data_byte$jscomp$22$$) {
    var $pg$jscomp$25$$ = this.get_page();
    0 === $pg$jscomp$25$$ ? ($dbg_log$$module$src$log$$("Write tpsr: " + $h$$module$src$lib$$($data_byte$jscomp$22$$, 2), 1048576), this.tpsr = $data_byte$jscomp$22$$) : 1 === $pg$jscomp$25$$ ? ($dbg_log$$module$src$log$$("mac[3] = " + $h$$module$src$lib$$($data_byte$jscomp$22$$), 1048576), this.mac[3] = $data_byte$jscomp$22$$) : ($dbg_log$$module$src$log$$("Write pg" + $pg$jscomp$25$$ + "/04: " + $h$$module$src$lib$$($data_byte$jscomp$22$$), 1048576), $dbg_assert$$module$src$log$$(!1));
  });
  $bus$jscomp$19_i$jscomp$83_io$jscomp$3$$.register_read(this.port | 5, this, function() {
    var $pg$jscomp$26$$ = this.get_page();
    if (0 === $pg$jscomp$26$$) {
      return $dbg_log$$module$src$log$$("Unimplemented: Read pg0/05 (NCR: Number of Collisions Register)", 1048576), 0;
    }
    if (1 === $pg$jscomp$26$$) {
      return $dbg_log$$module$src$log$$("Read pg1/05 (mac[4])", 1048576), this.mac[4];
    }
    3 === $pg$jscomp$26$$ ? $dbg_log$$module$src$log$$("Unimplemented: Read pg3/05 (CONFIG2)", 1048576) : ($dbg_log$$module$src$log$$("Read pg" + $pg$jscomp$26$$ + "/05", 1048576), $dbg_assert$$module$src$log$$(!1));
    return 0;
  });
  $bus$jscomp$19_i$jscomp$83_io$jscomp$3$$.register_write(this.port | 5, this, function($data_byte$jscomp$23$$) {
    var $pg$jscomp$27$$ = this.get_page();
    0 === $pg$jscomp$27$$ ? ($dbg_log$$module$src$log$$("Write tcnt low: " + $h$$module$src$lib$$($data_byte$jscomp$23$$, 2), 1048576), this.tcnt = this.tcnt & -256 | $data_byte$jscomp$23$$) : 1 === $pg$jscomp$27$$ ? ($dbg_log$$module$src$log$$("mac[4] = " + $h$$module$src$lib$$($data_byte$jscomp$23$$), 1048576), this.mac[4] = $data_byte$jscomp$23$$) : 3 === $pg$jscomp$27$$ ? $dbg_log$$module$src$log$$("Unimplemented: Write pg3/05 (CONFIG2): " + $h$$module$src$lib$$($data_byte$jscomp$23$$), 1048576) : 
    ($dbg_log$$module$src$log$$("Write pg" + $pg$jscomp$27$$ + "/05: " + $h$$module$src$lib$$($data_byte$jscomp$23$$), 1048576), $dbg_assert$$module$src$log$$(!1));
  });
  $bus$jscomp$19_i$jscomp$83_io$jscomp$3$$.register_read(this.port | 6, this, function() {
    var $pg$jscomp$28$$ = this.get_page();
    if (0 === $pg$jscomp$28$$) {
      return $dbg_assert$$module$src$log$$(!1, "TODO"), 0;
    }
    if (1 === $pg$jscomp$28$$) {
      return $dbg_log$$module$src$log$$("Read pg1/06 (mac[5])", 1048576), this.mac[5];
    }
    3 === $pg$jscomp$28$$ ? $dbg_log$$module$src$log$$("Unimplemented: Read pg3/06 (CONFIG3)", 1048576) : ($dbg_log$$module$src$log$$("Read pg" + $pg$jscomp$28$$ + "/06", 1048576), $dbg_assert$$module$src$log$$(!1));
    return 0;
  });
  $bus$jscomp$19_i$jscomp$83_io$jscomp$3$$.register_write(this.port | 6, this, function($data_byte$jscomp$24$$) {
    var $pg$jscomp$29$$ = this.get_page();
    0 === $pg$jscomp$29$$ ? ($dbg_log$$module$src$log$$("Write tcnt high: " + $h$$module$src$lib$$($data_byte$jscomp$24$$, 2), 1048576), this.tcnt = this.tcnt & 255 | $data_byte$jscomp$24$$ << 8) : 1 === $pg$jscomp$29$$ ? ($dbg_log$$module$src$log$$("mac[5] = " + $h$$module$src$lib$$($data_byte$jscomp$24$$), 1048576), this.mac[5] = $data_byte$jscomp$24$$) : 3 === $pg$jscomp$29$$ ? $dbg_log$$module$src$log$$("Unimplemented: Write pg3/06 (CONFIG3): " + $h$$module$src$lib$$($data_byte$jscomp$24$$), 
    1048576) : ($dbg_log$$module$src$log$$("Write pg" + $pg$jscomp$29$$ + "/06: " + $h$$module$src$lib$$($data_byte$jscomp$24$$), 1048576), $dbg_assert$$module$src$log$$(!1));
  });
  $bus$jscomp$19_i$jscomp$83_io$jscomp$3$$.register_read(this.port | 12, this, function() {
    var $pg$jscomp$30$$ = this.get_page();
    if (0 === $pg$jscomp$30$$) {
      return 9;
    }
    if (1 === $pg$jscomp$30$$) {
      return $dbg_log$$module$src$log$$("Read mar4", 1048576), this.mar[4];
    }
    $dbg_log$$module$src$log$$("Unimplemented: Read pg" + $pg$jscomp$30$$ + "/0c", 1048576);
    $dbg_assert$$module$src$log$$(!1);
    return 0;
  });
  $bus$jscomp$19_i$jscomp$83_io$jscomp$3$$.register_write(this.port | 12, this, function($data_byte$jscomp$25$$) {
    var $pg$jscomp$31$$ = this.get_page();
    0 === $pg$jscomp$31$$ ? ($dbg_log$$module$src$log$$("RX configuration reg write: " + $h$$module$src$lib$$($data_byte$jscomp$25$$, 2), 1048576), this.rxcr = $data_byte$jscomp$25$$) : $dbg_log$$module$src$log$$("Unimplemented: Write pg" + $pg$jscomp$31$$ + "/0c: " + $h$$module$src$lib$$($data_byte$jscomp$25$$), 1048576);
  });
  $bus$jscomp$19_i$jscomp$83_io$jscomp$3$$.register_read(this.port | 16, this, this.data_port_read8, this.data_port_read16, this.data_port_read32);
  $bus$jscomp$19_i$jscomp$83_io$jscomp$3$$.register_write(this.port | 16, this, this.data_port_write16, this.data_port_write16, this.data_port_write32);
  $cpu$jscomp$19$$.devices.pci.register_device(this);
}
$Ne2k$$module$src$ne2k$$.prototype.get_state = function() {
  var $state$jscomp$38$$ = [];
  $state$jscomp$38$$[0] = this.isr;
  $state$jscomp$38$$[1] = this.imr;
  $state$jscomp$38$$[2] = this.cr;
  $state$jscomp$38$$[3] = this.dcfg;
  $state$jscomp$38$$[4] = this.rcnt;
  $state$jscomp$38$$[5] = this.tcnt;
  $state$jscomp$38$$[6] = this.tpsr;
  $state$jscomp$38$$[7] = this.rsar;
  $state$jscomp$38$$[8] = this.pstart;
  $state$jscomp$38$$[9] = this.curpg;
  $state$jscomp$38$$[10] = this.boundary;
  $state$jscomp$38$$[11] = this.pstop;
  $state$jscomp$38$$[12] = this.rxcr;
  $state$jscomp$38$$[13] = this.txcr;
  $state$jscomp$38$$[14] = this.tsr;
  $state$jscomp$38$$[15] = this.mac;
  $state$jscomp$38$$[16] = this.memory;
  return $state$jscomp$38$$;
};
$Ne2k$$module$src$ne2k$$.prototype.set_state = function($state$jscomp$39$$) {
  this.isr = $state$jscomp$39$$[0];
  this.imr = $state$jscomp$39$$[1];
  this.cr = $state$jscomp$39$$[2];
  this.dcfg = $state$jscomp$39$$[3];
  this.rcnt = $state$jscomp$39$$[4];
  this.tcnt = $state$jscomp$39$$[5];
  this.tpsr = $state$jscomp$39$$[6];
  this.rsar = $state$jscomp$39$$[7];
  this.pstart = $state$jscomp$39$$[8];
  this.curpg = $state$jscomp$39$$[9];
  this.boundary = $state$jscomp$39$$[10];
  this.pstop = $state$jscomp$39$$[11];
  this.rxcr = $state$jscomp$39$$[12];
  this.txcr = $state$jscomp$39$$[13];
  this.tsr = $state$jscomp$39$$[14];
  this.preserve_mac_from_state_image ? (this.mac = $state$jscomp$39$$[15], this.memory = $state$jscomp$39$$[16]) : this.mac_address_translation && (this.mac_address_in_state = $state$jscomp$39$$[15], this.memory = $state$jscomp$39$$[16], $dbg_log$$module$src$log$$("Using mac address translation guest_os_mac=" + $format_mac$$module$src$ne2k$$(this.mac_address_in_state) + " real_mac=" + $format_mac$$module$src$ne2k$$(this.mac), 1048576));
  this.bus.send("net" + this.id + "-mac", $format_mac$$module$src$ne2k$$(this.mac));
};
$Ne2k$$module$src$ne2k$$.prototype.do_interrupt = function($ir_mask$$) {
  $dbg_log$$module$src$log$$("Do interrupt " + $h$$module$src$lib$$($ir_mask$$, 2), 1048576);
  this.isr |= $ir_mask$$;
  this.update_irq();
};
$Ne2k$$module$src$ne2k$$.prototype.update_irq = function() {
  this.imr & this.isr ? this.pci.raise_irq(this.pci_id) : this.pci.lower_irq(this.pci_id);
};
$Ne2k$$module$src$ne2k$$.prototype.data_port_write = function($data_byte$jscomp$26$$) {
  if (16 >= this.rsar || 16384 <= this.rsar && 32768 > this.rsar) {
    this.memory[this.rsar] = $data_byte$jscomp$26$$;
  }
  this.rsar++;
  this.rcnt--;
  this.rsar >= this.pstop << 8 && (this.rsar += this.pstart - this.pstop << 8);
  0 === this.rcnt && this.do_interrupt(64);
};
$Ne2k$$module$src$ne2k$$.prototype.data_port_write16 = function($data$jscomp$173$$) {
  this.data_port_write($data$jscomp$173$$);
  this.dcfg & 1 && this.data_port_write($data$jscomp$173$$ >> 8);
};
$Ne2k$$module$src$ne2k$$.prototype.data_port_write32 = function($data$jscomp$174$$) {
  this.data_port_write($data$jscomp$174$$);
  this.data_port_write($data$jscomp$174$$ >> 8);
  this.data_port_write($data$jscomp$174$$ >> 16);
  this.data_port_write($data$jscomp$174$$ >> 24);
};
$Ne2k$$module$src$ne2k$$.prototype.data_port_read = function() {
  let $data$jscomp$175$$ = 0;
  32768 > this.rsar && ($data$jscomp$175$$ = this.memory[this.rsar]);
  this.rsar++;
  this.rcnt--;
  this.rsar >= this.pstop << 8 && (this.rsar += this.pstart - this.pstop << 8);
  0 === this.rcnt && this.do_interrupt(64);
  return $data$jscomp$175$$;
};
$Ne2k$$module$src$ne2k$$.prototype.data_port_read8 = function() {
  return this.data_port_read16() & 255;
};
$Ne2k$$module$src$ne2k$$.prototype.data_port_read16 = function() {
  return this.dcfg & 1 ? this.data_port_read() | this.data_port_read() << 8 : this.data_port_read();
};
$Ne2k$$module$src$ne2k$$.prototype.data_port_read32 = function() {
  return this.data_port_read() | this.data_port_read() << 8 | this.data_port_read() << 16 | this.data_port_read() << 24;
};
$Ne2k$$module$src$ne2k$$.prototype.receive = function($data$jscomp$176$$) {
  if (!(this.cr & 1) && (this.bus.send("eth-receive-end", [$data$jscomp$176$$.length]), this.rxcr & 16 || this.rxcr & 4 && 255 === $data$jscomp$176$$[0] && 255 === $data$jscomp$176$$[1] && 255 === $data$jscomp$176$$[2] && 255 === $data$jscomp$176$$[3] && 255 === $data$jscomp$176$$[4] && 255 === $data$jscomp$176$$[5] || !(this.rxcr & 8 && 1 === ($data$jscomp$176$$[0] & 1) || $data$jscomp$176$$[0] !== this.mac[0] || $data$jscomp$176$$[1] !== this.mac[1] || $data$jscomp$176$$[2] !== this.mac[2] || $data$jscomp$176$$[3] !== 
  this.mac[3] || $data$jscomp$176$$[4] !== this.mac[4] || $data$jscomp$176$$[5] !== this.mac[5]))) {
    this.mac_address_in_state && ($data$jscomp$176$$ = new Uint8Array($data$jscomp$176$$), $translate_mac_address$$module$src$ne2k$$($data$jscomp$176$$, this.mac, this.mac_address_in_state));
    var $offset$jscomp$65$$ = this.curpg << 8, $total_length$jscomp$4$$ = Math.max(60, $data$jscomp$176$$.length) + 4, $data_start$$ = $offset$jscomp$65$$ + 4, $next$$ = this.curpg + 1 + ($total_length$jscomp$4$$ >> 8), $cut_end$jscomp$16$$ = $offset$jscomp$65$$ + $total_length$jscomp$4$$, $needed$jscomp$1$$ = 1 + ($total_length$jscomp$4$$ >> 8), $available$$ = this.boundary > this.curpg ? this.boundary - this.curpg : this.pstop - this.curpg + this.boundary - this.pstart;
    $available$$ < $needed$jscomp$1$$ && 0 !== this.boundary ? $dbg_log$$module$src$log$$("Buffer full, dropping packet pstart=" + $h$$module$src$lib$$(this.pstart) + " pstop=" + $h$$module$src$lib$$(this.pstop) + " curpg=" + $h$$module$src$lib$$(this.curpg) + " needed=" + $h$$module$src$lib$$($needed$jscomp$1$$) + " boundary=" + $h$$module$src$lib$$(this.boundary) + " available=" + $h$$module$src$lib$$($available$$), 1048576) : ($cut_end$jscomp$16$$ > this.pstop << 8 ? ($dbg_assert$$module$src$log$$(60 <= 
    $data$jscomp$176$$.length), $cut_end$jscomp$16$$ = (this.pstop << 8) - $data_start$$, $dbg_assert$$module$src$log$$(0 <= $cut_end$jscomp$16$$), this.memory.set($data$jscomp$176$$.subarray(0, $cut_end$jscomp$16$$), $data_start$$), this.memory.set($data$jscomp$176$$.subarray($cut_end$jscomp$16$$), this.pstart << 8), $dbg_log$$module$src$log$$("rcv cut=" + $h$$module$src$lib$$($cut_end$jscomp$16$$), 1048576)) : (this.memory.set($data$jscomp$176$$, $data_start$$), 60 > $data$jscomp$176$$.length && 
    this.memory.fill(0, $data_start$$ + $data$jscomp$176$$.length, $data_start$$ + 60)), $next$$ >= this.pstop && ($next$$ += this.pstart - this.pstop), this.memory[$offset$jscomp$65$$] = 1, this.memory[$offset$jscomp$65$$ + 1] = $next$$, this.memory[$offset$jscomp$65$$ + 2] = $total_length$jscomp$4$$, this.memory[$offset$jscomp$65$$ + 3] = $total_length$jscomp$4$$ >> 8, this.curpg = $next$$, $dbg_log$$module$src$log$$("rcv offset=" + $h$$module$src$lib$$($offset$jscomp$65$$) + " len=" + $h$$module$src$lib$$($total_length$jscomp$4$$) + 
    " next=" + $h$$module$src$lib$$($next$$), 1048576), this.do_interrupt(1));
  }
};
$Ne2k$$module$src$ne2k$$.prototype.get_page = function() {
  return this.cr >> 6 & 3;
};
function $VirtioConsole$$module$src$virtio_console$$($cpu$jscomp$20$$, $bus$jscomp$20_queues$$) {
  this.bus = $bus$jscomp$20_queues$$;
  this.rows = 25;
  this.cols = 80;
  this.ports = 4;
  $bus$jscomp$20_queues$$ = [{size_supported:16, notify_offset:0, }, {size_supported:16, notify_offset:1, }, {size_supported:16, notify_offset:2, }, {size_supported:16, notify_offset:3, }, ];
  for (let $i$jscomp$84$$ = 1; $i$jscomp$84$$ < this.ports; ++$i$jscomp$84$$) {
    $bus$jscomp$20_queues$$.push({size_supported:16, notify_offset:0}), $bus$jscomp$20_queues$$.push({size_supported:8, notify_offset:1});
  }
  this.virtio = new $VirtIO$$module$src$virtio$$($cpu$jscomp$20$$, {name:"virtio-console", pci_id:96, device_id:4163, subsystem_device_id:3, common:{initial_port:47104, queues:$bus$jscomp$20_queues$$, features:[0, 1, 32, ], on_driver_ok:() => {
  }, }, notification:{initial_port:47360, single_handler:!1, handlers:[() => {
  }, $queue_id$jscomp$1$$ => {
    const $queue$$ = this.virtio.queues[$queue_id$jscomp$1$$], $port$jscomp$4$$ = 3 < $queue_id$jscomp$1$$ ? $queue_id$jscomp$1$$ - 3 >> 1 : 0;
    for (; $queue$$.has_request();) {
      const $bufchain$$ = $queue$$.pop_request(), $buffer$jscomp$42$$ = new Uint8Array($bufchain$$.length_readable);
      $bufchain$$.get_next_blob($buffer$jscomp$42$$);
      this.bus.send("virtio-console" + $port$jscomp$4$$ + "-output-bytes", $buffer$jscomp$42$$);
      this.Ack($queue_id$jscomp$1$$, $bufchain$$);
    }
  }, $queue$jscomp$1_queue_id$jscomp$2$$ => {
    if (2 !== $queue$jscomp$1_queue_id$jscomp$2$$) {
      $dbg_assert$$module$src$log$$(!1, "VirtioConsole Notified for wrong queue: " + $queue$jscomp$1_queue_id$jscomp$2$$ + " (expected queue_id of 2)");
    } else {
      for ($queue$jscomp$1_queue_id$jscomp$2$$ = this.virtio.queues[$queue$jscomp$1_queue_id$jscomp$2$$]; $queue$jscomp$1_queue_id$jscomp$2$$.count_requests() > $queue$jscomp$1_queue_id$jscomp$2$$.size - 2;) {
        $queue$jscomp$1_queue_id$jscomp$2$$.pop_request();
      }
    }
  }, $queue_id$jscomp$3$$ => {
    if (3 !== $queue_id$jscomp$3$$) {
      $dbg_assert$$module$src$log$$(!1, "VirtioConsole Notified for wrong queue: " + $queue_id$jscomp$3$$ + " (expected queue_id of 3)");
    } else {
      for (var $queue$jscomp$2$$ = this.virtio.queues[$queue_id$jscomp$3$$]; $queue$jscomp$2$$.has_request();) {
        var $bufchain$jscomp$1_i$jscomp$85$$ = $queue$jscomp$2$$.pop_request(), $buffer$jscomp$43_port$jscomp$5$$ = new Uint8Array($bufchain$jscomp$1_i$jscomp$85$$.length_readable);
        $bufchain$jscomp$1_i$jscomp$85$$.get_next_blob($buffer$jscomp$43_port$jscomp$5$$);
        var $event$jscomp$12_parts$jscomp$5$$ = $Unmarshall$$module$lib$marshall$$(["w", "h", "h"], $buffer$jscomp$43_port$jscomp$5$$, {offset:0});
        $buffer$jscomp$43_port$jscomp$5$$ = $event$jscomp$12_parts$jscomp$5$$[0];
        $event$jscomp$12_parts$jscomp$5$$ = $event$jscomp$12_parts$jscomp$5$$[1];
        this.Ack($queue_id$jscomp$3$$, $bufchain$jscomp$1_i$jscomp$85$$);
        switch($event$jscomp$12_parts$jscomp$5$$) {
          case 0:
            for ($bufchain$jscomp$1_i$jscomp$85$$ = 0; $bufchain$jscomp$1_i$jscomp$85$$ < this.ports; ++$bufchain$jscomp$1_i$jscomp$85$$) {
              this.SendEvent($bufchain$jscomp$1_i$jscomp$85$$, 1, 0);
            }
            break;
          case 3:
            this.Ack($queue_id$jscomp$3$$, $bufchain$jscomp$1_i$jscomp$85$$);
            this.SendEvent($buffer$jscomp$43_port$jscomp$5$$, 4, 1);
            this.SendName($buffer$jscomp$43_port$jscomp$5$$, "virtio-" + $buffer$jscomp$43_port$jscomp$5$$);
            this.SendEvent($buffer$jscomp$43_port$jscomp$5$$, 6, 1);
            break;
          case 6:
            this.Ack($queue_id$jscomp$3$$, $bufchain$jscomp$1_i$jscomp$85$$);
            0 === $buffer$jscomp$43_port$jscomp$5$$ && this.SendWindowSize($buffer$jscomp$43_port$jscomp$5$$);
            break;
          default:
            $dbg_assert$$module$src$log$$(!1, " VirtioConsole received unknown event: " + $event$jscomp$12_parts$jscomp$5$$[1]);
            return;
        }
      }
    }
  }, ], }, isr_status:{initial_port:46848, }, device_specific:{initial_port:46592, struct:[{bytes:2, name:"cols", read:() => this.cols, write:() => {
  }, }, {bytes:2, name:"rows", read:() => this.rows, write:() => {
  }, }, {bytes:4, name:"max_nr_ports", read:() => this.ports, write:() => {
  }, }, {bytes:4, name:"emerg_wr", read:() => 0, write:() => {
    $dbg_assert$$module$src$log$$(!1, "Emergency write!");
  }, }, ]}, });
  for (let $port$jscomp$6$$ = 0; $port$jscomp$6$$ < this.ports; ++$port$jscomp$6$$) {
    const $queue_id$jscomp$4$$ = 0 === $port$jscomp$6$$ ? 0 : 2 * $port$jscomp$6$$ + 2;
    this.bus.register("virtio-console" + $port$jscomp$6$$ + "-input-bytes", function($data$jscomp$181$$) {
      var $bufchain$jscomp$2_queue$jscomp$3$$ = this.virtio.queues[$queue_id$jscomp$4$$];
      $bufchain$jscomp$2_queue$jscomp$3$$.has_request() && ($bufchain$jscomp$2_queue$jscomp$3$$ = $bufchain$jscomp$2_queue$jscomp$3$$.pop_request(), this.Send($queue_id$jscomp$4$$, $bufchain$jscomp$2_queue$jscomp$3$$, new Uint8Array($data$jscomp$181$$)));
    }, this);
    this.bus.register("virtio-console" + $port$jscomp$6$$ + "-resize", function($size$jscomp$36$$) {
      0 === $port$jscomp$6$$ && (this.cols = $size$jscomp$36$$[0], this.rows = $size$jscomp$36$$[1]);
      this.virtio.queues[2].is_configured() && this.virtio.queues[2].has_request() && this.SendWindowSize($port$jscomp$6$$, $size$jscomp$36$$[0], $size$jscomp$36$$[1]);
    }, this);
  }
}
$VirtioConsole$$module$src$virtio_console$$.prototype.SendWindowSize = function($port$jscomp$7$$, $cols$jscomp$2$$, $rows$jscomp$2$$) {
  $rows$jscomp$2$$ = $rows$jscomp$2$$ || this.rows;
  $cols$jscomp$2$$ = $cols$jscomp$2$$ || this.cols;
  const $bufchain$jscomp$3$$ = this.virtio.queues[2].pop_request(), $buf$jscomp$1$$ = new Uint8Array(12);
  $Marshall$$module$lib$marshall$$(["w", "h", "h", "h", "h"], [$port$jscomp$7$$, 5, 0, $rows$jscomp$2$$, $cols$jscomp$2$$], $buf$jscomp$1$$, 0);
  this.Send(2, $bufchain$jscomp$3$$, $buf$jscomp$1$$);
};
$VirtioConsole$$module$src$virtio_console$$.prototype.SendName = function($i$jscomp$86_port$jscomp$8$$, $name$jscomp$102_namex$$) {
  const $bufchain$jscomp$4$$ = this.virtio.queues[2].pop_request();
  $name$jscomp$102_namex$$ = (new TextEncoder).encode($name$jscomp$102_namex$$);
  const $buf$jscomp$2$$ = new Uint8Array(8 + $name$jscomp$102_namex$$.length + 1);
  $Marshall$$module$lib$marshall$$(["w", "h", "h"], [$i$jscomp$86_port$jscomp$8$$, 7, 1], $buf$jscomp$2$$, 0);
  for ($i$jscomp$86_port$jscomp$8$$ = 0; $i$jscomp$86_port$jscomp$8$$ < $name$jscomp$102_namex$$.length; ++$i$jscomp$86_port$jscomp$8$$) {
    $buf$jscomp$2$$[$i$jscomp$86_port$jscomp$8$$ + 8] = $name$jscomp$102_namex$$[$i$jscomp$86_port$jscomp$8$$];
  }
  $buf$jscomp$2$$[8 + $name$jscomp$102_namex$$.length] = 0;
  this.Send(2, $bufchain$jscomp$4$$, $buf$jscomp$2$$);
};
$VirtioConsole$$module$src$virtio_console$$.prototype.get_state = function() {
  const $state$jscomp$40$$ = [];
  $state$jscomp$40$$[0] = this.virtio;
  $state$jscomp$40$$[1] = this.rows;
  $state$jscomp$40$$[2] = this.cols;
  $state$jscomp$40$$[3] = this.ports;
  return $state$jscomp$40$$;
};
$VirtioConsole$$module$src$virtio_console$$.prototype.set_state = function($state$jscomp$41$$) {
  this.virtio.set_state($state$jscomp$41$$[0]);
  this.rows = $state$jscomp$41$$[1];
  this.cols = $state$jscomp$41$$[2];
  this.ports = $state$jscomp$41$$[3];
};
$VirtioConsole$$module$src$virtio_console$$.prototype.reset = function() {
  this.virtio.reset();
};
$VirtioConsole$$module$src$virtio_console$$.prototype.SendEvent = function($port$jscomp$9$$, $event$jscomp$13$$, $value$jscomp$170$$) {
  const $bufchain$jscomp$5$$ = this.virtio.queues[2].pop_request(), $buf$jscomp$3$$ = new Uint8Array(8);
  $Marshall$$module$lib$marshall$$(["w", "h", "h"], [$port$jscomp$9$$, $event$jscomp$13$$, $value$jscomp$170$$], $buf$jscomp$3$$, 0);
  this.Send(2, $bufchain$jscomp$5$$, $buf$jscomp$3$$);
};
$VirtioConsole$$module$src$virtio_console$$.prototype.Send = function($queue_id$jscomp$5$$, $bufchain$jscomp$6$$, $blob$jscomp$14$$) {
  $bufchain$jscomp$6$$.set_next_blob($blob$jscomp$14$$);
  this.virtio.queues[$queue_id$jscomp$5$$].push_reply($bufchain$jscomp$6$$);
  this.virtio.queues[$queue_id$jscomp$5$$].flush_replies();
};
$VirtioConsole$$module$src$virtio_console$$.prototype.Ack = function($queue_id$jscomp$6$$, $bufchain$jscomp$7$$) {
  $bufchain$jscomp$7$$.set_next_blob(new Uint8Array(0));
  this.virtio.queues[$queue_id$jscomp$6$$].push_reply($bufchain$jscomp$7$$);
  this.virtio.queues[$queue_id$jscomp$6$$].flush_replies();
};
function $PS2$$module$src$ps2$$($cpu$jscomp$21$$, $bus$jscomp$21$$) {
  this.cpu = $cpu$jscomp$21$$;
  this.bus = $bus$jscomp$21$$;
  this.reset();
  this.bus.register("keyboard-code", function($code$jscomp$7$$) {
    this.kbd_send_code($code$jscomp$7$$);
  }, this);
  this.bus.register("mouse-click", function($data$jscomp$182$$) {
    this.mouse_send_click($data$jscomp$182$$[0], $data$jscomp$182$$[1], $data$jscomp$182$$[2]);
  }, this);
  this.bus.register("mouse-delta", function($data$jscomp$183$$) {
    this.mouse_send_delta($data$jscomp$183$$[0], $data$jscomp$183$$[1]);
  }, this);
  this.bus.register("mouse-wheel", function($data$jscomp$184$$) {
    this.wheel_movement -= $data$jscomp$184$$[0];
    this.wheel_movement -= 2 * $data$jscomp$184$$[1];
    this.wheel_movement = Math.min(7, Math.max(-8, this.wheel_movement));
    this.send_mouse_packet(0, 0);
  }, this);
  $cpu$jscomp$21$$.io.register_read(96, this, this.port60_read);
  $cpu$jscomp$21$$.io.register_read(100, this, this.port64_read);
  $cpu$jscomp$21$$.io.register_write(96, this, this.port60_write);
  $cpu$jscomp$21$$.io.register_write(100, this, this.port64_write);
}
$PS2$$module$src$ps2$$.prototype.reset = function() {
  this.use_mouse = this.enable_mouse_stream = !1;
  this.have_mouse = !0;
  this.mouse_clicks = this.mouse_delta_y = this.mouse_delta_x = 0;
  this.have_keyboard = !0;
  this.next_read_resolution = this.next_read_rate = this.next_handle_scan_code_set = this.next_read_led = this.next_read_sample = this.next_is_mouse_command = this.enable_keyboard_stream = !1;
  this.kbd_buffer = new $ByteQueue$$module$src$lib$$(1024);
  this.last_port60_byte = 0;
  this.sample_rate = 100;
  this.mouse_id = this.mouse_detect_state = 0;
  this.mouse_reset_workaround = !1;
  this.wheel_movement = 0;
  this.resolution = 4;
  this.scaling2 = !1;
  this.last_mouse_packet = -1;
  this.mouse_buffer = new $ByteQueue$$module$src$lib$$(1024);
  this.next_byte_is_aux = this.next_byte_is_ready = !1;
  this.command_register = 5;
  this.controller_output_port = 0;
  this.read_controller_output_port = this.read_command_register = this.read_output_register = !1;
};
$PS2$$module$src$ps2$$.prototype.get_state = function() {
  var $state$jscomp$42$$ = [];
  $state$jscomp$42$$[0] = this.enable_mouse_stream;
  $state$jscomp$42$$[1] = this.use_mouse;
  $state$jscomp$42$$[2] = this.have_mouse;
  $state$jscomp$42$$[3] = this.mouse_delta_x;
  $state$jscomp$42$$[4] = this.mouse_delta_y;
  $state$jscomp$42$$[5] = this.mouse_clicks;
  $state$jscomp$42$$[6] = this.have_keyboard;
  $state$jscomp$42$$[7] = this.enable_keyboard_stream;
  $state$jscomp$42$$[8] = this.next_is_mouse_command;
  $state$jscomp$42$$[9] = this.next_read_sample;
  $state$jscomp$42$$[10] = this.next_read_led;
  $state$jscomp$42$$[11] = this.next_handle_scan_code_set;
  $state$jscomp$42$$[12] = this.next_read_rate;
  $state$jscomp$42$$[13] = this.next_read_resolution;
  $state$jscomp$42$$[15] = this.last_port60_byte;
  $state$jscomp$42$$[16] = this.sample_rate;
  $state$jscomp$42$$[17] = this.resolution;
  $state$jscomp$42$$[18] = this.scaling2;
  $state$jscomp$42$$[20] = this.command_register;
  $state$jscomp$42$$[21] = this.read_output_register;
  $state$jscomp$42$$[22] = this.read_command_register;
  $state$jscomp$42$$[23] = this.controller_output_port;
  $state$jscomp$42$$[24] = this.read_controller_output_port;
  $state$jscomp$42$$[25] = this.mouse_id;
  $state$jscomp$42$$[26] = this.mouse_detect_state;
  $state$jscomp$42$$[27] = this.mouse_reset_workaround;
  return $state$jscomp$42$$;
};
$PS2$$module$src$ps2$$.prototype.set_state = function($state$jscomp$43$$) {
  this.enable_mouse_stream = $state$jscomp$43$$[0];
  this.use_mouse = $state$jscomp$43$$[1];
  this.have_mouse = $state$jscomp$43$$[2];
  this.mouse_delta_x = $state$jscomp$43$$[3];
  this.mouse_delta_y = $state$jscomp$43$$[4];
  this.mouse_clicks = $state$jscomp$43$$[5];
  this.have_keyboard = $state$jscomp$43$$[6];
  this.enable_keyboard_stream = $state$jscomp$43$$[7];
  this.next_is_mouse_command = $state$jscomp$43$$[8];
  this.next_read_sample = $state$jscomp$43$$[9];
  this.next_read_led = $state$jscomp$43$$[10];
  this.next_handle_scan_code_set = $state$jscomp$43$$[11];
  this.next_read_rate = $state$jscomp$43$$[12];
  this.next_read_resolution = $state$jscomp$43$$[13];
  this.last_port60_byte = $state$jscomp$43$$[15];
  this.sample_rate = $state$jscomp$43$$[16];
  this.resolution = $state$jscomp$43$$[17];
  this.scaling2 = $state$jscomp$43$$[18];
  this.command_register = $state$jscomp$43$$[20];
  this.read_output_register = $state$jscomp$43$$[21];
  this.read_command_register = $state$jscomp$43$$[22];
  this.controller_output_port = $state$jscomp$43$$[23];
  this.read_controller_output_port = $state$jscomp$43$$[24];
  this.mouse_id = $state$jscomp$43$$[25] || 0;
  this.mouse_detect_state = $state$jscomp$43$$[26] || 0;
  this.mouse_reset_workaround = $state$jscomp$43$$[27] || !1;
  this.next_byte_is_aux = this.next_byte_is_ready = !1;
  this.kbd_buffer.clear();
  this.mouse_buffer.clear();
  this.bus.send("mouse-enable", this.use_mouse);
};
$PS2$$module$src$ps2$$.prototype.raise_irq = function() {
  this.next_byte_is_ready || (this.kbd_buffer.length ? this.kbd_irq() : this.mouse_buffer.length && this.mouse_irq());
};
$PS2$$module$src$ps2$$.prototype.mouse_irq = function() {
  this.next_byte_is_aux = this.next_byte_is_ready = !0;
  this.command_register & 2 && ($dbg_log$$module$src$log$$("Mouse irq", 64), this.cpu.device_lower_irq(12), this.cpu.device_raise_irq(12));
};
$PS2$$module$src$ps2$$.prototype.kbd_irq = function() {
  this.next_byte_is_ready = !0;
  this.next_byte_is_aux = !1;
  this.command_register & 1 && ($dbg_log$$module$src$log$$("Keyboard irq", 64), this.cpu.device_lower_irq(1), this.cpu.device_raise_irq(1));
};
$PS2$$module$src$ps2$$.prototype.kbd_send_code = function($code$jscomp$8$$) {
  this.enable_keyboard_stream && ($dbg_log$$module$src$log$$("adding kbd code: " + $h$$module$src$lib$$($code$jscomp$8$$), 64), this.kbd_buffer.push($code$jscomp$8$$), this.raise_irq());
};
$PS2$$module$src$ps2$$.prototype.mouse_send_delta = function($change_x_delta_x$jscomp$2$$, $change_y_delta_y$jscomp$2$$) {
  if (this.have_mouse && this.use_mouse) {
    var $factor$jscomp$2$$ = this.resolution * this.sample_rate / 80;
    this.mouse_delta_x += $change_x_delta_x$jscomp$2$$ * $factor$jscomp$2$$;
    this.mouse_delta_y += $change_y_delta_y$jscomp$2$$ * $factor$jscomp$2$$;
    this.enable_mouse_stream && ($change_x_delta_x$jscomp$2$$ = this.mouse_delta_x | 0, $change_y_delta_y$jscomp$2$$ = this.mouse_delta_y | 0, $change_x_delta_x$jscomp$2$$ || $change_y_delta_y$jscomp$2$$) && (Date.now(), this.mouse_delta_x -= $change_x_delta_x$jscomp$2$$, this.mouse_delta_y -= $change_y_delta_y$jscomp$2$$, this.send_mouse_packet($change_x_delta_x$jscomp$2$$, $change_y_delta_y$jscomp$2$$));
  }
};
$PS2$$module$src$ps2$$.prototype.mouse_send_click = function($left$jscomp$5$$, $middle$$, $right$jscomp$5$$) {
  this.have_mouse && this.use_mouse && (this.mouse_clicks = $left$jscomp$5$$ | $right$jscomp$5$$ << 1 | $middle$$ << 2, this.enable_mouse_stream && this.send_mouse_packet(0, 0));
};
$PS2$$module$src$ps2$$.prototype.send_mouse_packet = function($dx$jscomp$4$$, $dy$jscomp$4$$) {
  var $info_byte$$ = (0 > $dy$jscomp$4$$) << 5 | (0 > $dx$jscomp$4$$) << 4 | 8 | this.mouse_clicks;
  this.last_mouse_packet = Date.now();
  this.mouse_buffer.push($info_byte$$);
  this.mouse_buffer.push($dx$jscomp$4$$);
  this.mouse_buffer.push($dy$jscomp$4$$);
  4 === this.mouse_id ? (this.mouse_buffer.push(0 | this.wheel_movement & 15), this.wheel_movement = 0) : 3 === this.mouse_id && (this.mouse_buffer.push(this.wheel_movement & 255), this.wheel_movement = 0);
  this.raise_irq();
};
$PS2$$module$src$ps2$$.prototype.apply_scaling2 = function($n$jscomp$12$$) {
  var $sign$$ = $n$jscomp$12$$ >> 31;
  switch(Math.abs($n$jscomp$12$$)) {
    case 0:
    case 1:
    case 3:
      return $n$jscomp$12$$;
    case 2:
      return $sign$$;
    case 4:
      return 6 * $sign$$;
    case 5:
      return 9 * $sign$$;
    default:
      return $n$jscomp$12$$ << 1;
  }
};
$PS2$$module$src$ps2$$.prototype.port60_read = function() {
  this.next_byte_is_ready = !1;
  if (!this.kbd_buffer.length && !this.mouse_buffer.length) {
    return $dbg_log$$module$src$log$$("Port 60 read: Empty", 64), this.last_port60_byte;
  }
  this.next_byte_is_aux ? (this.cpu.device_lower_irq(12), this.last_port60_byte = this.mouse_buffer.shift(), $dbg_log$$module$src$log$$("Port 60 read (mouse): " + $h$$module$src$lib$$(this.last_port60_byte), 64)) : (this.cpu.device_lower_irq(1), this.last_port60_byte = this.kbd_buffer.shift(), $dbg_log$$module$src$log$$("Port 60 read (kbd)  : " + $h$$module$src$lib$$(this.last_port60_byte), 64));
  (this.kbd_buffer.length || this.mouse_buffer.length) && this.raise_irq();
  return this.last_port60_byte;
};
$PS2$$module$src$ps2$$.prototype.port64_read = function() {
  var $status_byte$$ = 16;
  this.next_byte_is_ready && ($status_byte$$ |= 1);
  this.next_byte_is_aux && ($status_byte$$ |= 32);
  $dbg_log$$module$src$log$$("port 64 read: " + $h$$module$src$lib$$($status_byte$$), 64);
  return $status_byte$$;
};
$PS2$$module$src$ps2$$.prototype.port60_write = function($write_byte$$) {
  $dbg_log$$module$src$log$$("port 60 write: " + $h$$module$src$lib$$($write_byte$$), 64);
  if (this.read_command_register) {
    this.command_register = $write_byte$$, this.read_command_register = !1, $dbg_log$$module$src$log$$("Keyboard command register = " + $h$$module$src$lib$$(this.command_register), 64);
  } else {
    if (this.read_output_register) {
      this.read_output_register = !1, this.mouse_buffer.clear(), this.mouse_buffer.push($write_byte$$), this.mouse_irq();
    } else {
      if (this.next_read_sample) {
        this.next_read_sample = !1;
        this.mouse_buffer.clear();
        this.mouse_buffer.push(250);
        this.sample_rate = $write_byte$$;
        switch(this.mouse_detect_state) {
          case -1:
            60 === $write_byte$$ ? (this.mouse_reset_workaround = !0, this.mouse_detect_state = 0) : (this.mouse_reset_workaround = !1, this.mouse_detect_state = 200 === $write_byte$$ ? 1 : 0);
            break;
          case 0:
            200 === $write_byte$$ && (this.mouse_detect_state = 1);
            break;
          case 1:
            this.mouse_detect_state = 100 === $write_byte$$ ? 2 : 200 === $write_byte$$ ? 3 : 0;
            break;
          case 2:
            80 === $write_byte$$ && (this.mouse_id = 3);
            this.mouse_detect_state = -1;
            break;
          case 3:
            80 === $write_byte$$ && (this.mouse_id = 4), this.mouse_detect_state = -1;
        }
        $dbg_log$$module$src$log$$("mouse sample rate: " + $h$$module$src$lib$$($write_byte$$) + ", mouse id: " + $h$$module$src$lib$$(this.mouse_id), 64);
        this.sample_rate || ($dbg_log$$module$src$log$$("invalid sample rate, reset to 100", 64), this.sample_rate = 100);
        this.mouse_irq();
      } else {
        if (this.next_read_resolution) {
          this.next_read_resolution = !1, this.mouse_buffer.clear(), this.mouse_buffer.push(250), 3 < $write_byte$$ ? (this.resolution = 4, $dbg_log$$module$src$log$$("invalid resolution, resetting to 4", 64)) : (this.resolution = 1 << $write_byte$$, $dbg_log$$module$src$log$$("resolution: " + this.resolution, 64)), this.mouse_irq();
        } else {
          if (this.next_read_led) {
            this.next_read_led = !1, this.kbd_buffer.push(250), this.kbd_irq();
          } else {
            if (this.next_handle_scan_code_set) {
              this.next_handle_scan_code_set = !1, this.kbd_buffer.push(250), this.kbd_irq(), $write_byte$$ || this.kbd_buffer.push(1);
            } else {
              if (this.next_read_rate) {
                this.next_read_rate = !1, this.kbd_buffer.push(250), this.kbd_irq();
              } else {
                if (this.next_is_mouse_command) {
                  if (this.next_is_mouse_command = !1, $dbg_log$$module$src$log$$("Port 60 data register write: " + $h$$module$src$lib$$($write_byte$$), 64), this.have_mouse) {
                    this.kbd_buffer.clear();
                    this.mouse_buffer.clear();
                    this.mouse_buffer.push(250);
                    switch($write_byte$$) {
                      case 230:
                        $dbg_log$$module$src$log$$("Scaling 1:1", 64);
                        this.scaling2 = !1;
                        break;
                      case 231:
                        $dbg_log$$module$src$log$$("Scaling 2:1", 64);
                        this.scaling2 = !0;
                        break;
                      case 232:
                        this.next_read_resolution = !0;
                        break;
                      case 233:
                        this.send_mouse_packet(0, 0);
                        break;
                      case 235:
                        $dbg_log$$module$src$log$$("unimplemented request single packet", 64);
                        this.send_mouse_packet(0, 0);
                        break;
                      case 242:
                        $dbg_log$$module$src$log$$("required id: " + $h$$module$src$lib$$(this.mouse_id), 64);
                        this.mouse_buffer.push(this.mouse_id);
                        this.mouse_clicks = this.mouse_delta_x = this.mouse_delta_y = 0;
                        this.raise_irq();
                        break;
                      case 243:
                        this.next_read_sample = !0;
                        break;
                      case 244:
                        this.use_mouse = this.enable_mouse_stream = !0;
                        this.bus.send("mouse-enable", !0);
                        this.mouse_clicks = this.mouse_delta_x = this.mouse_delta_y = 0;
                        break;
                      case 245:
                        this.enable_mouse_stream = !1;
                        break;
                      case 246:
                        this.enable_mouse_stream = !1;
                        this.sample_rate = 100;
                        this.scaling2 = !1;
                        this.resolution = 4;
                        break;
                      case 255:
                        $dbg_log$$module$src$log$$("Mouse reset", 64);
                        this.mouse_buffer.push(170);
                        this.mouse_buffer.push(0);
                        this.use_mouse = !0;
                        this.bus.send("mouse-enable", !0);
                        this.enable_mouse_stream = !1;
                        this.sample_rate = 100;
                        this.scaling2 = !1;
                        this.resolution = 4;
                        this.mouse_reset_workaround || (this.mouse_id = 0);
                        this.mouse_clicks = this.mouse_delta_x = this.mouse_delta_y = 0;
                        break;
                      default:
                        $dbg_log$$module$src$log$$("Unimplemented mouse command: " + $h$$module$src$lib$$($write_byte$$), 64);
                    }
                    this.mouse_irq();
                  }
                } else {
                  if (this.read_controller_output_port) {
                    this.read_controller_output_port = !1, this.controller_output_port = $write_byte$$;
                  } else {
                    $dbg_log$$module$src$log$$("Port 60 data register write: " + $h$$module$src$lib$$($write_byte$$), 64);
                    this.mouse_buffer.clear();
                    this.kbd_buffer.clear();
                    this.kbd_buffer.push(250);
                    switch($write_byte$$) {
                      case 237:
                        this.next_read_led = !0;
                        break;
                      case 240:
                        this.next_handle_scan_code_set = !0;
                        break;
                      case 242:
                        this.kbd_buffer.push(171);
                        this.kbd_buffer.push(131);
                        break;
                      case 243:
                        this.next_read_rate = !0;
                        break;
                      case 244:
                        $dbg_log$$module$src$log$$("kbd enable scanning", 64);
                        this.enable_keyboard_stream = !0;
                        break;
                      case 245:
                        $dbg_log$$module$src$log$$("kbd disable scanning", 64);
                        this.enable_keyboard_stream = !1;
                        break;
                      case 246:
                        break;
                      case 255:
                        this.kbd_buffer.clear();
                        this.kbd_buffer.push(250);
                        this.kbd_buffer.push(170);
                        this.kbd_buffer.push(0);
                        break;
                      default:
                        $dbg_log$$module$src$log$$("Unimplemented keyboard command: " + $h$$module$src$lib$$($write_byte$$), 64);
                    }
                    this.kbd_irq();
                  }
                }
              }
            }
          }
        }
      }
    }
  }
};
$PS2$$module$src$ps2$$.prototype.port64_write = function($write_byte$jscomp$1$$) {
  $dbg_log$$module$src$log$$("port 64 write: " + $h$$module$src$lib$$($write_byte$jscomp$1$$), 64);
  switch($write_byte$jscomp$1$$) {
    case 32:
      this.kbd_buffer.clear();
      this.mouse_buffer.clear();
      this.kbd_buffer.push(this.command_register);
      this.kbd_irq();
      break;
    case 96:
      this.read_command_register = !0;
      break;
    case 209:
      this.read_controller_output_port = !0;
      break;
    case 211:
      this.read_output_register = !0;
      break;
    case 212:
      this.next_is_mouse_command = !0;
      break;
    case 167:
      $dbg_log$$module$src$log$$("Disable second port", 64);
      this.command_register |= 32;
      break;
    case 168:
      $dbg_log$$module$src$log$$("Enable second port", 64);
      this.command_register &= -33;
      break;
    case 169:
      this.kbd_buffer.clear();
      this.mouse_buffer.clear();
      this.kbd_buffer.push(0);
      this.kbd_irq();
      break;
    case 170:
      this.kbd_buffer.clear();
      this.mouse_buffer.clear();
      this.kbd_buffer.push(85);
      this.kbd_irq();
      break;
    case 171:
      this.kbd_buffer.clear();
      this.mouse_buffer.clear();
      this.kbd_buffer.push(0);
      this.kbd_irq();
      break;
    case 173:
      $dbg_log$$module$src$log$$("Disable Keyboard", 64);
      this.command_register |= 16;
      break;
    case 174:
      $dbg_log$$module$src$log$$("Enable Keyboard", 64);
      this.command_register &= -17;
      break;
    case 254:
      $dbg_log$$module$src$log$$("CPU reboot via PS2");
      this.cpu.reboot_internal();
      break;
    default:
      $dbg_log$$module$src$log$$("port 64: Unimplemented command byte: " + $h$$module$src$lib$$($write_byte$jscomp$1$$), 64);
  }
};
const $types$$module$src$elf$$ = DataView.prototype, $U8$$module$src$elf$$ = {size:1, get:$types$$module$src$elf$$.getUint8, set:$types$$module$src$elf$$.setUint8, }, $U16$$module$src$elf$$ = {size:2, get:$types$$module$src$elf$$.getUint16, set:$types$$module$src$elf$$.setUint16, }, $U32$$module$src$elf$$ = {size:4, get:$types$$module$src$elf$$.getUint32, set:$types$$module$src$elf$$.setUint32, }, $Header$$module$src$elf$$ = $create_struct$$module$src$elf$$([{magic:$U32$$module$src$elf$$, }, {class:$U8$$module$src$elf$$, 
}, {data:$U8$$module$src$elf$$, }, {version0:$U8$$module$src$elf$$, }, {osabi:$U8$$module$src$elf$$, }, {abiversion:$U8$$module$src$elf$$, }, {pad0:function($size$jscomp$37$$) {
  return {size:$size$jscomp$37$$, get:() => -1, };
}(7)}, {type:$U16$$module$src$elf$$, }, {machine:$U16$$module$src$elf$$, }, {version1:$U32$$module$src$elf$$, }, {entry:$U32$$module$src$elf$$, }, {phoff:$U32$$module$src$elf$$, }, {shoff:$U32$$module$src$elf$$, }, {flags:$U32$$module$src$elf$$, }, {ehsize:$U16$$module$src$elf$$, }, {phentsize:$U16$$module$src$elf$$, }, {phnum:$U16$$module$src$elf$$, }, {shentsize:$U16$$module$src$elf$$, }, {shnum:$U16$$module$src$elf$$, }, {shstrndx:$U16$$module$src$elf$$, }, ]);
console.assert(52 === $Header$$module$src$elf$$.reduce(($a$jscomp$7$$, $entry$jscomp$8$$) => $a$jscomp$7$$ + $entry$jscomp$8$$.size, 0));
const $ProgramHeader$$module$src$elf$$ = $create_struct$$module$src$elf$$([{type:$U32$$module$src$elf$$, }, {offset:$U32$$module$src$elf$$, }, {vaddr:$U32$$module$src$elf$$, }, {paddr:$U32$$module$src$elf$$, }, {filesz:$U32$$module$src$elf$$, }, {memsz:$U32$$module$src$elf$$, }, {flags:$U32$$module$src$elf$$, }, {align:$U32$$module$src$elf$$, }, ]);
console.assert(32 === $ProgramHeader$$module$src$elf$$.reduce(($a$jscomp$8$$, $entry$jscomp$9$$) => $a$jscomp$8$$ + $entry$jscomp$9$$.size, 0));
const $SectionHeader$$module$src$elf$$ = $create_struct$$module$src$elf$$([{name:$U32$$module$src$elf$$, }, {type:$U32$$module$src$elf$$, }, {flags:$U32$$module$src$elf$$, }, {addr:$U32$$module$src$elf$$, }, {offset:$U32$$module$src$elf$$, }, {size:$U32$$module$src$elf$$, }, {link:$U32$$module$src$elf$$, }, {info:$U32$$module$src$elf$$, }, {addralign:$U32$$module$src$elf$$, }, {entsize:$U32$$module$src$elf$$, }, ]);
console.assert(40 === $SectionHeader$$module$src$elf$$.reduce(($a$jscomp$9$$, $entry$jscomp$10$$) => $a$jscomp$9$$ + $entry$jscomp$10$$.size, 0));
function $create_struct$$module$src$elf$$($struct$jscomp$2$$) {
  return $struct$jscomp$2$$.map(function($entry$jscomp$11_type$jscomp$155$$) {
    var $keys$jscomp$1_name$jscomp$103$$ = Object.keys($entry$jscomp$11_type$jscomp$155$$);
    console.assert(1 === $keys$jscomp$1_name$jscomp$103$$.length);
    $keys$jscomp$1_name$jscomp$103$$ = $keys$jscomp$1_name$jscomp$103$$[0];
    $entry$jscomp$11_type$jscomp$155$$ = $entry$jscomp$11_type$jscomp$155$$[$keys$jscomp$1_name$jscomp$103$$];
    console.assert(0 < $entry$jscomp$11_type$jscomp$155$$.size);
    return {name:$keys$jscomp$1_name$jscomp$103$$, type:$entry$jscomp$11_type$jscomp$155$$, size:$entry$jscomp$11_type$jscomp$155$$.size, get:$entry$jscomp$11_type$jscomp$155$$.get, set:$entry$jscomp$11_type$jscomp$155$$.set, };
  });
}
function $read_struct$$module$src$elf$$($view$jscomp$29$$, $Struct_value$jscomp$171$$) {
  const $result$jscomp$16$$ = {};
  let $offset$jscomp$68$$ = 0;
  for (const $entry$jscomp$12$$ of $Struct_value$jscomp$171$$) {
    $Struct_value$jscomp$171$$ = $entry$jscomp$12$$.get.call($view$jscomp$29$$, $offset$jscomp$68$$, !0), console.assert(void 0 === $result$jscomp$16$$[$entry$jscomp$12$$.name]), $result$jscomp$16$$[$entry$jscomp$12$$.name] = $Struct_value$jscomp$171$$, $offset$jscomp$68$$ += $entry$jscomp$12$$.size;
  }
  return [$result$jscomp$16$$, $offset$jscomp$68$$];
}
function $read_structs$$module$src$elf$$($view$jscomp$30$$, $Struct$jscomp$1$$, $count$jscomp$56$$) {
  const $result$jscomp$17$$ = [];
  let $offset$jscomp$69$$ = 0;
  for (var $i$jscomp$87$$ = 0; $i$jscomp$87$$ < $count$jscomp$56$$; $i$jscomp$87$$++) {
    const [$s$jscomp$7$$, $size$jscomp$38$$] = $read_struct$$module$src$elf$$(new DataView($view$jscomp$30$$.buffer, $view$jscomp$30$$.byteOffset + $offset$jscomp$69$$, void 0), $Struct$jscomp$1$$);
    $result$jscomp$17$$.push($s$jscomp$7$$);
    $offset$jscomp$69$$ += $size$jscomp$38$$;
  }
  return [$result$jscomp$17$$, $offset$jscomp$69$$];
}
;function $FloppyController$$module$src$floppy$$($cpu$jscomp$22$$, $fda_image$$, $fdb_image$$) {
  this.io = $cpu$jscomp$22$$.io;
  this.cpu = $cpu$jscomp$22$$;
  this.dma = $cpu$jscomp$22$$.devices.dma;
  this.bytes_expecting = 0;
  this.receiving_command = new Uint8Array(10);
  this.receiving_index = 0;
  this.next_command = null;
  this.response_data = new Uint8Array(10);
  this.last_head = this.last_cylinder = this.drive = this.status_reg2 = this.status_reg1 = this.status_reg0 = this.response_length = this.response_index = 0;
  this.last_sector = 1;
  this.dir = this.dor = 0;
  this.fdb_image = this.fda_image = null;
  $fda_image$$ ? this.set_fda($fda_image$$) : (this.eject_fda(), this.cpu.devices.rtc.cmos_write(16, 64));
  $dbg_assert$$module$src$log$$(!$fdb_image$$, "FDB not supported");
  this.io.register_read(1008, this, this.port3F0_read);
  this.io.register_read(1010, this, this.port3F2_read);
  this.io.register_read(1012, this, this.port3F4_read);
  this.io.register_read(1013, this, this.port3F5_read);
  this.io.register_read(1015, this, this.port3F7_read);
  this.io.register_write(1010, this, this.port3F2_write);
  this.io.register_write(1012, this, this.port3F4_write);
  this.io.register_write(1013, this, this.port3F5_write);
}
$FloppyController$$module$src$floppy$$.prototype.eject_fda = function() {
  this.fda_image = null;
  this.number_of_cylinders = this.number_of_heads = this.sectors_per_track = 0;
  this.dir = 128;
};
$FloppyController$$module$src$floppy$$.prototype.set_fda = function($fda_image$jscomp$1$$) {
  var $floppy_types_new_image$$ = {[163840]:{type:1, tracks:40, sectors:8, heads:1}, [184320]:{type:1, tracks:40, sectors:9, heads:1}, [204800]:{type:1, tracks:40, sectors:10, heads:1}, [327680]:{type:1, tracks:40, sectors:8, heads:2}, [368640]:{type:1, tracks:40, sectors:9, heads:2}, [409600]:{type:1, tracks:40, sectors:10, heads:2}, [737280]:{type:3, tracks:80, sectors:9, heads:2}, [1228800]:{type:2, tracks:80, sectors:15, heads:2}, [1474560]:{type:4, tracks:80, sectors:18, heads:2}, [1763328]:{type:5, 
  tracks:82, sectors:21, heads:2}, [2949120]:{type:5, tracks:80, sectors:36, heads:2}, 512:{type:1, tracks:1, sectors:1, heads:1}, };
  let $floppy_size$$ = $fda_image$jscomp$1$$.byteLength, $floppy_type$$ = $floppy_types_new_image$$[$floppy_size$$];
  $floppy_type$$ || ($floppy_size$$ = 1474560 < $fda_image$jscomp$1$$.byteLength ? 2949120 : 1474560, $floppy_type$$ = $floppy_types_new_image$$[$floppy_size$$], $dbg_assert$$module$src$log$$($fda_image$jscomp$1$$.buffer && $fda_image$jscomp$1$$.buffer instanceof ArrayBuffer), $floppy_types_new_image$$ = new Uint8Array($floppy_size$$), $floppy_types_new_image$$.set(new Uint8Array($fda_image$jscomp$1$$.buffer)), $fda_image$jscomp$1$$ = new $SyncBuffer$$module$src$buffer$$($floppy_types_new_image$$.buffer), 
  $dbg_log$$module$src$log$$("Warning: Unkown floppy size: " + $fda_image$jscomp$1$$.byteLength + ", assuming " + $floppy_size$$));
  this.sectors_per_track = $floppy_type$$.sectors;
  this.number_of_heads = $floppy_type$$.heads;
  this.number_of_cylinders = $floppy_type$$.tracks;
  this.fda_image = $fda_image$jscomp$1$$;
  this.dir = 128;
  this.cpu.devices.rtc.cmos_write(16, $floppy_type$$.type << 4);
};
$FloppyController$$module$src$floppy$$.prototype.get_state = function() {
  var $state$jscomp$44$$ = [];
  $state$jscomp$44$$[0] = this.bytes_expecting;
  $state$jscomp$44$$[1] = this.receiving_command;
  $state$jscomp$44$$[2] = this.receiving_index;
  $state$jscomp$44$$[4] = this.response_data;
  $state$jscomp$44$$[5] = this.response_index;
  $state$jscomp$44$$[6] = this.response_length;
  $state$jscomp$44$$[8] = this.status_reg0;
  $state$jscomp$44$$[9] = this.status_reg1;
  $state$jscomp$44$$[10] = this.status_reg2;
  $state$jscomp$44$$[11] = this.drive;
  $state$jscomp$44$$[12] = this.last_cylinder;
  $state$jscomp$44$$[13] = this.last_head;
  $state$jscomp$44$$[14] = this.last_sector;
  $state$jscomp$44$$[15] = this.dor;
  $state$jscomp$44$$[16] = this.sectors_per_track;
  $state$jscomp$44$$[17] = this.number_of_heads;
  $state$jscomp$44$$[18] = this.number_of_cylinders;
  return $state$jscomp$44$$;
};
$FloppyController$$module$src$floppy$$.prototype.set_state = function($state$jscomp$45$$) {
  this.bytes_expecting = $state$jscomp$45$$[0];
  this.receiving_command = $state$jscomp$45$$[1];
  this.receiving_index = $state$jscomp$45$$[2];
  this.next_command = $state$jscomp$45$$[3];
  this.response_data = $state$jscomp$45$$[4];
  this.response_index = $state$jscomp$45$$[5];
  this.response_length = $state$jscomp$45$$[6];
  this.status_reg0 = $state$jscomp$45$$[8];
  this.status_reg1 = $state$jscomp$45$$[9];
  this.status_reg2 = $state$jscomp$45$$[10];
  this.drive = $state$jscomp$45$$[11];
  this.last_cylinder = $state$jscomp$45$$[12];
  this.last_head = $state$jscomp$45$$[13];
  this.last_sector = $state$jscomp$45$$[14];
  this.dor = $state$jscomp$45$$[15];
  this.sectors_per_track = $state$jscomp$45$$[16];
  this.number_of_heads = $state$jscomp$45$$[17];
  this.number_of_cylinders = $state$jscomp$45$$[18];
};
$FloppyController$$module$src$floppy$$.prototype.port3F0_read = function() {
  $dbg_log$$module$src$log$$("3F0 read", 8192);
  return 0;
};
$FloppyController$$module$src$floppy$$.prototype.port3F4_read = function() {
  $dbg_log$$module$src$log$$("3F4 read", 8192);
  var $return_byte$$ = 128;
  this.response_index < this.response_length && ($return_byte$$ |= 80);
  0 === (this.dor & 8) && ($return_byte$$ |= 32);
  return $return_byte$$;
};
$FloppyController$$module$src$floppy$$.prototype.port3F7_read = function() {
  $dbg_log$$module$src$log$$("3F7 read", 8192);
  return this.dir;
};
$FloppyController$$module$src$floppy$$.prototype.port3F5_read = function() {
  if (this.response_index < this.response_length) {
    return $dbg_log$$module$src$log$$("3F5 read: " + this.response_data[this.response_index], 8192), this.cpu.device_lower_irq(6), this.response_data[this.response_index++];
  }
  $dbg_log$$module$src$log$$("3F5 read, empty", 8192);
  return 255;
};
$FloppyController$$module$src$floppy$$.prototype.port3F4_write = function($byte$jscomp$4$$) {
  $dbg_log$$module$src$log$$("3F4/data rate write: " + $h$$module$src$lib$$($byte$jscomp$4$$), 8192);
  $byte$jscomp$4$$ & 128 && ($dbg_log$$module$src$log$$("dsr reset", 8192), this.status_reg0 = 192, this.cpu.device_raise_irq(6));
};
$FloppyController$$module$src$floppy$$.prototype.port3F5_write = function($log_reg_byte$jscomp$1$$) {
  $dbg_log$$module$src$log$$("3F5 write " + $h$$module$src$lib$$($log_reg_byte$jscomp$1$$), 8192);
  if (0 < this.bytes_expecting) {
    if (this.receiving_command[this.receiving_index++] = $log_reg_byte$jscomp$1$$, this.bytes_expecting--, 0 === this.bytes_expecting) {
      $log_reg_byte$jscomp$1$$ = "3F5 command received: ";
      for (var $i$jscomp$88$$ = 0; $i$jscomp$88$$ < this.receiving_index; $i$jscomp$88$$++) {
        $log_reg_byte$jscomp$1$$ += $h$$module$src$lib$$(this.receiving_command[$i$jscomp$88$$]) + " ";
      }
      $dbg_log$$module$src$log$$($log_reg_byte$jscomp$1$$, 8192);
      this.next_command.call(this, this.receiving_command);
    }
  } else {
    switch($log_reg_byte$jscomp$1$$) {
      case 3:
        this.next_command = this.fix_drive_data;
        this.bytes_expecting = 2;
        break;
      case 19:
        this.next_command = this.configure;
        this.bytes_expecting = 3;
        break;
      case 4:
      case 20:
        this.next_command = this.check_drive_status;
        this.bytes_expecting = 1;
        break;
      case 5:
      case 69:
      case 197:
        this.next_command = function($args$jscomp$3$$) {
          this.do_sector(!0, $args$jscomp$3$$);
        };
        this.bytes_expecting = 8;
        break;
      case 6:
      case 70:
      case 198:
      case 230:
        this.next_command = function($args$jscomp$4$$) {
          this.do_sector(!1, $args$jscomp$4$$);
        };
        this.bytes_expecting = 8;
        break;
      case 7:
        this.next_command = this.calibrate;
        this.bytes_expecting = 1;
        break;
      case 8:
        this.check_interrupt_status();
        break;
      case 74:
        this.next_command = this.read_sector_id;
        this.bytes_expecting = 1;
        break;
      case 15:
        this.bytes_expecting = 2;
        this.next_command = this.seek;
        break;
      case 14:
      case 16:
        $dbg_log$$module$src$log$$(14 === $log_reg_byte$jscomp$1$$ ? "dump registers" : "determine controller version", 8192);
        this.status_reg0 = 128;
        this.response_data[0] = this.status_reg0;
        this.response_index = 0;
        this.response_length = 1;
        this.bytes_expecting = 0;
        break;
      default:
        $dbg_assert$$module$src$log$$(!1, "Unimplemented floppy command call " + $h$$module$src$lib$$($log_reg_byte$jscomp$1$$));
    }
    this.receiving_index = 0;
  }
};
$FloppyController$$module$src$floppy$$.prototype.port3F2_read = function() {
  $dbg_log$$module$src$log$$("read 3F2: DOR", 8192);
  return this.dor;
};
$FloppyController$$module$src$floppy$$.prototype.port3F2_write = function($value$jscomp$172$$) {
  !(this.dor & 4) && $value$jscomp$172$$ & 4 && (this.status_reg0 = 192, $value$jscomp$172$$ & 8 && this.cpu.device_raise_irq(6));
  $dbg_log$$module$src$log$$("start motors: " + $h$$module$src$lib$$($value$jscomp$172$$ >> 4), 8192);
  $dbg_log$$module$src$log$$("enable dma/irq: " + !!($value$jscomp$172$$ & 8), 8192);
  $dbg_log$$module$src$log$$("reset fdc: " + !($value$jscomp$172$$ & 4), 8192);
  $dbg_log$$module$src$log$$("drive select: " + ($value$jscomp$172$$ & 3), 8192);
  0 !== ($value$jscomp$172$$ & 3) && $dbg_log$$module$src$log$$("guest: fdb not implemented", 8192);
  $dbg_log$$module$src$log$$("DOR = " + $h$$module$src$lib$$($value$jscomp$172$$), 8192);
  this.dor = $value$jscomp$172$$;
};
$FloppyController$$module$src$floppy$$.prototype.check_drive_status = function() {
  $dbg_log$$module$src$log$$("check drive status", 8192);
  this.status_reg1 = this.fda_image ? 0 : 5;
  this.response_index = 0;
  this.response_length = 1;
  this.response_data[0] = 0;
};
$FloppyController$$module$src$floppy$$.prototype.seek = function($args$jscomp$6_new_head$jscomp$1$$) {
  $dbg_log$$module$src$log$$("seek", 8192);
  if (0 !== ($args$jscomp$6_new_head$jscomp$1$$[0] & 3)) {
    $dbg_log$$module$src$log$$("seek on fdb", 8192);
  } else {
    var $new_cylinder$$ = $args$jscomp$6_new_head$jscomp$1$$[1];
    $args$jscomp$6_new_head$jscomp$1$$ = $args$jscomp$6_new_head$jscomp$1$$[0] >> 2 & 1;
    $new_cylinder$$ !== this.last_cylinder && (this.dir = 0);
    this.status_reg1 = this.fda_image ? 0 : 5;
    this.status_reg0 = 32;
    this.last_cylinder = $new_cylinder$$;
    this.last_head = $args$jscomp$6_new_head$jscomp$1$$;
  }
  this.raise_irq();
};
$FloppyController$$module$src$floppy$$.prototype.calibrate = function($args$jscomp$7$$) {
  $dbg_log$$module$src$log$$("floppy calibrate", 8192);
  this.seek([$args$jscomp$7$$[0], 0]);
};
$FloppyController$$module$src$floppy$$.prototype.check_interrupt_status = function() {
  $dbg_log$$module$src$log$$("floppy check interrupt status", 8192);
  this.response_index = 0;
  this.response_length = 2;
  this.response_data[0] = this.status_reg0;
  this.response_data[1] = this.last_cylinder;
};
$FloppyController$$module$src$floppy$$.prototype.do_sector = function($is_write$$, $args$jscomp$8$$) {
  var $head$$ = $args$jscomp$8$$[2], $cylinder$$ = $args$jscomp$8$$[1], $sector$$ = $args$jscomp$8$$[3], $sector_size$$ = 128 << $args$jscomp$8$$[4], $read_count$jscomp$2$$ = $args$jscomp$8$$[5] - $args$jscomp$8$$[3] + 1, $read_offset$$ = (($head$$ + this.number_of_heads * $cylinder$$) * this.sectors_per_track + $sector$$ - 1) * $sector_size$$;
  $dbg_log$$module$src$log$$("Floppy " + ($is_write$$ ? "Write" : "Read"), 8192);
  $dbg_log$$module$src$log$$("from " + $h$$module$src$lib$$($read_offset$$) + " length " + $h$$module$src$lib$$($read_count$jscomp$2$$ * $sector_size$$), 8192);
  $dbg_log$$module$src$log$$($cylinder$$ + " / " + $head$$ + " / " + $sector$$, 8192);
  $args$jscomp$8$$[4] || $dbg_log$$module$src$log$$("FDC: sector count is zero, use data length instead", 8192);
  this.fda_image ? (this.status_reg1 = 0, $is_write$$ ? this.dma.do_write(this.fda_image, $read_offset$$, $read_count$jscomp$2$$ * $sector_size$$, 2, this.done.bind(this, $args$jscomp$8$$, $cylinder$$, $head$$, $sector$$)) : this.dma.do_read(this.fda_image, $read_offset$$, $read_count$jscomp$2$$ * $sector_size$$, 2, this.done.bind(this, $args$jscomp$8$$, $cylinder$$, $head$$, $sector$$))) : this.status_reg1 = 5;
};
$FloppyController$$module$src$floppy$$.prototype.done = function($args$jscomp$9$$, $cylinder$jscomp$1$$, $head$jscomp$1$$, $sector$jscomp$1$$, $error$jscomp$4$$) {
  $error$jscomp$4$$ ? $dbg_log$$module$src$log$$("XXX: Unhandled floppy error", 8192) : ($sector$jscomp$1$$++, $sector$jscomp$1$$ > this.sectors_per_track && ($sector$jscomp$1$$ = 1, $head$jscomp$1$$++, $head$jscomp$1$$ >= this.number_of_heads && ($head$jscomp$1$$ = 0, $cylinder$jscomp$1$$++)), $cylinder$jscomp$1$$ !== this.last_cylinder && (this.dir = 0), this.status_reg0 = 32, this.last_cylinder = $cylinder$jscomp$1$$, this.last_head = $head$jscomp$1$$, this.last_sector = $sector$jscomp$1$$, this.response_index = 
  0, this.response_length = 7, this.response_data[0] = $head$jscomp$1$$ << 2 | 32, this.response_data[1] = 0, this.response_data[2] = 0, this.response_data[3] = $cylinder$jscomp$1$$, this.response_data[4] = $head$jscomp$1$$, this.response_data[5] = $sector$jscomp$1$$, this.response_data[6] = $args$jscomp$9$$[4], this.raise_irq());
};
$FloppyController$$module$src$floppy$$.prototype.fix_drive_data = function($args$jscomp$10$$) {
  $dbg_log$$module$src$log$$("floppy fix drive data " + $args$jscomp$10$$.slice(0, this.bytes_expecting), 8192);
};
$FloppyController$$module$src$floppy$$.prototype.configure = function($args$jscomp$11$$) {
  $dbg_log$$module$src$log$$("floppy configure " + $args$jscomp$11$$.slice(0, this.bytes_expecting), 8192);
};
$FloppyController$$module$src$floppy$$.prototype.read_sector_id = function($args$jscomp$12$$) {
  $dbg_log$$module$src$log$$("floppy read sector id " + $args$jscomp$12$$, 8192);
  this.response_index = 0;
  this.response_length = 7;
  this.response_data[0] = 0;
  this.response_data[1] = 0;
  this.response_data[2] = 0;
  this.response_data[3] = 0;
  this.response_data[4] = 0;
  this.response_data[5] = 0;
  this.response_data[6] = 0;
  this.raise_irq();
};
$FloppyController$$module$src$floppy$$.prototype.raise_irq = function() {
  this.dor & 8 && this.cpu.device_raise_irq(6);
};
const $ATA_CMD_NAME$$module$src$ide$$ = {[8]:"DEVICE RESET", [144]:"EXECUTE DEVICE DIAGNOSTIC", [231]:"FLUSH CACHE", [234]:"FLUSH CACHE EXT", [218]:"GET MEDIA STATUS", [236]:"IDENTIFY DEVICE", [161]:"IDENTIFY PACKET DEVICE", [225]:"IDLE IMMEDIATE", [145]:"INITIALIZE DEVICE PARAMETERS", [222]:"MEDIA LOCK", [0]:"NOP", [160]:"PACKET", [200]:"READ DMA", [37]:"READ DMA EXT", [41]:"READ MULTIPLE", [196]:"READ MULTIPLE EXT", [248]:"READ NATIVE MAX ADDRESS", [39]:"READ NATIVE MAX ADDRESS EXT", [32]:"READ SECTORS", 
[36]:"READ SECTORS EXT", [64]:"READ VERIFY SECTORS", [245]:"SECURITY FREEZE LOCK", [239]:"SET FEATURES", [249]:"SET MAX", [198]:"SET MULTIPLE MODE", [224]:"STANDBY IMMEDIATE", [202]:"WRITE DMA", [53]:"WRITE DMA EXT", [57]:"WRITE MULTIPLE", [197]:"WRITE MULTIPLE EXT", [48]:"WRITE SECTORS", [52]:"WRITE SECTORS EXT", [16]:"<UNKWNON 10h>", }, $ATAPI_CMD$$module$src$ide$$ = {[70]:{name:"GET CONFIGURATION", flags:0}, [74]:{name:"GET EVENT STATUS NOTIFICATION", flags:0}, [18]:{name:"INQUIRY", flags:0}, 
[189]:{name:"MECHANISM STATUS", flags:0}, [26]:{name:"MODE SENSE (6)", flags:0}, [90]:{name:"MODE SENSE (10)", flags:0}, [69]:{name:"PAUSE", flags:1}, [30]:{name:"PREVENT ALLOW MEDIUM REMOVAL", flags:0}, [40]:{name:"READ", flags:1}, [37]:{name:"READ CAPACITY", flags:1}, [190]:{name:"READ CD", flags:1}, [81]:{name:"READ DISK INFORMATION", flags:1}, [66]:{name:"READ SUBCHANNEL", flags:1}, [67]:{name:"READ TOC PMA ATIP", flags:1}, [82]:{name:"READ TRACK INFORMATION", flags:1}, [3]:{name:"REQUEST SENSE", 
flags:0}, [27]:{name:"START STOP UNIT", flags:0}, [0]:{name:"TEST UNIT READY", flags:1}, };
function $IDEController$$module$src$ide$$($cpu$jscomp$23$$, $bus$jscomp$22_has_primary$$, $command_base0_ide_config$$) {
  this.cpu = $cpu$jscomp$23$$;
  this.bus = $bus$jscomp$22_has_primary$$;
  this.secondary = this.primary = void 0;
  $bus$jscomp$22_has_primary$$ = $command_base0_ide_config$$ && $command_base0_ide_config$$[0][0];
  const $has_secondary$$ = $command_base0_ide_config$$ && $command_base0_ide_config$$[1][0];
  if ($bus$jscomp$22_has_primary$$ || $has_secondary$$) {
    $bus$jscomp$22_has_primary$$ && (this.primary = new $IDEChannel$$module$src$ide$$(this, 0, $command_base0_ide_config$$[0], 496, 1014, 14));
    $has_secondary$$ && (this.secondary = new $IDEChannel$$module$src$ide$$(this, 1, $command_base0_ide_config$$[1], 368, 886, 15));
    $command_base0_ide_config$$ = $bus$jscomp$22_has_primary$$ ? this.primary.command_base : 0;
    const $control_base0$$ = $bus$jscomp$22_has_primary$$ ? this.primary.control_base : 0, $command_base1$$ = $has_secondary$$ ? this.secondary.command_base : 0, $control_base1$$ = $has_secondary$$ ? this.secondary.control_base : 0;
    this.name = "ide";
    this.pci_id = 240;
    this.pci_space = [134, 128, 16, 112, 5, 0, 160, 2, 0, 128, 1, 1, 0, 0, 0, 0, $command_base0_ide_config$$ & 255 | 1, $command_base0_ide_config$$ >> 8, 0, 0, $control_base0$$ & 255 | 1, $control_base0$$ >> 8, 0, 0, $command_base1$$ & 255 | 1, $command_base1$$ >> 8, 0, 0, $control_base1$$ & 255 | 1, $control_base1$$ >> 8, 0, 0, 1, 180, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 67, 16, 212, 130, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ];
    this.pci_bars = [$bus$jscomp$22_has_primary$$ ? {size:8} : void 0, $bus$jscomp$22_has_primary$$ ? {size:1} : void 0, $has_secondary$$ ? {size:8} : void 0, $has_secondary$$ ? {size:1} : void 0, {size:16}];
    $cpu$jscomp$23$$.devices.pci.register_device(this);
  }
  Object.seal(this);
}
$IDEController$$module$src$ide$$.prototype.get_state = function() {
  const $state$jscomp$46$$ = [];
  $state$jscomp$46$$[0] = this.primary;
  $state$jscomp$46$$[1] = this.secondary;
  return $state$jscomp$46$$;
};
$IDEController$$module$src$ide$$.prototype.set_state = function($state$jscomp$47$$) {
  this.primary && this.primary.set_state($state$jscomp$47$$[0]);
  this.secondary && this.secondary.set_state($state$jscomp$47$$[1]);
};
function $IDEChannel$$module$src$ide$$($controller_cpu$jscomp$24$$, $bus_master_base_channel_nr$$, $channel_config_slave_cfg$$, $command_base_master_cfg$$, $control_base$$, $irq$jscomp$5$$) {
  this.controller = $controller_cpu$jscomp$24$$;
  this.channel_nr = $bus_master_base_channel_nr$$;
  this.cpu = $controller_cpu$jscomp$24$$.cpu;
  this.bus = $controller_cpu$jscomp$24$$.bus;
  this.command_base = $command_base_master_cfg$$;
  this.control_base = $control_base$$;
  this.irq = $irq$jscomp$5$$;
  this.name = "ide" + $bus_master_base_channel_nr$$;
  $command_base_master_cfg$$ = $channel_config_slave_cfg$$ ? $channel_config_slave_cfg$$[0] : void 0;
  $channel_config_slave_cfg$$ = $channel_config_slave_cfg$$ ? $channel_config_slave_cfg$$[1] : void 0;
  this.master = new $IDEInterface$$module$src$ide$$(this, 0, $command_base_master_cfg$$?.buffer, $command_base_master_cfg$$?.is_cdrom);
  this.slave = new $IDEInterface$$module$src$ide$$(this, 1, $channel_config_slave_cfg$$?.buffer, $channel_config_slave_cfg$$?.is_cdrom);
  this.current_interface = this.master;
  this.device_control_reg = 2;
  this.dma_command = this.dma_status = this.prdt_addr = 0;
  $controller_cpu$jscomp$24$$ = $controller_cpu$jscomp$24$$.cpu;
  $controller_cpu$jscomp$24$$.io.register_read(this.command_base | 0, this, function() {
    return this.current_interface.read_data(1);
  }, function() {
    return this.current_interface.read_data(2);
  }, function() {
    return this.current_interface.read_data(4);
  });
  $controller_cpu$jscomp$24$$.io.register_read(this.command_base | 1, this, function() {
    return this.current_interface.error_reg & 255;
  });
  $controller_cpu$jscomp$24$$.io.register_read(this.command_base | 2, this, function() {
    return this.current_interface.sector_count_reg & 255;
  });
  $controller_cpu$jscomp$24$$.io.register_read(this.command_base | 3, this, function() {
    return this.current_interface.lba_low_reg & 255;
  });
  $controller_cpu$jscomp$24$$.io.register_read(this.command_base | 4, this, function() {
    return this.current_interface.lba_mid_reg & 255;
  });
  $controller_cpu$jscomp$24$$.io.register_read(this.command_base | 5, this, function() {
    return this.current_interface.lba_high_reg & 255;
  });
  $controller_cpu$jscomp$24$$.io.register_read(this.command_base | 6, this, function() {
    return this.current_interface.device_reg & 255;
  });
  $controller_cpu$jscomp$24$$.io.register_read(this.command_base | 7, this, function() {
    const $status$jscomp$11$$ = this.read_status();
    this.cpu.device_lower_irq(this.irq);
    return $status$jscomp$11$$;
  });
  $controller_cpu$jscomp$24$$.io.register_write(this.command_base | 0, this, function($data$jscomp$185$$) {
    this.current_interface.write_data_port8($data$jscomp$185$$);
  }, function($data$jscomp$186$$) {
    this.current_interface.write_data_port16($data$jscomp$186$$);
  }, function($data$jscomp$187$$) {
    this.current_interface.write_data_port32($data$jscomp$187$$);
  });
  $controller_cpu$jscomp$24$$.io.register_write(this.command_base | 1, this, function($data$jscomp$188$$) {
    this.current_interface.features_reg = (this.current_interface.features_reg << 8 | $data$jscomp$188$$) & 65535;
  });
  $controller_cpu$jscomp$24$$.io.register_write(this.command_base | 2, this, function($data$jscomp$189$$) {
    this.current_interface.sector_count_reg = (this.current_interface.sector_count_reg << 8 | $data$jscomp$189$$) & 65535;
  });
  $controller_cpu$jscomp$24$$.io.register_write(this.command_base | 3, this, function($data$jscomp$190$$) {
    this.current_interface.lba_low_reg = (this.current_interface.lba_low_reg << 8 | $data$jscomp$190$$) & 65535;
  });
  $controller_cpu$jscomp$24$$.io.register_write(this.command_base | 4, this, function($data$jscomp$191$$) {
    this.current_interface.lba_mid_reg = (this.current_interface.lba_mid_reg << 8 | $data$jscomp$191$$) & 65535;
  });
  $controller_cpu$jscomp$24$$.io.register_write(this.command_base | 5, this, function($data$jscomp$192$$) {
    this.current_interface.lba_high_reg = (this.current_interface.lba_high_reg << 8 | $data$jscomp$192$$) & 65535;
  });
  $controller_cpu$jscomp$24$$.io.register_write(this.command_base | 6, this, function($data$jscomp$193$$) {
    const $select_slave$$ = $data$jscomp$193$$ & 16;
    if ($select_slave$$ && this.current_interface === this.master || !$select_slave$$ && this.current_interface === this.slave) {
      $select_slave$$ ? ($dbg_log$$module$src$log$$(`${this.current_interface.name}: select slave device (${this.channel_nr ? "secondary" : "primary"})`, 32768), this.current_interface = this.slave) : ($dbg_log$$module$src$log$$(`${this.current_interface.name}: select master device (${this.channel_nr ? "secondary" : "primary"})`, 32768), this.current_interface = this.master);
    }
    this.current_interface.device_reg = $data$jscomp$193$$;
    this.current_interface.is_lba = $data$jscomp$193$$ >> 6 & 1;
    this.current_interface.head = $data$jscomp$193$$ & 15;
  });
  $controller_cpu$jscomp$24$$.io.register_write(this.command_base | 7, this, function($data$jscomp$194$$) {
    this.current_interface.status_reg &= -34;
    this.current_interface.ata_command($data$jscomp$194$$);
    this.cpu.device_lower_irq(this.irq);
  });
  $controller_cpu$jscomp$24$$.io.register_read(this.control_base | 0, this, this.read_status);
  $controller_cpu$jscomp$24$$.io.register_write(this.control_base | 0, this, this.write_control);
  $bus_master_base_channel_nr$$ = 46080 + 8 * $bus_master_base_channel_nr$$;
  $controller_cpu$jscomp$24$$.io.register_read($bus_master_base_channel_nr$$ | 0, this, this.dma_read_command8, void 0, this.dma_read_command);
  $controller_cpu$jscomp$24$$.io.register_write($bus_master_base_channel_nr$$ | 0, this, this.dma_write_command8, void 0, this.dma_write_command);
  $controller_cpu$jscomp$24$$.io.register_read($bus_master_base_channel_nr$$ | 2, this, this.dma_read_status);
  $controller_cpu$jscomp$24$$.io.register_write($bus_master_base_channel_nr$$ | 2, this, this.dma_write_status);
  $controller_cpu$jscomp$24$$.io.register_read($bus_master_base_channel_nr$$ | 4, this, void 0, void 0, this.dma_read_addr);
  $controller_cpu$jscomp$24$$.io.register_write($bus_master_base_channel_nr$$ | 4, this, void 0, void 0, this.dma_set_addr);
  Object.seal(this);
}
$IDEChannel$$module$src$ide$$.prototype.read_status = function() {
  return this.current_interface.drive_connected ? this.current_interface.status_reg : 0;
};
$IDEChannel$$module$src$ide$$.prototype.write_control = function($data$jscomp$195$$) {
  $data$jscomp$195$$ & 4 && ($dbg_log$$module$src$log$$(`${this.current_interface.name}: soft reset via control port (lower IRQ ${this.irq})`, 32768), this.cpu.device_lower_irq(this.irq), this.master.device_reset(), this.slave.device_reset());
  this.device_control_reg = $data$jscomp$195$$;
};
$IDEChannel$$module$src$ide$$.prototype.dma_read_addr = function() {
  return this.prdt_addr;
};
$IDEChannel$$module$src$ide$$.prototype.dma_set_addr = function($data$jscomp$196$$) {
  this.prdt_addr = $data$jscomp$196$$;
};
$IDEChannel$$module$src$ide$$.prototype.dma_read_status = function() {
  return this.dma_status;
};
$IDEChannel$$module$src$ide$$.prototype.dma_write_status = function($value$jscomp$173$$) {
  this.dma_status &= ~($value$jscomp$173$$ & 6);
};
$IDEChannel$$module$src$ide$$.prototype.dma_read_command = function() {
  return this.dma_read_command8() | this.dma_read_status() << 16;
};
$IDEChannel$$module$src$ide$$.prototype.dma_read_command8 = function() {
  return this.dma_command;
};
$IDEChannel$$module$src$ide$$.prototype.dma_write_command = function($value$jscomp$174$$) {
  this.dma_write_command8($value$jscomp$174$$ & 255);
  this.dma_write_status($value$jscomp$174$$ >> 16 & 255);
};
$IDEChannel$$module$src$ide$$.prototype.dma_write_command8 = function($value$jscomp$175$$) {
  const $old_command$$ = this.dma_command;
  this.dma_command = $value$jscomp$175$$ & 9;
  if (($old_command$$ & 1) !== ($value$jscomp$175$$ & 1)) {
    if (0 === ($value$jscomp$175$$ & 1)) {
      this.dma_status &= -2;
    } else {
      switch(this.dma_status |= 1, this.current_interface.current_command) {
        case 200:
        case 37:
          this.current_interface.do_ata_read_sectors_dma();
          break;
        case 202:
        case 53:
          this.current_interface.do_ata_write_sectors_dma();
          break;
        case 160:
          this.current_interface.do_atapi_dma();
          break;
        default:
          $dbg_log$$module$src$log$$(this.current_interface.name + ": spurious DMA command write, current command: " + $h$$module$src$lib$$(this.current_interface.current_command), 32768), $dbg_log$$module$src$log$$(this.current_interface.name + ": DMA clear status bit 1h, set status bit 2h", 32768), this.dma_status &= -2, this.dma_status |= 2, this.push_irq();
      }
    }
  }
};
$IDEChannel$$module$src$ide$$.prototype.push_irq = function() {
  0 === (this.device_control_reg & 2) && (this.dma_status |= 4, this.cpu.device_raise_irq(this.irq));
};
$IDEChannel$$module$src$ide$$.prototype.get_state = function() {
  var $state$jscomp$48$$ = [];
  $state$jscomp$48$$[0] = this.master;
  $state$jscomp$48$$[1] = this.slave;
  $state$jscomp$48$$[2] = this.command_base;
  $state$jscomp$48$$[3] = this.irq;
  $state$jscomp$48$$[5] = this.control_base;
  $state$jscomp$48$$[7] = this.name;
  $state$jscomp$48$$[8] = this.device_control_reg;
  $state$jscomp$48$$[9] = this.prdt_addr;
  $state$jscomp$48$$[10] = this.dma_status;
  $state$jscomp$48$$[11] = this.current_interface === this.master;
  $state$jscomp$48$$[12] = this.dma_command;
  return $state$jscomp$48$$;
};
$IDEChannel$$module$src$ide$$.prototype.set_state = function($state$jscomp$49$$) {
  this.master.set_state($state$jscomp$49$$[0]);
  this.slave.set_state($state$jscomp$49$$[1]);
  this.command_base = $state$jscomp$49$$[2];
  this.irq = $state$jscomp$49$$[3];
  this.control_base = $state$jscomp$49$$[5];
  this.name = $state$jscomp$49$$[7];
  this.device_control_reg = $state$jscomp$49$$[8];
  this.prdt_addr = $state$jscomp$49$$[9];
  this.dma_status = $state$jscomp$49$$[10];
  this.current_interface = $state$jscomp$49$$[11] ? this.master : this.slave;
  this.dma_command = $state$jscomp$49$$[12];
};
function $IDEInterface$$module$src$ide$$($channel$jscomp$31$$, $interface_nr$$, $buffer$jscomp$45$$, $is_cd$$) {
  this.channel = $channel$jscomp$31$$;
  this.name = $channel$jscomp$31$$.name + "." + $interface_nr$$;
  this.bus = $channel$jscomp$31$$.bus;
  this.channel_nr = $channel$jscomp$31$$.channel_nr;
  this.interface_nr = $interface_nr$$;
  this.cpu = $channel$jscomp$31$$.cpu;
  this.buffer = null;
  this.drive_connected = $is_cd$$ || !!$buffer$jscomp$45$$;
  this.sector_size = $is_cd$$ ? 2048 : 512;
  this.is_atapi = $is_cd$$;
  this.sector_count = 0;
  this.head_count = this.is_atapi ? 1 : 0;
  this.device_reg = this.head = this.lba_high_reg = this.lba_mid_reg = this.features_reg = this.lba_low_reg = this.sector_count_reg = this.is_lba = this.cylinder_count = this.sectors_per_track = 0;
  this.status_reg = 80;
  this.sectors_per_drq = 128;
  this.data_pointer = this.error_reg = 0;
  this.data = new Uint8Array(65536);
  this.data16 = new Uint16Array(this.data.buffer);
  this.data32 = new Int32Array(this.data.buffer);
  this.data_end = this.data_length = 0;
  this.current_command = -1;
  this.last_io_id = this.write_dest = 0;
  this.in_progress_io_ids = new Set;
  this.cancelled_io_ids = new Set;
  this.current_atapi_command = -1;
  this.atapi_add_sense = this.atapi_sense_key = 0;
  this.medium_changed = !1;
  this.set_disk_buffer($buffer$jscomp$45$$);
  this.drive_connected && $dbg_log$$module$src$log$$(`${this.name}: ${this.is_atapi ? "ATAPI CD-ROM" : "ATA HD"} device ready`, 32768);
  Object.seal(this);
}
$IDEInterface$$module$src$ide$$.prototype.has_disk = function() {
  return !!this.buffer;
};
$IDEInterface$$module$src$ide$$.prototype.eject = function() {
  this.is_atapi && this.buffer && (this.medium_changed = !0, this.buffer = null, this.status_reg = 89, this.error_reg = 96, this.push_irq());
};
$IDEInterface$$module$src$ide$$.prototype.set_cdrom = function($buffer$jscomp$46$$) {
  this.is_atapi && $buffer$jscomp$46$$ && (this.set_disk_buffer($buffer$jscomp$46$$), this.medium_changed = !0);
};
$IDEInterface$$module$src$ide$$.prototype.set_disk_buffer = function($buffer$jscomp$47_rtc$$) {
  if ($buffer$jscomp$47_rtc$$) {
    this.buffer = $buffer$jscomp$47_rtc$$;
    this.is_atapi && (this.status_reg = 89, this.error_reg = 96);
    this.sector_count = this.buffer.byteLength / this.sector_size;
    this.sector_count !== (this.sector_count | 0) && ($dbg_log$$module$src$log$$(this.name + ": warning: disk size not aligned with sector size", 32768), this.sector_count = Math.ceil(this.sector_count));
    this.is_atapi ? (this.head_count = 1, this.sectors_per_track = 2048) : (this.head_count = 16, this.sectors_per_track = 63);
    this.cylinder_count = this.sector_count / this.head_count / this.sectors_per_track;
    this.cylinder_count !== (this.cylinder_count | 0) && ($dbg_log$$module$src$log$$(this.name + ": warning: rounding up cylinder count, choose different head number", 32768), this.cylinder_count = Math.floor(this.cylinder_count));
    if (0 === this.interface_nr) {
      $buffer$jscomp$47_rtc$$ = this.cpu.devices.rtc;
      $buffer$jscomp$47_rtc$$.cmos_write(57, $buffer$jscomp$47_rtc$$.cmos_read(57) | 1 << 4 * this.channel_nr);
      $buffer$jscomp$47_rtc$$.cmos_write(18, $buffer$jscomp$47_rtc$$.cmos_read(18) & 15 | 240);
      const $drive_reg$$ = 0 === this.channel_nr ? 27 : 36;
      $buffer$jscomp$47_rtc$$.cmos_write($drive_reg$$ + 0, this.cylinder_count & 255);
      $buffer$jscomp$47_rtc$$.cmos_write($drive_reg$$ + 1, this.cylinder_count >> 8 & 255);
      $buffer$jscomp$47_rtc$$.cmos_write($drive_reg$$ + 2, this.head_count & 255);
      $buffer$jscomp$47_rtc$$.cmos_write($drive_reg$$ + 3, 255);
      $buffer$jscomp$47_rtc$$.cmos_write($drive_reg$$ + 4, 255);
      $buffer$jscomp$47_rtc$$.cmos_write($drive_reg$$ + 5, 200);
      $buffer$jscomp$47_rtc$$.cmos_write($drive_reg$$ + 6, this.cylinder_count & 255);
      $buffer$jscomp$47_rtc$$.cmos_write($drive_reg$$ + 7, this.cylinder_count >> 8 & 255);
      $buffer$jscomp$47_rtc$$.cmos_write($drive_reg$$ + 8, this.sectors_per_track & 255);
    }
    this.channel.cpu && this.push_irq();
  }
};
$IDEInterface$$module$src$ide$$.prototype.device_reset = function() {
  this.is_atapi ? (this.status_reg = 0, this.lba_low_reg = this.error_reg = this.sector_count_reg = 1, this.lba_mid_reg = 20, this.lba_high_reg = 235) : (this.status_reg = 81, this.lba_low_reg = this.error_reg = this.sector_count_reg = 1, this.lba_high_reg = this.lba_mid_reg = 0);
  this.cancel_io_operations();
};
$IDEInterface$$module$src$ide$$.prototype.push_irq = function() {
  this.channel.push_irq();
};
$IDEInterface$$module$src$ide$$.prototype.ata_abort_command = function() {
  this.error_reg = 4;
  this.status_reg = 65;
  this.push_irq();
};
$IDEInterface$$module$src$ide$$.prototype.capture_regs = function() {
  return `ST=${$h$$module$src$lib$$(this.status_reg & 255)} ER=${$h$$module$src$lib$$(this.error_reg & 255)} ` + `SC=${$h$$module$src$lib$$(this.sector_count_reg & 255)} LL=${$h$$module$src$lib$$(this.lba_low_reg & 255)} ` + `LM=${$h$$module$src$lib$$(this.lba_mid_reg & 255)} LH=${$h$$module$src$lib$$(this.lba_high_reg & 255)} ` + `FE=${$h$$module$src$lib$$(this.features_reg & 255)}`;
};
$IDEInterface$$module$src$ide$$.prototype.ata_command = function($cmd$$) {
  if (this.drive_connected || 144 === $cmd$$) {
    var $regs_msg_regs_pre$$ = this.capture_regs(), $do_dbg_log_result$jscomp$18$$ = !0;
    this.current_command = $cmd$$;
    this.error_reg = 0;
    switch($cmd$$) {
      case 8:
        this.data_length = this.data_end = this.data_pointer = 0;
        this.device_reset();
        this.push_irq();
        break;
      case 16:
        this.lba_mid_reg = 0;
        this.status_reg = 80;
        this.push_irq();
        break;
      case 248:
        var $last_sector$$ = this.sector_count - 1;
        this.lba_low_reg = $last_sector$$ & 255;
        this.lba_mid_reg = $last_sector$$ >> 8 & 255;
        this.lba_high_reg = $last_sector$$ >> 16 & 255;
        this.device_reg = this.device_reg & 240 | $last_sector$$ >> 24 & 15;
        this.status_reg = 80;
        this.push_irq();
        break;
      case 39:
        $last_sector$$ = this.sector_count - 1;
        this.lba_low_reg = $last_sector$$ & 255;
        this.lba_mid_reg = $last_sector$$ >> 8 & 255;
        this.lba_high_reg = $last_sector$$ >> 16 & 255;
        this.lba_low_reg |= $last_sector$$ >> 24 << 8 & 65280;
        this.status_reg = 80;
        this.push_irq();
        break;
      case 32:
        $do_dbg_log_result$jscomp$18$$ = !1;
        this.is_atapi ? (this.lba_mid_reg = 20, this.lba_high_reg = 235, this.ata_abort_command()) : this.ata_read_sectors($cmd$$);
        break;
      case 36:
      case 41:
      case 196:
        $do_dbg_log_result$jscomp$18$$ = !1;
        this.is_atapi ? this.ata_abort_command() : this.ata_read_sectors($cmd$$);
        break;
      case 48:
      case 52:
      case 57:
      case 197:
        $do_dbg_log_result$jscomp$18$$ = !1;
        this.is_atapi ? this.ata_abort_command() : this.ata_write_sectors($cmd$$);
        break;
      case 144:
        this.channel.master.status_reg = 80;
        this.channel.master.error_reg = 1;
        this.channel.master.push_irq();
        this.channel.slave.drive_connected && (this.channel.slave.status_reg = 80, this.channel.slave.error_reg = 1, this.channel.slave.push_irq());
        break;
      case 145:
        this.status_reg = 80;
        this.push_irq();
        break;
      case 160:
        this.is_atapi ? ($do_dbg_log_result$jscomp$18$$ = !1, this.data_allocate(12), this.data_end = 12, this.sector_count_reg = 1, this.status_reg = 88, this.push_irq()) : this.ata_abort_command();
        break;
      case 161:
        this.is_atapi ? (this.create_identify_packet(), this.status_reg = 88, this.push_irq()) : this.ata_abort_command();
        break;
      case 198:
        $dbg_log$$module$src$log$$(this.name + ": logical sectors per DRQ Block: " + $h$$module$src$lib$$(this.sector_count_reg & 255), 32768);
        this.sectors_per_drq = this.sector_count_reg & 255;
        this.status_reg = 80;
        this.push_irq();
        break;
      case 200:
      case 37:
        $do_dbg_log_result$jscomp$18$$ = !1;
        this.ata_read_sectors_dma($cmd$$);
        break;
      case 202:
      case 53:
        $do_dbg_log_result$jscomp$18$$ = !1;
        this.ata_write_sectors_dma($cmd$$);
        break;
      case 64:
        this.status_reg = 80;
        this.push_irq();
        break;
      case 218:
        this.is_atapi && (this.buffer || (this.error_reg |= 2), this.medium_changed && (this.error_reg |= 32, this.medium_changed = !1), this.error_reg |= 64);
        this.status_reg = 80;
        this.push_irq();
        break;
      case 224:
        this.status_reg = 80;
        this.push_irq();
        break;
      case 225:
        this.status_reg = 80;
        this.push_irq();
        break;
      case 231:
        this.status_reg = 80;
        this.push_irq();
        break;
      case 234:
        this.status_reg = 80;
        this.push_irq();
        break;
      case 236:
        this.is_atapi ? (this.lba_mid_reg = 20, this.lba_high_reg = 235, this.ata_abort_command()) : (this.create_identify_packet(), this.status_reg = 88, this.push_irq());
        break;
      case 239:
        this.status_reg = 80;
        this.push_irq();
        break;
      case 222:
        this.status_reg = 64;
        this.push_irq();
        break;
      case 245:
        this.status_reg = 80;
        this.push_irq();
        break;
      case 249:
        this.ata_abort_command();
        break;
      case 0:
        this.ata_abort_command();
        break;
      default:
        $dbg_assert$$module$src$log$$(!1, `${this.name}: error: unimplemented ATA command ${$h$$module$src$lib$$($cmd$$)}: ABORT [${this.capture_regs()}]`, 32768), this.ata_abort_command();
    }
    $do_dbg_log_result$jscomp$18$$ && ($regs_msg_regs_pre$$ = `[${$regs_msg_regs_pre$$}] -> [${this.capture_regs()}]`, $do_dbg_log_result$jscomp$18$$ = this.status_reg & 1 ? this.error_reg & 4 ? "ABORT" : "ERROR" : "OK", $dbg_log$$module$src$log$$(`${this.name}: ATA command ${$ATA_CMD_NAME$$module$src$ide$$[$cmd$$]} (${$h$$module$src$lib$$($cmd$$)}): ${$do_dbg_log_result$jscomp$18$$} ${$regs_msg_regs_pre$$}`, 32768));
  } else {
    $dbg_log$$module$src$log$$(`${this.name}: ATA command ${$ATA_CMD_NAME$$module$src$ide$$[$cmd$$]} (${$h$$module$src$lib$$($cmd$$)}) ignored: no slave drive connected`, 32768);
  }
};
$IDEInterface$$module$src$ide$$.prototype.atapi_handle = function() {
  const $cmd$jscomp$1$$ = this.data[0], $cmd_name$$ = $ATAPI_CMD$$module$src$ide$$[$cmd$jscomp$1$$] ? $ATAPI_CMD$$module$src$ide$$[$cmd$jscomp$1$$].name : "<undefined>";
  var $cmd_flags_count$jscomp$57_length$jscomp$27_loej_start_sector_count$$ = $ATAPI_CMD$$module$src$ide$$[$cmd$jscomp$1$$] ? $ATAPI_CMD$$module$src$ide$$[$cmd$jscomp$1$$].flags : 0, $regs_msg$jscomp$1_regs_pre$jscomp$1$$ = this.capture_regs(), $do_dbg_log$jscomp$1_result$jscomp$19$$ = !0;
  let $dbg_log_extra$$;
  this.data_pointer = 0;
  this.current_atapi_command = $cmd$jscomp$1$$;
  3 !== $cmd$jscomp$1$$ && (this.atapi_add_sense = this.atapi_sense_key = 0);
  if (!this.buffer && $cmd_flags_count$jscomp$57_length$jscomp$27_loej_start_sector_count$$ & 1) {
    this.atapi_check_condition_response(2, 58), this.push_irq(), $dbg_log$$module$src$log$$(`${this.name}: ATAPI command ${$cmd_name$$} (${$h$$module$src$lib$$($cmd$jscomp$1$$)}) without medium: ERROR [${$regs_msg$jscomp$1_regs_pre$jscomp$1$$}]`, 32768);
  } else {
    switch($cmd$jscomp$1$$) {
      case 0:
        this.buffer ? (this.data_allocate(0), this.data_end = this.data_length, this.status_reg = 80) : this.atapi_check_condition_response(2, 58);
        break;
      case 3:
        this.data_allocate(this.data[4]);
        this.data_end = this.data_length;
        this.status_reg = 88;
        this.data[0] = 240;
        this.data[2] = this.atapi_sense_key;
        this.data[7] = 8;
        this.data[12] = this.atapi_add_sense;
        this.atapi_add_sense = this.atapi_sense_key = 0;
        break;
      case 18:
        $cmd_flags_count$jscomp$57_length$jscomp$27_loej_start_sector_count$$ = this.data[4];
        this.status_reg = 88;
        $dbg_log_extra$$ = "lun=" + $h$$module$src$lib$$(this.data[1], 2) + " length=" + $cmd_flags_count$jscomp$57_length$jscomp$27_loej_start_sector_count$$;
        this.data.set([5, 128, 1, 49, 31, 0, 0, 0, 83, 79, 78, 89, 32, 32, 32, 32, 67, 68, 45, 82, 79, 77, 32, 67, 68, 85, 45, 49, 48, 48, 48, 32, 49, 46, 49, 97, ]);
        this.data_end = this.data_length = Math.min(36, $cmd_flags_count$jscomp$57_length$jscomp$27_loej_start_sector_count$$);
        break;
      case 26:
        this.data_allocate(this.data[4]);
        this.data_end = this.data_length;
        this.status_reg = 88;
        break;
      case 30:
        this.data_allocate(0);
        this.data_end = this.data_length;
        this.status_reg = 80;
        break;
      case 37:
        $cmd_flags_count$jscomp$57_length$jscomp$27_loej_start_sector_count$$ = this.sector_count - 1;
        this.data_set(new Uint8Array([$cmd_flags_count$jscomp$57_length$jscomp$27_loej_start_sector_count$$ >> 24 & 255, $cmd_flags_count$jscomp$57_length$jscomp$27_loej_start_sector_count$$ >> 16 & 255, $cmd_flags_count$jscomp$57_length$jscomp$27_loej_start_sector_count$$ >> 8 & 255, $cmd_flags_count$jscomp$57_length$jscomp$27_loej_start_sector_count$$ & 255, 0, 0, this.sector_size >> 8 & 255, this.sector_size & 255, ]));
        this.data_end = this.data_length;
        this.status_reg = 88;
        break;
      case 40:
        $do_dbg_log$jscomp$1_result$jscomp$19$$ = !1;
        this.features_reg & 1 ? this.atapi_read_dma(this.data) : this.atapi_read(this.data);
        break;
      case 66:
        $cmd_flags_count$jscomp$57_length$jscomp$27_loej_start_sector_count$$ = this.data[8];
        $dbg_log_extra$$ = "length=" + $cmd_flags_count$jscomp$57_length$jscomp$27_loej_start_sector_count$$;
        this.data_allocate(Math.min(8, $cmd_flags_count$jscomp$57_length$jscomp$27_loej_start_sector_count$$));
        this.data_end = this.data_length;
        this.status_reg = 88;
        break;
      case 67:
        $cmd_flags_count$jscomp$57_length$jscomp$27_loej_start_sector_count$$ = this.data[8] | this.data[7] << 8;
        var $format$jscomp$19_page_code$$ = this.data[9] >> 6;
        $dbg_log_extra$$ = `${$h$$module$src$lib$$($format$jscomp$19_page_code$$, 2)} length=${$cmd_flags_count$jscomp$57_length$jscomp$27_loej_start_sector_count$$} ${!!(this.data[1] & 2)} ${$h$$module$src$lib$$(this.data[6])}`;
        this.data_allocate($cmd_flags_count$jscomp$57_length$jscomp$27_loej_start_sector_count$$);
        this.data_end = this.data_length;
        0 === $format$jscomp$19_page_code$$ ? ($cmd_flags_count$jscomp$57_length$jscomp$27_loej_start_sector_count$$ = this.sector_count, this.data.set(new Uint8Array([0, 18, 1, 1, 0, 20, 1, 0, 0, 0, 0, 0, 0, 22, 170, 0, $cmd_flags_count$jscomp$57_length$jscomp$27_loej_start_sector_count$$ >> 24, $cmd_flags_count$jscomp$57_length$jscomp$27_loej_start_sector_count$$ >> 16 & 255, $cmd_flags_count$jscomp$57_length$jscomp$27_loej_start_sector_count$$ >> 8 & 255, $cmd_flags_count$jscomp$57_length$jscomp$27_loej_start_sector_count$$ & 
        255, ]))) : 1 === $format$jscomp$19_page_code$$ ? this.data.set(new Uint8Array([0, 10, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, ])) : $dbg_assert$$module$src$log$$(!1, this.name + ": error: unimplemented format: " + $format$jscomp$19_page_code$$);
        this.status_reg = 88;
        break;
      case 70:
        $cmd_flags_count$jscomp$57_length$jscomp$27_loej_start_sector_count$$ = Math.min(this.data[8] | this.data[7] << 8, 32);
        $dbg_log_extra$$ = "length=" + $cmd_flags_count$jscomp$57_length$jscomp$27_loej_start_sector_count$$;
        this.data_allocate($cmd_flags_count$jscomp$57_length$jscomp$27_loej_start_sector_count$$);
        this.data_end = this.data_length;
        this.data[0] = $cmd_flags_count$jscomp$57_length$jscomp$27_loej_start_sector_count$$ - 4 >> 24 & 255;
        this.data[1] = $cmd_flags_count$jscomp$57_length$jscomp$27_loej_start_sector_count$$ - 4 >> 16 & 255;
        this.data[2] = $cmd_flags_count$jscomp$57_length$jscomp$27_loej_start_sector_count$$ - 4 >> 8 & 255;
        this.data[3] = $cmd_flags_count$jscomp$57_length$jscomp$27_loej_start_sector_count$$ - 4 & 255;
        this.data[6] = 8;
        this.data[10] = 3;
        this.status_reg = 88;
        break;
      case 81:
        this.data_allocate(0);
        this.data_end = this.data_length;
        this.status_reg = 80;
        break;
      case 82:
        $dbg_log_extra$$ = "unimplemented";
        this.atapi_check_condition_response(5, 36);
        break;
      case 90:
        $cmd_flags_count$jscomp$57_length$jscomp$27_loej_start_sector_count$$ = this.data[8] | this.data[7] << 8;
        $format$jscomp$19_page_code$$ = this.data[2];
        $dbg_log_extra$$ = "page_code=" + $h$$module$src$lib$$($format$jscomp$19_page_code$$) + " length=" + $cmd_flags_count$jscomp$57_length$jscomp$27_loej_start_sector_count$$;
        42 === $format$jscomp$19_page_code$$ && this.data_allocate(Math.min(30, $cmd_flags_count$jscomp$57_length$jscomp$27_loej_start_sector_count$$));
        this.data_end = this.data_length;
        this.status_reg = 88;
        break;
      case 189:
        this.data_allocate(this.data[9] | this.data[8] << 8);
        this.data_end = this.data_length;
        this.data[5] = 1;
        this.status_reg = 88;
        break;
      case 27:
        $cmd_flags_count$jscomp$57_length$jscomp$27_loej_start_sector_count$$ = this.data[4] & 3;
        $dbg_log_extra$$ = `Immed=${$h$$module$src$lib$$(this.data[1] & 1)} LoEj/Start=${$h$$module$src$lib$$($cmd_flags_count$jscomp$57_length$jscomp$27_loej_start_sector_count$$)}`;
        this.buffer && 2 === $cmd_flags_count$jscomp$57_length$jscomp$27_loej_start_sector_count$$ && ($dbg_log_extra$$ += ": disk ejected", this.medium_changed = !0, this.buffer = null);
        this.status_reg = 80;
        this.data_allocate(0);
        this.data_end = this.data_length;
        break;
      case 69:
      case 74:
        $dbg_log_extra$$ = "unimplemented";
        this.atapi_check_condition_response(5, 36);
        break;
      case 190:
        $dbg_log_extra$$ = "unimplemented";
        this.data_allocate(0);
        this.data_end = this.data_length;
        this.status_reg = 80;
        break;
      default:
        $dbg_assert$$module$src$log$$(!1, `${this.name}: error: unimplemented ATAPI command ${$h$$module$src$lib$$(this.data[0])}`, 32768), this.atapi_check_condition_response(5, 36);
    }
    this.sector_count_reg = this.sector_count_reg & -8 | 2;
    0 === (this.status_reg & 128) && this.push_irq();
    0 === (this.status_reg & 128) && 0 === this.data_length && (this.sector_count_reg |= 1, this.status_reg &= -9);
    $do_dbg_log$jscomp$1_result$jscomp$19$$ && ($regs_msg$jscomp$1_regs_pre$jscomp$1$$ = `[${$regs_msg$jscomp$1_regs_pre$jscomp$1$$}] -> [${this.capture_regs()}]`, $do_dbg_log$jscomp$1_result$jscomp$19$$ = this.status_reg & 1 ? this.error_reg & 4 ? "ABORT" : "ERROR" : "OK", $dbg_log_extra$$ = $dbg_log_extra$$ ? ` ${$dbg_log_extra$$}:` : "", $dbg_log$$module$src$log$$(`${this.name}: ATAPI command ${$cmd_name$$} (${$h$$module$src$lib$$($cmd$jscomp$1$$)}):${$dbg_log_extra$$} ${$do_dbg_log$jscomp$1_result$jscomp$19$$} ${$regs_msg$jscomp$1_regs_pre$jscomp$1$$}`, 
    32768));
  }
};
$IDEInterface$$module$src$ide$$.prototype.atapi_check_condition_response = function($sense_key$$, $additional_sense$$) {
  this.data_allocate(0);
  this.data_end = this.data_length;
  this.status_reg = 65;
  this.error_reg = $sense_key$$ << 4;
  this.sector_count_reg = this.sector_count_reg & -8 | 3;
  this.atapi_sense_key = $sense_key$$;
  this.atapi_add_sense = $additional_sense$$;
};
$IDEInterface$$module$src$ide$$.prototype.do_write = function() {
  this.status_reg = 80;
  $dbg_assert$$module$src$log$$(this.data_length <= this.data.length);
  var $data$jscomp$197$$ = this.data.subarray(0, this.data_length);
  $dbg_assert$$module$src$log$$(0 === this.data_length % 512);
  this.ata_advance(this.current_command, this.data_length / 512);
  this.push_irq();
  this.buffer.set(this.write_dest, $data$jscomp$197$$, function() {
  });
  this.report_write(this.data_length);
};
$IDEInterface$$module$src$ide$$.prototype.atapi_read = function($cmd$jscomp$2_start$jscomp$30$$) {
  var $byte_count$$ = ($cmd$jscomp$2_start$jscomp$30$$[7] << 8 | $cmd$jscomp$2_start$jscomp$30$$[8]) * this.sector_size;
  $cmd$jscomp$2_start$jscomp$30$$ = ($cmd$jscomp$2_start$jscomp$30$$[2] << 24 | $cmd$jscomp$2_start$jscomp$30$$[3] << 16 | $cmd$jscomp$2_start$jscomp$30$$[4] << 8 | $cmd$jscomp$2_start$jscomp$30$$[5]) * this.sector_size;
  this.data_length = 0;
  var $req_length$$ = this.lba_high_reg << 8 & 65280 | this.lba_mid_reg & 255;
  this.lba_mid_reg = this.lba_high_reg = 0;
  65535 === $req_length$$ && $req_length$$--;
  $req_length$$ > $byte_count$$ && ($req_length$$ = $byte_count$$);
  this.buffer ? $cmd$jscomp$2_start$jscomp$30$$ >= this.buffer.byteLength ? ($dbg_assert$$module$src$log$$(!1, this.name + ": CD read: Outside of disk  end=" + $h$$module$src$lib$$($cmd$jscomp$2_start$jscomp$30$$ + $byte_count$$) + " size=" + $h$$module$src$lib$$(this.buffer.byteLength), 32768), this.status_reg = 255, this.push_irq()) : 0 === $byte_count$$ ? (this.status_reg = 80, this.data_pointer = 0) : ($byte_count$$ = Math.min($byte_count$$, this.buffer.byteLength - $cmd$jscomp$2_start$jscomp$30$$), 
  this.status_reg = 208, this.report_read_start(), this.read_buffer($cmd$jscomp$2_start$jscomp$30$$, $byte_count$$, $data$jscomp$198$$ => {
    this.data_set($data$jscomp$198$$);
    this.status_reg = 88;
    this.sector_count_reg = this.sector_count_reg & -8 | 2;
    this.push_irq();
    this.data_end = $req_length$$ &= -4;
    this.data_end > this.data_length && (this.data_end = this.data_length);
    this.lba_mid_reg = this.data_end & 255;
    this.lba_high_reg = this.data_end >> 8 & 255;
    this.report_read_end($byte_count$$);
  })) : ($dbg_assert$$module$src$log$$(!1, this.name + ": CD read: no buffer", 32768), this.status_reg = 255, this.error_reg = 65, this.push_irq());
};
$IDEInterface$$module$src$ide$$.prototype.atapi_read_dma = function($cmd$jscomp$3_flags$jscomp$12$$) {
  var $lba$jscomp$1$$ = $cmd$jscomp$3_flags$jscomp$12$$[2] << 24 | $cmd$jscomp$3_flags$jscomp$12$$[3] << 16 | $cmd$jscomp$3_flags$jscomp$12$$[4] << 8 | $cmd$jscomp$3_flags$jscomp$12$$[5], $count$jscomp$59$$ = $cmd$jscomp$3_flags$jscomp$12$$[7] << 8 | $cmd$jscomp$3_flags$jscomp$12$$[8];
  $cmd$jscomp$3_flags$jscomp$12$$ = $cmd$jscomp$3_flags$jscomp$12$$[1];
  var $byte_count$jscomp$1$$ = $count$jscomp$59$$ * this.sector_size, $start$jscomp$31$$ = $lba$jscomp$1$$ * this.sector_size;
  $dbg_log$$module$src$log$$(this.name + ": CD read DMA lba=" + $h$$module$src$lib$$($lba$jscomp$1$$) + " lbacount=" + $h$$module$src$lib$$($count$jscomp$59$$) + " bytecount=" + $h$$module$src$lib$$($byte_count$jscomp$1$$) + " flags=" + $h$$module$src$lib$$($cmd$jscomp$3_flags$jscomp$12$$), 32768);
  $start$jscomp$31$$ >= this.buffer.byteLength ? ($dbg_assert$$module$src$log$$(!1, this.name + ": CD read: Outside of disk  end=" + $h$$module$src$lib$$($start$jscomp$31$$ + $byte_count$jscomp$1$$) + " size=" + $h$$module$src$lib$$(this.buffer.byteLength), 32768), this.status_reg = 255, this.push_irq()) : (this.status_reg = 208, this.report_read_start(), this.read_buffer($start$jscomp$31$$, $byte_count$jscomp$1$$, $data$jscomp$199$$ => {
    $dbg_log$$module$src$log$$(this.name + ": atapi_read_dma: Data arrived", 32768);
    this.report_read_end($byte_count$jscomp$1$$);
    this.status_reg = 88;
    this.sector_count_reg = this.sector_count_reg & -8 | 2;
    this.data_set($data$jscomp$199$$);
    this.do_atapi_dma();
  }));
};
$IDEInterface$$module$src$ide$$.prototype.do_atapi_dma = function() {
  if (0 === (this.channel.dma_status & 1)) {
    $dbg_log$$module$src$log$$(this.name + ": do_atapi_dma: Status not set", 32768);
  } else {
    if (0 === (this.status_reg & 8)) {
      $dbg_log$$module$src$log$$(this.name + ": do_atapi_dma: DRQ not set", 32768);
    } else {
      var $prdt_start$$ = this.channel.prdt_addr, $offset$jscomp$71$$ = 0, $data$jscomp$200$$ = this.data;
      do {
        var $addr$jscomp$39$$ = this.cpu.read32s($prdt_start$$), $count$jscomp$60$$ = this.cpu.read16($prdt_start$$ + 4), $end$jscomp$17$$ = this.cpu.read8($prdt_start$$ + 7) & 128;
        $count$jscomp$60$$ || ($count$jscomp$60$$ = 65536);
        this.cpu.write_blob($data$jscomp$200$$.subarray($offset$jscomp$71$$, Math.min($offset$jscomp$71$$ + $count$jscomp$60$$, this.data_length)), $addr$jscomp$39$$);
        $offset$jscomp$71$$ += $count$jscomp$60$$;
        $prdt_start$$ += 8;
        if ($offset$jscomp$71$$ >= this.data_length && !$end$jscomp$17$$) {
          break;
        }
      } while (!$end$jscomp$17$$);
      this.status_reg = 80;
      this.channel.dma_status &= -2;
      this.sector_count_reg = this.sector_count_reg & -8 | 3;
      this.push_irq();
    }
  }
};
$IDEInterface$$module$src$ide$$.prototype.read_data = function($length$jscomp$28$$) {
  if (this.data_pointer < this.data_end) {
    $dbg_assert$$module$src$log$$(this.data_pointer + $length$jscomp$28$$ - 1 < this.data_end);
    $dbg_assert$$module$src$log$$(0 === this.data_pointer % $length$jscomp$28$$, $h$$module$src$lib$$(this.data_pointer) + " " + $length$jscomp$28$$);
    var $result$jscomp$20$$ = 1 === $length$jscomp$28$$ ? this.data[this.data_pointer] : 2 === $length$jscomp$28$$ ? this.data16[this.data_pointer >>> 1] : this.data32[this.data_pointer >>> 2];
    this.data_pointer += $length$jscomp$28$$;
    this.data_pointer >= this.data_end && this.read_end();
    return $result$jscomp$20$$;
  }
  this.data_pointer += $length$jscomp$28$$;
  return 0;
};
$IDEInterface$$module$src$ide$$.prototype.read_end = function() {
  if (160 === this.current_command) {
    if (this.data_end === this.data_length) {
      this.status_reg = 80, this.sector_count_reg = this.sector_count_reg & -8 | 3, this.push_irq();
    } else {
      this.status_reg = 88;
      this.sector_count_reg = this.sector_count_reg & -8 | 2;
      this.push_irq();
      var $byte_count$jscomp$2_sector_count$jscomp$1$$ = this.lba_high_reg << 8 & 65280 | this.lba_mid_reg & 255;
      this.data_end + $byte_count$jscomp$2_sector_count$jscomp$1$$ > this.data_length ? (this.lba_mid_reg = this.data_length - this.data_end & 255, this.lba_high_reg = this.data_length - this.data_end >> 8 & 255, this.data_end = this.data_length) : this.data_end += $byte_count$jscomp$2_sector_count$jscomp$1$$;
    }
  } else {
    this.error_reg = 0, this.data_pointer >= this.data_length ? this.status_reg = 80 : (41 === this.current_command || 196 === this.current_command ? ($byte_count$jscomp$2_sector_count$jscomp$1$$ = Math.min(this.sectors_per_drq, (this.data_length - this.data_end) / 512), $dbg_assert$$module$src$log$$(0 === $byte_count$jscomp$2_sector_count$jscomp$1$$ % 1)) : ($dbg_assert$$module$src$log$$(32 === this.current_command || 36 === this.current_command), $byte_count$jscomp$2_sector_count$jscomp$1$$ = 1), 
    this.ata_advance(this.current_command, $byte_count$jscomp$2_sector_count$jscomp$1$$), this.data_end += 512 * $byte_count$jscomp$2_sector_count$jscomp$1$$, this.status_reg = 88, this.push_irq());
  }
};
$IDEInterface$$module$src$ide$$.prototype.write_data_port = function($data$jscomp$201$$, $length$jscomp$29$$) {
  $dbg_assert$$module$src$log$$(0 === this.data_pointer % $length$jscomp$29$$);
  this.data_pointer >= this.data_end ? $dbg_log$$module$src$log$$(this.name + ": redundant write to data port: " + $h$$module$src$lib$$($data$jscomp$201$$) + " count=" + $h$$module$src$lib$$(this.data_end) + " cur=" + $h$$module$src$lib$$(this.data_pointer), 32768) : (1 === $length$jscomp$29$$ ? this.data[this.data_pointer++] = $data$jscomp$201$$ : 2 === $length$jscomp$29$$ ? (this.data16[this.data_pointer >>> 1] = $data$jscomp$201$$, this.data_pointer += 2) : (this.data32[this.data_pointer >>> 2] = 
  $data$jscomp$201$$, this.data_pointer += 4), $dbg_assert$$module$src$log$$(this.data_pointer <= this.data_end), this.data_pointer === this.data_end && this.write_end());
};
$IDEInterface$$module$src$ide$$.prototype.write_data_port8 = function($data$jscomp$202$$) {
  this.write_data_port($data$jscomp$202$$, 1);
};
$IDEInterface$$module$src$ide$$.prototype.write_data_port16 = function($data$jscomp$203$$) {
  this.write_data_port($data$jscomp$203$$, 2);
};
$IDEInterface$$module$src$ide$$.prototype.write_data_port32 = function($data$jscomp$204$$) {
  this.write_data_port($data$jscomp$204$$, 4);
};
$IDEInterface$$module$src$ide$$.prototype.write_end = function() {
  160 === this.current_command ? this.atapi_handle() : this.data_pointer >= this.data_length ? this.do_write() : ($dbg_assert$$module$src$log$$(48 === this.current_command || 52 === this.current_command || 197 === this.current_command, "Unexpected command: " + $h$$module$src$lib$$(this.current_command)), this.status_reg = 88, this.data_end += 512, this.push_irq());
};
$IDEInterface$$module$src$ide$$.prototype.ata_advance = function($cmd$jscomp$4_new_sector$$, $c$jscomp$2_sectors$$) {
  this.sector_count_reg -= $c$jscomp$2_sectors$$;
  36 === $cmd$jscomp$4_new_sector$$ || 41 === $cmd$jscomp$4_new_sector$$ || 37 === $cmd$jscomp$4_new_sector$$ || 52 === $cmd$jscomp$4_new_sector$$ || 57 === $cmd$jscomp$4_new_sector$$ || 53 === $cmd$jscomp$4_new_sector$$ ? ($cmd$jscomp$4_new_sector$$ = $c$jscomp$2_sectors$$ + this.get_lba48(), this.lba_low_reg = $cmd$jscomp$4_new_sector$$ & 255 | $cmd$jscomp$4_new_sector$$ >> 16 & 65280, this.lba_mid_reg = $cmd$jscomp$4_new_sector$$ >> 8 & 255, this.lba_high_reg = $cmd$jscomp$4_new_sector$$ >> 16 & 
  255) : this.is_lba ? ($cmd$jscomp$4_new_sector$$ = $c$jscomp$2_sectors$$ + this.get_lba28(), this.lba_low_reg = $cmd$jscomp$4_new_sector$$ & 255, this.lba_mid_reg = $cmd$jscomp$4_new_sector$$ >> 8 & 255, this.lba_high_reg = $cmd$jscomp$4_new_sector$$ >> 16 & 255, this.head = this.head & -16 | $cmd$jscomp$4_new_sector$$ & 15) : ($cmd$jscomp$4_new_sector$$ = $c$jscomp$2_sectors$$ + this.get_chs(), $c$jscomp$2_sectors$$ = $cmd$jscomp$4_new_sector$$ / (this.head_count * this.sectors_per_track) | 0, 
  this.lba_mid_reg = $c$jscomp$2_sectors$$ & 255, this.lba_high_reg = $c$jscomp$2_sectors$$ >> 8 & 255, this.head = ($cmd$jscomp$4_new_sector$$ / this.sectors_per_track | 0) % this.head_count & 15, this.lba_low_reg = $cmd$jscomp$4_new_sector$$ % this.sectors_per_track + 1 & 255, $dbg_assert$$module$src$log$$($cmd$jscomp$4_new_sector$$ === this.get_chs()));
};
$IDEInterface$$module$src$ide$$.prototype.ata_read_sectors = function($cmd$jscomp$5$$) {
  var $is_lba48_lba$jscomp$2_start$jscomp$32$$ = 36 === $cmd$jscomp$5$$ || 41 === $cmd$jscomp$5$$, $count$jscomp$61$$ = this.get_count($is_lba48_lba$jscomp$2_start$jscomp$32$$);
  $is_lba48_lba$jscomp$2_start$jscomp$32$$ = this.get_lba($is_lba48_lba$jscomp$2_start$jscomp$32$$);
  var $is_single$$ = 32 === $cmd$jscomp$5$$ || 36 === $cmd$jscomp$5$$, $byte_count$jscomp$3$$ = $count$jscomp$61$$ * this.sector_size;
  $is_lba48_lba$jscomp$2_start$jscomp$32$$ *= this.sector_size;
  $is_lba48_lba$jscomp$2_start$jscomp$32$$ + $byte_count$jscomp$3$$ > this.buffer.byteLength ? ($dbg_assert$$module$src$log$$(!1, this.name + ": ATA read: Outside of disk", 32768), this.status_reg = 255, this.push_irq()) : (this.status_reg = 192, this.report_read_start(), this.read_buffer($is_lba48_lba$jscomp$2_start$jscomp$32$$, $byte_count$jscomp$3$$, $data$jscomp$205$$ => {
    this.data_set($data$jscomp$205$$);
    this.status_reg = 88;
    this.data_end = $is_single$$ ? 512 : Math.min($byte_count$jscomp$3$$, 512 * this.sectors_per_drq);
    this.ata_advance($cmd$jscomp$5$$, $is_single$$ ? 1 : Math.min($count$jscomp$61$$, this.sectors_per_track));
    this.push_irq();
    this.report_read_end($byte_count$jscomp$3$$);
  }));
};
$IDEInterface$$module$src$ide$$.prototype.ata_read_sectors_dma = function($cmd$jscomp$6_is_lba48$jscomp$1$$) {
  $cmd$jscomp$6_is_lba48$jscomp$1$$ = 37 === $cmd$jscomp$6_is_lba48$jscomp$1$$;
  var $count$jscomp$62$$ = this.get_count($cmd$jscomp$6_is_lba48$jscomp$1$$);
  this.get_lba($cmd$jscomp$6_is_lba48$jscomp$1$$) * this.sector_size + $count$jscomp$62$$ * this.sector_size > this.buffer.byteLength ? ($dbg_assert$$module$src$log$$(!1, this.name + ": ATA read: Outside of disk", 32768), this.status_reg = 255, this.push_irq()) : (this.status_reg = 88, this.channel.dma_status |= 1);
};
$IDEInterface$$module$src$ide$$.prototype.do_ata_read_sectors_dma = function() {
  var $is_lba48$jscomp$2_lba$jscomp$4$$ = 37 === this.current_command, $count$jscomp$63$$ = this.get_count($is_lba48$jscomp$2_lba$jscomp$4$$);
  $is_lba48$jscomp$2_lba$jscomp$4$$ = this.get_lba($is_lba48$jscomp$2_lba$jscomp$4$$);
  var $byte_count$jscomp$5$$ = $count$jscomp$63$$ * this.sector_size, $start$jscomp$34$$ = $is_lba48$jscomp$2_lba$jscomp$4$$ * this.sector_size;
  $dbg_assert$$module$src$log$$($is_lba48$jscomp$2_lba$jscomp$4$$ < this.buffer.byteLength);
  this.report_read_start();
  var $orig_prdt_start$$ = this.channel.prdt_addr;
  this.read_buffer($start$jscomp$34$$, $byte_count$jscomp$5$$, $data$jscomp$206$$ => {
    var $prdt_start$jscomp$1$$ = this.channel.prdt_addr, $offset$jscomp$72$$ = 0;
    $dbg_assert$$module$src$log$$($orig_prdt_start$$ === $prdt_start$jscomp$1$$);
    do {
      var $prd_addr$$ = this.cpu.read32s($prdt_start$jscomp$1$$), $prd_count$$ = this.cpu.read16($prdt_start$jscomp$1$$ + 4), $end$jscomp$18$$ = this.cpu.read8($prdt_start$jscomp$1$$ + 7) & 128;
      $prd_count$$ || ($prd_count$$ = 65536);
      this.cpu.write_blob($data$jscomp$206$$.subarray($offset$jscomp$72$$, $offset$jscomp$72$$ + $prd_count$$), $prd_addr$$);
      $offset$jscomp$72$$ += $prd_count$$;
      $prdt_start$jscomp$1$$ += 8;
    } while (!$end$jscomp$18$$);
    $dbg_assert$$module$src$log$$($offset$jscomp$72$$ === $byte_count$jscomp$5$$);
    this.ata_advance(this.current_command, $count$jscomp$63$$);
    this.status_reg = 80;
    this.channel.dma_status &= -2;
    this.current_command = -1;
    this.report_read_end($byte_count$jscomp$5$$);
    this.push_irq();
  });
};
$IDEInterface$$module$src$ide$$.prototype.ata_write_sectors = function($cmd$jscomp$8_is_single$jscomp$1$$) {
  var $is_lba48$jscomp$3_lba$jscomp$5_start$jscomp$35$$ = 52 === $cmd$jscomp$8_is_single$jscomp$1$$ || 57 === $cmd$jscomp$8_is_single$jscomp$1$$, $byte_count$jscomp$6_count$jscomp$64$$ = this.get_count($is_lba48$jscomp$3_lba$jscomp$5_start$jscomp$35$$);
  $is_lba48$jscomp$3_lba$jscomp$5_start$jscomp$35$$ = this.get_lba($is_lba48$jscomp$3_lba$jscomp$5_start$jscomp$35$$);
  $cmd$jscomp$8_is_single$jscomp$1$$ = 48 === $cmd$jscomp$8_is_single$jscomp$1$$ || 52 === $cmd$jscomp$8_is_single$jscomp$1$$;
  $byte_count$jscomp$6_count$jscomp$64$$ *= this.sector_size;
  $is_lba48$jscomp$3_lba$jscomp$5_start$jscomp$35$$ *= this.sector_size;
  $is_lba48$jscomp$3_lba$jscomp$5_start$jscomp$35$$ + $byte_count$jscomp$6_count$jscomp$64$$ > this.buffer.byteLength ? ($dbg_assert$$module$src$log$$(!1, this.name + ": ATA write: Outside of disk", 32768), this.status_reg = 255, this.push_irq()) : (this.status_reg = 88, this.data_allocate_noclear($byte_count$jscomp$6_count$jscomp$64$$), this.data_end = $cmd$jscomp$8_is_single$jscomp$1$$ ? 512 : Math.min($byte_count$jscomp$6_count$jscomp$64$$, 512 * this.sectors_per_drq), this.write_dest = $is_lba48$jscomp$3_lba$jscomp$5_start$jscomp$35$$);
};
$IDEInterface$$module$src$ide$$.prototype.ata_write_sectors_dma = function($cmd$jscomp$9_is_lba48$jscomp$4$$) {
  $cmd$jscomp$9_is_lba48$jscomp$4$$ = 53 === $cmd$jscomp$9_is_lba48$jscomp$4$$;
  var $count$jscomp$65$$ = this.get_count($cmd$jscomp$9_is_lba48$jscomp$4$$);
  this.get_lba($cmd$jscomp$9_is_lba48$jscomp$4$$) * this.sector_size + $count$jscomp$65$$ * this.sector_size > this.buffer.byteLength ? ($dbg_assert$$module$src$log$$(!1, this.name + ": ATA DMA write: Outside of disk", 32768), this.status_reg = 255, this.push_irq()) : (this.status_reg = 88, this.channel.dma_status |= 1);
};
$IDEInterface$$module$src$ide$$.prototype.do_ata_write_sectors_dma = function() {
  var $byte_count$jscomp$8_is_lba48$jscomp$5$$ = 53 === this.current_command, $count$jscomp$66$$ = this.get_count($byte_count$jscomp$8_is_lba48$jscomp$5$$), $lba$jscomp$7_start$jscomp$37$$ = this.get_lba($byte_count$jscomp$8_is_lba48$jscomp$5$$);
  $byte_count$jscomp$8_is_lba48$jscomp$5$$ = $count$jscomp$66$$ * this.sector_size;
  $lba$jscomp$7_start$jscomp$37$$ *= this.sector_size;
  var $prdt_start$jscomp$2$$ = this.channel.prdt_addr, $offset$jscomp$73$$ = 0;
  const $buffer$jscomp$48$$ = new Uint8Array($byte_count$jscomp$8_is_lba48$jscomp$5$$);
  do {
    var $prd_addr$jscomp$1_slice$jscomp$3$$ = this.cpu.read32s($prdt_start$jscomp$2$$), $prd_count$jscomp$1$$ = this.cpu.read16($prdt_start$jscomp$2$$ + 4), $end$jscomp$19$$ = this.cpu.read8($prdt_start$jscomp$2$$ + 7) & 128;
    $prd_count$jscomp$1$$ || ($prd_count$jscomp$1$$ = 65536, $dbg_log$$module$src$log$$(this.name + ": DMA: prd count was 0", 32768));
    $prd_addr$jscomp$1_slice$jscomp$3$$ = this.cpu.mem8.subarray($prd_addr$jscomp$1_slice$jscomp$3$$, $prd_addr$jscomp$1_slice$jscomp$3$$ + $prd_count$jscomp$1$$);
    $dbg_assert$$module$src$log$$($prd_addr$jscomp$1_slice$jscomp$3$$.length === $prd_count$jscomp$1$$);
    $buffer$jscomp$48$$.set($prd_addr$jscomp$1_slice$jscomp$3$$, $offset$jscomp$73$$);
    $offset$jscomp$73$$ += $prd_count$jscomp$1$$;
    $prdt_start$jscomp$2$$ += 8;
  } while (!$end$jscomp$19$$);
  $dbg_assert$$module$src$log$$($offset$jscomp$73$$ === $buffer$jscomp$48$$.length);
  this.buffer.set($lba$jscomp$7_start$jscomp$37$$, $buffer$jscomp$48$$, () => {
    this.ata_advance(this.current_command, $count$jscomp$66$$);
    this.status_reg = 80;
    this.push_irq();
    this.channel.dma_status &= -2;
    this.current_command = -1;
  });
  this.report_write($byte_count$jscomp$8_is_lba48$jscomp$5$$);
};
$IDEInterface$$module$src$ide$$.prototype.get_chs = function() {
  return ((this.lba_mid_reg & 255 | this.lba_high_reg << 8 & 65280) * this.head_count + this.head) * this.sectors_per_track + (this.lba_low_reg & 255) - 1;
};
$IDEInterface$$module$src$ide$$.prototype.get_lba28 = function() {
  return this.lba_low_reg & 255 | this.lba_mid_reg << 8 & 65280 | this.lba_high_reg << 16 & 16711680 | (this.head & 15) << 24;
};
$IDEInterface$$module$src$ide$$.prototype.get_lba48 = function() {
  return (this.lba_low_reg & 255 | this.lba_mid_reg << 8 & 65280 | this.lba_high_reg << 16 & 16711680 | this.lba_low_reg >> 8 << 24 & 4278190080) >>> 0;
};
$IDEInterface$$module$src$ide$$.prototype.get_lba = function($is_lba48$jscomp$6$$) {
  return $is_lba48$jscomp$6$$ ? this.get_lba48() : this.is_lba ? this.get_lba28() : this.get_chs();
};
$IDEInterface$$module$src$ide$$.prototype.get_count = function($count$jscomp$67_is_lba48$jscomp$7$$) {
  $count$jscomp$67_is_lba48$jscomp$7$$ ? ($count$jscomp$67_is_lba48$jscomp$7$$ = this.sector_count_reg, 0 === $count$jscomp$67_is_lba48$jscomp$7$$ && ($count$jscomp$67_is_lba48$jscomp$7$$ = 65536)) : ($count$jscomp$67_is_lba48$jscomp$7$$ = this.sector_count_reg & 255, 0 === $count$jscomp$67_is_lba48$jscomp$7$$ && ($count$jscomp$67_is_lba48$jscomp$7$$ = 256));
  return $count$jscomp$67_is_lba48$jscomp$7$$;
};
$IDEInterface$$module$src$ide$$.prototype.create_identify_packet = function() {
  const $cylinder_count$$ = Math.min(16383, this.cylinder_count), $strcpy_be16$$ = ($out_buffer$$, $ofs16_ofs8$$, $end8_len16$$, $str$jscomp$13$$) => {
    $ofs16_ofs8$$ <<= 1;
    var $i_str_len8$$ = $end8_len16$$ << 1;
    $end8_len16$$ = $ofs16_ofs8$$ + $i_str_len8$$;
    $out_buffer$$.fill(32, $ofs16_ofs8$$, $i_str_len8$$);
    for ($i_str_len8$$ = 0; $i_str_len8$$ < $str$jscomp$13$$.length && $ofs16_ofs8$$ < $end8_len16$$; $i_str_len8$$++) {
      $i_str_len8$$ & 1 ? ($out_buffer$$[$ofs16_ofs8$$] = $str$jscomp$13$$.charCodeAt($i_str_len8$$), $ofs16_ofs8$$ += 2) : $out_buffer$$[$ofs16_ofs8$$ + 1] = $str$jscomp$13$$.charCodeAt($i_str_len8$$);
    }
  }, $general_cfg$$ = this.is_atapi ? 34112 : 64, $multiword_dma_mode$$ = 160 === this.current_command ? 0 : 1031, $feat_82$$ = this.is_atapi ? 16928 : 16384, $feat_83$$ = this.is_atapi ? 20480 : 29696;
  this.data.fill(0, 0, 512);
  this.data_set([$general_cfg$$ & 255, $general_cfg$$ >> 8 & 255, $cylinder_count$$ & 255, $cylinder_count$$ >> 8 & 255, 0, 0, this.head_count & 255, this.head_count >> 8 & 255, this.sectors_per_track / 512 & 255, this.sectors_per_track / 512 >> 8 & 255, 0, 2, this.sectors_per_track & 255, this.sectors_per_track >> 8 & 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 2, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 0, 1, 0, 0, 2, 0, 0, 0, 2, 0, 2, 7, 0, $cylinder_count$$ & 255, $cylinder_count$$ >> 8 & 255, this.head_count & 255, this.head_count >> 8 & 255, this.sectors_per_track, 0, this.sector_count & 255, this.sector_count >> 8 & 255, this.sector_count >> 16 & 255, this.sector_count >> 24 & 255, 0, 0, this.sector_count & 255, this.sector_count >> 8 & 255, this.sector_count >> 16 & 255, this.sector_count >> 24 & 255, 0, 0, $multiword_dma_mode$$ & 
  255, $multiword_dma_mode$$ >> 8 & 255, 0, 0, 30, 0, 30, 0, 30, 0, 30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, $feat_82$$ & 255, $feat_82$$ >> 8 & 255, $feat_83$$ & 255, $feat_83$$ >> 8 & 255, 0, 64, $feat_82$$ & 255, $feat_82$$ >> 8 & 255, $feat_83$$ & 255, $feat_83$$ >> 8 & 255, 0, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 96, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, this.sector_count & 255, this.sector_count >> 8 & 255, this.sector_count >> 16 & 255, this.sector_count >> 
  24 & 255, ]);
  $strcpy_be16$$(this.data, 10, 10, `8086-86${this.channel_nr}${this.interface_nr}`);
  $strcpy_be16$$(this.data, 23, 4, "1.00");
  $strcpy_be16$$(this.data, 27, 20, this.is_atapi ? "v86 ATAPI CD-ROM" : "v86 ATA HD");
  this.data_end = this.data_length = 512;
};
$IDEInterface$$module$src$ide$$.prototype.data_allocate = function($len$jscomp$26$$) {
  this.data_allocate_noclear($len$jscomp$26$$);
  this.data32.fill(0, 0, $len$jscomp$26$$ + 3 >> 2);
};
$IDEInterface$$module$src$ide$$.prototype.data_allocate_noclear = function($len$jscomp$27$$) {
  this.data.length < $len$jscomp$27$$ && (this.data = new Uint8Array($len$jscomp$27$$ + 3 & -4), this.data16 = new Uint16Array(this.data.buffer), this.data32 = new Int32Array(this.data.buffer));
  this.data_length = $len$jscomp$27$$;
  this.data_pointer = 0;
};
$IDEInterface$$module$src$ide$$.prototype.data_set = function($data$jscomp$207$$) {
  this.data_allocate_noclear($data$jscomp$207$$.length);
  this.data.set($data$jscomp$207$$);
};
$IDEInterface$$module$src$ide$$.prototype.report_read_start = function() {
  this.bus.send("ide-read-start");
};
$IDEInterface$$module$src$ide$$.prototype.report_read_end = function($byte_count$jscomp$9$$) {
  this.bus.send("ide-read-end", [this.channel_nr, $byte_count$jscomp$9$$, $byte_count$jscomp$9$$ / this.sector_size | 0]);
};
$IDEInterface$$module$src$ide$$.prototype.report_write = function($byte_count$jscomp$10$$) {
  this.bus.send("ide-write-end", [this.channel_nr, $byte_count$jscomp$10$$, $byte_count$jscomp$10$$ / this.sector_size | 0]);
};
$IDEInterface$$module$src$ide$$.prototype.read_buffer = function($start$jscomp$38$$, $length$jscomp$30$$, $callback$jscomp$46$$) {
  const $id$jscomp$26$$ = this.last_io_id++;
  this.in_progress_io_ids.add($id$jscomp$26$$);
  this.buffer.get($start$jscomp$38$$, $length$jscomp$30$$, $data$jscomp$208$$ => {
    if (this.cancelled_io_ids.delete($id$jscomp$26$$)) {
      $dbg_assert$$module$src$log$$(!this.in_progress_io_ids.has($id$jscomp$26$$));
    } else {
      var $removed$$ = this.in_progress_io_ids.delete($id$jscomp$26$$);
      $dbg_assert$$module$src$log$$($removed$$);
      $callback$jscomp$46$$($data$jscomp$208$$);
    }
  });
};
$IDEInterface$$module$src$ide$$.prototype.cancel_io_operations = function() {
  for (const $id$jscomp$27$$ of this.in_progress_io_ids) {
    this.cancelled_io_ids.add($id$jscomp$27$$);
  }
  this.in_progress_io_ids.clear();
};
$IDEInterface$$module$src$ide$$.prototype.get_state = function() {
  var $state$jscomp$50$$ = [];
  $state$jscomp$50$$[0] = this.sector_count_reg;
  $state$jscomp$50$$[1] = this.cylinder_count;
  $state$jscomp$50$$[2] = this.lba_high_reg;
  $state$jscomp$50$$[3] = this.lba_mid_reg;
  $state$jscomp$50$$[4] = this.data_pointer;
  $state$jscomp$50$$[5] = 0;
  $state$jscomp$50$$[6] = 0;
  $state$jscomp$50$$[7] = 0;
  $state$jscomp$50$$[8] = 0;
  $state$jscomp$50$$[9] = this.device_reg;
  $state$jscomp$50$$[10] = this.error_reg;
  $state$jscomp$50$$[11] = this.head;
  $state$jscomp$50$$[12] = this.head_count;
  $state$jscomp$50$$[13] = this.is_atapi;
  $state$jscomp$50$$[14] = this.is_lba;
  $state$jscomp$50$$[15] = this.features_reg;
  $state$jscomp$50$$[16] = this.data;
  $state$jscomp$50$$[17] = this.data_length;
  $state$jscomp$50$$[18] = this.lba_low_reg;
  $state$jscomp$50$$[19] = this.sector_count;
  $state$jscomp$50$$[20] = this.sector_size;
  $state$jscomp$50$$[21] = this.sectors_per_drq;
  $state$jscomp$50$$[22] = this.sectors_per_track;
  $state$jscomp$50$$[23] = this.status_reg;
  $state$jscomp$50$$[24] = this.write_dest;
  $state$jscomp$50$$[25] = this.current_command;
  $state$jscomp$50$$[26] = this.data_end;
  $state$jscomp$50$$[27] = this.current_atapi_command;
  $state$jscomp$50$$[28] = this.buffer;
  return $state$jscomp$50$$;
};
$IDEInterface$$module$src$ide$$.prototype.set_state = function($state$jscomp$51$$) {
  this.sector_count_reg = $state$jscomp$51$$[0];
  this.cylinder_count = $state$jscomp$51$$[1];
  this.lba_high_reg = $state$jscomp$51$$[2];
  this.lba_mid_reg = $state$jscomp$51$$[3];
  this.data_pointer = $state$jscomp$51$$[4];
  this.device_reg = $state$jscomp$51$$[9];
  this.error_reg = $state$jscomp$51$$[10];
  this.head = $state$jscomp$51$$[11];
  this.head_count = $state$jscomp$51$$[12];
  this.is_atapi = $state$jscomp$51$$[13];
  this.is_lba = $state$jscomp$51$$[14];
  this.features_reg = $state$jscomp$51$$[15];
  this.data = $state$jscomp$51$$[16];
  this.data_length = $state$jscomp$51$$[17];
  this.lba_low_reg = $state$jscomp$51$$[18];
  this.sector_count = $state$jscomp$51$$[19];
  this.sector_size = $state$jscomp$51$$[20];
  this.sectors_per_drq = $state$jscomp$51$$[21];
  this.sectors_per_track = $state$jscomp$51$$[22];
  this.status_reg = $state$jscomp$51$$[23];
  this.write_dest = $state$jscomp$51$$[24];
  this.current_command = $state$jscomp$51$$[25];
  this.data_end = $state$jscomp$51$$[26];
  this.current_atapi_command = $state$jscomp$51$$[27];
  this.data16 = new Uint16Array(this.data.buffer);
  this.data32 = new Int32Array(this.data.buffer);
  this.buffer && this.buffer.set_state($state$jscomp$51$$[28]);
  this.drive_connected = this.is_atapi || this.buffer;
  this.medium_changed = !1;
};
function $VirtioNet$$module$src$virtio_net$$($cpu$jscomp$25$$, $bus$jscomp$23_queues$jscomp$1$$, $i$jscomp$89_preserve_mac_from_state_image$jscomp$1$$) {
  this.bus = $bus$jscomp$23_queues$jscomp$1$$;
  this.id = $cpu$jscomp$25$$.devices.net ? 1 : 0;
  this.status = this.pairs = 1;
  this.preserve_mac_from_state_image = $i$jscomp$89_preserve_mac_from_state_image$jscomp$1$$;
  this.mac = new Uint8Array([0, 34, 21, 255 * Math.random() | 0, 255 * Math.random() | 0, 255 * Math.random() | 0, ]);
  this.bus.send("net" + this.id + "-mac", $format_mac$$module$src$ne2k$$(this.mac));
  $bus$jscomp$23_queues$jscomp$1$$ = [];
  for ($i$jscomp$89_preserve_mac_from_state_image$jscomp$1$$ = 0; $i$jscomp$89_preserve_mac_from_state_image$jscomp$1$$ < this.pairs; ++$i$jscomp$89_preserve_mac_from_state_image$jscomp$1$$) {
    $bus$jscomp$23_queues$jscomp$1$$.push({size_supported:1024, notify_offset:0}), $bus$jscomp$23_queues$jscomp$1$$.push({size_supported:1024, notify_offset:1});
  }
  $bus$jscomp$23_queues$jscomp$1$$.push({size_supported:16, notify_offset:2, });
  this.virtio = new $VirtIO$$module$src$virtio$$($cpu$jscomp$25$$, {name:"virtio-net", pci_id:80, device_id:4161, subsystem_device_id:1, common:{initial_port:51200, queues:$bus$jscomp$23_queues$jscomp$1$$, features:[5, 16, 22, 3, 17, 23, 32, ], on_driver_ok:() => {
  }, }, notification:{initial_port:51456, single_handler:!1, handlers:[() => {
  }, $queue_id$jscomp$8$$ => {
    const $queue$jscomp$5$$ = this.virtio.queues[$queue_id$jscomp$8$$];
    for (; $queue$jscomp$5$$.has_request();) {
      const $bufchain$jscomp$8$$ = $queue$jscomp$5$$.pop_request(), $buffer$jscomp$49$$ = new Uint8Array($bufchain$jscomp$8$$.length_readable);
      $bufchain$jscomp$8$$.get_next_blob($buffer$jscomp$49$$);
      this.bus.send("net" + this.id + "-send", $buffer$jscomp$49$$.subarray(12));
      this.bus.send("eth-transmit-end", [$buffer$jscomp$49$$.length - 12]);
      this.virtio.queues[$queue_id$jscomp$8$$].push_reply($bufchain$jscomp$8$$);
    }
    this.virtio.queues[$queue_id$jscomp$8$$].flush_replies();
  }, $queue_id$jscomp$9$$ => {
    if ($queue_id$jscomp$9$$ !== 2 * this.pairs) {
      $dbg_assert$$module$src$log$$(!1, "VirtioNet Notified for wrong queue: " + $queue_id$jscomp$9$$ + " (expected queue_id of 3)");
    } else {
      for (var $queue$jscomp$6$$ = this.virtio.queues[$queue_id$jscomp$9$$]; $queue$jscomp$6$$.has_request();) {
        const $bufchain$jscomp$9$$ = $queue$jscomp$6$$.pop_request();
        var $buffer$jscomp$50_data$jscomp$209$$ = new Uint8Array($bufchain$jscomp$9$$.length_readable);
        $bufchain$jscomp$9$$.get_next_blob($buffer$jscomp$50_data$jscomp$209$$);
        var $command_parts$jscomp$6$$ = $Unmarshall$$module$lib$marshall$$(["b", "b"], $buffer$jscomp$50_data$jscomp$209$$, {offset:0});
        const $xclass$$ = $command_parts$jscomp$6$$[0];
        $command_parts$jscomp$6$$ = $command_parts$jscomp$6$$[1];
        switch($xclass$$ << 8 | $command_parts$jscomp$6$$) {
          case 1024:
            $buffer$jscomp$50_data$jscomp$209$$ = $Unmarshall$$module$lib$marshall$$(["h"], $buffer$jscomp$50_data$jscomp$209$$, {offset:2});
            $dbg_assert$$module$src$log$$(1 === $buffer$jscomp$50_data$jscomp$209$$[0]);
            this.Send($queue_id$jscomp$9$$, $bufchain$jscomp$9$$, new Uint8Array([0]));
            break;
          case 257:
            this.mac = $buffer$jscomp$50_data$jscomp$209$$.subarray(2, 8);
            this.Send($queue_id$jscomp$9$$, $bufchain$jscomp$9$$, new Uint8Array([0]));
            this.bus.send("net" + this.id + "-mac", $format_mac$$module$src$ne2k$$(this.mac));
            break;
          default:
            $dbg_assert$$module$src$log$$(!1, " VirtioNet received unknown command: " + $xclass$$ + ":" + $command_parts$jscomp$6$$);
            this.Send($queue_id$jscomp$9$$, $bufchain$jscomp$9$$, new Uint8Array([1]));
            return;
        }
      }
    }
  }, ], }, isr_status:{initial_port:50944, }, device_specific:{initial_port:50688, struct:[0, 1, 2, 3, 4, 5].map(($v$jscomp$5$$, $k$$) => ({bytes:1, name:"mac_" + $k$$, read:() => this.mac[$k$$], write:() => {
  }, })).concat([{bytes:2, name:"status", read:() => this.status, write:() => {
  }, }, {bytes:2, name:"max_pairs", read:() => this.pairs, write:() => {
  }, }, {bytes:2, name:"mtu", read:() => 1500, write:() => {
  }, }])}, });
  this.bus.register("net" + this.id + "-receive", $bufchain$jscomp$10_data$jscomp$214_queue$jscomp$7$$ => {
    this.bus.send("eth-receive-end", [$bufchain$jscomp$10_data$jscomp$214_queue$jscomp$7$$.length]);
    const $with_header$$ = new Uint8Array(12 + $bufchain$jscomp$10_data$jscomp$214_queue$jscomp$7$$.byteLength);
    (new DataView($with_header$$.buffer, $with_header$$.byteOffset, $with_header$$.byteLength)).setInt16(10, 1);
    $with_header$$.set($bufchain$jscomp$10_data$jscomp$214_queue$jscomp$7$$, 12);
    $bufchain$jscomp$10_data$jscomp$214_queue$jscomp$7$$ = this.virtio.queues[0];
    $bufchain$jscomp$10_data$jscomp$214_queue$jscomp$7$$.has_request() ? ($bufchain$jscomp$10_data$jscomp$214_queue$jscomp$7$$ = $bufchain$jscomp$10_data$jscomp$214_queue$jscomp$7$$.pop_request(), $bufchain$jscomp$10_data$jscomp$214_queue$jscomp$7$$.set_next_blob($with_header$$), this.virtio.queues[0].push_reply($bufchain$jscomp$10_data$jscomp$214_queue$jscomp$7$$), this.virtio.queues[0].flush_replies()) : console.log("No buffer to write into!");
  }, this);
}
$VirtioNet$$module$src$virtio_net$$.prototype.get_state = function() {
  const $state$jscomp$52$$ = [];
  $state$jscomp$52$$[0] = this.virtio;
  $state$jscomp$52$$[1] = this.id;
  $state$jscomp$52$$[2] = this.mac;
  return $state$jscomp$52$$;
};
$VirtioNet$$module$src$virtio_net$$.prototype.set_state = function($state$jscomp$53$$) {
  this.virtio.set_state($state$jscomp$53$$[0]);
  this.id = $state$jscomp$53$$[1];
  this.preserve_mac_from_state_image && (this.mac = $state$jscomp$53$$[2], this.bus.send("net" + this.id + "-mac", $format_mac$$module$src$ne2k$$(this.mac)));
};
$VirtioNet$$module$src$virtio_net$$.prototype.reset = function() {
  this.virtio.reset();
};
$VirtioNet$$module$src$virtio_net$$.prototype.Send = function($queue_id$jscomp$10$$, $bufchain$jscomp$11$$, $blob$jscomp$15$$) {
  $bufchain$jscomp$11$$.set_next_blob($blob$jscomp$15$$);
  this.virtio.queues[$queue_id$jscomp$10$$].push_reply($bufchain$jscomp$11$$);
  this.virtio.queues[$queue_id$jscomp$10$$].flush_replies();
};
$VirtioNet$$module$src$virtio_net$$.prototype.Ack = function($queue_id$jscomp$11$$, $bufchain$jscomp$12$$) {
  this.virtio.queues[$queue_id$jscomp$11$$].push_reply($bufchain$jscomp$12$$);
  this.virtio.queues[$queue_id$jscomp$11$$].flush_replies();
};
const $VGA_HOST_MEMORY_SPACE_START$$module$src$vga$$ = Uint32Array.from([655360, 655360, 720896, 753664, ]), $VGA_HOST_MEMORY_SPACE_SIZE$$module$src$vga$$ = Uint32Array.from([131072, 65536, 32768, 32768, ]);
function $VGAScreen$$module$src$vga$$($cpu$jscomp$26$$, $bus$jscomp$24_io$jscomp$4$$, $screen$jscomp$3_vga_offset$$, $vga_memory_size$$) {
  this.cpu = $cpu$jscomp$26$$;
  this.bus = $bus$jscomp$24_io$jscomp$4$$;
  this.screen = $screen$jscomp$3_vga_offset$$;
  this.vga_memory_size = $vga_memory_size$$;
  this.cursor_address = 0;
  this.cursor_scanline_start = 14;
  this.cursor_scanline_end = 15;
  this.max_cols = 80;
  this.max_rows = 25;
  this.virtual_height = this.virtual_width = this.screen_height = this.screen_width = 0;
  this.layers = [];
  this.start_address_latched = this.start_address = 0;
  this.crtc = new Uint8Array(25);
  this.line_compare = this.offset_register = this.preset_row_scan = this.underline_location_register = this.vertical_blank_start = this.vertical_display_enable_end = this.horizontal_blank_start = this.horizontal_display_enable_end = this.crtc_mode = 0;
  this.graphical_mode = !1;
  this.vga256_palette = new Int32Array(256);
  this.latch_dword = 0;
  this.svga_version = 45253;
  this.svga_height = this.svga_width = 0;
  this.svga_enabled = !1;
  this.svga_bpp = 32;
  this.svga_offset_y = this.svga_offset_x = this.svga_offset = this.svga_bank_offset = 0;
  this.vga_memory_size = void 0 === this.vga_memory_size || 262144 > this.vga_memory_size ? 262144 : 268435456 < this.vga_memory_size ? 268435456 : $round_up_to_next_power_of_2$$module$src$lib$$(this.vga_memory_size);
  $dbg_log$$module$src$log$$("effective vga memory size: " + this.vga_memory_size, 256);
  this.pci_space = [52, 18, 17, 17, 3, 1, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 8, 14680064, 57344, 224, 0, 0, 0, 0, 0, 0, 191, 254, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 244, 26, 0, 17, 0, 0, 190, 254, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ];
  this.pci_id = 144;
  this.pci_bars = [{size:this.vga_memory_size, }, ];
  this.pci_rom_size = 65536;
  this.pci_rom_address = 4272947200;
  this.name = "vga";
  this.dac_state = this.dac_color_index_read = this.dac_color_index_write = this.index_crtc = 0;
  this.dac_mask = 255;
  this.dac_map = new Uint8Array(16);
  this.attribute_controller_index = -1;
  this.palette_source = 32;
  this.color_select = this.horizontal_panning = this.color_plane_enable = this.attribute_mode = 0;
  this.sequencer_index = -1;
  this.plane_write_bm = 15;
  this.clocking_mode = this.sequencer_memory_mode = 0;
  this.graphics_index = -1;
  this.planar_rotate_reg = this.planar_mode = this.plane_read = this.character_map_select = 0;
  this.planar_bitmap = 255;
  this.max_scan_line = this.color_dont_care = this.color_compare = this.miscellaneous_graphics_register = this.planar_setreset_enable = this.planar_setreset = 0;
  this.port_3DA_value = this.miscellaneous_output_register = 255;
  this.font_page_ab_enabled = !1;
  $bus$jscomp$24_io$jscomp$4$$ = $cpu$jscomp$26$$.io;
  $bus$jscomp$24_io$jscomp$4$$.register_write(960, this, this.port3C0_write);
  $bus$jscomp$24_io$jscomp$4$$.register_read(960, this, this.port3C0_read, this.port3C0_read16);
  $bus$jscomp$24_io$jscomp$4$$.register_read(961, this, this.port3C1_read);
  $bus$jscomp$24_io$jscomp$4$$.register_write(962, this, this.port3C2_write);
  $bus$jscomp$24_io$jscomp$4$$.register_write_consecutive(964, this, this.port3C4_write, this.port3C5_write);
  $bus$jscomp$24_io$jscomp$4$$.register_read(964, this, this.port3C4_read);
  $bus$jscomp$24_io$jscomp$4$$.register_read(965, this, this.port3C5_read);
  $bus$jscomp$24_io$jscomp$4$$.register_write_consecutive(974, this, this.port3CE_write, this.port3CF_write);
  $bus$jscomp$24_io$jscomp$4$$.register_read(974, this, this.port3CE_read);
  $bus$jscomp$24_io$jscomp$4$$.register_read(975, this, this.port3CF_read);
  $bus$jscomp$24_io$jscomp$4$$.register_read(966, this, this.port3C6_read);
  $bus$jscomp$24_io$jscomp$4$$.register_write(966, this, this.port3C6_write);
  $bus$jscomp$24_io$jscomp$4$$.register_write(967, this, this.port3C7_write);
  $bus$jscomp$24_io$jscomp$4$$.register_read(967, this, this.port3C7_read);
  $bus$jscomp$24_io$jscomp$4$$.register_write(968, this, this.port3C8_write);
  $bus$jscomp$24_io$jscomp$4$$.register_read(968, this, this.port3C8_read);
  $bus$jscomp$24_io$jscomp$4$$.register_write(969, this, this.port3C9_write);
  $bus$jscomp$24_io$jscomp$4$$.register_read(969, this, this.port3C9_read);
  $bus$jscomp$24_io$jscomp$4$$.register_read(972, this, this.port3CC_read);
  $bus$jscomp$24_io$jscomp$4$$.register_write(980, this, this.port3D4_write, this.port3D4_write16);
  $bus$jscomp$24_io$jscomp$4$$.register_write(981, this, this.port3D5_write, this.port3D5_write16);
  $bus$jscomp$24_io$jscomp$4$$.register_read(980, this, this.port3D4_read);
  $bus$jscomp$24_io$jscomp$4$$.register_read(981, this, this.port3D5_read, this.port3D5_read16);
  $bus$jscomp$24_io$jscomp$4$$.register_write(948, this, this.port3D4_write, this.port3D4_write16);
  $bus$jscomp$24_io$jscomp$4$$.register_write(949, this, this.port3D5_write, this.port3D5_write16);
  $bus$jscomp$24_io$jscomp$4$$.register_read(948, this, this.port3D4_read);
  $bus$jscomp$24_io$jscomp$4$$.register_read(949, this, this.port3D5_read, this.port3D5_read16);
  $bus$jscomp$24_io$jscomp$4$$.register_read(970, this, function() {
    $dbg_log$$module$src$log$$("3CA read", 256);
    return 0;
  });
  $bus$jscomp$24_io$jscomp$4$$.register_read(986, this, this.port3DA_read);
  $bus$jscomp$24_io$jscomp$4$$.register_read(954, this, this.port3DA_read);
  this.dispi_index = -1;
  this.dispi_enable_value = 0;
  $bus$jscomp$24_io$jscomp$4$$.register_write(462, this, void 0, this.port1CE_write);
  $bus$jscomp$24_io$jscomp$4$$.register_write(463, this, void 0, this.port1CF_write);
  $bus$jscomp$24_io$jscomp$4$$.register_read(463, this, void 0, this.port1CF_read);
  $screen$jscomp$3_vga_offset$$ = $cpu$jscomp$26$$.svga_allocate_memory(this.vga_memory_size) >>> 0;
  this.svga_memory = $view$$module$src$lib$$(Uint8Array, $cpu$jscomp$26$$.wasm_memory, $screen$jscomp$3_vga_offset$$, this.vga_memory_size);
  this.diff_addr_min = this.vga_memory_size;
  this.diff_addr_max = 0;
  this.diff_plot_min = this.vga_memory_size;
  this.diff_plot_max = 0;
  this.image_data = null;
  this.vga_memory = new Uint8Array(262144);
  this.plane0 = new Uint8Array(this.vga_memory.buffer, 0, 65536);
  this.plane1 = new Uint8Array(this.vga_memory.buffer, 65536, 65536);
  this.plane2 = new Uint8Array(this.vga_memory.buffer, 131072, 65536);
  this.plane3 = new Uint8Array(this.vga_memory.buffer, 196608, 65536);
  this.pixel_buffer = new Uint8Array(524288);
  $bus$jscomp$24_io$jscomp$4$$.mmap_register(655360, 131072, $addr$jscomp$40$$ => this.vga_memory_read($addr$jscomp$40$$), ($addr$jscomp$41$$, $value$jscomp$176$$) => this.vga_memory_write($addr$jscomp$41$$, $value$jscomp$176$$), );
  $cpu$jscomp$26$$.devices.pci.register_device(this);
}
$VGAScreen$$module$src$vga$$.prototype.get_state = function() {
  var $state$jscomp$54$$ = [];
  $state$jscomp$54$$[0] = this.vga_memory_size;
  $state$jscomp$54$$[1] = this.cursor_address;
  $state$jscomp$54$$[2] = this.cursor_scanline_start;
  $state$jscomp$54$$[3] = this.cursor_scanline_end;
  $state$jscomp$54$$[4] = this.max_cols;
  $state$jscomp$54$$[5] = this.max_rows;
  $state$jscomp$54$$[6] = this.vga_memory;
  $state$jscomp$54$$[7] = this.dac_state;
  $state$jscomp$54$$[8] = this.start_address;
  $state$jscomp$54$$[9] = this.graphical_mode;
  $state$jscomp$54$$[10] = this.vga256_palette;
  $state$jscomp$54$$[11] = this.latch_dword;
  $state$jscomp$54$$[12] = this.color_compare;
  $state$jscomp$54$$[13] = this.color_dont_care;
  $state$jscomp$54$$[14] = this.miscellaneous_graphics_register;
  $state$jscomp$54$$[15] = this.svga_width;
  $state$jscomp$54$$[16] = this.svga_height;
  $state$jscomp$54$$[17] = this.crtc_mode;
  $state$jscomp$54$$[18] = this.svga_enabled;
  $state$jscomp$54$$[19] = this.svga_bpp;
  $state$jscomp$54$$[20] = this.svga_bank_offset;
  $state$jscomp$54$$[21] = this.svga_offset;
  $state$jscomp$54$$[22] = this.index_crtc;
  $state$jscomp$54$$[23] = this.dac_color_index_write;
  $state$jscomp$54$$[24] = this.dac_color_index_read;
  $state$jscomp$54$$[25] = this.dac_map;
  $state$jscomp$54$$[26] = this.sequencer_index;
  $state$jscomp$54$$[27] = this.plane_write_bm;
  $state$jscomp$54$$[28] = this.sequencer_memory_mode;
  $state$jscomp$54$$[29] = this.graphics_index;
  $state$jscomp$54$$[30] = this.plane_read;
  $state$jscomp$54$$[31] = this.planar_mode;
  $state$jscomp$54$$[32] = this.planar_rotate_reg;
  $state$jscomp$54$$[33] = this.planar_bitmap;
  $state$jscomp$54$$[34] = this.max_scan_line;
  $state$jscomp$54$$[35] = this.miscellaneous_output_register;
  $state$jscomp$54$$[36] = this.port_3DA_value;
  $state$jscomp$54$$[37] = this.dispi_index;
  $state$jscomp$54$$[38] = this.dispi_enable_value;
  $state$jscomp$54$$[39] = this.svga_memory;
  $state$jscomp$54$$[41] = this.attribute_controller_index;
  $state$jscomp$54$$[42] = this.offset_register;
  $state$jscomp$54$$[43] = this.planar_setreset;
  $state$jscomp$54$$[44] = this.planar_setreset_enable;
  $state$jscomp$54$$[45] = this.start_address_latched;
  $state$jscomp$54$$[46] = this.crtc;
  $state$jscomp$54$$[47] = this.horizontal_display_enable_end;
  $state$jscomp$54$$[48] = this.horizontal_blank_start;
  $state$jscomp$54$$[49] = this.vertical_display_enable_end;
  $state$jscomp$54$$[50] = this.vertical_blank_start;
  $state$jscomp$54$$[51] = this.underline_location_register;
  $state$jscomp$54$$[52] = this.preset_row_scan;
  $state$jscomp$54$$[53] = this.offset_register;
  $state$jscomp$54$$[54] = this.palette_source;
  $state$jscomp$54$$[55] = this.attribute_mode;
  $state$jscomp$54$$[56] = this.color_plane_enable;
  $state$jscomp$54$$[57] = this.horizontal_panning;
  $state$jscomp$54$$[58] = this.color_select;
  $state$jscomp$54$$[59] = this.clocking_mode;
  $state$jscomp$54$$[60] = this.line_compare;
  $state$jscomp$54$$[61] = this.pixel_buffer;
  $state$jscomp$54$$[62] = this.dac_mask;
  $state$jscomp$54$$[63] = this.character_map_select;
  $state$jscomp$54$$[64] = this.font_page_ab_enabled;
  return $state$jscomp$54$$;
};
$VGAScreen$$module$src$vga$$.prototype.set_state = function($state$jscomp$55$$) {
  this.vga_memory_size = $state$jscomp$55$$[0];
  this.cursor_address = $state$jscomp$55$$[1];
  this.cursor_scanline_start = $state$jscomp$55$$[2];
  this.cursor_scanline_end = $state$jscomp$55$$[3];
  this.max_cols = $state$jscomp$55$$[4];
  this.max_rows = $state$jscomp$55$$[5];
  $state$jscomp$55$$[6] && this.vga_memory.set($state$jscomp$55$$[6]);
  this.dac_state = $state$jscomp$55$$[7];
  this.start_address = $state$jscomp$55$$[8];
  this.graphical_mode = $state$jscomp$55$$[9];
  this.vga256_palette = $state$jscomp$55$$[10];
  this.latch_dword = $state$jscomp$55$$[11];
  this.color_compare = $state$jscomp$55$$[12];
  this.color_dont_care = $state$jscomp$55$$[13];
  this.miscellaneous_graphics_register = $state$jscomp$55$$[14];
  this.svga_width = $state$jscomp$55$$[15];
  this.svga_height = $state$jscomp$55$$[16];
  this.crtc_mode = $state$jscomp$55$$[17];
  this.svga_enabled = $state$jscomp$55$$[18];
  this.svga_bpp = $state$jscomp$55$$[19];
  this.svga_bank_offset = $state$jscomp$55$$[20];
  this.svga_offset = $state$jscomp$55$$[21];
  this.index_crtc = $state$jscomp$55$$[22];
  this.dac_color_index_write = $state$jscomp$55$$[23];
  this.dac_color_index_read = $state$jscomp$55$$[24];
  this.dac_map = $state$jscomp$55$$[25];
  this.sequencer_index = $state$jscomp$55$$[26];
  this.plane_write_bm = $state$jscomp$55$$[27];
  this.sequencer_memory_mode = $state$jscomp$55$$[28];
  this.graphics_index = $state$jscomp$55$$[29];
  this.plane_read = $state$jscomp$55$$[30];
  this.planar_mode = $state$jscomp$55$$[31];
  this.planar_rotate_reg = $state$jscomp$55$$[32];
  this.planar_bitmap = $state$jscomp$55$$[33];
  this.max_scan_line = $state$jscomp$55$$[34];
  this.miscellaneous_output_register = $state$jscomp$55$$[35];
  this.port_3DA_value = $state$jscomp$55$$[36];
  this.dispi_index = $state$jscomp$55$$[37];
  this.dispi_enable_value = $state$jscomp$55$$[38];
  this.svga_memory.set($state$jscomp$55$$[39]);
  this.attribute_controller_index = $state$jscomp$55$$[41];
  this.offset_register = $state$jscomp$55$$[42];
  this.planar_setreset = $state$jscomp$55$$[43];
  this.planar_setreset_enable = $state$jscomp$55$$[44];
  this.start_address_latched = $state$jscomp$55$$[45];
  this.crtc.set($state$jscomp$55$$[46]);
  this.horizontal_display_enable_end = $state$jscomp$55$$[47];
  this.horizontal_blank_start = $state$jscomp$55$$[48];
  this.vertical_display_enable_end = $state$jscomp$55$$[49];
  this.vertical_blank_start = $state$jscomp$55$$[50];
  this.underline_location_register = $state$jscomp$55$$[51];
  this.preset_row_scan = $state$jscomp$55$$[52];
  this.offset_register = $state$jscomp$55$$[53];
  this.palette_source = $state$jscomp$55$$[54];
  this.attribute_mode = $state$jscomp$55$$[55];
  this.color_plane_enable = $state$jscomp$55$$[56];
  this.horizontal_panning = $state$jscomp$55$$[57];
  this.color_select = $state$jscomp$55$$[58];
  this.clocking_mode = $state$jscomp$55$$[59];
  this.line_compare = $state$jscomp$55$$[60];
  $state$jscomp$55$$[61] && this.pixel_buffer.set($state$jscomp$55$$[61]);
  this.dac_mask = void 0 === $state$jscomp$55$$[62] ? 255 : $state$jscomp$55$$[62];
  this.character_map_select = void 0 === $state$jscomp$55$$[63] ? 0 : $state$jscomp$55$$[63];
  this.font_page_ab_enabled = void 0 === $state$jscomp$55$$[64] ? 0 : $state$jscomp$55$$[64];
  this.screen.set_mode(this.graphical_mode);
  this.graphical_mode ? (this.screen_height = this.screen_width = 0, this.svga_enabled ? (this.set_size_graphical(this.svga_width, this.svga_height, this.svga_width, this.svga_height, this.svga_bpp), this.update_layers()) : (this.update_vga_size(), this.update_layers(), this.complete_replot())) : (this.set_font_bitmap(!0), this.set_size_text(this.max_cols, this.max_rows), this.set_font_page(), this.update_cursor_scanline(), this.update_cursor());
  this.complete_redraw();
};
$VGAScreen$$module$src$vga$$.prototype.vga_memory_read = function($addr$jscomp$42$$) {
  if (this.svga_enabled) {
    return this.cpu.read8(($addr$jscomp$42$$ - 655360 | this.svga_bank_offset) + 3758096384 | 0);
  }
  var $memory_space_select_plane_reading$$ = this.miscellaneous_graphics_register >> 2 & 3;
  $addr$jscomp$42$$ -= $VGA_HOST_MEMORY_SPACE_START$$module$src$vga$$[$memory_space_select_plane_reading$$];
  if (0 > $addr$jscomp$42$$ || $addr$jscomp$42$$ >= $VGA_HOST_MEMORY_SPACE_SIZE$$module$src$vga$$[$memory_space_select_plane_reading$$]) {
    return $dbg_log$$module$src$log$$("vga read outside memory space: addr:" + $h$$module$src$lib$$($addr$jscomp$42$$), 256), 0;
  }
  this.latch_dword = this.plane0[$addr$jscomp$42$$];
  this.latch_dword |= this.plane1[$addr$jscomp$42$$] << 8;
  this.latch_dword |= this.plane2[$addr$jscomp$42$$] << 16;
  this.latch_dword |= this.plane3[$addr$jscomp$42$$] << 24;
  if (this.planar_mode & 8) {
    return $memory_space_select_plane_reading$$ = 255, this.color_dont_care & 1 && ($memory_space_select_plane_reading$$ &= this.plane0[$addr$jscomp$42$$] ^ ~(this.color_compare & 1 ? 255 : 0)), this.color_dont_care & 2 && ($memory_space_select_plane_reading$$ &= this.plane1[$addr$jscomp$42$$] ^ ~(this.color_compare & 2 ? 255 : 0)), this.color_dont_care & 4 && ($memory_space_select_plane_reading$$ &= this.plane2[$addr$jscomp$42$$] ^ ~(this.color_compare & 4 ? 255 : 0)), this.color_dont_care & 8 && 
    ($memory_space_select_plane_reading$$ &= this.plane3[$addr$jscomp$42$$] ^ ~(this.color_compare & 8 ? 255 : 0)), $memory_space_select_plane_reading$$;
  }
  $memory_space_select_plane_reading$$ = this.plane_read;
  this.graphical_mode ? this.sequencer_memory_mode & 8 ? ($memory_space_select_plane_reading$$ = $addr$jscomp$42$$ & 3, $addr$jscomp$42$$ &= -4) : this.planar_mode & 16 && ($memory_space_select_plane_reading$$ = $addr$jscomp$42$$ & 1, $addr$jscomp$42$$ &= -2) : $memory_space_select_plane_reading$$ &= 3;
  return this.vga_memory[$memory_space_select_plane_reading$$ << 16 | $addr$jscomp$42$$];
};
$VGAScreen$$module$src$vga$$.prototype.vga_memory_write = function($addr$jscomp$43$$, $value$jscomp$177$$) {
  if (this.svga_enabled) {
    this.cpu.write8(($addr$jscomp$43$$ - 655360 | this.svga_bank_offset) + 3758096384 | 0, $value$jscomp$177$$);
  } else {
    var $memory_space_select$jscomp$1$$ = this.miscellaneous_graphics_register >> 2 & 3;
    $addr$jscomp$43$$ -= $VGA_HOST_MEMORY_SPACE_START$$module$src$vga$$[$memory_space_select$jscomp$1$$];
    0 > $addr$jscomp$43$$ || $addr$jscomp$43$$ >= $VGA_HOST_MEMORY_SPACE_SIZE$$module$src$vga$$[$memory_space_select$jscomp$1$$] ? $dbg_log$$module$src$log$$("vga write outside memory space: addr:" + $h$$module$src$lib$$($addr$jscomp$43$$) + ", value:" + $h$$module$src$lib$$($value$jscomp$177$$), 256) : this.graphical_mode ? this.vga_memory_write_graphical($addr$jscomp$43$$, $value$jscomp$177$$) : this.plane_write_bm & 3 ? this.vga_memory_write_text_mode($addr$jscomp$43$$, $value$jscomp$177$$) : 
    this.plane_write_bm & 4 && (this.plane2[$addr$jscomp$43$$] = $value$jscomp$177$$);
  }
};
$VGAScreen$$module$src$vga$$.prototype.vga_memory_write_graphical = function($addr$jscomp$44_pixel_addr$$, $plane_select_value$jscomp$178$$) {
  var $write_mode$$ = this.planar_mode & 3, $bitmask$$ = this.apply_feed(this.planar_bitmap), $setreset_dword$$ = this.apply_expand(this.planar_setreset), $setreset_enable_dword$$ = this.apply_expand(this.planar_setreset_enable);
  switch($write_mode$$) {
    case 0:
      $plane_select_value$jscomp$178$$ = this.apply_rotate($plane_select_value$jscomp$178$$);
      var $plane_dword$$ = this.apply_feed($plane_select_value$jscomp$178$$);
      $plane_dword$$ = this.apply_setreset($plane_dword$$, $setreset_enable_dword$$);
      $plane_dword$$ = this.apply_logical($plane_dword$$, this.latch_dword);
      $plane_dword$$ = this.apply_bitmask($plane_dword$$, $bitmask$$);
      break;
    case 1:
      $plane_dword$$ = this.latch_dword;
      break;
    case 2:
      $plane_dword$$ = this.apply_expand($plane_select_value$jscomp$178$$);
      $plane_dword$$ = this.apply_logical($plane_dword$$, this.latch_dword);
      $plane_dword$$ = this.apply_bitmask($plane_dword$$, $bitmask$$);
      break;
    case 3:
      $plane_select_value$jscomp$178$$ = this.apply_rotate($plane_select_value$jscomp$178$$), $bitmask$$ &= this.apply_feed($plane_select_value$jscomp$178$$), $plane_dword$$ = this.apply_bitmask($setreset_dword$$, $bitmask$$);
  }
  $plane_select_value$jscomp$178$$ = 15;
  switch(this.sequencer_memory_mode & 12) {
    case 0:
      $plane_select_value$jscomp$178$$ = 5 << ($addr$jscomp$44_pixel_addr$$ & 1);
      $addr$jscomp$44_pixel_addr$$ &= -2;
      break;
    case 8:
    case 12:
      $plane_select_value$jscomp$178$$ = 1 << ($addr$jscomp$44_pixel_addr$$ & 3), $addr$jscomp$44_pixel_addr$$ &= -4;
  }
  $plane_select_value$jscomp$178$$ &= this.plane_write_bm;
  $plane_select_value$jscomp$178$$ & 1 && (this.plane0[$addr$jscomp$44_pixel_addr$$] = $plane_dword$$ >> 0 & 255);
  $plane_select_value$jscomp$178$$ & 2 && (this.plane1[$addr$jscomp$44_pixel_addr$$] = $plane_dword$$ >> 8 & 255);
  $plane_select_value$jscomp$178$$ & 4 && (this.plane2[$addr$jscomp$44_pixel_addr$$] = $plane_dword$$ >> 16 & 255);
  $plane_select_value$jscomp$178$$ & 8 && (this.plane3[$addr$jscomp$44_pixel_addr$$] = $plane_dword$$ >> 24 & 255);
  $addr$jscomp$44_pixel_addr$$ = this.vga_addr_to_pixel($addr$jscomp$44_pixel_addr$$);
  this.partial_replot($addr$jscomp$44_pixel_addr$$, $addr$jscomp$44_pixel_addr$$ + 7);
};
$VGAScreen$$module$src$vga$$.prototype.apply_feed = function($data_byte$jscomp$27$$) {
  return $data_byte$jscomp$27$$ | $data_byte$jscomp$27$$ << 8 | $data_byte$jscomp$27$$ << 16 | $data_byte$jscomp$27$$ << 24;
};
$VGAScreen$$module$src$vga$$.prototype.apply_expand = function($data_byte$jscomp$28$$) {
  return ($data_byte$jscomp$28$$ & 1 ? 255 : 0) | ($data_byte$jscomp$28$$ & 2 ? 255 : 0) << 8 | ($data_byte$jscomp$28$$ & 4 ? 255 : 0) << 16 | ($data_byte$jscomp$28$$ & 8 ? 255 : 0) << 24;
};
$VGAScreen$$module$src$vga$$.prototype.apply_rotate = function($data_byte$jscomp$29$$) {
  return ($data_byte$jscomp$29$$ | $data_byte$jscomp$29$$ << 8) >>> (this.planar_rotate_reg & 7) & 255;
};
$VGAScreen$$module$src$vga$$.prototype.apply_setreset = function($data_dword$$, $enable_dword$$) {
  var $setreset_dword$jscomp$1$$ = this.apply_expand(this.planar_setreset);
  return ($data_dword$$ | $enable_dword$$ & $setreset_dword$jscomp$1$$) & (~$enable_dword$$ | $setreset_dword$jscomp$1$$);
};
$VGAScreen$$module$src$vga$$.prototype.apply_logical = function($data_dword$jscomp$1$$, $latch_dword$$) {
  switch(this.planar_rotate_reg & 24) {
    case 8:
      return $data_dword$jscomp$1$$ & $latch_dword$$;
    case 16:
      return $data_dword$jscomp$1$$ | $latch_dword$$;
    case 24:
      return $data_dword$jscomp$1$$ ^ $latch_dword$$;
  }
  return $data_dword$jscomp$1$$;
};
$VGAScreen$$module$src$vga$$.prototype.apply_bitmask = function($data_dword$jscomp$2$$, $bitmask_dword$$) {
  return $bitmask_dword$$ & $data_dword$jscomp$2$$ | ~$bitmask_dword$$ & this.latch_dword;
};
$VGAScreen$$module$src$vga$$.prototype.text_mode_redraw = function() {
  const $split_screen_row$$ = this.scan_line_to_screen_row(this.line_compare), $row_offset$$ = Math.max(0, 2 * (2 * this.offset_register - this.max_cols)), $blink_enabled$$ = this.attribute_mode & 8, $fg_color_mask$$ = this.font_page_ab_enabled ? 7 : 15, $bg_color_mask$$ = $blink_enabled$$ ? 7 : 15, $FLAG_BLINKING$jscomp$1$$ = this.screen.FLAG_BLINKING, $FLAG_FONT_PAGE_B$jscomp$1$$ = this.screen.FLAG_FONT_PAGE_B;
  let $addr$jscomp$45$$ = this.start_address << 1;
  for (let $row$jscomp$7$$ = 0; $row$jscomp$7$$ < this.max_rows; $row$jscomp$7$$++) {
    $row$jscomp$7$$ === $split_screen_row$$ && ($addr$jscomp$45$$ = 0);
    for (let $col$jscomp$5$$ = 0; $col$jscomp$5$$ < this.max_cols; $col$jscomp$5$$++) {
      const $chr$jscomp$10$$ = this.vga_memory[$addr$jscomp$45$$], $color$jscomp$2$$ = this.vga_memory[$addr$jscomp$45$$ | 1], $flags$jscomp$13$$ = ($blink_enabled$$ && $color$jscomp$2$$ & 128 ? $FLAG_BLINKING$jscomp$1$$ : 0) | (!this.font_page_ab_enabled || $color$jscomp$2$$ & 8 ? 0 : $FLAG_FONT_PAGE_B$jscomp$1$$);
      this.bus.send("screen-put-char", [$row$jscomp$7$$, $col$jscomp$5$$, $chr$jscomp$10$$]);
      this.screen.put_char($row$jscomp$7$$, $col$jscomp$5$$, $chr$jscomp$10$$, $flags$jscomp$13$$, this.vga256_palette[this.dac_mask & this.dac_map[$color$jscomp$2$$ >> 4 & $bg_color_mask$$]], this.vga256_palette[this.dac_mask & this.dac_map[$color$jscomp$2$$ & $fg_color_mask$$]]);
      $addr$jscomp$45$$ += 2;
    }
    $addr$jscomp$45$$ += $row_offset$$;
  }
};
$VGAScreen$$module$src$vga$$.prototype.vga_memory_write_text_mode = function($addr$jscomp$46_flags$jscomp$14$$, $chr$jscomp$11_value$jscomp$179$$) {
  this.vga_memory[$addr$jscomp$46_flags$jscomp$14$$] = $chr$jscomp$11_value$jscomp$179$$;
  var $col$jscomp$6_max_cols$$ = Math.max(this.max_cols, 2 * this.offset_register);
  let $row$jscomp$8$$;
  if ($addr$jscomp$46_flags$jscomp$14$$ >> 1 >= this.start_address) {
    var $color$jscomp$3_memory_start_memory_start$jscomp$1$$ = ($addr$jscomp$46_flags$jscomp$14$$ >> 1) - this.start_address;
    $row$jscomp$8$$ = $color$jscomp$3_memory_start_memory_start$jscomp$1$$ / $col$jscomp$6_max_cols$$ | 0;
    $col$jscomp$6_max_cols$$ = $color$jscomp$3_memory_start_memory_start$jscomp$1$$ % $col$jscomp$6_max_cols$$;
  } else {
    $color$jscomp$3_memory_start_memory_start$jscomp$1$$ = $addr$jscomp$46_flags$jscomp$14$$ >> 1, $row$jscomp$8$$ = ($color$jscomp$3_memory_start_memory_start$jscomp$1$$ / $col$jscomp$6_max_cols$$ | 0) + this.scan_line_to_screen_row(this.line_compare), $col$jscomp$6_max_cols$$ = $color$jscomp$3_memory_start_memory_start$jscomp$1$$ % $col$jscomp$6_max_cols$$;
  }
  $dbg_assert$$module$src$log$$(0 <= $row$jscomp$8$$ && 0 <= $col$jscomp$6_max_cols$$);
  if (!($col$jscomp$6_max_cols$$ >= this.max_cols || $row$jscomp$8$$ >= this.max_rows)) {
    $addr$jscomp$46_flags$jscomp$14$$ & 1 ? ($color$jscomp$3_memory_start_memory_start$jscomp$1$$ = $chr$jscomp$11_value$jscomp$179$$, $chr$jscomp$11_value$jscomp$179$$ = this.vga_memory[$addr$jscomp$46_flags$jscomp$14$$ & -2]) : $color$jscomp$3_memory_start_memory_start$jscomp$1$$ = this.vga_memory[$addr$jscomp$46_flags$jscomp$14$$ | 1];
    var $bg_color_mask$jscomp$1_blink_enabled$jscomp$1$$ = this.attribute_mode & 8;
    $addr$jscomp$46_flags$jscomp$14$$ = ($bg_color_mask$jscomp$1_blink_enabled$jscomp$1$$ && $color$jscomp$3_memory_start_memory_start$jscomp$1$$ & 128 ? this.screen.FLAG_BLINKING : 0) | (!this.font_page_ab_enabled || $color$jscomp$3_memory_start_memory_start$jscomp$1$$ & 8 ? 0 : this.screen.FLAG_FONT_PAGE_B);
    var $fg_color_mask$jscomp$1$$ = this.font_page_ab_enabled ? 7 : 15;
    $bg_color_mask$jscomp$1_blink_enabled$jscomp$1$$ = $bg_color_mask$jscomp$1_blink_enabled$jscomp$1$$ ? 7 : 15;
    this.bus.send("screen-put-char", [$row$jscomp$8$$, $col$jscomp$6_max_cols$$, $chr$jscomp$11_value$jscomp$179$$]);
    this.screen.put_char($row$jscomp$8$$, $col$jscomp$6_max_cols$$, $chr$jscomp$11_value$jscomp$179$$, $addr$jscomp$46_flags$jscomp$14$$, this.vga256_palette[this.dac_mask & this.dac_map[$color$jscomp$3_memory_start_memory_start$jscomp$1$$ >> 4 & $bg_color_mask$jscomp$1_blink_enabled$jscomp$1$$]], this.vga256_palette[this.dac_mask & this.dac_map[$color$jscomp$3_memory_start_memory_start$jscomp$1$$ & $fg_color_mask$jscomp$1$$]]);
  }
};
$VGAScreen$$module$src$vga$$.prototype.update_cursor = function() {
  var $col$jscomp$7_max_cols$jscomp$1$$ = Math.max(this.max_cols, 2 * this.offset_register);
  let $row$jscomp$9$$;
  this.cursor_address >= this.start_address ? ($row$jscomp$9$$ = (this.cursor_address - this.start_address) / $col$jscomp$7_max_cols$jscomp$1$$ | 0, $col$jscomp$7_max_cols$jscomp$1$$ = (this.cursor_address - this.start_address) % $col$jscomp$7_max_cols$jscomp$1$$) : ($row$jscomp$9$$ = (this.cursor_address / $col$jscomp$7_max_cols$jscomp$1$$ | 0) + this.scan_line_to_screen_row(this.line_compare), $col$jscomp$7_max_cols$jscomp$1$$ = this.cursor_address % $col$jscomp$7_max_cols$jscomp$1$$);
  $dbg_assert$$module$src$log$$(0 <= $row$jscomp$9$$ && 0 <= $col$jscomp$7_max_cols$jscomp$1$$);
  this.screen.update_cursor($row$jscomp$9$$, $col$jscomp$7_max_cols$jscomp$1$$);
};
$VGAScreen$$module$src$vga$$.prototype.complete_redraw = function() {
  $dbg_log$$module$src$log$$("complete redraw", 256);
  this.graphical_mode ? this.svga_enabled ? this.cpu.svga_mark_dirty() : (this.diff_addr_min = 0, this.diff_addr_max = 524288) : this.text_mode_redraw();
};
$VGAScreen$$module$src$vga$$.prototype.complete_replot = function() {
  $dbg_log$$module$src$log$$("complete replot", 256);
  this.graphical_mode && !this.svga_enabled && (this.diff_plot_min = 0, this.diff_plot_max = 524288, this.complete_redraw());
};
$VGAScreen$$module$src$vga$$.prototype.partial_redraw = function($min$$, $max$jscomp$1$$) {
  $min$$ < this.diff_addr_min && (this.diff_addr_min = $min$$);
  $max$jscomp$1$$ > this.diff_addr_max && (this.diff_addr_max = $max$jscomp$1$$);
};
$VGAScreen$$module$src$vga$$.prototype.partial_replot = function($min$jscomp$1$$, $max$jscomp$2$$) {
  $min$jscomp$1$$ < this.diff_plot_min && (this.diff_plot_min = $min$jscomp$1$$);
  $max$jscomp$2$$ > this.diff_plot_max && (this.diff_plot_max = $max$jscomp$2$$);
  this.partial_redraw($min$jscomp$1$$, $max$jscomp$2$$);
};
$VGAScreen$$module$src$vga$$.prototype.reset_diffs = function() {
  this.diff_addr_min = this.vga_memory_size;
  this.diff_addr_max = 0;
  this.diff_plot_min = this.vga_memory_size;
  this.diff_plot_max = 0;
};
$VGAScreen$$module$src$vga$$.prototype.destroy = function() {
};
$VGAScreen$$module$src$vga$$.prototype.vga_bytes_per_line = function() {
  var $bytes_per_line$$ = this.offset_register << 2;
  this.underline_location_register & 64 ? $bytes_per_line$$ <<= 1 : this.crtc_mode & 64 && ($bytes_per_line$$ >>>= 1);
  return $bytes_per_line$$;
};
$VGAScreen$$module$src$vga$$.prototype.vga_addr_shift_count = function() {
  var $shift_count$$ = 128 + (~this.underline_location_register & this.crtc_mode & 64);
  $shift_count$$ -= this.underline_location_register & 64;
  $shift_count$$ -= this.attribute_mode & 64;
  return $shift_count$$ >>> 6;
};
$VGAScreen$$module$src$vga$$.prototype.vga_addr_to_pixel = function($addr$jscomp$47$$) {
  var $shift_count$jscomp$1$$ = this.vga_addr_shift_count();
  if (~this.crtc_mode & 3) {
    var $col$jscomp$8_pixel_addr$jscomp$1$$ = $addr$jscomp$47$$ - this.start_address;
    $col$jscomp$8_pixel_addr$jscomp$1$$ &= this.crtc_mode << 13 | -24577;
    $col$jscomp$8_pixel_addr$jscomp$1$$ <<= $shift_count$jscomp$1$$;
    var $row$jscomp$10$$ = $col$jscomp$8_pixel_addr$jscomp$1$$ / this.virtual_width | 0;
    $col$jscomp$8_pixel_addr$jscomp$1$$ %= this.virtual_width;
    switch(this.crtc_mode & 3) {
      case 2:
        $row$jscomp$10$$ = $row$jscomp$10$$ << 1 | $addr$jscomp$47$$ >> 13 & 1;
        break;
      case 1:
        $row$jscomp$10$$ = $row$jscomp$10$$ << 1 | $addr$jscomp$47$$ >> 14 & 1;
        break;
      case 0:
        $row$jscomp$10$$ = $row$jscomp$10$$ << 2 | $addr$jscomp$47$$ >> 13 & 3;
    }
    return $row$jscomp$10$$ * this.virtual_width + $col$jscomp$8_pixel_addr$jscomp$1$$ + (this.start_address << $shift_count$jscomp$1$$);
  }
  return $addr$jscomp$47$$ << $shift_count$jscomp$1$$;
};
$VGAScreen$$module$src$vga$$.prototype.scan_line_to_screen_row = function($scan_line$$) {
  this.max_scan_line & 128 && ($scan_line$$ >>>= 1);
  $scan_line$$ = Math.ceil($scan_line$$ / (1 + (this.max_scan_line & 31)));
  this.crtc_mode & 1 || ($scan_line$$ <<= 1);
  this.crtc_mode & 2 || ($scan_line$$ <<= 1);
  return $scan_line$$;
};
$VGAScreen$$module$src$vga$$.prototype.set_size_text = function($cols_count$$, $rows_count$$) {
  $dbg_assert$$module$src$log$$(!this.graphical_mode);
  this.max_cols = $cols_count$$;
  this.max_rows = $rows_count$$;
  this.screen.set_size_text($cols_count$$, $rows_count$$);
  this.bus.send("screen-set-size", [$cols_count$$, $rows_count$$, 0]);
};
$VGAScreen$$module$src$vga$$.prototype.set_size_graphical = function($width$jscomp$31$$, $height$jscomp$29$$, $virtual_width$$, $virtual_height$$, $bpp$$) {
  $dbg_assert$$module$src$log$$(this.graphical_mode);
  $virtual_width$$ = Math.max($virtual_width$$, 1);
  $virtual_height$$ = Math.max($virtual_height$$, 1);
  if (this.screen_width !== $width$jscomp$31$$ || this.screen_height !== $height$jscomp$29$$ || this.virtual_width !== $virtual_width$$ || this.virtual_height !== $virtual_height$$) {
    this.screen_width = $width$jscomp$31$$;
    this.screen_height = $height$jscomp$29$$;
    this.virtual_width = $virtual_width$$;
    this.virtual_height = $virtual_height$$;
    if ("undefined" !== typeof ImageData) {
      const $size$jscomp$39$$ = $virtual_width$$ * $virtual_height$$, $offset$jscomp$74$$ = this.cpu.svga_allocate_dest_buffer($size$jscomp$39$$) >>> 0;
      this.dest_buffet_offset = $offset$jscomp$74$$;
      this.image_data = new ImageData(new Uint8ClampedArray(this.cpu.wasm_memory.buffer, $offset$jscomp$74$$, 4 * $size$jscomp$39$$), $virtual_width$$, $virtual_height$$);
      this.cpu.svga_mark_dirty();
    }
    this.screen.set_size_graphical($width$jscomp$31$$, $height$jscomp$29$$, $virtual_width$$, $virtual_height$$);
    this.bus.send("screen-set-size", [$width$jscomp$31$$, $height$jscomp$29$$, $bpp$$]);
  }
};
$VGAScreen$$module$src$vga$$.prototype.update_vga_size = function() {
  if (!this.svga_enabled) {
    var $horizontal_characters_screen_width$$ = Math.min(1 + this.horizontal_display_enable_end, this.horizontal_blank_start), $screen_height_vertical_scans$$ = Math.min(1 + this.vertical_display_enable_end, this.vertical_blank_start);
    if ($horizontal_characters_screen_width$$ && $screen_height_vertical_scans$$) {
      if (this.graphical_mode) {
        $horizontal_characters_screen_width$$ <<= 3;
        var $height$jscomp$30_virtual_width$jscomp$1$$ = this.offset_register << 4, $bpp$jscomp$1$$ = 4;
        this.attribute_mode & 64 ? ($horizontal_characters_screen_width$$ >>>= 1, $height$jscomp$30_virtual_width$jscomp$1$$ >>>= 1, $bpp$jscomp$1$$ = 8) : this.attribute_mode & 2 && ($bpp$jscomp$1$$ = 1);
        $screen_height_vertical_scans$$ = this.scan_line_to_screen_row($screen_height_vertical_scans$$);
        var $available_bytes$$ = $VGA_HOST_MEMORY_SPACE_SIZE$$module$src$vga$$[0];
        const $bytes_per_line$jscomp$1$$ = this.vga_bytes_per_line();
        this.set_size_graphical($horizontal_characters_screen_width$$, $screen_height_vertical_scans$$, $height$jscomp$30_virtual_width$jscomp$1$$, $bytes_per_line$jscomp$1$$ ? Math.ceil($available_bytes$$ / $bytes_per_line$jscomp$1$$) : $screen_height_vertical_scans$$, $bpp$jscomp$1$$);
        this.update_vertical_retrace();
        this.update_layers();
      } else {
        this.max_scan_line & 128 && ($screen_height_vertical_scans$$ >>>= 1), $height$jscomp$30_virtual_width$jscomp$1$$ = $screen_height_vertical_scans$$ / (1 + (this.max_scan_line & 31)) | 0, $horizontal_characters_screen_width$$ && $height$jscomp$30_virtual_width$jscomp$1$$ && this.set_size_text($horizontal_characters_screen_width$$, $height$jscomp$30_virtual_width$jscomp$1$$);
      }
    }
  }
};
$VGAScreen$$module$src$vga$$.prototype.update_layers = function() {
  this.graphical_mode || this.text_mode_redraw();
  if (this.svga_enabled) {
    this.layers = [];
  } else {
    if (this.virtual_width && this.screen_width) {
      if (!this.palette_source || this.clocking_mode & 32) {
        this.layers = [], this.screen.clear_screen();
      } else {
        var $start_addr_start_buffer_row_start_split_col$$ = this.start_address_latched, $pixel_panning$$ = this.horizontal_panning;
        this.attribute_mode & 64 && ($pixel_panning$$ >>>= 1);
        var $byte_panning$$ = this.preset_row_scan >> 5 & 3, $pixel_addr_start_split_screen_row$jscomp$1$$ = this.vga_addr_to_pixel($start_addr_start_buffer_row_start_split_col$$ + $byte_panning$$);
        $start_addr_start_buffer_row_start_split_col$$ = $pixel_addr_start_split_screen_row$jscomp$1$$ / this.virtual_width | 0;
        var $start_buffer_col_x$jscomp$120$$ = $pixel_addr_start_split_screen_row$jscomp$1$$ % this.virtual_width + $pixel_panning$$;
        $pixel_addr_start_split_screen_row$jscomp$1$$ = this.scan_line_to_screen_row(1 + this.line_compare);
        $pixel_addr_start_split_screen_row$jscomp$1$$ = Math.min($pixel_addr_start_split_screen_row$jscomp$1$$, this.screen_height);
        var $split_buffer_height$$ = this.screen_height - $pixel_addr_start_split_screen_row$jscomp$1$$;
        this.layers = [];
        $start_buffer_col_x$jscomp$120$$ = -$start_buffer_col_x$jscomp$120$$;
        for (var $y$jscomp$76$$ = 0; $start_buffer_col_x$jscomp$120$$ < this.screen_width; $start_buffer_col_x$jscomp$120$$ += this.virtual_width, $y$jscomp$76$$++) {
          this.layers.push({image_data:this.image_data, screen_x:$start_buffer_col_x$jscomp$120$$, screen_y:0, buffer_x:0, buffer_y:$start_addr_start_buffer_row_start_split_col$$ + $y$jscomp$76$$, buffer_width:this.virtual_width, buffer_height:$pixel_addr_start_split_screen_row$jscomp$1$$, });
        }
        $start_addr_start_buffer_row_start_split_col$$ = 0;
        this.attribute_mode & 32 || ($start_addr_start_buffer_row_start_split_col$$ = this.vga_addr_to_pixel($byte_panning$$) + $pixel_panning$$);
        $start_buffer_col_x$jscomp$120$$ = -$start_addr_start_buffer_row_start_split_col$$;
        for ($y$jscomp$76$$ = 0; $start_buffer_col_x$jscomp$120$$ < this.screen_width; $start_buffer_col_x$jscomp$120$$ += this.virtual_width, $y$jscomp$76$$++) {
          this.layers.push({image_data:this.image_data, screen_x:$start_buffer_col_x$jscomp$120$$, screen_y:$pixel_addr_start_split_screen_row$jscomp$1$$, buffer_x:0, buffer_y:$y$jscomp$76$$, buffer_width:this.virtual_width, buffer_height:$split_buffer_height$$, });
        }
      }
    }
  }
};
$VGAScreen$$module$src$vga$$.prototype.update_vertical_retrace = function() {
  this.port_3DA_value |= 8;
  this.start_address_latched !== this.start_address && (this.start_address_latched = this.start_address, this.update_layers());
};
$VGAScreen$$module$src$vga$$.prototype.update_cursor_scanline = function() {
  var $end$jscomp$20_max$jscomp$3$$ = this.max_scan_line & 31;
  const $start$jscomp$39$$ = Math.min($end$jscomp$20_max$jscomp$3$$, this.cursor_scanline_start & 31);
  $end$jscomp$20_max$jscomp$3$$ = Math.min($end$jscomp$20_max$jscomp$3$$, this.cursor_scanline_end & 31);
  this.screen.update_cursor_scanline($start$jscomp$39$$, $end$jscomp$20_max$jscomp$3$$, !(this.cursor_scanline_start & 32) && $start$jscomp$39$$ < $end$jscomp$20_max$jscomp$3$$);
};
$VGAScreen$$module$src$vga$$.prototype.port3C0_write = function($value$jscomp$180$$) {
  if (-1 === this.attribute_controller_index) {
    $dbg_log$$module$src$log$$("attribute controller index register: " + $h$$module$src$lib$$($value$jscomp$180$$), 256), this.attribute_controller_index = $value$jscomp$180$$ & 31, $dbg_log$$module$src$log$$("attribute actual index: " + $h$$module$src$lib$$(this.attribute_controller_index), 256), this.palette_source !== ($value$jscomp$180$$ & 32) && (this.palette_source = $value$jscomp$180$$ & 32, this.update_layers());
  } else {
    if (16 > this.attribute_controller_index) {
      $dbg_log$$module$src$log$$("internal palette: " + $h$$module$src$lib$$(this.attribute_controller_index) + " -> " + $h$$module$src$lib$$($value$jscomp$180$$), 256), this.dac_map[this.attribute_controller_index] = $value$jscomp$180$$, this.attribute_mode & 64 || this.complete_redraw();
    } else {
      switch(this.attribute_controller_index) {
        case 16:
          $dbg_log$$module$src$log$$("3C0 / attribute mode control: " + $h$$module$src$lib$$($value$jscomp$180$$), 256);
          if (this.attribute_mode !== $value$jscomp$180$$) {
            var $previous_mode$$ = this.attribute_mode;
            this.attribute_mode = $value$jscomp$180$$;
            const $is_graphical$jscomp$1$$ = 0 !== ($value$jscomp$180$$ & 1);
            this.svga_enabled || this.graphical_mode === $is_graphical$jscomp$1$$ || (this.graphical_mode = $is_graphical$jscomp$1$$, this.screen.set_mode(this.graphical_mode));
            ($previous_mode$$ ^ $value$jscomp$180$$) & 64 && this.complete_replot();
            this.update_vga_size();
            this.complete_redraw();
            this.set_font_bitmap(!1);
          }
          break;
        case 18:
          $dbg_log$$module$src$log$$("3C0 / color plane enable: " + $h$$module$src$lib$$($value$jscomp$180$$), 256);
          this.color_plane_enable !== $value$jscomp$180$$ && (this.color_plane_enable = $value$jscomp$180$$, this.complete_redraw());
          break;
        case 19:
          $dbg_log$$module$src$log$$("3C0 / horizontal panning: " + $h$$module$src$lib$$($value$jscomp$180$$), 256);
          this.horizontal_panning !== $value$jscomp$180$$ && (this.horizontal_panning = $value$jscomp$180$$ & 15, this.update_layers());
          break;
        case 20:
          $dbg_log$$module$src$log$$("3C0 / color select: " + $h$$module$src$lib$$($value$jscomp$180$$), 256);
          this.color_select !== $value$jscomp$180$$ && (this.color_select = $value$jscomp$180$$, this.complete_redraw());
          break;
        default:
          $dbg_log$$module$src$log$$("3C0 / attribute controller write " + $h$$module$src$lib$$(this.attribute_controller_index) + ": " + $h$$module$src$lib$$($value$jscomp$180$$), 256);
      }
    }
    this.attribute_controller_index = -1;
  }
};
$VGAScreen$$module$src$vga$$.prototype.port3C0_read = function() {
  $dbg_log$$module$src$log$$("3C0 read", 256);
  return (this.attribute_controller_index | this.palette_source) & 255;
};
$VGAScreen$$module$src$vga$$.prototype.port3C0_read16 = function() {
  $dbg_log$$module$src$log$$("3C0 read16", 256);
  return this.port3C0_read() | this.port3C1_read() << 8 & 65280;
};
$VGAScreen$$module$src$vga$$.prototype.port3C1_read = function() {
  if (16 > this.attribute_controller_index) {
    return $dbg_log$$module$src$log$$("3C1 / internal palette read: " + $h$$module$src$lib$$(this.attribute_controller_index) + " -> " + $h$$module$src$lib$$(this.dac_map[this.attribute_controller_index]), 256), this.dac_map[this.attribute_controller_index] & 255;
  }
  switch(this.attribute_controller_index) {
    case 16:
      return $dbg_log$$module$src$log$$("3C1 / attribute mode read: " + $h$$module$src$lib$$(this.attribute_mode), 256), this.attribute_mode;
    case 18:
      return $dbg_log$$module$src$log$$("3C1 / color plane enable read: " + $h$$module$src$lib$$(this.color_plane_enable), 256), this.color_plane_enable;
    case 19:
      return $dbg_log$$module$src$log$$("3C1 / horizontal panning read: " + $h$$module$src$lib$$(this.horizontal_panning), 256), this.horizontal_panning;
    case 20:
      return $dbg_log$$module$src$log$$("3C1 / color select read: " + $h$$module$src$lib$$(this.color_select), 256), this.color_select;
    default:
      $dbg_log$$module$src$log$$("3C1 / attribute controller read " + $h$$module$src$lib$$(this.attribute_controller_index), 256);
  }
  return 255;
};
$VGAScreen$$module$src$vga$$.prototype.port3C2_write = function($value$jscomp$181$$) {
  $dbg_log$$module$src$log$$("3C2 / miscellaneous output register = " + $h$$module$src$lib$$($value$jscomp$181$$), 256);
  this.miscellaneous_output_register = $value$jscomp$181$$;
};
$VGAScreen$$module$src$vga$$.prototype.port3C4_write = function($value$jscomp$182$$) {
  this.sequencer_index = $value$jscomp$182$$;
};
$VGAScreen$$module$src$vga$$.prototype.port3C4_read = function() {
  return this.sequencer_index;
};
$VGAScreen$$module$src$vga$$.prototype.port3C5_write = function($value$jscomp$183$$) {
  switch(this.sequencer_index) {
    case 1:
      $dbg_log$$module$src$log$$("clocking mode: " + $h$$module$src$lib$$($value$jscomp$183$$), 256);
      var $previous_character_map_select_previous_clocking_mode_previous_plane_write_bm$$ = this.clocking_mode;
      this.clocking_mode = $value$jscomp$183$$;
      ($previous_character_map_select_previous_clocking_mode_previous_plane_write_bm$$ ^ $value$jscomp$183$$) & 32 && this.update_layers();
      this.set_font_bitmap(!1);
      break;
    case 2:
      $dbg_log$$module$src$log$$("plane write mask: " + $h$$module$src$lib$$($value$jscomp$183$$), 256);
      $previous_character_map_select_previous_clocking_mode_previous_plane_write_bm$$ = this.plane_write_bm;
      this.plane_write_bm = $value$jscomp$183$$;
      this.graphical_mode || !($previous_character_map_select_previous_clocking_mode_previous_plane_write_bm$$ & 4) || this.plane_write_bm & 4 || this.set_font_bitmap(!0);
      break;
    case 3:
      $dbg_log$$module$src$log$$("character map select: " + $h$$module$src$lib$$($value$jscomp$183$$), 256);
      $previous_character_map_select_previous_clocking_mode_previous_plane_write_bm$$ = this.character_map_select;
      this.character_map_select = $value$jscomp$183$$;
      this.graphical_mode || $previous_character_map_select_previous_clocking_mode_previous_plane_write_bm$$ === $value$jscomp$183$$ || this.set_font_page();
      break;
    case 4:
      $dbg_log$$module$src$log$$("sequencer memory mode: " + $h$$module$src$lib$$($value$jscomp$183$$), 256);
      this.sequencer_memory_mode = $value$jscomp$183$$;
      break;
    default:
      $dbg_log$$module$src$log$$("3C5 / sequencer write " + $h$$module$src$lib$$(this.sequencer_index) + ": " + $h$$module$src$lib$$($value$jscomp$183$$), 256);
  }
};
$VGAScreen$$module$src$vga$$.prototype.port3C5_read = function() {
  $dbg_log$$module$src$log$$("3C5 / sequencer read " + $h$$module$src$lib$$(this.sequencer_index), 256);
  switch(this.sequencer_index) {
    case 1:
      return this.clocking_mode;
    case 2:
      return this.plane_write_bm;
    case 3:
      return this.character_map_select;
    case 4:
      return this.sequencer_memory_mode;
    case 6:
      return 18;
  }
  return 0;
};
$VGAScreen$$module$src$vga$$.prototype.port3C6_write = function($data$jscomp$215$$) {
  this.dac_mask !== $data$jscomp$215$$ && (this.dac_mask = $data$jscomp$215$$, this.complete_redraw());
};
$VGAScreen$$module$src$vga$$.prototype.port3C6_read = function() {
  return this.dac_mask;
};
$VGAScreen$$module$src$vga$$.prototype.port3C7_write = function($index$jscomp$87$$) {
  $dbg_log$$module$src$log$$("3C7 write: " + $h$$module$src$lib$$($index$jscomp$87$$), 256);
  this.dac_color_index_read = 3 * $index$jscomp$87$$;
  this.dac_state &= 0;
};
$VGAScreen$$module$src$vga$$.prototype.port3C7_read = function() {
  return this.dac_state;
};
$VGAScreen$$module$src$vga$$.prototype.port3C8_write = function($index$jscomp$88$$) {
  this.dac_color_index_write = 3 * $index$jscomp$88$$;
  this.dac_state |= 3;
};
$VGAScreen$$module$src$vga$$.prototype.port3C8_read = function() {
  return this.dac_color_index_write / 3 & 255;
};
$VGAScreen$$module$src$vga$$.prototype.port3C9_write = function($color_byte$$) {
  var $index$jscomp$89$$ = this.dac_color_index_write / 3 | 0, $offset$jscomp$75$$ = this.dac_color_index_write % 3, $color$jscomp$4$$ = this.vga256_palette[$index$jscomp$89$$];
  if (0 === (this.dispi_enable_value & 32)) {
    $color_byte$$ &= 63;
    const $b$jscomp$2$$ = $color_byte$$ & 1;
    $color_byte$$ = $color_byte$$ << 2 | $b$jscomp$2$$ << 1 | $b$jscomp$2$$;
  }
  0 === $offset$jscomp$75$$ ? $color$jscomp$4$$ = $color$jscomp$4$$ & -16711681 | $color_byte$$ << 16 : 1 === $offset$jscomp$75$$ ? $color$jscomp$4$$ = $color$jscomp$4$$ & -65281 | $color_byte$$ << 8 : ($color$jscomp$4$$ = $color$jscomp$4$$ & -256 | $color_byte$$, $dbg_log$$module$src$log$$("dac set color, index=" + $h$$module$src$lib$$($index$jscomp$89$$) + " value=" + $h$$module$src$lib$$($color$jscomp$4$$), 256));
  this.vga256_palette[$index$jscomp$89$$] !== $color$jscomp$4$$ && (this.vga256_palette[$index$jscomp$89$$] = $color$jscomp$4$$, this.complete_redraw());
  this.dac_color_index_write++;
};
$VGAScreen$$module$src$vga$$.prototype.port3C9_read = function() {
  $dbg_log$$module$src$log$$("3C9 read", 256);
  var $color8$$ = this.vga256_palette[this.dac_color_index_read / 3 | 0] >> 8 * (2 - this.dac_color_index_read % 3) & 255;
  this.dac_color_index_read++;
  return this.dispi_enable_value & 32 ? $color8$$ : $color8$$ >> 2;
};
$VGAScreen$$module$src$vga$$.prototype.port3CC_read = function() {
  $dbg_log$$module$src$log$$("3CC read", 256);
  return this.miscellaneous_output_register;
};
$VGAScreen$$module$src$vga$$.prototype.port3CE_write = function($value$jscomp$184$$) {
  this.graphics_index = $value$jscomp$184$$;
};
$VGAScreen$$module$src$vga$$.prototype.port3CE_read = function() {
  return this.graphics_index;
};
$VGAScreen$$module$src$vga$$.prototype.port3CF_write = function($value$jscomp$185$$) {
  switch(this.graphics_index) {
    case 0:
      this.planar_setreset = $value$jscomp$185$$;
      $dbg_log$$module$src$log$$("plane set/reset: " + $h$$module$src$lib$$($value$jscomp$185$$), 256);
      break;
    case 1:
      this.planar_setreset_enable = $value$jscomp$185$$;
      $dbg_log$$module$src$log$$("plane set/reset enable: " + $h$$module$src$lib$$($value$jscomp$185$$), 256);
      break;
    case 2:
      this.color_compare = $value$jscomp$185$$;
      $dbg_log$$module$src$log$$("color compare: " + $h$$module$src$lib$$($value$jscomp$185$$), 256);
      break;
    case 3:
      this.planar_rotate_reg = $value$jscomp$185$$;
      $dbg_log$$module$src$log$$("plane rotate: " + $h$$module$src$lib$$($value$jscomp$185$$), 256);
      break;
    case 4:
      this.plane_read = $value$jscomp$185$$;
      $dbg_log$$module$src$log$$("plane read: " + $h$$module$src$lib$$($value$jscomp$185$$), 256);
      break;
    case 5:
      var $previous_planar_mode$$ = this.planar_mode;
      this.planar_mode = $value$jscomp$185$$;
      $dbg_log$$module$src$log$$("planar mode: " + $h$$module$src$lib$$($value$jscomp$185$$), 256);
      ($previous_planar_mode$$ ^ $value$jscomp$185$$) & 96 && this.complete_replot();
      break;
    case 6:
      $dbg_log$$module$src$log$$("miscellaneous graphics register: " + $h$$module$src$lib$$($value$jscomp$185$$), 256);
      this.miscellaneous_graphics_register !== $value$jscomp$185$$ && (this.miscellaneous_graphics_register = $value$jscomp$185$$, this.update_vga_size());
      break;
    case 7:
      this.color_dont_care = $value$jscomp$185$$;
      $dbg_log$$module$src$log$$("color don't care: " + $h$$module$src$lib$$($value$jscomp$185$$), 256);
      break;
    case 8:
      this.planar_bitmap = $value$jscomp$185$$;
      $dbg_log$$module$src$log$$("planar bitmap: " + $h$$module$src$lib$$($value$jscomp$185$$), 256);
      break;
    default:
      $dbg_log$$module$src$log$$("3CF / graphics write " + $h$$module$src$lib$$(this.graphics_index) + ": " + $h$$module$src$lib$$($value$jscomp$185$$), 256);
  }
};
$VGAScreen$$module$src$vga$$.prototype.port3CF_read = function() {
  $dbg_log$$module$src$log$$("3CF / graphics read " + $h$$module$src$lib$$(this.graphics_index), 256);
  switch(this.graphics_index) {
    case 0:
      return this.planar_setreset;
    case 1:
      return this.planar_setreset_enable;
    case 2:
      return this.color_compare;
    case 3:
      return this.planar_rotate_reg;
    case 4:
      return this.plane_read;
    case 5:
      return this.planar_mode;
    case 6:
      return this.miscellaneous_graphics_register;
    case 7:
      return this.color_dont_care;
    case 8:
      return this.planar_bitmap;
  }
  return 0;
};
$VGAScreen$$module$src$vga$$.prototype.port3D4_write = function($register$jscomp$15$$) {
  $dbg_log$$module$src$log$$("3D4 / crtc index: " + $register$jscomp$15$$, 256);
  this.index_crtc = $register$jscomp$15$$;
};
$VGAScreen$$module$src$vga$$.prototype.port3D4_write16 = function($register$jscomp$16$$) {
  this.port3D4_write($register$jscomp$16$$ & 255);
  this.port3D5_write($register$jscomp$16$$ >> 8 & 255);
};
$VGAScreen$$module$src$vga$$.prototype.port3D4_read = function() {
  $dbg_log$$module$src$log$$("3D4 read / crtc index: " + this.index_crtc, 256);
  return this.index_crtc;
};
$VGAScreen$$module$src$vga$$.prototype.port3D5_write = function($value$jscomp$186$$) {
  switch(this.index_crtc) {
    case 1:
      $dbg_log$$module$src$log$$("3D5 / hdisp enable end write: " + $h$$module$src$lib$$($value$jscomp$186$$), 256);
      this.horizontal_display_enable_end !== $value$jscomp$186$$ && (this.horizontal_display_enable_end = $value$jscomp$186$$, this.update_vga_size());
      break;
    case 2:
      this.horizontal_blank_start !== $value$jscomp$186$$ && (this.horizontal_blank_start = $value$jscomp$186$$, this.update_vga_size());
      break;
    case 7:
      $dbg_log$$module$src$log$$("3D5 / overflow register write: " + $h$$module$src$lib$$($value$jscomp$186$$), 256);
      var $previous_mode$jscomp$1_previous_underline_previous_vertical_blank_start_previous_vertical_display_enable_end$$ = this.vertical_display_enable_end;
      this.vertical_display_enable_end &= 255;
      this.vertical_display_enable_end = this.vertical_display_enable_end | $value$jscomp$186$$ << 3 & 512 | $value$jscomp$186$$ << 7 & 256;
      $previous_mode$jscomp$1_previous_underline_previous_vertical_blank_start_previous_vertical_display_enable_end$$ !== this.vertical_display_enable_end && this.update_vga_size();
      this.line_compare = this.line_compare & 767 | $value$jscomp$186$$ << 4 & 256;
      $previous_mode$jscomp$1_previous_underline_previous_vertical_blank_start_previous_vertical_display_enable_end$$ = this.vertical_blank_start;
      this.vertical_blank_start = this.vertical_blank_start & 767 | $value$jscomp$186$$ << 5 & 256;
      $previous_mode$jscomp$1_previous_underline_previous_vertical_blank_start_previous_vertical_display_enable_end$$ !== this.vertical_blank_start && this.update_vga_size();
      this.update_layers();
      break;
    case 8:
      $dbg_log$$module$src$log$$("3D5 / preset row scan write: " + $h$$module$src$lib$$($value$jscomp$186$$), 256);
      this.preset_row_scan = $value$jscomp$186$$;
      this.update_layers();
      break;
    case 9:
      $dbg_log$$module$src$log$$("3D5 / max scan line write: " + $h$$module$src$lib$$($value$jscomp$186$$), 256);
      var $previous_max_scan_line$$ = this.max_scan_line;
      this.max_scan_line = $value$jscomp$186$$;
      this.line_compare = this.line_compare & 511 | $value$jscomp$186$$ << 3 & 512;
      $previous_mode$jscomp$1_previous_underline_previous_vertical_blank_start_previous_vertical_display_enable_end$$ = this.vertical_blank_start;
      this.vertical_blank_start = this.vertical_blank_start & 511 | $value$jscomp$186$$ << 4 & 512;
      (($previous_max_scan_line$$ ^ this.max_scan_line) & 159 || $previous_mode$jscomp$1_previous_underline_previous_vertical_blank_start_previous_vertical_display_enable_end$$ !== this.vertical_blank_start) && this.update_vga_size();
      this.update_cursor_scanline();
      this.update_layers();
      this.set_font_bitmap(!1);
      break;
    case 10:
      $dbg_log$$module$src$log$$("3D5 / cursor scanline start write: " + $h$$module$src$lib$$($value$jscomp$186$$), 256);
      this.cursor_scanline_start = $value$jscomp$186$$;
      this.update_cursor_scanline();
      break;
    case 11:
      $dbg_log$$module$src$log$$("3D5 / cursor scanline end write: " + $h$$module$src$lib$$($value$jscomp$186$$), 256);
      this.cursor_scanline_end = $value$jscomp$186$$;
      this.update_cursor_scanline();
      break;
    case 12:
      (this.start_address >> 8 & 255) !== $value$jscomp$186$$ && (this.start_address = this.start_address & 255 | $value$jscomp$186$$ << 8, this.update_layers(), ~this.crtc_mode & 3 && this.complete_replot());
      $dbg_log$$module$src$log$$("3D5 / start addr hi write: " + $h$$module$src$lib$$($value$jscomp$186$$) + " -> " + $h$$module$src$lib$$(this.start_address, 4), 256);
      break;
    case 13:
      (this.start_address & 255) !== $value$jscomp$186$$ && (this.start_address = this.start_address & 65280 | $value$jscomp$186$$, this.update_layers(), ~this.crtc_mode & 3 && this.complete_replot());
      $dbg_log$$module$src$log$$("3D5 / start addr lo write: " + $h$$module$src$lib$$($value$jscomp$186$$) + " -> " + $h$$module$src$lib$$(this.start_address, 4), 256);
      break;
    case 14:
      $dbg_log$$module$src$log$$("3D5 / cursor address hi write: " + $h$$module$src$lib$$($value$jscomp$186$$), 256);
      this.cursor_address = this.cursor_address & 255 | $value$jscomp$186$$ << 8;
      this.update_cursor();
      break;
    case 15:
      $dbg_log$$module$src$log$$("3D5 / cursor address lo write: " + $h$$module$src$lib$$($value$jscomp$186$$), 256);
      this.cursor_address = this.cursor_address & 65280 | $value$jscomp$186$$;
      this.update_cursor();
      break;
    case 18:
      $dbg_log$$module$src$log$$("3D5 / vdisp enable end write: " + $h$$module$src$lib$$($value$jscomp$186$$), 256);
      (this.vertical_display_enable_end & 255) !== $value$jscomp$186$$ && (this.vertical_display_enable_end = this.vertical_display_enable_end & 768 | $value$jscomp$186$$, this.update_vga_size());
      break;
    case 19:
      $dbg_log$$module$src$log$$("3D5 / offset register write: " + $h$$module$src$lib$$($value$jscomp$186$$), 256);
      this.offset_register !== $value$jscomp$186$$ && (this.offset_register = $value$jscomp$186$$, this.update_vga_size(), ~this.crtc_mode & 3 && this.complete_replot());
      break;
    case 20:
      $dbg_log$$module$src$log$$("3D5 / underline location write: " + $h$$module$src$lib$$($value$jscomp$186$$), 256);
      this.underline_location_register !== $value$jscomp$186$$ && ($previous_mode$jscomp$1_previous_underline_previous_vertical_blank_start_previous_vertical_display_enable_end$$ = this.underline_location_register, this.underline_location_register = $value$jscomp$186$$, this.update_vga_size(), ($previous_mode$jscomp$1_previous_underline_previous_vertical_blank_start_previous_vertical_display_enable_end$$ ^ $value$jscomp$186$$) & 64 && this.complete_replot());
      break;
    case 21:
      $dbg_log$$module$src$log$$("3D5 / vertical blank start write: " + $h$$module$src$lib$$($value$jscomp$186$$), 256);
      (this.vertical_blank_start & 255) !== $value$jscomp$186$$ && (this.vertical_blank_start = this.vertical_blank_start & 768 | $value$jscomp$186$$, this.update_vga_size());
      break;
    case 23:
      $dbg_log$$module$src$log$$("3D5 / crtc mode write: " + $h$$module$src$lib$$($value$jscomp$186$$), 256);
      this.crtc_mode !== $value$jscomp$186$$ && ($previous_mode$jscomp$1_previous_underline_previous_vertical_blank_start_previous_vertical_display_enable_end$$ = this.crtc_mode, this.crtc_mode = $value$jscomp$186$$, this.update_vga_size(), ($previous_mode$jscomp$1_previous_underline_previous_vertical_blank_start_previous_vertical_display_enable_end$$ ^ $value$jscomp$186$$) & 67 && this.complete_replot());
      break;
    case 24:
      $dbg_log$$module$src$log$$("3D5 / line compare write: " + $h$$module$src$lib$$($value$jscomp$186$$), 256);
      this.line_compare = this.line_compare & 768 | $value$jscomp$186$$;
      this.update_layers();
      break;
    default:
      this.index_crtc < this.crtc.length && (this.crtc[this.index_crtc] = $value$jscomp$186$$), $dbg_log$$module$src$log$$("3D5 / CRTC write " + $h$$module$src$lib$$(this.index_crtc) + ": " + $h$$module$src$lib$$($value$jscomp$186$$), 256);
  }
};
$VGAScreen$$module$src$vga$$.prototype.port3D5_write16 = function($register$jscomp$17$$) {
  $dbg_log$$module$src$log$$("16-bit write to 3D5: " + $h$$module$src$lib$$($register$jscomp$17$$, 4), 256);
  this.port3D5_write($register$jscomp$17$$ & 255);
};
$VGAScreen$$module$src$vga$$.prototype.port3D5_read = function() {
  $dbg_log$$module$src$log$$("3D5 read " + $h$$module$src$lib$$(this.index_crtc), 256);
  switch(this.index_crtc) {
    case 1:
      return this.horizontal_display_enable_end;
    case 2:
      return this.horizontal_blank_start;
    case 7:
      return this.vertical_display_enable_end >> 7 & 2 | this.vertical_blank_start >> 5 & 8 | this.line_compare >> 4 & 16 | this.vertical_display_enable_end >> 3 & 64;
    case 8:
      return this.preset_row_scan;
    case 9:
      return this.max_scan_line;
    case 10:
      return this.cursor_scanline_start;
    case 11:
      return this.cursor_scanline_end;
    case 12:
      return this.start_address & 255;
    case 13:
      return this.start_address >> 8;
    case 14:
      return this.cursor_address >> 8;
    case 15:
      return this.cursor_address & 255;
    case 18:
      return this.vertical_display_enable_end & 255;
    case 19:
      return this.offset_register;
    case 20:
      return this.underline_location_register;
    case 21:
      return this.vertical_blank_start & 255;
    case 23:
      return this.crtc_mode;
    case 24:
      return this.line_compare & 255;
  }
  return this.index_crtc < this.crtc.length ? this.crtc[this.index_crtc] : 0;
};
$VGAScreen$$module$src$vga$$.prototype.port3D5_read16 = function() {
  $dbg_log$$module$src$log$$("Warning: 16-bit read from 3D5", 256);
  return this.port3D5_read();
};
$VGAScreen$$module$src$vga$$.prototype.port3DA_read = function() {
  $dbg_log$$module$src$log$$("3DA read - status 1 and clear attr index", 256);
  var $value$jscomp$187$$ = this.port_3DA_value;
  this.graphical_mode ? (this.port_3DA_value ^= 1, this.port_3DA_value &= 1) : (this.port_3DA_value & 1 && (this.port_3DA_value ^= 8), this.port_3DA_value ^= 1);
  this.attribute_controller_index = -1;
  return $value$jscomp$187$$;
};
$VGAScreen$$module$src$vga$$.prototype.port1CE_write = function($value$jscomp$188$$) {
  this.dispi_index = $value$jscomp$188$$;
};
$VGAScreen$$module$src$vga$$.prototype.port1CF_write = function($value$jscomp$189$$) {
  $dbg_log$$module$src$log$$("1CF / dispi write " + $h$$module$src$lib$$(this.dispi_index) + ": " + $h$$module$src$lib$$($value$jscomp$189$$), 256);
  const $was_enabled$$ = this.svga_enabled;
  switch(this.dispi_index) {
    case 0:
      45248 <= $value$jscomp$189$$ && 45253 >= $value$jscomp$189$$ ? this.svga_version = $value$jscomp$189$$ : $dbg_log$$module$src$log$$("Invalid version value: " + $h$$module$src$lib$$($value$jscomp$189$$), 256);
      break;
    case 1:
      this.svga_width = $value$jscomp$189$$;
      2560 < this.svga_width && ($dbg_log$$module$src$log$$("svga_width reduced from " + this.svga_width + " to 2560", 256), this.svga_width = 2560);
      break;
    case 2:
      this.svga_height = $value$jscomp$189$$;
      1600 < this.svga_height && ($dbg_log$$module$src$log$$("svga_height reduced from " + this.svga_height + " to 1600", 256), this.svga_height = 1600);
      break;
    case 3:
      this.svga_bpp = $value$jscomp$189$$;
      break;
    case 4:
      (this.svga_enabled = 1 === ($value$jscomp$189$$ & 1)) && 0 === ($value$jscomp$189$$ & 128) && this.svga_memory.fill(0);
      this.dispi_enable_value = $value$jscomp$189$$;
      break;
    case 5:
      $dbg_log$$module$src$log$$("SVGA bank offset: " + $h$$module$src$lib$$($value$jscomp$189$$ << 16), 256);
      this.svga_bank_offset = $value$jscomp$189$$ << 16;
      break;
    case 8:
      $dbg_log$$module$src$log$$("SVGA X offset: " + $h$$module$src$lib$$($value$jscomp$189$$), 256);
      this.svga_offset_x !== $value$jscomp$189$$ && (this.svga_offset_x = $value$jscomp$189$$, this.svga_offset = this.svga_offset_y * this.svga_width + this.svga_offset_x, this.complete_redraw());
      break;
    case 9:
      $dbg_log$$module$src$log$$("SVGA Y offset: " + $h$$module$src$lib$$($value$jscomp$189$$ * this.svga_width) + " y=" + $h$$module$src$lib$$($value$jscomp$189$$), 256);
      this.svga_offset_y !== $value$jscomp$189$$ && (this.svga_offset_y = $value$jscomp$189$$, this.svga_offset = this.svga_offset_y * this.svga_width + this.svga_offset_x, this.complete_redraw());
      break;
    default:
      $dbg_log$$module$src$log$$("Unimplemented dispi write index: " + $h$$module$src$lib$$(this.dispi_index), 256);
  }
  !this.svga_enabled || this.svga_width && this.svga_height || ($dbg_log$$module$src$log$$("SVGA: disabled because of invalid width/height: " + this.svga_width + "x" + this.svga_height, 256), this.svga_enabled = !1);
  $dbg_assert$$module$src$log$$(4 !== this.svga_bpp, "unimplemented svga bpp: 4");
  $dbg_assert$$module$src$log$$(4 === this.svga_bpp || 8 === this.svga_bpp || 15 === this.svga_bpp || 16 === this.svga_bpp || 24 === this.svga_bpp || 32 === this.svga_bpp, "unexpected svga bpp: " + this.svga_bpp);
  this.svga_enabled ? $dbg_log$$module$src$log$$("SVGA: enabled, " + this.svga_width + "x" + this.svga_height + "x" + this.svga_bpp, 256) : $dbg_log$$module$src$log$$("SVGA: disabled");
  this.svga_enabled && !$was_enabled$$ && (this.svga_offset_y = this.svga_offset_x = this.svga_offset = 0, this.graphical_mode = !0, this.screen.set_mode(this.graphical_mode), this.set_size_graphical(this.svga_width, this.svga_height, this.svga_width, this.svga_height, this.svga_bpp));
  this.svga_enabled || (this.svga_bank_offset = 0);
  this.update_layers();
};
$VGAScreen$$module$src$vga$$.prototype.port1CF_read = function() {
  $dbg_log$$module$src$log$$("1CF / dispi read " + $h$$module$src$lib$$(this.dispi_index), 256);
  return this.svga_register_read(this.dispi_index);
};
$VGAScreen$$module$src$vga$$.prototype.svga_register_read = function($n$jscomp$13$$) {
  switch($n$jscomp$13$$) {
    case 0:
      return this.svga_version;
    case 1:
      return this.dispi_enable_value & 2 ? 2560 : this.svga_width;
    case 2:
      return this.dispi_enable_value & 2 ? 1600 : this.svga_height;
    case 3:
      return this.dispi_enable_value & 2 ? 32 : this.svga_bpp;
    case 4:
      return this.dispi_enable_value;
    case 5:
      return this.svga_bank_offset >>> 16;
    case 6:
      return this.screen_width ? this.screen_width : 1;
    case 8:
      return this.svga_offset_x;
    case 9:
      return this.svga_offset_y;
    case 10:
      return this.vga_memory_size / 65536 | 0;
    default:
      $dbg_log$$module$src$log$$("Unimplemented dispi read index: " + $h$$module$src$lib$$(this.dispi_index), 256);
  }
  return 255;
};
$VGAScreen$$module$src$vga$$.prototype.vga_replot = function() {
  for (var $pixel_addr$jscomp$2_start$jscomp$40$$ = this.diff_plot_min & -16, $end$jscomp$21$$ = Math.min(this.diff_plot_max | 15, 524287), $addr_shift$$ = this.vga_addr_shift_count(), $addr_substitution$$ = ~this.crtc_mode & 3, $shift_mode$$ = this.planar_mode & 96, $pel_width$$ = this.attribute_mode & 64; $pixel_addr$jscomp$2_start$jscomp$40$$ <= $end$jscomp$21$$;) {
    var $addr$jscomp$48_shift_loads$$ = $pixel_addr$jscomp$2_start$jscomp$40$$ >>> $addr_shift$$;
    if ($addr_substitution$$) {
      var $byte0_j$jscomp$9_row$jscomp$11$$ = $pixel_addr$jscomp$2_start$jscomp$40$$ / this.virtual_width | 0, $byte1_col$jscomp$9$$ = $pixel_addr$jscomp$2_start$jscomp$40$$ - this.virtual_width * $byte0_j$jscomp$9_row$jscomp$11$$;
      switch($addr_substitution$$) {
        case 1:
          $addr$jscomp$48_shift_loads$$ = ($byte0_j$jscomp$9_row$jscomp$11$$ & 1) << 13;
          $byte0_j$jscomp$9_row$jscomp$11$$ >>>= 1;
          break;
        case 2:
          $addr$jscomp$48_shift_loads$$ = ($byte0_j$jscomp$9_row$jscomp$11$$ & 1) << 14;
          $byte0_j$jscomp$9_row$jscomp$11$$ >>>= 1;
          break;
        case 3:
          $addr$jscomp$48_shift_loads$$ = ($byte0_j$jscomp$9_row$jscomp$11$$ & 3) << 13, $byte0_j$jscomp$9_row$jscomp$11$$ >>>= 2;
      }
      $addr$jscomp$48_shift_loads$$ |= ($byte0_j$jscomp$9_row$jscomp$11$$ * this.virtual_width + $byte1_col$jscomp$9$$ >>> $addr_shift$$) + this.start_address;
    }
    $byte0_j$jscomp$9_row$jscomp$11$$ = this.plane0[$addr$jscomp$48_shift_loads$$];
    $byte1_col$jscomp$9$$ = this.plane1[$addr$jscomp$48_shift_loads$$];
    var $byte2$$ = this.plane2[$addr$jscomp$48_shift_loads$$], $byte3$$ = this.plane3[$addr$jscomp$48_shift_loads$$];
    $addr$jscomp$48_shift_loads$$ = new Uint8Array(8);
    switch($shift_mode$$) {
      case 0:
        $byte0_j$jscomp$9_row$jscomp$11$$ <<= 0;
        $byte1_col$jscomp$9$$ <<= 1;
        $byte2$$ <<= 2;
        $byte3$$ <<= 3;
        for (var $i$jscomp$90$$ = 7; 0 <= $i$jscomp$90$$; $i$jscomp$90$$--) {
          $addr$jscomp$48_shift_loads$$[7 - $i$jscomp$90$$] = $byte0_j$jscomp$9_row$jscomp$11$$ >> $i$jscomp$90$$ & 1 | $byte1_col$jscomp$9$$ >> $i$jscomp$90$$ & 2 | $byte2$$ >> $i$jscomp$90$$ & 4 | $byte3$$ >> $i$jscomp$90$$ & 8;
        }
        break;
      case 32:
        $addr$jscomp$48_shift_loads$$[0] = $byte0_j$jscomp$9_row$jscomp$11$$ >> 6 & 3 | $byte2$$ >> 4 & 12;
        $addr$jscomp$48_shift_loads$$[1] = $byte0_j$jscomp$9_row$jscomp$11$$ >> 4 & 3 | $byte2$$ >> 2 & 12;
        $addr$jscomp$48_shift_loads$$[2] = $byte0_j$jscomp$9_row$jscomp$11$$ >> 2 & 3 | $byte2$$ >> 0 & 12;
        $addr$jscomp$48_shift_loads$$[3] = $byte0_j$jscomp$9_row$jscomp$11$$ >> 0 & 3 | $byte2$$ << 2 & 12;
        $addr$jscomp$48_shift_loads$$[4] = $byte1_col$jscomp$9$$ >> 6 & 3 | $byte3$$ >> 4 & 12;
        $addr$jscomp$48_shift_loads$$[5] = $byte1_col$jscomp$9$$ >> 4 & 3 | $byte3$$ >> 2 & 12;
        $addr$jscomp$48_shift_loads$$[6] = $byte1_col$jscomp$9$$ >> 2 & 3 | $byte3$$ >> 0 & 12;
        $addr$jscomp$48_shift_loads$$[7] = $byte1_col$jscomp$9$$ >> 0 & 3 | $byte3$$ << 2 & 12;
        break;
      case 64:
      case 96:
        $addr$jscomp$48_shift_loads$$[0] = $byte0_j$jscomp$9_row$jscomp$11$$ >> 4 & 15, $addr$jscomp$48_shift_loads$$[1] = $byte0_j$jscomp$9_row$jscomp$11$$ >> 0 & 15, $addr$jscomp$48_shift_loads$$[2] = $byte1_col$jscomp$9$$ >> 4 & 15, $addr$jscomp$48_shift_loads$$[3] = $byte1_col$jscomp$9$$ >> 0 & 15, $addr$jscomp$48_shift_loads$$[4] = $byte2$$ >> 4 & 15, $addr$jscomp$48_shift_loads$$[5] = $byte2$$ >> 0 & 15, $addr$jscomp$48_shift_loads$$[6] = $byte3$$ >> 4 & 15, $addr$jscomp$48_shift_loads$$[7] = 
        $byte3$$ >> 0 & 15;
    }
    if ($pel_width$$) {
      for ($byte0_j$jscomp$9_row$jscomp$11$$ = $i$jscomp$90$$ = 0; 4 > $i$jscomp$90$$; $i$jscomp$90$$++, $pixel_addr$jscomp$2_start$jscomp$40$$++, $byte0_j$jscomp$9_row$jscomp$11$$ += 2) {
        this.pixel_buffer[$pixel_addr$jscomp$2_start$jscomp$40$$] = $addr$jscomp$48_shift_loads$$[$byte0_j$jscomp$9_row$jscomp$11$$] << 4 | $addr$jscomp$48_shift_loads$$[$byte0_j$jscomp$9_row$jscomp$11$$ + 1];
      }
    } else {
      for ($i$jscomp$90$$ = 0; 8 > $i$jscomp$90$$; $i$jscomp$90$$++, $pixel_addr$jscomp$2_start$jscomp$40$$++) {
        this.pixel_buffer[$pixel_addr$jscomp$2_start$jscomp$40$$] = $addr$jscomp$48_shift_loads$$[$i$jscomp$90$$];
      }
    }
  }
};
$VGAScreen$$module$src$vga$$.prototype.vga_redraw = function() {
  var $pixel_addr$jscomp$3_start$jscomp$41$$ = this.diff_addr_min, $end$jscomp$22$$ = Math.min(this.diff_addr_max, 524287);
  const $buffer$jscomp$51$$ = new Int32Array(this.cpu.wasm_memory.buffer, this.dest_buffet_offset, this.virtual_width * this.virtual_height);
  var $mask$jscomp$10$$ = 255, $colorset$$ = 0;
  this.attribute_mode & 128 && ($mask$jscomp$10$$ &= 207, $colorset$$ |= this.color_select << 4 & 48);
  if (this.attribute_mode & 64) {
    for (; $pixel_addr$jscomp$3_start$jscomp$41$$ <= $end$jscomp$22$$; $pixel_addr$jscomp$3_start$jscomp$41$$++) {
      var $color$jscomp$6_color256$$ = this.pixel_buffer[$pixel_addr$jscomp$3_start$jscomp$41$$] & $mask$jscomp$10$$ | $colorset$$;
      $color$jscomp$6_color256$$ = this.vga256_palette[$color$jscomp$6_color256$$];
      $buffer$jscomp$51$$[$pixel_addr$jscomp$3_start$jscomp$41$$] = $color$jscomp$6_color256$$ & 65280 | $color$jscomp$6_color256$$ << 16 | $color$jscomp$6_color256$$ >> 16 | 4278190080;
    }
  } else {
    for ($mask$jscomp$10$$ &= 63, $colorset$$ |= this.color_select << 4 & 192; $pixel_addr$jscomp$3_start$jscomp$41$$ <= $end$jscomp$22$$; $pixel_addr$jscomp$3_start$jscomp$41$$++) {
      $color$jscomp$6_color256$$ = this.dac_map[this.pixel_buffer[$pixel_addr$jscomp$3_start$jscomp$41$$] & this.color_plane_enable] & $mask$jscomp$10$$ | $colorset$$, $color$jscomp$6_color256$$ = this.vga256_palette[$color$jscomp$6_color256$$], $buffer$jscomp$51$$[$pixel_addr$jscomp$3_start$jscomp$41$$] = $color$jscomp$6_color256$$ & 65280 | $color$jscomp$6_color256$$ << 16 | $color$jscomp$6_color256$$ >> 16 | 4278190080;
    }
  }
};
$VGAScreen$$module$src$vga$$.prototype.screen_fill_buffer = function() {
  if (this.graphical_mode) {
    if (0 === this.image_data.data.byteLength) {
      var $buffer$jscomp$52_min_y$$ = new Uint8ClampedArray(this.cpu.wasm_memory.buffer, this.dest_buffet_offset, 4 * this.virtual_width * this.virtual_height);
      this.image_data = new ImageData($buffer$jscomp$52_min_y$$, this.virtual_width, this.virtual_height);
      this.update_layers();
    }
    if (this.svga_enabled) {
      $buffer$jscomp$52_min_y$$ = 0;
      let $max_y$$ = this.svga_height;
      if (8 === this.svga_bpp) {
        const $buffer$jscomp$53$$ = new Int32Array(this.cpu.wasm_memory.buffer, this.dest_buffet_offset, this.screen_width * this.screen_height), $svga_memory$$ = new Uint8Array(this.cpu.wasm_memory.buffer, this.svga_memory.byteOffset, this.vga_memory_size);
        for (var $bytes_per_pixel_i$jscomp$91$$ = 0; $bytes_per_pixel_i$jscomp$91$$ < $buffer$jscomp$53$$.length; $bytes_per_pixel_i$jscomp$91$$++) {
          var $color$jscomp$7$$ = this.vga256_palette[$svga_memory$$[$bytes_per_pixel_i$jscomp$91$$]];
          $buffer$jscomp$53$$[$bytes_per_pixel_i$jscomp$91$$] = $color$jscomp$7$$ & 65280 | $color$jscomp$7$$ << 16 | $color$jscomp$7$$ >> 16 | 4278190080;
        }
      } else {
        this.cpu.svga_fill_pixel_buffer(this.svga_bpp, this.svga_offset), $bytes_per_pixel_i$jscomp$91$$ = 15 === this.svga_bpp ? 2 : this.svga_bpp / 8, $buffer$jscomp$52_min_y$$ = ((this.cpu.svga_dirty_bitmap_min_offset[0] / $bytes_per_pixel_i$jscomp$91$$ | 0) - this.svga_offset) / this.svga_width | 0, $max_y$$ = (((this.cpu.svga_dirty_bitmap_max_offset[0] / $bytes_per_pixel_i$jscomp$91$$ | 0) - this.svga_offset) / this.svga_width | 0) + 1;
      }
      $buffer$jscomp$52_min_y$$ < $max_y$$ && ($buffer$jscomp$52_min_y$$ = Math.max($buffer$jscomp$52_min_y$$, 0), $max_y$$ = Math.min($max_y$$, this.svga_height), this.screen.update_buffer([{image_data:this.image_data, screen_x:0, screen_y:$buffer$jscomp$52_min_y$$, buffer_x:0, buffer_y:$buffer$jscomp$52_min_y$$, buffer_width:this.svga_width, buffer_height:$max_y$$ - $buffer$jscomp$52_min_y$$, }]));
    } else {
      this.vga_replot(), this.vga_redraw(), this.screen.update_buffer(this.layers);
    }
    this.reset_diffs();
  }
  this.update_vertical_retrace();
};
$VGAScreen$$module$src$vga$$.prototype.set_font_bitmap = function($font_plane_dirty$$) {
  const $height$jscomp$31$$ = this.max_scan_line & 31;
  if ($height$jscomp$31$$ && !this.graphical_mode) {
    const $width_dbl$jscomp$2$$ = !!(this.clocking_mode & 8);
    this.screen.set_font_bitmap($height$jscomp$31$$ + 1, !$width_dbl$jscomp$2$$ && !(this.clocking_mode & 1), $width_dbl$jscomp$2$$, !!(this.attribute_mode & 4), this.plane2, $font_plane_dirty$$);
  }
};
$VGAScreen$$module$src$vga$$.prototype.set_font_page = function() {
  const $linear_index_map$$ = [0, 2, 4, 6, 1, 3, 5, 7], $vga_index_A$$ = (this.character_map_select & 12) >> 2 | (this.character_map_select & 32) >> 3, $vga_index_B$$ = this.character_map_select & 3 | (this.character_map_select & 16) >> 2;
  this.font_page_ab_enabled = $vga_index_A$$ !== $vga_index_B$$;
  this.screen.set_font_page($linear_index_map$$[$vga_index_A$$], $linear_index_map$$[$vga_index_B$$]);
  this.complete_redraw();
};
const $STAT_NAMES$$module$src$virtio_balloon$$ = "SWAP_IN SWAP_OUT MAJFLT MINFLT MEMFREE MEMTOT AVAIL CACHES HTLB_PGALLOC HTLB_PGFAIL".split(" ");
function $VirtioBalloon$$module$src$virtio_balloon$$($cpu$jscomp$27$$, $bus$jscomp$25$$) {
  this.bus = $bus$jscomp$25$$;
  this.zeroed = this.fp_cmd = this.actual = this.num_pages = 0;
  this.virtio = new $VirtIO$$module$src$virtio$$($cpu$jscomp$27$$, {name:"virtio-balloon", pci_id:88, device_id:4165, subsystem_device_id:5, common:{initial_port:55296, queues:[{size_supported:32, notify_offset:0}, {size_supported:32, notify_offset:0}, {size_supported:2, notify_offset:1}, {size_supported:64, notify_offset:2}, ], features:[1, 3, 32, ], on_driver_ok:() => {
    $dbg_log$$module$src$log$$("Balloon setup", 2048);
  }, }, notification:{initial_port:55552, single_handler:!1, handlers:[$queue_id$jscomp$12$$ => {
    const $queue$jscomp$8$$ = this.virtio.queues[$queue_id$jscomp$12$$];
    for (; $queue$jscomp$8$$.has_request();) {
      var $bufchain$jscomp$13_n$jscomp$14$$ = $queue$jscomp$8$$.pop_request();
      const $buffer$jscomp$54$$ = new Uint8Array($bufchain$jscomp$13_n$jscomp$14$$.length_readable);
      $bufchain$jscomp$13_n$jscomp$14$$.get_next_blob($buffer$jscomp$54$$);
      this.virtio.queues[$queue_id$jscomp$12$$].push_reply($bufchain$jscomp$13_n$jscomp$14$$);
      $bufchain$jscomp$13_n$jscomp$14$$ = $buffer$jscomp$54$$.byteLength / 4;
      this.actual += 0 === $queue_id$jscomp$12$$ ? $bufchain$jscomp$13_n$jscomp$14$$ : -$bufchain$jscomp$13_n$jscomp$14$$;
    }
    this.virtio.queues[$queue_id$jscomp$12$$].flush_replies();
  }, $queue_id$jscomp$13$$ => {
    var $bufchain$jscomp$14_queue$jscomp$9$$ = this.virtio.queues[$queue_id$jscomp$13$$];
    if ($bufchain$jscomp$14_queue$jscomp$9$$.has_request()) {
      $bufchain$jscomp$14_queue$jscomp$9$$ = $bufchain$jscomp$14_queue$jscomp$9$$.pop_request();
      const $buffer$jscomp$55$$ = new Uint8Array($bufchain$jscomp$14_queue$jscomp$9$$.length_readable);
      $bufchain$jscomp$14_queue$jscomp$9$$.get_next_blob($buffer$jscomp$55$$);
      let $result$jscomp$21$$ = {};
      for (let $i$jscomp$92$$ = 0; $i$jscomp$92$$ < $bufchain$jscomp$14_queue$jscomp$9$$.length_readable; $i$jscomp$92$$ += 10) {
        let [$cat$$, $value$jscomp$190$$] = $Unmarshall$$module$lib$marshall$$(["h", "d"], $buffer$jscomp$55$$, {offset:$i$jscomp$92$$});
        $result$jscomp$21$$[$STAT_NAMES$$module$src$virtio_balloon$$[$cat$$]] = $value$jscomp$190$$;
      }
      this.virtio.queues[$queue_id$jscomp$13$$].push_reply($bufchain$jscomp$14_queue$jscomp$9$$);
      this.stats_cb && this.stats_cb($result$jscomp$21$$);
    }
  }, $queue_id$jscomp$14$$ => {
    const $queue$jscomp$10$$ = this.virtio.queues[$queue_id$jscomp$14$$];
    for (; $queue$jscomp$10$$.has_request();) {
      const $bufchain$jscomp$15$$ = $queue$jscomp$10$$.pop_request();
      if (0 < $bufchain$jscomp$15$$.length_readable) {
        var $buffer$jscomp$56_cmd$jscomp$11_i$jscomp$93$$ = new Uint8Array($bufchain$jscomp$15$$.length_readable);
        $bufchain$jscomp$15$$.get_next_blob($buffer$jscomp$56_cmd$jscomp$11_i$jscomp$93$$);
        [$buffer$jscomp$56_cmd$jscomp$11_i$jscomp$93$$] = $Unmarshall$$module$lib$marshall$$(["w"], $buffer$jscomp$56_cmd$jscomp$11_i$jscomp$93$$, {offset:0});
        0 === $buffer$jscomp$56_cmd$jscomp$11_i$jscomp$93$$ && (this.free_cb && this.free_cb(this.zeroed), 1 < this.fp_cmd && (this.fp_cmd = 1), this.virtio.notify_config_changes());
      }
      if (0 < $bufchain$jscomp$15$$.length_writable) {
        for (new Uint8Array(0), $buffer$jscomp$56_cmd$jscomp$11_i$jscomp$93$$ = 0; $buffer$jscomp$56_cmd$jscomp$11_i$jscomp$93$$ < $bufchain$jscomp$15$$.write_buffers.length; ++$buffer$jscomp$56_cmd$jscomp$11_i$jscomp$93$$) {
          let $b$jscomp$3$$ = $bufchain$jscomp$15$$.write_buffers[$buffer$jscomp$56_cmd$jscomp$11_i$jscomp$93$$];
          this.zeroed += $b$jscomp$3$$.len;
          this.virtio.cpu.zero_memory($b$jscomp$3$$.addr_low, $b$jscomp$3$$.len);
        }
      }
      this.virtio.queues[$queue_id$jscomp$14$$].push_reply($bufchain$jscomp$15$$);
    }
    this.virtio.queues[$queue_id$jscomp$14$$].flush_replies();
  }, ], }, isr_status:{initial_port:55040, }, device_specific:{initial_port:54784, struct:[{bytes:4, name:"num_pages", read:() => this.num_pages, write:() => {
  }, }, {bytes:4, name:"actual", read:() => this.actual, write:() => {
  }, }, {bytes:4, name:"free_page_hint_cmd_id", read:() => this.fp_cmd, write:() => {
  }, }]}, });
}
$VirtioBalloon$$module$src$virtio_balloon$$.prototype.Inflate = function($amount$$) {
  this.num_pages += $amount$$;
  this.virtio.notify_config_changes();
};
$VirtioBalloon$$module$src$virtio_balloon$$.prototype.Deflate = function($amount$jscomp$1$$) {
  this.num_pages -= $amount$jscomp$1$$;
  this.virtio.notify_config_changes();
};
$VirtioBalloon$$module$src$virtio_balloon$$.prototype.Cleanup = function($cb$$) {
  this.fp_cmd = 2;
  this.free_cb = $cb$$;
  this.zeroed = 0;
  this.virtio.notify_config_changes();
};
$VirtioBalloon$$module$src$virtio_balloon$$.prototype.get_state = function() {
  const $state$jscomp$56$$ = [];
  $state$jscomp$56$$[0] = this.virtio;
  $state$jscomp$56$$[1] = this.num_pages;
  $state$jscomp$56$$[2] = this.actual;
  return $state$jscomp$56$$;
};
$VirtioBalloon$$module$src$virtio_balloon$$.prototype.set_state = function($state$jscomp$57$$) {
  this.virtio.set_state($state$jscomp$57$$[0]);
  this.num_pages = $state$jscomp$57$$[1];
  this.actual = $state$jscomp$57$$[2];
};
$VirtioBalloon$$module$src$virtio_balloon$$.prototype.GetStats = function($data$jscomp$219_queue$jscomp$11$$) {
  this.stats_cb = $data$jscomp$219_queue$jscomp$11$$;
  for ($data$jscomp$219_queue$jscomp$11$$ = this.virtio.queues[2]; $data$jscomp$219_queue$jscomp$11$$.has_request();) {
    const $bufchain$jscomp$16$$ = $data$jscomp$219_queue$jscomp$11$$.pop_request();
    this.virtio.queues[2].push_reply($bufchain$jscomp$16$$);
  }
  this.virtio.queues[2].flush_replies();
};
$VirtioBalloon$$module$src$virtio_balloon$$.prototype.Reset = function() {
};
function $load_kernel$$module$src$kernel$$($data8$jscomp$inline_161_mem8$$, $bzimage$jscomp$1_i$jscomp$inline_166_protected_mode_kernel$$, $checksum_index$jscomp$inline_164_i$jscomp$inline_163_initrd$jscomp$1$$, $cmdline_real_mode_kernel$$) {
  $dbg_log$$module$src$log$$("Trying to load kernel of size " + $bzimage$jscomp$1_i$jscomp$inline_166_protected_mode_kernel$$.byteLength);
  var $bzimage8_i$jscomp$94_ramdisk_size$$ = new Uint8Array($bzimage$jscomp$1_i$jscomp$inline_166_protected_mode_kernel$$);
  const $bzimage16$$ = new Uint16Array($bzimage$jscomp$1_i$jscomp$inline_166_protected_mode_kernel$$);
  var $bzimage32_checksum$jscomp$inline_165$$ = new Uint32Array($bzimage$jscomp$1_i$jscomp$inline_166_protected_mode_kernel$$), $prot_mode_kernel_start_ramdisk_address_setup_sects$$ = $bzimage8_i$jscomp$94_ramdisk_size$$[497] || 4, $checksum1_checksum2_protocol$jscomp$1$$ = $bzimage16$$[255];
  if (43605 !== $checksum1_checksum2_protocol$jscomp$1$$) {
    $dbg_log$$module$src$log$$("Bad checksum1: " + $h$$module$src$lib$$($checksum1_checksum2_protocol$jscomp$1$$));
  } else {
    if ($checksum1_checksum2_protocol$jscomp$1$$ = $bzimage16$$[257] | $bzimage16$$[258] << 16, 1400005704 !== $checksum1_checksum2_protocol$jscomp$1$$) {
      $dbg_log$$module$src$log$$("Bad checksum2: " + $h$$module$src$lib$$($checksum1_checksum2_protocol$jscomp$1$$));
    } else {
      $checksum1_checksum2_protocol$jscomp$1$$ = $bzimage16$$[259];
      $dbg_assert$$module$src$log$$(514 <= $checksum1_checksum2_protocol$jscomp$1$$);
      var $flags$jscomp$15$$ = $bzimage8_i$jscomp$94_ramdisk_size$$[529];
      $dbg_assert$$module$src$log$$($flags$jscomp$15$$ & 1);
      var $flags2$$ = $bzimage16$$[283], $initrd_addr_max$$ = $bzimage32_checksum$jscomp$inline_165$$[139], $kernel_alignment$$ = $bzimage32_checksum$jscomp$inline_165$$[140], $relocatable_kernel$$ = $bzimage8_i$jscomp$94_ramdisk_size$$[564], $min_alignment$$ = $bzimage8_i$jscomp$94_ramdisk_size$$[565], $cmdline_size$$ = 518 <= $checksum1_checksum2_protocol$jscomp$1$$ ? $bzimage32_checksum$jscomp$inline_165$$[142] : 255, $payload_offset$$ = $bzimage32_checksum$jscomp$inline_165$$[146], $payload_length$$ = 
      $bzimage32_checksum$jscomp$inline_165$$[147], $pref_address$$ = $bzimage32_checksum$jscomp$inline_165$$[150], $pref_address_high$$ = $bzimage32_checksum$jscomp$inline_165$$[151], $init_size$$ = $bzimage32_checksum$jscomp$inline_165$$[152];
      $dbg_log$$module$src$log$$("kernel boot protocol version: " + $h$$module$src$lib$$($checksum1_checksum2_protocol$jscomp$1$$));
      $dbg_log$$module$src$log$$("flags=" + $h$$module$src$lib$$($flags$jscomp$15$$) + " xflags=" + $h$$module$src$lib$$($flags2$$));
      $dbg_log$$module$src$log$$("code32_start=" + $h$$module$src$lib$$($bzimage32_checksum$jscomp$inline_165$$[133]));
      $dbg_log$$module$src$log$$("initrd_addr_max=" + $h$$module$src$lib$$($initrd_addr_max$$));
      $dbg_log$$module$src$log$$("kernel_alignment=" + $h$$module$src$lib$$($kernel_alignment$$));
      $dbg_log$$module$src$log$$("relocatable=" + $relocatable_kernel$$);
      $dbg_log$$module$src$log$$("min_alignment=" + $h$$module$src$lib$$($min_alignment$$));
      $dbg_log$$module$src$log$$("cmdline max=" + $h$$module$src$lib$$($cmdline_size$$));
      $dbg_log$$module$src$log$$("payload offset=" + $h$$module$src$lib$$($payload_offset$$) + " size=" + $h$$module$src$lib$$($payload_length$$));
      $dbg_log$$module$src$log$$("pref_address=" + $h$$module$src$lib$$($pref_address_high$$) + ":" + $h$$module$src$lib$$($pref_address$$));
      $dbg_log$$module$src$log$$("init_size=" + $h$$module$src$lib$$($init_size$$));
      $bzimage8_i$jscomp$94_ramdisk_size$$[528] = 255;
      $bzimage8_i$jscomp$94_ramdisk_size$$[529] = $flags$jscomp$15$$ & -97 | 128;
      $bzimage16$$[274] = 56832;
      $bzimage16$$[253] = 65535;
      $dbg_log$$module$src$log$$("heap_end_ptr=" + $h$$module$src$lib$$(56832));
      $cmdline_real_mode_kernel$$ += "\x00";
      $dbg_assert$$module$src$log$$($cmdline_real_mode_kernel$$.length < $cmdline_size$$);
      $dbg_log$$module$src$log$$("cmd_line_ptr=" + $h$$module$src$lib$$(581632));
      $bzimage32_checksum$jscomp$inline_165$$[138] = 581632;
      for ($bzimage8_i$jscomp$94_ramdisk_size$$ = 0; $bzimage8_i$jscomp$94_ramdisk_size$$ < $cmdline_real_mode_kernel$$.length; $bzimage8_i$jscomp$94_ramdisk_size$$++) {
        $data8$jscomp$inline_161_mem8$$[581632 + $bzimage8_i$jscomp$94_ramdisk_size$$] = $cmdline_real_mode_kernel$$.charCodeAt($bzimage8_i$jscomp$94_ramdisk_size$$);
      }
      $prot_mode_kernel_start_ramdisk_address_setup_sects$$ = 512 * ($prot_mode_kernel_start_ramdisk_address_setup_sects$$ + 1);
      $dbg_log$$module$src$log$$("prot_mode_kernel_start=" + $h$$module$src$lib$$($prot_mode_kernel_start_ramdisk_address_setup_sects$$));
      $cmdline_real_mode_kernel$$ = new Uint8Array($bzimage$jscomp$1_i$jscomp$inline_166_protected_mode_kernel$$, 0, $prot_mode_kernel_start_ramdisk_address_setup_sects$$);
      $bzimage$jscomp$1_i$jscomp$inline_166_protected_mode_kernel$$ = new Uint8Array($bzimage$jscomp$1_i$jscomp$inline_166_protected_mode_kernel$$, $prot_mode_kernel_start_ramdisk_address_setup_sects$$);
      $bzimage8_i$jscomp$94_ramdisk_size$$ = $prot_mode_kernel_start_ramdisk_address_setup_sects$$ = 0;
      $checksum_index$jscomp$inline_164_i$jscomp$inline_163_initrd$jscomp$1$$ && ($prot_mode_kernel_start_ramdisk_address_setup_sects$$ = 67108864, $bzimage8_i$jscomp$94_ramdisk_size$$ = $checksum_index$jscomp$inline_164_i$jscomp$inline_163_initrd$jscomp$1$$.byteLength, $dbg_assert$$module$src$log$$(1048576 + $bzimage$jscomp$1_i$jscomp$inline_166_protected_mode_kernel$$.length < $prot_mode_kernel_start_ramdisk_address_setup_sects$$), $data8$jscomp$inline_161_mem8$$.set(new Uint8Array($checksum_index$jscomp$inline_164_i$jscomp$inline_163_initrd$jscomp$1$$), 
      $prot_mode_kernel_start_ramdisk_address_setup_sects$$));
      $bzimage32_checksum$jscomp$inline_165$$[134] = $prot_mode_kernel_start_ramdisk_address_setup_sects$$;
      $bzimage32_checksum$jscomp$inline_165$$[135] = $bzimage8_i$jscomp$94_ramdisk_size$$;
      $dbg_assert$$module$src$log$$(655360 > 524288 + $cmdline_real_mode_kernel$$.length);
      $data8$jscomp$inline_161_mem8$$.set($cmdline_real_mode_kernel$$, 524288);
      $data8$jscomp$inline_161_mem8$$.set($bzimage$jscomp$1_i$jscomp$inline_166_protected_mode_kernel$$, 1048576);
      $data8$jscomp$inline_161_mem8$$ = new Uint8Array(512);
      (new Uint16Array($data8$jscomp$inline_161_mem8$$.buffer))[0] = 43605;
      $data8$jscomp$inline_161_mem8$$[2] = 1;
      $checksum_index$jscomp$inline_164_i$jscomp$inline_163_initrd$jscomp$1$$ = 3;
      $data8$jscomp$inline_161_mem8$$[$checksum_index$jscomp$inline_164_i$jscomp$inline_163_initrd$jscomp$1$$++] = 250;
      $data8$jscomp$inline_161_mem8$$[$checksum_index$jscomp$inline_164_i$jscomp$inline_163_initrd$jscomp$1$$++] = 184;
      $data8$jscomp$inline_161_mem8$$[$checksum_index$jscomp$inline_164_i$jscomp$inline_163_initrd$jscomp$1$$++] = 32768;
      $data8$jscomp$inline_161_mem8$$[$checksum_index$jscomp$inline_164_i$jscomp$inline_163_initrd$jscomp$1$$++] = 128;
      $data8$jscomp$inline_161_mem8$$[$checksum_index$jscomp$inline_164_i$jscomp$inline_163_initrd$jscomp$1$$++] = 142;
      $data8$jscomp$inline_161_mem8$$[$checksum_index$jscomp$inline_164_i$jscomp$inline_163_initrd$jscomp$1$$++] = 192;
      $data8$jscomp$inline_161_mem8$$[$checksum_index$jscomp$inline_164_i$jscomp$inline_163_initrd$jscomp$1$$++] = 142;
      $data8$jscomp$inline_161_mem8$$[$checksum_index$jscomp$inline_164_i$jscomp$inline_163_initrd$jscomp$1$$++] = 216;
      $data8$jscomp$inline_161_mem8$$[$checksum_index$jscomp$inline_164_i$jscomp$inline_163_initrd$jscomp$1$$++] = 142;
      $data8$jscomp$inline_161_mem8$$[$checksum_index$jscomp$inline_164_i$jscomp$inline_163_initrd$jscomp$1$$++] = 224;
      $data8$jscomp$inline_161_mem8$$[$checksum_index$jscomp$inline_164_i$jscomp$inline_163_initrd$jscomp$1$$++] = 142;
      $data8$jscomp$inline_161_mem8$$[$checksum_index$jscomp$inline_164_i$jscomp$inline_163_initrd$jscomp$1$$++] = 232;
      $data8$jscomp$inline_161_mem8$$[$checksum_index$jscomp$inline_164_i$jscomp$inline_163_initrd$jscomp$1$$++] = 142;
      $data8$jscomp$inline_161_mem8$$[$checksum_index$jscomp$inline_164_i$jscomp$inline_163_initrd$jscomp$1$$++] = 208;
      $data8$jscomp$inline_161_mem8$$[$checksum_index$jscomp$inline_164_i$jscomp$inline_163_initrd$jscomp$1$$++] = 188;
      $data8$jscomp$inline_161_mem8$$[$checksum_index$jscomp$inline_164_i$jscomp$inline_163_initrd$jscomp$1$$++] = 57344;
      $data8$jscomp$inline_161_mem8$$[$checksum_index$jscomp$inline_164_i$jscomp$inline_163_initrd$jscomp$1$$++] = 224;
      $data8$jscomp$inline_161_mem8$$[$checksum_index$jscomp$inline_164_i$jscomp$inline_163_initrd$jscomp$1$$++] = 234;
      $data8$jscomp$inline_161_mem8$$[$checksum_index$jscomp$inline_164_i$jscomp$inline_163_initrd$jscomp$1$$++] = 0;
      $data8$jscomp$inline_161_mem8$$[$checksum_index$jscomp$inline_164_i$jscomp$inline_163_initrd$jscomp$1$$++] = 0;
      $data8$jscomp$inline_161_mem8$$[$checksum_index$jscomp$inline_164_i$jscomp$inline_163_initrd$jscomp$1$$++] = 32800;
      $data8$jscomp$inline_161_mem8$$[$checksum_index$jscomp$inline_164_i$jscomp$inline_163_initrd$jscomp$1$$++] = 128;
      $dbg_assert$$module$src$log$$(512 > $checksum_index$jscomp$inline_164_i$jscomp$inline_163_initrd$jscomp$1$$);
      $bzimage32_checksum$jscomp$inline_165$$ = $data8$jscomp$inline_161_mem8$$[$checksum_index$jscomp$inline_164_i$jscomp$inline_163_initrd$jscomp$1$$] = 0;
      for ($bzimage$jscomp$1_i$jscomp$inline_166_protected_mode_kernel$$ = 0; $bzimage$jscomp$1_i$jscomp$inline_166_protected_mode_kernel$$ < $data8$jscomp$inline_161_mem8$$.length; $bzimage$jscomp$1_i$jscomp$inline_166_protected_mode_kernel$$++) {
        $bzimage32_checksum$jscomp$inline_165$$ += $data8$jscomp$inline_161_mem8$$[$bzimage$jscomp$1_i$jscomp$inline_166_protected_mode_kernel$$];
      }
      $data8$jscomp$inline_161_mem8$$[$checksum_index$jscomp$inline_164_i$jscomp$inline_163_initrd$jscomp$1$$] = -$bzimage32_checksum$jscomp$inline_165$$;
      return {name:"genroms/kernel.bin", data:$data8$jscomp$inline_161_mem8$$, };
    }
  }
}
;function $CPU$$module$src$cpu$$($bus$jscomp$26$$, $memory$jscomp$1_wm$$, $stop_idling$$) {
  this.stop_idling = $stop_idling$$;
  this.wm = $memory$jscomp$1_wm$$;
  this.wasm_patch();
  this.create_jit_imports();
  this.wasm_memory = $memory$jscomp$1_wm$$ = this.wm.exports.memory;
  this.memory_size = $view$$module$src$lib$$(Uint32Array, $memory$jscomp$1_wm$$, 812, 1);
  this.mem8 = new Uint8Array(0);
  this.mem32s = new Int32Array(this.mem8.buffer);
  this.segment_is_null = $view$$module$src$lib$$(Uint8Array, $memory$jscomp$1_wm$$, 724, 8);
  this.segment_offsets = $view$$module$src$lib$$(Int32Array, $memory$jscomp$1_wm$$, 736, 8);
  this.segment_limits = $view$$module$src$lib$$(Uint32Array, $memory$jscomp$1_wm$$, 768, 8);
  this.segment_access_bytes = $view$$module$src$lib$$(Uint8Array, $memory$jscomp$1_wm$$, 512, 8);
  this.protected_mode = $view$$module$src$lib$$(Int32Array, $memory$jscomp$1_wm$$, 800, 1);
  this.idtr_size = $view$$module$src$lib$$(Int32Array, $memory$jscomp$1_wm$$, 564, 1);
  this.idtr_offset = $view$$module$src$lib$$(Int32Array, $memory$jscomp$1_wm$$, 568, 1);
  this.gdtr_size = $view$$module$src$lib$$(Int32Array, $memory$jscomp$1_wm$$, 572, 1);
  this.gdtr_offset = $view$$module$src$lib$$(Int32Array, $memory$jscomp$1_wm$$, 576, 1);
  this.tss_size_32 = $view$$module$src$lib$$(Int32Array, $memory$jscomp$1_wm$$, 1128, 1);
  this.page_fault = $view$$module$src$lib$$(Uint32Array, $memory$jscomp$1_wm$$, 540, 8);
  this.cr = $view$$module$src$lib$$(Int32Array, $memory$jscomp$1_wm$$, 580, 8);
  this.cpl = $view$$module$src$lib$$(Uint8Array, $memory$jscomp$1_wm$$, 612, 1);
  this.is_32 = $view$$module$src$lib$$(Int32Array, $memory$jscomp$1_wm$$, 804, 1);
  this.stack_size_32 = $view$$module$src$lib$$(Int32Array, $memory$jscomp$1_wm$$, 808, 1);
  this.in_hlt = $view$$module$src$lib$$(Uint8Array, $memory$jscomp$1_wm$$, 616, 1);
  this.last_virt_eip = $view$$module$src$lib$$(Int32Array, $memory$jscomp$1_wm$$, 620, 1);
  this.eip_phys = $view$$module$src$lib$$(Int32Array, $memory$jscomp$1_wm$$, 624, 1);
  this.sysenter_cs = $view$$module$src$lib$$(Int32Array, $memory$jscomp$1_wm$$, 636, 1);
  this.sysenter_esp = $view$$module$src$lib$$(Int32Array, $memory$jscomp$1_wm$$, 640, 1);
  this.sysenter_eip = $view$$module$src$lib$$(Int32Array, $memory$jscomp$1_wm$$, 644, 1);
  this.prefixes = $view$$module$src$lib$$(Int32Array, $memory$jscomp$1_wm$$, 648, 1);
  this.flags = $view$$module$src$lib$$(Int32Array, $memory$jscomp$1_wm$$, 120, 1);
  this.flags_changed = $view$$module$src$lib$$(Int32Array, $memory$jscomp$1_wm$$, 100, 1);
  this.last_op_size = $view$$module$src$lib$$(Int32Array, $memory$jscomp$1_wm$$, 96, 1);
  this.last_op1 = $view$$module$src$lib$$(Int32Array, $memory$jscomp$1_wm$$, 104, 1);
  this.last_result = $view$$module$src$lib$$(Int32Array, $memory$jscomp$1_wm$$, 112, 1);
  this.current_tsc = $view$$module$src$lib$$(Uint32Array, $memory$jscomp$1_wm$$, 960, 2);
  this.devices = {};
  this.instruction_pointer = $view$$module$src$lib$$(Int32Array, $memory$jscomp$1_wm$$, 556, 1);
  this.previous_ip = $view$$module$src$lib$$(Int32Array, $memory$jscomp$1_wm$$, 560, 1);
  this.apic_enabled = $view$$module$src$lib$$(Uint8Array, $memory$jscomp$1_wm$$, 548, 1);
  this.acpi_enabled = $view$$module$src$lib$$(Uint8Array, $memory$jscomp$1_wm$$, 552, 1);
  this.memory_map_read8 = [];
  this.memory_map_write8 = [];
  this.memory_map_read32 = [];
  this.memory_map_write32 = [];
  this.bios = {main:null, vga:null, };
  this.instruction_counter = $view$$module$src$lib$$(Uint32Array, $memory$jscomp$1_wm$$, 664, 1);
  this.reg32 = $view$$module$src$lib$$(Int32Array, $memory$jscomp$1_wm$$, 64, 8);
  this.fpu_st = $view$$module$src$lib$$(Int32Array, $memory$jscomp$1_wm$$, 1152, 32);
  this.fpu_stack_empty = $view$$module$src$lib$$(Uint8Array, $memory$jscomp$1_wm$$, 816, 1);
  this.fpu_stack_empty[0] = 255;
  this.fpu_stack_ptr = $view$$module$src$lib$$(Uint8Array, $memory$jscomp$1_wm$$, 1032, 1);
  this.fpu_stack_ptr[0] = 0;
  this.fpu_control_word = $view$$module$src$lib$$(Uint16Array, $memory$jscomp$1_wm$$, 1036, 1);
  this.fpu_control_word[0] = 895;
  this.fpu_status_word = $view$$module$src$lib$$(Uint16Array, $memory$jscomp$1_wm$$, 1040, 1);
  this.fpu_status_word[0] = 0;
  this.fpu_ip = $view$$module$src$lib$$(Int32Array, $memory$jscomp$1_wm$$, 1048, 1);
  this.fpu_ip[0] = 0;
  this.fpu_ip_selector = $view$$module$src$lib$$(Int32Array, $memory$jscomp$1_wm$$, 1052, 1);
  this.fpu_ip_selector[0] = 0;
  this.fpu_opcode = $view$$module$src$lib$$(Int32Array, $memory$jscomp$1_wm$$, 1044, 1);
  this.fpu_opcode[0] = 0;
  this.fpu_dp = $view$$module$src$lib$$(Int32Array, $memory$jscomp$1_wm$$, 1056, 1);
  this.fpu_dp[0] = 0;
  this.fpu_dp_selector = $view$$module$src$lib$$(Int32Array, $memory$jscomp$1_wm$$, 1060, 1);
  this.fpu_dp_selector[0] = 0;
  this.reg_xmm32s = $view$$module$src$lib$$(Int32Array, $memory$jscomp$1_wm$$, 832, 32);
  this.mxcsr = $view$$module$src$lib$$(Int32Array, $memory$jscomp$1_wm$$, 824, 1);
  this.sreg = $view$$module$src$lib$$(Uint16Array, $memory$jscomp$1_wm$$, 668, 8);
  this.dreg = $view$$module$src$lib$$(Int32Array, $memory$jscomp$1_wm$$, 684, 8);
  this.reg_pdpte = $view$$module$src$lib$$(Int32Array, $memory$jscomp$1_wm$$, 968, 8);
  this.svga_dirty_bitmap_min_offset = $view$$module$src$lib$$(Uint32Array, $memory$jscomp$1_wm$$, 716, 1);
  this.svga_dirty_bitmap_max_offset = $view$$module$src$lib$$(Uint32Array, $memory$jscomp$1_wm$$, 720, 1);
  this.fw_value = [];
  this.fw_pointer = 0;
  this.option_roms = [];
  this.io = void 0;
  this.bus = $bus$jscomp$26$$;
  this.set_tsc(0, 0);
  this.debug_init();
  this.seen_code = {};
  this.seen_code_uncompiled = {};
}
$CPU$$module$src$cpu$$.prototype.mmap_read8 = function($addr$jscomp$49_value$jscomp$191$$) {
  $addr$jscomp$49_value$jscomp$191$$ = this.memory_map_read8[$addr$jscomp$49_value$jscomp$191$$ >>> 17]($addr$jscomp$49_value$jscomp$191$$);
  $dbg_assert$$module$src$log$$(0 <= $addr$jscomp$49_value$jscomp$191$$ && 255 >= $addr$jscomp$49_value$jscomp$191$$);
  return $addr$jscomp$49_value$jscomp$191$$;
};
$CPU$$module$src$cpu$$.prototype.mmap_write8 = function($addr$jscomp$50$$, $value$jscomp$192$$) {
  $dbg_assert$$module$src$log$$(0 <= $value$jscomp$192$$ && 255 >= $value$jscomp$192$$);
  this.memory_map_write8[$addr$jscomp$50$$ >>> 17]($addr$jscomp$50$$, $value$jscomp$192$$);
};
$CPU$$module$src$cpu$$.prototype.mmap_read16 = function($addr$jscomp$51_value$jscomp$193$$) {
  var $fn$jscomp$18$$ = this.memory_map_read8[$addr$jscomp$51_value$jscomp$193$$ >>> 17];
  $addr$jscomp$51_value$jscomp$193$$ = $fn$jscomp$18$$($addr$jscomp$51_value$jscomp$193$$) | $fn$jscomp$18$$($addr$jscomp$51_value$jscomp$193$$ + 1 | 0) << 8;
  $dbg_assert$$module$src$log$$(0 <= $addr$jscomp$51_value$jscomp$193$$ && 65535 >= $addr$jscomp$51_value$jscomp$193$$);
  return $addr$jscomp$51_value$jscomp$193$$;
};
$CPU$$module$src$cpu$$.prototype.mmap_write16 = function($addr$jscomp$52$$, $value$jscomp$194$$) {
  var $fn$jscomp$19$$ = this.memory_map_write8[$addr$jscomp$52$$ >>> 17];
  $dbg_assert$$module$src$log$$(0 <= $value$jscomp$194$$ && 65535 >= $value$jscomp$194$$);
  $fn$jscomp$19$$($addr$jscomp$52$$, $value$jscomp$194$$ & 255);
  $fn$jscomp$19$$($addr$jscomp$52$$ + 1 | 0, $value$jscomp$194$$ >> 8);
};
$CPU$$module$src$cpu$$.prototype.mmap_read32 = function($addr$jscomp$53$$) {
  return this.memory_map_read32[$addr$jscomp$53$$ >>> 17]($addr$jscomp$53$$);
};
$CPU$$module$src$cpu$$.prototype.mmap_write32 = function($addr$jscomp$54$$, $value$jscomp$195$$) {
  this.memory_map_write32[$addr$jscomp$54$$ >>> 17]($addr$jscomp$54$$, $value$jscomp$195$$);
};
$CPU$$module$src$cpu$$.prototype.mmap_write64 = function($addr$jscomp$55$$, $value0$jscomp$2$$, $value1$jscomp$9$$) {
  var $aligned_addr$jscomp$5_write_func32$jscomp$1$$ = $addr$jscomp$55$$ >>> 17;
  $dbg_assert$$module$src$log$$($aligned_addr$jscomp$5_write_func32$jscomp$1$$ === $addr$jscomp$55$$ + 7 >>> 17);
  $aligned_addr$jscomp$5_write_func32$jscomp$1$$ = this.memory_map_write32[$aligned_addr$jscomp$5_write_func32$jscomp$1$$];
  $aligned_addr$jscomp$5_write_func32$jscomp$1$$($addr$jscomp$55$$, $value0$jscomp$2$$);
  $aligned_addr$jscomp$5_write_func32$jscomp$1$$($addr$jscomp$55$$ + 4, $value1$jscomp$9$$);
};
$CPU$$module$src$cpu$$.prototype.mmap_write128 = function($addr$jscomp$56$$, $value0$jscomp$3$$, $value1$jscomp$10$$, $value2$jscomp$8$$, $value3$jscomp$5$$) {
  var $aligned_addr$jscomp$6_write_func32$jscomp$2$$ = $addr$jscomp$56$$ >>> 17;
  $dbg_assert$$module$src$log$$($aligned_addr$jscomp$6_write_func32$jscomp$2$$ === $addr$jscomp$56$$ + 12 >>> 17);
  $aligned_addr$jscomp$6_write_func32$jscomp$2$$ = this.memory_map_write32[$aligned_addr$jscomp$6_write_func32$jscomp$2$$];
  $aligned_addr$jscomp$6_write_func32$jscomp$2$$($addr$jscomp$56$$, $value0$jscomp$3$$);
  $aligned_addr$jscomp$6_write_func32$jscomp$2$$($addr$jscomp$56$$ + 4, $value1$jscomp$10$$);
  $aligned_addr$jscomp$6_write_func32$jscomp$2$$($addr$jscomp$56$$ + 8, $value2$jscomp$8$$);
  $aligned_addr$jscomp$6_write_func32$jscomp$2$$($addr$jscomp$56$$ + 12, $value3$jscomp$5$$);
};
$CPU$$module$src$cpu$$.prototype.write_blob = function($blob$jscomp$16$$, $offset$jscomp$77$$) {
  $dbg_assert$$module$src$log$$($blob$jscomp$16$$ && 0 <= $blob$jscomp$16$$.length);
  $blob$jscomp$16$$.length && ($dbg_assert$$module$src$log$$(!this.in_mapped_range($offset$jscomp$77$$)), $dbg_assert$$module$src$log$$(!this.in_mapped_range($offset$jscomp$77$$ + $blob$jscomp$16$$.length - 1)), this.jit_dirty_cache($offset$jscomp$77$$, $offset$jscomp$77$$ + $blob$jscomp$16$$.length), this.mem8.set($blob$jscomp$16$$, $offset$jscomp$77$$));
};
$CPU$$module$src$cpu$$.prototype.read_blob = function($offset$jscomp$78$$, $length$jscomp$31$$) {
  $length$jscomp$31$$ && ($dbg_assert$$module$src$log$$(!this.in_mapped_range($offset$jscomp$78$$)), $dbg_assert$$module$src$log$$(!this.in_mapped_range($offset$jscomp$78$$ + $length$jscomp$31$$ - 1)));
  return this.mem8.subarray($offset$jscomp$78$$, $offset$jscomp$78$$ + $length$jscomp$31$$);
};
$CPU$$module$src$cpu$$.prototype.clear_opstats = function() {
  (new Uint8Array(this.wasm_memory.buffer, 32768, 131072)).fill(0);
  this.wm.exports.profiler_init();
};
$CPU$$module$src$cpu$$.prototype.create_jit_imports = function() {
  const $jit_imports$$ = Object.create(null);
  $jit_imports$$.m = this.wm.exports.memory;
  for (const $name$jscomp$104$$ of Object.keys(this.wm.exports)) {
    $name$jscomp$104$$.startsWith("_") || $name$jscomp$104$$.startsWith("zstd") || $name$jscomp$104$$.endsWith("_js") || ($jit_imports$$[$name$jscomp$104$$] = this.wm.exports[$name$jscomp$104$$]);
  }
  this.jit_imports = $jit_imports$$;
};
$CPU$$module$src$cpu$$.prototype.wasm_patch = function() {
  const $get_optional_import$$ = $name$jscomp$105$$ => this.wm.exports[$name$jscomp$105$$], $get_import$$ = $name$jscomp$106$$ => {
    const $f$jscomp$4$$ = $get_optional_import$$($name$jscomp$106$$);
    console.assert($f$jscomp$4$$, "Missing import: " + $name$jscomp$106$$);
    return $f$jscomp$4$$;
  };
  this.reset_cpu = $get_import$$("reset_cpu");
  this.getiopl = $get_import$$("getiopl");
  this.get_eflags = $get_import$$("get_eflags");
  this.handle_irqs = $get_import$$("handle_irqs");
  this.main_loop = $get_import$$("main_loop");
  this.set_jit_config = $get_import$$("set_jit_config");
  this.read8 = $get_import$$("read8");
  this.read16 = $get_import$$("read16");
  this.read32s = $get_import$$("read32s");
  this.write8 = $get_import$$("write8");
  this.write16 = $get_import$$("write16");
  this.write32 = $get_import$$("write32");
  this.in_mapped_range = $get_import$$("in_mapped_range");
  this.fpu_load_tag_word = $get_import$$("fpu_load_tag_word");
  this.fpu_load_status_word = $get_import$$("fpu_load_status_word");
  this.fpu_get_sti_f64 = $get_import$$("fpu_get_sti_f64");
  this.translate_address_system_read = $get_import$$("translate_address_system_read_js");
  this.get_seg_cs = $get_import$$("get_seg_cs");
  this.get_real_eip = $get_import$$("get_real_eip");
  this.clear_tlb = $get_import$$("clear_tlb");
  this.full_clear_tlb = $get_import$$("full_clear_tlb");
  this.update_state_flags = $get_import$$("update_state_flags");
  this.set_tsc = $get_import$$("set_tsc");
  this.store_current_tsc = $get_import$$("store_current_tsc");
  this.set_cpuid_level = $get_import$$("set_cpuid_level");
  this.pic_set_irq = $get_import$$("pic_set_irq");
  this.pic_clear_irq = $get_import$$("pic_clear_irq");
  this.jit_force_generate_unsafe = $get_optional_import$$("jit_force_generate_unsafe");
  this.jit_clear_cache = $get_import$$("jit_clear_cache_js");
  this.jit_dirty_cache = $get_import$$("jit_dirty_cache");
  this.codegen_finalize_finished = $get_import$$("codegen_finalize_finished");
  this.allocate_memory = $get_import$$("allocate_memory");
  this.zero_memory = $get_import$$("zero_memory");
  this.is_memory_zeroed = $get_import$$("is_memory_zeroed");
  this.svga_allocate_memory = $get_import$$("svga_allocate_memory");
  this.svga_allocate_dest_buffer = $get_import$$("svga_allocate_dest_buffer");
  this.svga_fill_pixel_buffer = $get_import$$("svga_fill_pixel_buffer");
  this.svga_mark_dirty = $get_import$$("svga_mark_dirty");
  this.get_pic_addr_master = $get_import$$("get_pic_addr_master");
  this.get_pic_addr_slave = $get_import$$("get_pic_addr_slave");
  this.zstd_create_ctx = $get_import$$("zstd_create_ctx");
  this.zstd_get_src_ptr = $get_import$$("zstd_get_src_ptr");
  this.zstd_free_ctx = $get_import$$("zstd_free_ctx");
  this.zstd_read = $get_import$$("zstd_read");
  this.zstd_read_free = $get_import$$("zstd_read_free");
  this.port20_read = $get_import$$("port20_read");
  this.port21_read = $get_import$$("port21_read");
  this.portA0_read = $get_import$$("portA0_read");
  this.portA1_read = $get_import$$("portA1_read");
  this.port20_write = $get_import$$("port20_write");
  this.port21_write = $get_import$$("port21_write");
  this.portA0_write = $get_import$$("portA0_write");
  this.portA1_write = $get_import$$("portA1_write");
  this.port4D0_read = $get_import$$("port4D0_read");
  this.port4D1_read = $get_import$$("port4D1_read");
  this.port4D0_write = $get_import$$("port4D0_write");
  this.port4D1_write = $get_import$$("port4D1_write");
};
$CPU$$module$src$cpu$$.prototype.jit_force_generate = function($addr$jscomp$57$$) {
  this.jit_force_generate_unsafe ? this.jit_force_generate_unsafe($addr$jscomp$57$$) : $dbg_assert$$module$src$log$$(!1, "Not supported in this wasm build: jit_force_generate_unsafe");
};
$CPU$$module$src$cpu$$.prototype.jit_clear_func = function($index$jscomp$91$$) {
  $dbg_assert$$module$src$log$$(0 <= $index$jscomp$91$$ && 900 > $index$jscomp$91$$);
  this.wm.wasm_table.set($index$jscomp$91$$ + 1024, null);
};
$CPU$$module$src$cpu$$.prototype.jit_clear_all_funcs = function() {
  const $table$$ = this.wm.wasm_table;
  for (let $i$jscomp$97$$ = 0; 900 > $i$jscomp$97$$; $i$jscomp$97$$++) {
    $table$$.set(1024 + $i$jscomp$97$$, null);
  }
};
$CPU$$module$src$cpu$$.prototype.get_state = function() {
  var $state$jscomp$58$$ = [];
  $state$jscomp$58$$[0] = this.memory_size[0];
  $state$jscomp$58$$[1] = new Uint8Array([...this.segment_is_null, ...this.segment_access_bytes]);
  $state$jscomp$58$$[2] = this.segment_offsets;
  $state$jscomp$58$$[3] = this.segment_limits;
  $state$jscomp$58$$[4] = this.protected_mode[0];
  $state$jscomp$58$$[5] = this.idtr_offset[0];
  $state$jscomp$58$$[6] = this.idtr_size[0];
  $state$jscomp$58$$[7] = this.gdtr_offset[0];
  $state$jscomp$58$$[8] = this.gdtr_size[0];
  $state$jscomp$58$$[9] = this.page_fault[0];
  $state$jscomp$58$$[10] = this.cr;
  $state$jscomp$58$$[11] = this.cpl[0];
  $state$jscomp$58$$[13] = this.is_32[0];
  $state$jscomp$58$$[16] = this.stack_size_32[0];
  $state$jscomp$58$$[17] = this.in_hlt[0];
  $state$jscomp$58$$[18] = this.last_virt_eip[0];
  $state$jscomp$58$$[19] = this.eip_phys[0];
  $state$jscomp$58$$[22] = this.sysenter_cs[0];
  $state$jscomp$58$$[23] = this.sysenter_eip[0];
  $state$jscomp$58$$[24] = this.sysenter_esp[0];
  $state$jscomp$58$$[25] = this.prefixes[0];
  $state$jscomp$58$$[26] = this.flags[0];
  $state$jscomp$58$$[27] = this.flags_changed[0];
  $state$jscomp$58$$[28] = this.last_op1[0];
  $state$jscomp$58$$[30] = this.last_op_size[0];
  $state$jscomp$58$$[37] = this.instruction_pointer[0];
  $state$jscomp$58$$[38] = this.previous_ip[0];
  $state$jscomp$58$$[39] = this.reg32;
  $state$jscomp$58$$[40] = this.sreg;
  $state$jscomp$58$$[41] = this.dreg;
  $state$jscomp$58$$[42] = this.reg_pdpte;
  this.store_current_tsc();
  $state$jscomp$58$$[43] = this.current_tsc;
  $state$jscomp$58$$[45] = this.devices.virtio_9p;
  $state$jscomp$58$$[46] = this.devices.apic;
  $state$jscomp$58$$[47] = this.devices.rtc;
  $state$jscomp$58$$[48] = this.devices.pci;
  $state$jscomp$58$$[49] = this.devices.dma;
  $state$jscomp$58$$[50] = this.devices.acpi;
  $state$jscomp$58$$[52] = this.devices.vga;
  $state$jscomp$58$$[53] = this.devices.ps2;
  $state$jscomp$58$$[54] = this.devices.uart0;
  $state$jscomp$58$$[55] = this.devices.fdc;
  this.devices.ide.secondary ? $state$jscomp$58$$[85] = this.devices.ide : this.devices.ide.primary?.master.is_atapi ? $state$jscomp$58$$[56] = this.devices.ide.primary : $state$jscomp$58$$[57] = this.devices.ide.primary;
  $state$jscomp$58$$[58] = this.devices.pit;
  $state$jscomp$58$$[59] = this.devices.net;
  $state$jscomp$58$$[60] = this.get_state_pic();
  $state$jscomp$58$$[61] = this.devices.sb16;
  $state$jscomp$58$$[62] = this.fw_value;
  $state$jscomp$58$$[63] = this.devices.ioapic;
  $state$jscomp$58$$[64] = this.tss_size_32[0];
  $state$jscomp$58$$[66] = this.reg_xmm32s;
  $state$jscomp$58$$[67] = this.fpu_st;
  $state$jscomp$58$$[68] = this.fpu_stack_empty[0];
  $state$jscomp$58$$[69] = this.fpu_stack_ptr[0];
  $state$jscomp$58$$[70] = this.fpu_control_word[0];
  $state$jscomp$58$$[71] = this.fpu_ip[0];
  $state$jscomp$58$$[72] = this.fpu_ip_selector[0];
  $state$jscomp$58$$[73] = this.fpu_dp[0];
  $state$jscomp$58$$[74] = this.fpu_dp_selector[0];
  $state$jscomp$58$$[75] = this.fpu_opcode[0];
  const {packed_memory:$packed_memory$$, bitmap:$bitmap$jscomp$1$$} = this.pack_memory();
  $state$jscomp$58$$[77] = $packed_memory$$;
  $state$jscomp$58$$[78] = new Uint8Array($bitmap$jscomp$1$$.get_buffer());
  $state$jscomp$58$$[79] = this.devices.uart1;
  $state$jscomp$58$$[80] = this.devices.uart2;
  $state$jscomp$58$$[81] = this.devices.uart3;
  $state$jscomp$58$$[82] = this.devices.virtio_console;
  $state$jscomp$58$$[83] = this.devices.virtio_net;
  $state$jscomp$58$$[84] = this.devices.virtio_balloon;
  return $state$jscomp$58$$;
};
$CPU$$module$src$cpu$$.prototype.get_state_pic = function() {
  const $pic$$ = new Uint8Array(this.wasm_memory.buffer, this.get_pic_addr_master(), 13), $pic_slave$$ = new Uint8Array(this.wasm_memory.buffer, this.get_pic_addr_slave(), 13), $state$jscomp$59$$ = [], $state_slave$$ = [];
  $state$jscomp$59$$[0] = $pic$$[0];
  $state$jscomp$59$$[1] = $pic$$[1];
  $state$jscomp$59$$[2] = $pic$$[2];
  $state$jscomp$59$$[3] = $pic$$[3];
  $state$jscomp$59$$[4] = $pic$$[4];
  $state$jscomp$59$$[5] = $state_slave$$;
  $state$jscomp$59$$[6] = $pic$$[6];
  $state$jscomp$59$$[7] = $pic$$[7];
  $state$jscomp$59$$[8] = $pic$$[8];
  $state$jscomp$59$$[9] = $pic$$[9];
  $state$jscomp$59$$[10] = $pic$$[10];
  $state$jscomp$59$$[11] = $pic$$[11];
  $state$jscomp$59$$[12] = $pic$$[12];
  $state_slave$$[0] = $pic_slave$$[0];
  $state_slave$$[1] = $pic_slave$$[1];
  $state_slave$$[2] = $pic_slave$$[2];
  $state_slave$$[3] = $pic_slave$$[3];
  $state_slave$$[4] = $pic_slave$$[4];
  $state_slave$$[5] = null;
  $state_slave$$[6] = $pic_slave$$[6];
  $state_slave$$[7] = $pic_slave$$[7];
  $state_slave$$[8] = $pic_slave$$[8];
  $state_slave$$[9] = $pic_slave$$[9];
  $state_slave$$[10] = $pic_slave$$[10];
  $state_slave$$[11] = $pic_slave$$[11];
  $state_slave$$[12] = $pic_slave$$[12];
  return $state$jscomp$59$$;
};
$CPU$$module$src$cpu$$.prototype.set_state = function($state$jscomp$60$$) {
  this.memory_size[0] = $state$jscomp$60$$[0];
  this.mem8.length !== this.memory_size[0] && console.warn("Note: Memory size mismatch. we=" + this.mem8.length + " state=" + this.memory_size[0]);
  8 === $state$jscomp$60$$[1].length ? (this.segment_is_null.set($state$jscomp$60$$[1]), this.segment_access_bytes.fill(242), this.segment_access_bytes[1] = 250) : 16 === $state$jscomp$60$$[1].length ? (this.segment_is_null.set($state$jscomp$60$$[1].subarray(0, 8)), this.segment_access_bytes.set($state$jscomp$60$$[1].subarray(8, 16))) : $dbg_assert$$module$src$log$$("Unexpected cpu segment state length:" + $state$jscomp$60$$[1].length);
  this.segment_offsets.set($state$jscomp$60$$[2]);
  this.segment_limits.set($state$jscomp$60$$[3]);
  this.protected_mode[0] = $state$jscomp$60$$[4];
  this.idtr_offset[0] = $state$jscomp$60$$[5];
  this.idtr_size[0] = $state$jscomp$60$$[6];
  this.gdtr_offset[0] = $state$jscomp$60$$[7];
  this.gdtr_size[0] = $state$jscomp$60$$[8];
  this.page_fault[0] = $state$jscomp$60$$[9];
  this.cr.set($state$jscomp$60$$[10]);
  this.cpl[0] = $state$jscomp$60$$[11];
  this.is_32[0] = $state$jscomp$60$$[13];
  this.stack_size_32[0] = $state$jscomp$60$$[16];
  this.in_hlt[0] = $state$jscomp$60$$[17];
  this.last_virt_eip[0] = $state$jscomp$60$$[18];
  this.eip_phys[0] = $state$jscomp$60$$[19];
  this.sysenter_cs[0] = $state$jscomp$60$$[22];
  this.sysenter_eip[0] = $state$jscomp$60$$[23];
  this.sysenter_esp[0] = $state$jscomp$60$$[24];
  this.prefixes[0] = $state$jscomp$60$$[25];
  this.flags[0] = $state$jscomp$60$$[26];
  this.flags_changed[0] = $state$jscomp$60$$[27];
  this.last_op1[0] = $state$jscomp$60$$[28];
  this.last_op_size[0] = $state$jscomp$60$$[30];
  this.instruction_pointer[0] = $state$jscomp$60$$[37];
  this.previous_ip[0] = $state$jscomp$60$$[38];
  this.reg32.set($state$jscomp$60$$[39]);
  this.sreg.set($state$jscomp$60$$[40]);
  this.dreg.set($state$jscomp$60$$[41]);
  $state$jscomp$60$$[42] && this.reg_pdpte.set($state$jscomp$60$$[42]);
  this.set_tsc($state$jscomp$60$$[43][0], $state$jscomp$60$$[43][1]);
  this.devices.virtio_9p && this.devices.virtio_9p.set_state($state$jscomp$60$$[45]);
  this.devices.apic && this.devices.apic.set_state($state$jscomp$60$$[46]);
  this.devices.rtc && this.devices.rtc.set_state($state$jscomp$60$$[47]);
  this.devices.dma && this.devices.dma.set_state($state$jscomp$60$$[49]);
  this.devices.acpi && this.devices.acpi.set_state($state$jscomp$60$$[50]);
  this.devices.vga && this.devices.vga.set_state($state$jscomp$60$$[52]);
  this.devices.ps2 && this.devices.ps2.set_state($state$jscomp$60$$[53]);
  this.devices.uart0 && this.devices.uart0.set_state($state$jscomp$60$$[54]);
  this.devices.fdc && this.devices.fdc.set_state($state$jscomp$60$$[55]);
  $state$jscomp$60$$[56] || $state$jscomp$60$$[57] ? ($bitmap$jscomp$2_ide_config$jscomp$1$$ = [[void 0, void 0], [void 0, void 0]], $bitmap$jscomp$2_ide_config$jscomp$1$$[0][0] = $state$jscomp$60$$[56] ? {is_cdrom:!0, buffer:this.devices.cdrom.buffer} : {is_cdrom:!1, buffer:this.devices.ide.primary.master.buffer}, this.devices.ide = new $IDEController$$module$src$ide$$(this, this.devices.ide.bus, $bitmap$jscomp$2_ide_config$jscomp$1$$), this.devices.cdrom = $state$jscomp$60$$[56] ? this.devices.ide.primary.master : 
  void 0, this.devices.ide.primary.set_state($state$jscomp$60$$[56] || $state$jscomp$60$$[57])) : $state$jscomp$60$$[85] && this.devices.ide.set_state($state$jscomp$60$$[85]);
  this.devices.pci && this.devices.pci.set_state($state$jscomp$60$$[48]);
  this.devices.pit && this.devices.pit.set_state($state$jscomp$60$$[58]);
  this.devices.net && this.devices.net.set_state($state$jscomp$60$$[59]);
  this.set_state_pic($state$jscomp$60$$[60]);
  this.devices.sb16 && this.devices.sb16.set_state($state$jscomp$60$$[61]);
  this.devices.uart1 && this.devices.uart1.set_state($state$jscomp$60$$[79]);
  this.devices.uart2 && this.devices.uart2.set_state($state$jscomp$60$$[80]);
  this.devices.uart3 && this.devices.uart3.set_state($state$jscomp$60$$[81]);
  this.devices.virtio_console && this.devices.virtio_console.set_state($state$jscomp$60$$[82]);
  this.devices.virtio_net && this.devices.virtio_net.set_state($state$jscomp$60$$[83]);
  this.devices.virtio_balloon && this.devices.virtio_balloon.set_state($state$jscomp$60$$[84]);
  this.fw_value = $state$jscomp$60$$[62];
  this.devices.ioapic && this.devices.ioapic.set_state($state$jscomp$60$$[63]);
  this.tss_size_32[0] = $state$jscomp$60$$[64];
  this.reg_xmm32s.set($state$jscomp$60$$[66]);
  this.fpu_st.set($state$jscomp$60$$[67]);
  this.fpu_stack_empty[0] = $state$jscomp$60$$[68];
  this.fpu_stack_ptr[0] = $state$jscomp$60$$[69];
  this.fpu_control_word[0] = $state$jscomp$60$$[70];
  this.fpu_ip[0] = $state$jscomp$60$$[71];
  this.fpu_ip_selector[0] = $state$jscomp$60$$[72];
  this.fpu_dp[0] = $state$jscomp$60$$[73];
  this.fpu_dp_selector[0] = $state$jscomp$60$$[74];
  this.fpu_opcode[0] = $state$jscomp$60$$[75];
  var $bitmap$jscomp$2_ide_config$jscomp$1$$ = new $Bitmap$$module$src$lib$$($state$jscomp$60$$[78].buffer);
  this.unpack_memory($bitmap$jscomp$2_ide_config$jscomp$1$$, $state$jscomp$60$$[77]);
  this.update_state_flags();
  this.full_clear_tlb();
  this.jit_clear_cache();
};
$CPU$$module$src$cpu$$.prototype.set_state_pic = function($state$jscomp$61$$) {
  const $pic$jscomp$1$$ = new Uint8Array(this.wasm_memory.buffer, this.get_pic_addr_master(), 13), $pic_slave$jscomp$1$$ = new Uint8Array(this.wasm_memory.buffer, this.get_pic_addr_slave(), 13);
  $pic$jscomp$1$$[0] = $state$jscomp$61$$[0];
  $pic$jscomp$1$$[1] = $state$jscomp$61$$[1];
  $pic$jscomp$1$$[2] = $state$jscomp$61$$[2];
  $pic$jscomp$1$$[3] = $state$jscomp$61$$[3];
  $pic$jscomp$1$$[4] = $state$jscomp$61$$[4];
  const $state_slave$jscomp$1$$ = $state$jscomp$61$$[5];
  $pic$jscomp$1$$[6] = $state$jscomp$61$$[6];
  $pic$jscomp$1$$[7] = $state$jscomp$61$$[7];
  $pic$jscomp$1$$[8] = $state$jscomp$61$$[8];
  $pic$jscomp$1$$[9] = $state$jscomp$61$$[9];
  $pic$jscomp$1$$[10] = $state$jscomp$61$$[10];
  $pic$jscomp$1$$[11] = $state$jscomp$61$$[11];
  $pic$jscomp$1$$[12] = $state$jscomp$61$$[12];
  $pic_slave$jscomp$1$$[0] = $state_slave$jscomp$1$$[0];
  $pic_slave$jscomp$1$$[1] = $state_slave$jscomp$1$$[1];
  $pic_slave$jscomp$1$$[2] = $state_slave$jscomp$1$$[2];
  $pic_slave$jscomp$1$$[3] = $state_slave$jscomp$1$$[3];
  $pic_slave$jscomp$1$$[4] = $state_slave$jscomp$1$$[4];
  $pic_slave$jscomp$1$$[6] = $state_slave$jscomp$1$$[6];
  $pic_slave$jscomp$1$$[7] = $state_slave$jscomp$1$$[7];
  $pic_slave$jscomp$1$$[8] = $state_slave$jscomp$1$$[8];
  $pic_slave$jscomp$1$$[9] = $state_slave$jscomp$1$$[9];
  $pic_slave$jscomp$1$$[10] = $state_slave$jscomp$1$$[10];
  $pic_slave$jscomp$1$$[11] = $state_slave$jscomp$1$$[11];
  $pic_slave$jscomp$1$$[12] = $state_slave$jscomp$1$$[12];
};
$CPU$$module$src$cpu$$.prototype.pack_memory = function() {
  $dbg_assert$$module$src$log$$(0 === (this.mem8.length & 4095));
  var $bitmap$jscomp$3_page_count$$ = this.mem8.length >> 12, $nonzero_pages_offset$jscomp$79_page_contents$$ = [];
  for ($packed_memory$jscomp$2_page$$ = 0; $packed_memory$jscomp$2_page$$ < $bitmap$jscomp$3_page_count$$; $packed_memory$jscomp$2_page$$++) {
    this.is_memory_zeroed($packed_memory$jscomp$2_page$$ << 12, 4096) || $nonzero_pages_offset$jscomp$79_page_contents$$.push($packed_memory$jscomp$2_page$$);
  }
  $bitmap$jscomp$3_page_count$$ = new $Bitmap$$module$src$lib$$($bitmap$jscomp$3_page_count$$);
  var $packed_memory$jscomp$2_page$$ = new Uint8Array($nonzero_pages_offset$jscomp$79_page_contents$$.length << 12);
  for (const [$i$jscomp$98$$, $page$jscomp$1$$] of $nonzero_pages_offset$jscomp$79_page_contents$$.entries()) {
    $bitmap$jscomp$3_page_count$$.set($page$jscomp$1$$, 1), $nonzero_pages_offset$jscomp$79_page_contents$$ = $page$jscomp$1$$ << 12, $nonzero_pages_offset$jscomp$79_page_contents$$ = this.mem8.subarray($nonzero_pages_offset$jscomp$79_page_contents$$, $nonzero_pages_offset$jscomp$79_page_contents$$ + 4096), $packed_memory$jscomp$2_page$$.set($nonzero_pages_offset$jscomp$79_page_contents$$, $i$jscomp$98$$ << 12);
  }
  return {bitmap:$bitmap$jscomp$3_page_count$$, packed_memory:$packed_memory$jscomp$2_page$$};
};
$CPU$$module$src$cpu$$.prototype.unpack_memory = function($bitmap$jscomp$4$$, $packed_memory$jscomp$3$$) {
  this.zero_memory(0, this.memory_size[0]);
  const $page_count$jscomp$1$$ = this.memory_size[0] >> 12;
  let $packed_page$$ = 0;
  for (let $page$jscomp$2$$ = 0; $page$jscomp$2$$ < $page_count$jscomp$1$$; $page$jscomp$2$$++) {
    if ($bitmap$jscomp$4$$.get($page$jscomp$2$$)) {
      var $offset$jscomp$80_view$jscomp$33$$ = $packed_page$$ << 12;
      $offset$jscomp$80_view$jscomp$33$$ = $packed_memory$jscomp$3$$.subarray($offset$jscomp$80_view$jscomp$33$$, $offset$jscomp$80_view$jscomp$33$$ + 4096);
      this.mem8.set($offset$jscomp$80_view$jscomp$33$$, $page$jscomp$2$$ << 12);
      $packed_page$$++;
    }
  }
};
$CPU$$module$src$cpu$$.prototype.reboot_internal = function() {
  this.reset_cpu();
  this.fw_value = [];
  this.devices.virtio_9p && this.devices.virtio_9p.reset();
  this.devices.virtio_console && this.devices.virtio_console.reset();
  this.devices.virtio_net && this.devices.virtio_net.reset();
  this.devices.ps2 && this.devices.ps2.reset();
  this.load_bios();
};
$CPU$$module$src$cpu$$.prototype.reset_memory = function() {
  this.mem8.fill(0);
};
$CPU$$module$src$cpu$$.prototype.create_memory = function($size$jscomp$40$$, $memory_offset_minimum_size$$) {
  $size$jscomp$40$$ < $memory_offset_minimum_size$$ ? ($size$jscomp$40$$ = $memory_offset_minimum_size$$, $dbg_log$$module$src$log$$("Rounding memory size up to " + $size$jscomp$40$$, 2)) : 0 > ($size$jscomp$40$$ | 0) && ($size$jscomp$40$$ = Math.pow(2, 31) - 131072, $dbg_log$$module$src$log$$("Rounding memory size down to " + $size$jscomp$40$$, 2));
  $size$jscomp$40$$ = ($size$jscomp$40$$ - 1 | 131071) + 1 | 0;
  $dbg_assert$$module$src$log$$(0 < ($size$jscomp$40$$ | 0));
  $dbg_assert$$module$src$log$$(0 === ($size$jscomp$40$$ & 131071));
  console.assert(0 === this.memory_size[0], "Expected uninitialised memory");
  this.memory_size[0] = $size$jscomp$40$$;
  $memory_offset_minimum_size$$ = this.allocate_memory($size$jscomp$40$$);
  this.mem8 = $view$$module$src$lib$$(Uint8Array, this.wasm_memory, $memory_offset_minimum_size$$, $size$jscomp$40$$);
  this.mem32s = $view$$module$src$lib$$(Uint32Array, this.wasm_memory, $memory_offset_minimum_size$$, $size$jscomp$40$$ >> 2);
};
$CPU$$module$src$cpu$$.prototype.init = function($option_rom$jscomp$1_settings$jscomp$2$$, $device_bus$$) {
  this.create_memory($option_rom$jscomp$1_settings$jscomp$2$$.memory_size || 67108864, $option_rom$jscomp$1_settings$jscomp$2$$.initrd ? 67108864 : 1048576, );
  $option_rom$jscomp$1_settings$jscomp$2$$.disable_jit && this.set_jit_config(0, 1);
  $option_rom$jscomp$1_settings$jscomp$2$$.cpuid_level && this.set_cpuid_level($option_rom$jscomp$1_settings$jscomp$2$$.cpuid_level);
  this.acpi_enabled[0] = +$option_rom$jscomp$1_settings$jscomp$2$$.acpi;
  this.reset_cpu();
  var $ide_config$jscomp$2_io$jscomp$5$$ = new $IO$$module$src$io$$(this);
  this.io = $ide_config$jscomp$2_io$jscomp$5$$;
  this.bios.main = $option_rom$jscomp$1_settings$jscomp$2$$.bios;
  this.bios.vga = $option_rom$jscomp$1_settings$jscomp$2$$.vga_bios;
  this.load_bios();
  if ($option_rom$jscomp$1_settings$jscomp$2$$.bzimage) {
    const $option_rom$$ = $load_kernel$$module$src$kernel$$(this.mem8, $option_rom$jscomp$1_settings$jscomp$2$$.bzimage, $option_rom$jscomp$1_settings$jscomp$2$$.initrd, $option_rom$jscomp$1_settings$jscomp$2$$.cmdline || "");
    $option_rom$$ && this.option_roms.push($option_rom$$);
  }
  $ide_config$jscomp$2_io$jscomp$5$$.register_read(179, this, function() {
    $dbg_log$$module$src$log$$("port 0xB3 read");
    return 0;
  });
  var $a20_byte$$ = 0;
  $ide_config$jscomp$2_io$jscomp$5$$.register_read(146, this, function() {
    return $a20_byte$$;
  });
  $ide_config$jscomp$2_io$jscomp$5$$.register_write(146, this, function($out_byte$jscomp$14$$) {
    $a20_byte$$ = $out_byte$jscomp$14$$;
  });
  $ide_config$jscomp$2_io$jscomp$5$$.register_read(1297, this, function() {
    if (this.fw_pointer < this.fw_value.length) {
      return this.fw_value[this.fw_pointer++];
    }
    $dbg_assert$$module$src$log$$(!1, "config port: Read past value");
    return 0;
  });
  $ide_config$jscomp$2_io$jscomp$5$$.register_write(1296, this, void 0, function($buffer32_value$jscomp$196$$) {
    function $i32$$($x$jscomp$121$$) {
      return new Uint8Array(Int32Array.of($x$jscomp$121$$).buffer);
    }
    function $to_be16$$($x$jscomp$122$$) {
      return $x$jscomp$122$$ >> 8 | $x$jscomp$122$$ << 8 & 65280;
    }
    function $to_be32$$($x$jscomp$123$$) {
      return $x$jscomp$123$$ << 24 | $x$jscomp$123$$ << 8 & 16711680 | $x$jscomp$123$$ >> 8 & 65280 | $x$jscomp$123$$ >>> 24;
    }
    $dbg_log$$module$src$log$$("bios config port, index=" + $h$$module$src$lib$$($buffer32_value$jscomp$196$$));
    this.fw_pointer = 0;
    if (0 === $buffer32_value$jscomp$196$$) {
      this.fw_value = $i32$$(1431127377);
    } else {
      if (1 === $buffer32_value$jscomp$196$$) {
        this.fw_value = $i32$$(0);
      } else {
        if (3 === $buffer32_value$jscomp$196$$) {
          this.fw_value = $i32$$(this.memory_size[0]);
        } else {
          if (5 === $buffer32_value$jscomp$196$$) {
            this.fw_value = $i32$$(1);
          } else {
            if (15 === $buffer32_value$jscomp$196$$) {
              this.fw_value = $i32$$(1);
            } else {
              if (13 === $buffer32_value$jscomp$196$$) {
                this.fw_value = new Uint8Array(16);
              } else {
                if (25 === $buffer32_value$jscomp$196$$) {
                  $buffer32_value$jscomp$196$$ = new Int32Array(4 + 64 * this.option_roms.length);
                  const $buffer8$$ = new Uint8Array($buffer32_value$jscomp$196$$.buffer);
                  $buffer32_value$jscomp$196$$[0] = $to_be32$$(this.option_roms.length);
                  for (let $i$jscomp$99$$ = 0; $i$jscomp$99$$ < this.option_roms.length; $i$jscomp$99$$++) {
                    const {name:$name$jscomp$107$$, data:$data$jscomp$220$$} = this.option_roms[$i$jscomp$99$$], $file_struct_ptr$$ = 4 + 64 * $i$jscomp$99$$;
                    $dbg_assert$$module$src$log$$(65536 > 49152 + $i$jscomp$99$$);
                    $buffer32_value$jscomp$196$$[$file_struct_ptr$$ + 0 >> 2] = $to_be32$$($data$jscomp$220$$.length);
                    $buffer32_value$jscomp$196$$[$file_struct_ptr$$ + 4 >> 2] = $to_be16$$(49152 + $i$jscomp$99$$);
                    $dbg_assert$$module$src$log$$(56 > $name$jscomp$107$$.length);
                    for (let $j$jscomp$10$$ = 0; $j$jscomp$10$$ < $name$jscomp$107$$.length; $j$jscomp$10$$++) {
                      $buffer8$$[$file_struct_ptr$$ + 8 + $j$jscomp$10$$] = $name$jscomp$107$$.charCodeAt($j$jscomp$10$$);
                    }
                  }
                  this.fw_value = $buffer8$$;
                } else {
                  32768 <= $buffer32_value$jscomp$196$$ && 49152 > $buffer32_value$jscomp$196$$ ? this.fw_value = $i32$$(0) : 49152 <= $buffer32_value$jscomp$196$$ && $buffer32_value$jscomp$196$$ - 49152 < this.option_roms.length ? this.fw_value = this.option_roms[$buffer32_value$jscomp$196$$ - 49152].data : ($dbg_log$$module$src$log$$("Warning: Unimplemented fw index: " + $h$$module$src$lib$$($buffer32_value$jscomp$196$$)), this.fw_value = $i32$$(0));
                }
              }
            }
          }
        }
      }
    }
  });
  $ide_config$jscomp$2_io$jscomp$5$$.register_write(128, this, function() {
  });
  $ide_config$jscomp$2_io$jscomp$5$$.register_read(128, this, function() {
    return 255;
  });
  $ide_config$jscomp$2_io$jscomp$5$$.register_write(233, this, function() {
  });
  $ide_config$jscomp$2_io$jscomp$5$$.register_read(32, this, this.port20_read);
  $ide_config$jscomp$2_io$jscomp$5$$.register_read(33, this, this.port21_read);
  $ide_config$jscomp$2_io$jscomp$5$$.register_read(160, this, this.portA0_read);
  $ide_config$jscomp$2_io$jscomp$5$$.register_read(161, this, this.portA1_read);
  $ide_config$jscomp$2_io$jscomp$5$$.register_write(32, this, this.port20_write);
  $ide_config$jscomp$2_io$jscomp$5$$.register_write(33, this, this.port21_write);
  $ide_config$jscomp$2_io$jscomp$5$$.register_write(160, this, this.portA0_write);
  $ide_config$jscomp$2_io$jscomp$5$$.register_write(161, this, this.portA1_write);
  $ide_config$jscomp$2_io$jscomp$5$$.register_read(1232, this, this.port4D0_read);
  $ide_config$jscomp$2_io$jscomp$5$$.register_read(1233, this, this.port4D1_read);
  $ide_config$jscomp$2_io$jscomp$5$$.register_write(1232, this, this.port4D0_write);
  $ide_config$jscomp$2_io$jscomp$5$$.register_write(1233, this, this.port4D1_write);
  this.devices = {};
  $option_rom$jscomp$1_settings$jscomp$2$$.load_devices && (this.devices.pci = new $PCI$$module$src$pci$$(this), this.acpi_enabled[0] && (this.devices.ioapic = new $IOAPIC$$module$src$ioapic$$(this), this.devices.apic = new $APIC$$module$src$apic$$(this), this.devices.acpi = new $ACPI$$module$src$acpi$$(this)), this.devices.rtc = new $RTC$$module$src$rtc$$(this), this.fill_cmos(this.devices.rtc, $option_rom$jscomp$1_settings$jscomp$2$$), this.devices.dma = new $DMA$$module$src$dma$$(this), this.devices.vga = 
  new $VGAScreen$$module$src$vga$$(this, $device_bus$$, $option_rom$jscomp$1_settings$jscomp$2$$.screen, $option_rom$jscomp$1_settings$jscomp$2$$.vga_memory_size || 8388608), this.devices.ps2 = new $PS2$$module$src$ps2$$(this, $device_bus$$), this.devices.uart0 = new $UART$$module$src$uart$$(this, 1016, $device_bus$$), $option_rom$jscomp$1_settings$jscomp$2$$.uart1 && (this.devices.uart1 = new $UART$$module$src$uart$$(this, 760, $device_bus$$)), $option_rom$jscomp$1_settings$jscomp$2$$.uart2 && (this.devices.uart2 = 
  new $UART$$module$src$uart$$(this, 1E3, $device_bus$$)), $option_rom$jscomp$1_settings$jscomp$2$$.uart3 && (this.devices.uart3 = new $UART$$module$src$uart$$(this, 744, $device_bus$$)), this.devices.fdc = new $FloppyController$$module$src$floppy$$(this, $option_rom$jscomp$1_settings$jscomp$2$$.fda, $option_rom$jscomp$1_settings$jscomp$2$$.fdb), $ide_config$jscomp$2_io$jscomp$5$$ = [[void 0, void 0], [void 0, void 0]], $option_rom$jscomp$1_settings$jscomp$2$$.hda && ($ide_config$jscomp$2_io$jscomp$5$$[0][0] = 
  {buffer:$option_rom$jscomp$1_settings$jscomp$2$$.hda}, $ide_config$jscomp$2_io$jscomp$5$$[0][1] = {buffer:$option_rom$jscomp$1_settings$jscomp$2$$.hdb}), $ide_config$jscomp$2_io$jscomp$5$$[1][0] = {is_cdrom:!0, buffer:$option_rom$jscomp$1_settings$jscomp$2$$.cdrom}, this.devices.ide = new $IDEController$$module$src$ide$$(this, $device_bus$$, $ide_config$jscomp$2_io$jscomp$5$$), this.devices.cdrom = this.devices.ide.secondary.master, this.devices.pit = new $PIT$$module$src$pit$$(this, $device_bus$$), 
  "ne2k" === $option_rom$jscomp$1_settings$jscomp$2$$.net_device.type ? this.devices.net = new $Ne2k$$module$src$ne2k$$(this, $device_bus$$, $option_rom$jscomp$1_settings$jscomp$2$$.preserve_mac_from_state_image, $option_rom$jscomp$1_settings$jscomp$2$$.mac_address_translation) : "virtio" === $option_rom$jscomp$1_settings$jscomp$2$$.net_device.type && (this.devices.virtio_net = new $VirtioNet$$module$src$virtio_net$$(this, $device_bus$$, $option_rom$jscomp$1_settings$jscomp$2$$.preserve_mac_from_state_image)), 
  $option_rom$jscomp$1_settings$jscomp$2$$.fs9p && (this.devices.virtio_9p = new $Virtio9p$$module$lib$9p$$($option_rom$jscomp$1_settings$jscomp$2$$.fs9p, this, $device_bus$$)), $option_rom$jscomp$1_settings$jscomp$2$$.virtio_console && (this.devices.virtio_console = new $VirtioConsole$$module$src$virtio_console$$(this, $device_bus$$)), $option_rom$jscomp$1_settings$jscomp$2$$.virtio_balloon && (this.devices.virtio_balloon = new $VirtioBalloon$$module$src$virtio_balloon$$(this, $device_bus$$)), this.devices.sb16 = 
  new $SB16$$module$src$sb16$$(this, $device_bus$$));
  $option_rom$jscomp$1_settings$jscomp$2$$.multiboot && ($dbg_log$$module$src$log$$("loading multiboot", 2), $option_rom$jscomp$1_settings$jscomp$2$$ = this.load_multiboot_option_rom($option_rom$jscomp$1_settings$jscomp$2$$.multiboot, $option_rom$jscomp$1_settings$jscomp$2$$.initrd, $option_rom$jscomp$1_settings$jscomp$2$$.cmdline)) && (this.bios.main ? ($dbg_log$$module$src$log$$("adding option rom for multiboot", 2), this.option_roms.push($option_rom$jscomp$1_settings$jscomp$2$$)) : ($dbg_log$$module$src$log$$("loaded multiboot without bios", 
  2), this.reg32[0] = this.io.port_read32(244)));
  this.debug.init();
};
$CPU$$module$src$cpu$$.prototype.load_multiboot = function($buffer$jscomp$57$$) {
  this.bios.main && $dbg_assert$$module$src$log$$(!1, "load_multiboot not supported with BIOS");
  this.load_multiboot_option_rom($buffer$jscomp$57$$, void 0, "") && ($dbg_log$$module$src$log$$("loaded multiboot", 2), this.reg32[0] = this.io.port_read32(244));
};
$CPU$$module$src$cpu$$.prototype.load_multiboot_option_rom = function($buffer$jscomp$58$$, $initrd$jscomp$2$$, $cmdline$jscomp$1$$) {
  $dbg_log$$module$src$log$$("Trying multiboot from buffer of size " + $buffer$jscomp$58$$.byteLength, 2);
  if (8192 > $buffer$jscomp$58$$.byteLength) {
    var $buf32$$ = new Int32Array(2048);
    (new Uint8Array($buf32$$.buffer)).set(new Uint8Array($buffer$jscomp$58$$));
  } else {
    $buf32$$ = new Int32Array($buffer$jscomp$58$$, 0, 2048);
  }
  for (var $offset$jscomp$81$$ = 0; 8192 > $offset$jscomp$81$$; $offset$jscomp$81$$ += 4) {
    if (464367618 === $buf32$$[$offset$jscomp$81$$ >> 2]) {
      var $flags$jscomp$16$$ = $buf32$$[$offset$jscomp$81$$ + 4 >> 2];
      if (464367618 + $flags$jscomp$16$$ + $buf32$$[$offset$jscomp$81$$ + 8 >> 2] | 0) {
        $dbg_log$$module$src$log$$("Multiboot checksum check failed", 2);
        continue;
      }
    } else {
      continue;
    }
    $dbg_log$$module$src$log$$("Multiboot magic found, flags: " + $h$$module$src$lib$$($flags$jscomp$16$$ >>> 0, 8), 2);
    $dbg_assert$$module$src$log$$(0 === ($flags$jscomp$16$$ & -65540), "TODO");
    var $cpu$jscomp$28$$ = this;
    this.io.register_read(244, this, function() {
      return 0;
    }, function() {
      return 0;
    }, function() {
      var $i$jscomp$102_multiboot_data$$ = 31860, $entry_addr_entrypoint_info$jscomp$1_program_headers$jscomp$inline_417$$ = 0;
      $cmdline$jscomp$1$$ && ($entry_addr_entrypoint_info$jscomp$1_program_headers$jscomp$inline_417$$ |= 4, $cpu$jscomp$28$$.write32(31760, $i$jscomp$102_multiboot_data$$), $cmdline$jscomp$1$$ += "\x00", $cmdline_utf8_length$jscomp$32_multiboot_mmap_count_top_of_load$$ = (new TextEncoder).encode($cmdline$jscomp$1$$), $cpu$jscomp$28$$.write_blob($cmdline_utf8_length$jscomp$32_multiboot_mmap_count_top_of_load$$, $i$jscomp$102_multiboot_data$$), $i$jscomp$102_multiboot_data$$ += $cmdline_utf8_length$jscomp$32_multiboot_mmap_count_top_of_load$$.length);
      if ($flags$jscomp$16$$ & 2) {
        $entry_addr_entrypoint_info$jscomp$1_program_headers$jscomp$inline_417$$ |= 64;
        $cmdline_utf8_length$jscomp$32_multiboot_mmap_count_top_of_load$$ = 0;
        $cpu$jscomp$28$$.write32(31788, 0);
        $cpu$jscomp$28$$.write32(31792, $i$jscomp$102_multiboot_data$$);
        var $start$jscomp$42_view$jscomp$inline_414$$ = 0;
        let $was_memory$$ = !1;
        for (let $addr$jscomp$58$$ = 0; 4294967296 > $addr$jscomp$58$$; $addr$jscomp$58$$ += 131072) {
          $was_memory$$ && void 0 !== $cpu$jscomp$28$$.memory_map_read8[$addr$jscomp$58$$ >>> 17] ? ($cpu$jscomp$28$$.write32($i$jscomp$102_multiboot_data$$, 20), $cpu$jscomp$28$$.write32($i$jscomp$102_multiboot_data$$ + 4, $start$jscomp$42_view$jscomp$inline_414$$), $cpu$jscomp$28$$.write32($i$jscomp$102_multiboot_data$$ + 8, 0), $cpu$jscomp$28$$.write32($i$jscomp$102_multiboot_data$$ + 12, $addr$jscomp$58$$ - $start$jscomp$42_view$jscomp$inline_414$$), $cpu$jscomp$28$$.write32($i$jscomp$102_multiboot_data$$ + 
          16, 0), $cpu$jscomp$28$$.write32($i$jscomp$102_multiboot_data$$ + 20, 1), $i$jscomp$102_multiboot_data$$ += 24, $cmdline_utf8_length$jscomp$32_multiboot_mmap_count_top_of_load$$ += 24, $was_memory$$ = !1) : $was_memory$$ || void 0 !== $cpu$jscomp$28$$.memory_map_read8[$addr$jscomp$58$$ >>> 17] || ($start$jscomp$42_view$jscomp$inline_414$$ = $addr$jscomp$58$$, $was_memory$$ = !0);
        }
        $dbg_assert$$module$src$log$$(!$was_memory$$, "top of 4GB shouldn't have memory");
        $cpu$jscomp$28$$.write32(31788, $cmdline_utf8_length$jscomp$32_multiboot_mmap_count_top_of_load$$);
      }
      $cpu$jscomp$28$$.write32(31744, $entry_addr_entrypoint_info$jscomp$1_program_headers$jscomp$inline_417$$);
      var $cmdline_utf8_length$jscomp$32_multiboot_mmap_count_top_of_load$$ = $entry_addr_entrypoint_info$jscomp$1_program_headers$jscomp$inline_417$$ = 0;
      if ($flags$jscomp$16$$ & 65536) {
        $dbg_log$$module$src$log$$("Multiboot specifies its own address table", 2);
        var $blob$jscomp$17_file_start_header_addr_key$jscomp$inline_419_sections_headers$jscomp$inline_418$$ = $buf32$$[$offset$jscomp$81$$ + 12 >> 2];
        var $JSCompiler_object_inline_program_headers_484_blob$jscomp$18_load_addr_section$jscomp$inline_421$$ = $buf32$$[$offset$jscomp$81$$ + 16 >> 2];
        var $load_end_addr_program$jscomp$64_ramdisk_address$jscomp$1$$ = $buf32$$[$offset$jscomp$81$$ + 20 >> 2];
        var $JSCompiler_object_inline_header_483_bss_end_addr_program$jscomp$inline_420_ramdisk_top$$ = $buf32$$[$offset$jscomp$81$$ + 24 >> 2];
        $entry_addr_entrypoint_info$jscomp$1_program_headers$jscomp$inline_417$$ = $buf32$$[$offset$jscomp$81$$ + 28 >> 2];
        $dbg_log$$module$src$log$$("header=" + $h$$module$src$lib$$($blob$jscomp$17_file_start_header_addr_key$jscomp$inline_419_sections_headers$jscomp$inline_418$$, 8) + " load=" + $h$$module$src$lib$$($JSCompiler_object_inline_program_headers_484_blob$jscomp$18_load_addr_section$jscomp$inline_421$$, 8) + " load_end=" + $h$$module$src$lib$$($load_end_addr_program$jscomp$64_ramdisk_address$jscomp$1$$, 8) + " bss_end=" + $h$$module$src$lib$$($JSCompiler_object_inline_header_483_bss_end_addr_program$jscomp$inline_420_ramdisk_top$$, 
        8) + " entry=" + $h$$module$src$lib$$($entry_addr_entrypoint_info$jscomp$1_program_headers$jscomp$inline_417$$, 8));
        $dbg_assert$$module$src$log$$($JSCompiler_object_inline_program_headers_484_blob$jscomp$18_load_addr_section$jscomp$inline_421$$ <= $blob$jscomp$17_file_start_header_addr_key$jscomp$inline_419_sections_headers$jscomp$inline_418$$);
        $blob$jscomp$17_file_start_header_addr_key$jscomp$inline_419_sections_headers$jscomp$inline_418$$ = $offset$jscomp$81$$ - ($blob$jscomp$17_file_start_header_addr_key$jscomp$inline_419_sections_headers$jscomp$inline_418$$ - $JSCompiler_object_inline_program_headers_484_blob$jscomp$18_load_addr_section$jscomp$inline_421$$);
        0 === $load_end_addr_program$jscomp$64_ramdisk_address$jscomp$1$$ ? $cmdline_utf8_length$jscomp$32_multiboot_mmap_count_top_of_load$$ = void 0 : ($dbg_assert$$module$src$log$$($load_end_addr_program$jscomp$64_ramdisk_address$jscomp$1$$ >= $JSCompiler_object_inline_program_headers_484_blob$jscomp$18_load_addr_section$jscomp$inline_421$$), $cmdline_utf8_length$jscomp$32_multiboot_mmap_count_top_of_load$$ = $load_end_addr_program$jscomp$64_ramdisk_address$jscomp$1$$ - $JSCompiler_object_inline_program_headers_484_blob$jscomp$18_load_addr_section$jscomp$inline_421$$);
        $blob$jscomp$17_file_start_header_addr_key$jscomp$inline_419_sections_headers$jscomp$inline_418$$ = new Uint8Array($buffer$jscomp$58$$, $blob$jscomp$17_file_start_header_addr_key$jscomp$inline_419_sections_headers$jscomp$inline_418$$, $cmdline_utf8_length$jscomp$32_multiboot_mmap_count_top_of_load$$);
        $cpu$jscomp$28$$.write_blob($blob$jscomp$17_file_start_header_addr_key$jscomp$inline_419_sections_headers$jscomp$inline_418$$, $JSCompiler_object_inline_program_headers_484_blob$jscomp$18_load_addr_section$jscomp$inline_421$$);
        $entry_addr_entrypoint_info$jscomp$1_program_headers$jscomp$inline_417$$ |= 0;
        $cmdline_utf8_length$jscomp$32_multiboot_mmap_count_top_of_load$$ = Math.max($load_end_addr_program$jscomp$64_ramdisk_address$jscomp$1$$, $JSCompiler_object_inline_header_483_bss_end_addr_program$jscomp$inline_420_ramdisk_top$$);
      } else {
        if (1179403647 === $buf32$$[0]) {
          $dbg_log$$module$src$log$$("Multiboot image is in elf format", 2);
          $start$jscomp$42_view$jscomp$inline_414$$ = new DataView($buffer$jscomp$58$$);
          const [$header$jscomp$inline_415$$, $offset$jscomp$inline_416$$] = $read_struct$$module$src$elf$$($start$jscomp$42_view$jscomp$inline_414$$, $Header$$module$src$elf$$);
          console.assert(52 === $offset$jscomp$inline_416$$);
          for ($blob$jscomp$17_file_start_header_addr_key$jscomp$inline_419_sections_headers$jscomp$inline_418$$ of Object.keys($header$jscomp$inline_415$$)) {
            $dbg_log$$module$src$log$$($blob$jscomp$17_file_start_header_addr_key$jscomp$inline_419_sections_headers$jscomp$inline_418$$ + ": 0x" + ($header$jscomp$inline_415$$[$blob$jscomp$17_file_start_header_addr_key$jscomp$inline_419_sections_headers$jscomp$inline_418$$].toString(16) >>> 0));
          }
          console.assert(1179403647 === $header$jscomp$inline_415$$.magic, "Bad magic");
          console.assert(1 === $header$jscomp$inline_415$$.class, "Unimplemented: 64 bit elf");
          console.assert(1 === $header$jscomp$inline_415$$.data, "Unimplemented: big endian");
          console.assert(1 === $header$jscomp$inline_415$$.version0, "Bad version0");
          console.assert(2 === $header$jscomp$inline_415$$.type, "Unimplemented type");
          console.assert(1 === $header$jscomp$inline_415$$.version1, "Bad version1");
          console.assert(52 === $header$jscomp$inline_415$$.ehsize, "Bad header size");
          console.assert(32 === $header$jscomp$inline_415$$.phentsize, "Bad program header size");
          console.assert(40 === $header$jscomp$inline_415$$.shentsize, "Bad section header size");
          [$entry_addr_entrypoint_info$jscomp$1_program_headers$jscomp$inline_417$$] = $read_structs$$module$src$elf$$(new DataView($start$jscomp$42_view$jscomp$inline_414$$.buffer, $start$jscomp$42_view$jscomp$inline_414$$.byteOffset + $header$jscomp$inline_415$$.phoff, $header$jscomp$inline_415$$.phentsize * $header$jscomp$inline_415$$.phnum), $ProgramHeader$$module$src$elf$$, $header$jscomp$inline_415$$.phnum);
          [$blob$jscomp$17_file_start_header_addr_key$jscomp$inline_419_sections_headers$jscomp$inline_418$$] = $read_structs$$module$src$elf$$(new DataView($start$jscomp$42_view$jscomp$inline_414$$.buffer, $start$jscomp$42_view$jscomp$inline_414$$.byteOffset + $header$jscomp$inline_415$$.shoff, $header$jscomp$inline_415$$.shentsize * $header$jscomp$inline_415$$.shnum), $SectionHeader$$module$src$elf$$, $header$jscomp$inline_415$$.shnum);
          if ($LOG_LEVEL$$module$src$log$$) {
            console.log("%d program headers:", $entry_addr_entrypoint_info$jscomp$1_program_headers$jscomp$inline_417$$.length);
            for ($JSCompiler_object_inline_header_483_bss_end_addr_program$jscomp$inline_420_ramdisk_top$$ of $entry_addr_entrypoint_info$jscomp$1_program_headers$jscomp$inline_417$$) {
              console.log("type=%s offset=%s vaddr=%s paddr=%s filesz=%s memsz=%s flags=%s align=%s", $JSCompiler_object_inline_header_483_bss_end_addr_program$jscomp$inline_420_ramdisk_top$$.type.toString(16), $JSCompiler_object_inline_header_483_bss_end_addr_program$jscomp$inline_420_ramdisk_top$$.offset.toString(16), $JSCompiler_object_inline_header_483_bss_end_addr_program$jscomp$inline_420_ramdisk_top$$.vaddr.toString(16), $JSCompiler_object_inline_header_483_bss_end_addr_program$jscomp$inline_420_ramdisk_top$$.paddr.toString(16), 
              $JSCompiler_object_inline_header_483_bss_end_addr_program$jscomp$inline_420_ramdisk_top$$.filesz.toString(16), $JSCompiler_object_inline_header_483_bss_end_addr_program$jscomp$inline_420_ramdisk_top$$.memsz.toString(16), $JSCompiler_object_inline_header_483_bss_end_addr_program$jscomp$inline_420_ramdisk_top$$.flags.toString(16), $JSCompiler_object_inline_header_483_bss_end_addr_program$jscomp$inline_420_ramdisk_top$$.align.toString(16));
            }
            console.log("%d section headers:", $blob$jscomp$17_file_start_header_addr_key$jscomp$inline_419_sections_headers$jscomp$inline_418$$.length);
            for ($JSCompiler_object_inline_program_headers_484_blob$jscomp$18_load_addr_section$jscomp$inline_421$$ of $blob$jscomp$17_file_start_header_addr_key$jscomp$inline_419_sections_headers$jscomp$inline_418$$) {
              console.log("name=%s type=%s flags=%s addr=%s offset=%s size=%s link=%s info=%s addralign=%s entsize=%s", $JSCompiler_object_inline_program_headers_484_blob$jscomp$18_load_addr_section$jscomp$inline_421$$.name.toString(16), $JSCompiler_object_inline_program_headers_484_blob$jscomp$18_load_addr_section$jscomp$inline_421$$.type.toString(16), $JSCompiler_object_inline_program_headers_484_blob$jscomp$18_load_addr_section$jscomp$inline_421$$.flags.toString(16), $JSCompiler_object_inline_program_headers_484_blob$jscomp$18_load_addr_section$jscomp$inline_421$$.addr.toString(16), 
              $JSCompiler_object_inline_program_headers_484_blob$jscomp$18_load_addr_section$jscomp$inline_421$$.offset.toString(16), $JSCompiler_object_inline_program_headers_484_blob$jscomp$18_load_addr_section$jscomp$inline_421$$.size.toString(16), $JSCompiler_object_inline_program_headers_484_blob$jscomp$18_load_addr_section$jscomp$inline_421$$.link.toString(16), $JSCompiler_object_inline_program_headers_484_blob$jscomp$18_load_addr_section$jscomp$inline_421$$.info.toString(16), $JSCompiler_object_inline_program_headers_484_blob$jscomp$18_load_addr_section$jscomp$inline_421$$.addralign.toString(16), 
              $JSCompiler_object_inline_program_headers_484_blob$jscomp$18_load_addr_section$jscomp$inline_421$$.entsize.toString(16));
            }
          }
          $JSCompiler_object_inline_header_483_bss_end_addr_program$jscomp$inline_420_ramdisk_top$$ = $header$jscomp$inline_415$$;
          $JSCompiler_object_inline_program_headers_484_blob$jscomp$18_load_addr_section$jscomp$inline_421$$ = $entry_addr_entrypoint_info$jscomp$1_program_headers$jscomp$inline_417$$;
          $entry_addr_entrypoint_info$jscomp$1_program_headers$jscomp$inline_417$$ = $JSCompiler_object_inline_header_483_bss_end_addr_program$jscomp$inline_420_ramdisk_top$$.entry;
          for ($load_end_addr_program$jscomp$64_ramdisk_address$jscomp$1$$ of $JSCompiler_object_inline_program_headers_484_blob$jscomp$18_load_addr_section$jscomp$inline_421$$) {
            0 !== $load_end_addr_program$jscomp$64_ramdisk_address$jscomp$1$$.type && (1 === $load_end_addr_program$jscomp$64_ramdisk_address$jscomp$1$$.type ? ($dbg_assert$$module$src$log$$($load_end_addr_program$jscomp$64_ramdisk_address$jscomp$1$$.filesz <= $load_end_addr_program$jscomp$64_ramdisk_address$jscomp$1$$.memsz), $load_end_addr_program$jscomp$64_ramdisk_address$jscomp$1$$.paddr + $load_end_addr_program$jscomp$64_ramdisk_address$jscomp$1$$.memsz < $cpu$jscomp$28$$.memory_size[0] ? ($load_end_addr_program$jscomp$64_ramdisk_address$jscomp$1$$.filesz && 
            ($JSCompiler_object_inline_program_headers_484_blob$jscomp$18_load_addr_section$jscomp$inline_421$$ = new Uint8Array($buffer$jscomp$58$$, $load_end_addr_program$jscomp$64_ramdisk_address$jscomp$1$$.offset, $load_end_addr_program$jscomp$64_ramdisk_address$jscomp$1$$.filesz), $cpu$jscomp$28$$.write_blob($JSCompiler_object_inline_program_headers_484_blob$jscomp$18_load_addr_section$jscomp$inline_421$$, $load_end_addr_program$jscomp$64_ramdisk_address$jscomp$1$$.paddr)), $cmdline_utf8_length$jscomp$32_multiboot_mmap_count_top_of_load$$ = 
            Math.max($cmdline_utf8_length$jscomp$32_multiboot_mmap_count_top_of_load$$, $load_end_addr_program$jscomp$64_ramdisk_address$jscomp$1$$.paddr + $load_end_addr_program$jscomp$64_ramdisk_address$jscomp$1$$.memsz), $dbg_log$$module$src$log$$("prg load " + $load_end_addr_program$jscomp$64_ramdisk_address$jscomp$1$$.paddr + " to " + ($load_end_addr_program$jscomp$64_ramdisk_address$jscomp$1$$.paddr + $load_end_addr_program$jscomp$64_ramdisk_address$jscomp$1$$.memsz), 2), $entry_addr_entrypoint_info$jscomp$1_program_headers$jscomp$inline_417$$ === 
            $JSCompiler_object_inline_header_483_bss_end_addr_program$jscomp$inline_420_ramdisk_top$$.entry && $load_end_addr_program$jscomp$64_ramdisk_address$jscomp$1$$.vaddr <= $entry_addr_entrypoint_info$jscomp$1_program_headers$jscomp$inline_417$$ && $load_end_addr_program$jscomp$64_ramdisk_address$jscomp$1$$.vaddr + $load_end_addr_program$jscomp$64_ramdisk_address$jscomp$1$$.memsz > $entry_addr_entrypoint_info$jscomp$1_program_headers$jscomp$inline_417$$ && ($entry_addr_entrypoint_info$jscomp$1_program_headers$jscomp$inline_417$$ = 
            $entry_addr_entrypoint_info$jscomp$1_program_headers$jscomp$inline_417$$ - $load_end_addr_program$jscomp$64_ramdisk_address$jscomp$1$$.vaddr + $load_end_addr_program$jscomp$64_ramdisk_address$jscomp$1$$.paddr)) : $dbg_log$$module$src$log$$("Warning: Skipped loading section, paddr=" + $h$$module$src$lib$$($load_end_addr_program$jscomp$64_ramdisk_address$jscomp$1$$.paddr) + " memsz=" + $load_end_addr_program$jscomp$64_ramdisk_address$jscomp$1$$.memsz, 2)) : 2 === $load_end_addr_program$jscomp$64_ramdisk_address$jscomp$1$$.type || 
            3 === $load_end_addr_program$jscomp$64_ramdisk_address$jscomp$1$$.type || 4 === $load_end_addr_program$jscomp$64_ramdisk_address$jscomp$1$$.type || 6 === $load_end_addr_program$jscomp$64_ramdisk_address$jscomp$1$$.type || 7 === $load_end_addr_program$jscomp$64_ramdisk_address$jscomp$1$$.type || 1685382480 === $load_end_addr_program$jscomp$64_ramdisk_address$jscomp$1$$.type || 1685382481 === $load_end_addr_program$jscomp$64_ramdisk_address$jscomp$1$$.type || 1685382482 === $load_end_addr_program$jscomp$64_ramdisk_address$jscomp$1$$.type || 
            1685382483 === $load_end_addr_program$jscomp$64_ramdisk_address$jscomp$1$$.type ? $dbg_log$$module$src$log$$("skip load type " + $load_end_addr_program$jscomp$64_ramdisk_address$jscomp$1$$.type + " " + $load_end_addr_program$jscomp$64_ramdisk_address$jscomp$1$$.paddr + " to " + ($load_end_addr_program$jscomp$64_ramdisk_address$jscomp$1$$.paddr + $load_end_addr_program$jscomp$64_ramdisk_address$jscomp$1$$.memsz), 2) : $dbg_assert$$module$src$log$$(!1, "unimplemented elf section type: " + 
            $h$$module$src$lib$$($load_end_addr_program$jscomp$64_ramdisk_address$jscomp$1$$.type)));
          }
        } else {
          $dbg_assert$$module$src$log$$(!1, "Not a bootable multiboot format");
        }
      }
      $initrd$jscomp$2$$ && ($cpu$jscomp$28$$.write32(31764, 1), $cpu$jscomp$28$$.write32(31768, $i$jscomp$102_multiboot_data$$), $load_end_addr_program$jscomp$64_ramdisk_address$jscomp$1$$ = $cmdline_utf8_length$jscomp$32_multiboot_mmap_count_top_of_load$$, 0 !== ($load_end_addr_program$jscomp$64_ramdisk_address$jscomp$1$$ & 4095) && ($load_end_addr_program$jscomp$64_ramdisk_address$jscomp$1$$ = ($load_end_addr_program$jscomp$64_ramdisk_address$jscomp$1$$ & -4096) + 4096), $dbg_log$$module$src$log$$("ramdisk address " + 
      $load_end_addr_program$jscomp$64_ramdisk_address$jscomp$1$$), $JSCompiler_object_inline_header_483_bss_end_addr_program$jscomp$inline_420_ramdisk_top$$ = $load_end_addr_program$jscomp$64_ramdisk_address$jscomp$1$$ + $initrd$jscomp$2$$.byteLength, $cpu$jscomp$28$$.write32($i$jscomp$102_multiboot_data$$, $load_end_addr_program$jscomp$64_ramdisk_address$jscomp$1$$), $cpu$jscomp$28$$.write32($i$jscomp$102_multiboot_data$$ + 4, $JSCompiler_object_inline_header_483_bss_end_addr_program$jscomp$inline_420_ramdisk_top$$), 
      $cpu$jscomp$28$$.write32($i$jscomp$102_multiboot_data$$ + 8, 0), $cpu$jscomp$28$$.write32($i$jscomp$102_multiboot_data$$ + 12, 0), $dbg_assert$$module$src$log$$($JSCompiler_object_inline_header_483_bss_end_addr_program$jscomp$inline_420_ramdisk_top$$ < $cpu$jscomp$28$$.memory_size[0]), $cpu$jscomp$28$$.write_blob(new Uint8Array($initrd$jscomp$2$$), $load_end_addr_program$jscomp$64_ramdisk_address$jscomp$1$$));
      $cpu$jscomp$28$$.reg32[3] = 31744;
      $cpu$jscomp$28$$.cr[0] = 1;
      $cpu$jscomp$28$$.protected_mode[0] = 1;
      $cpu$jscomp$28$$.flags[0] = 2;
      $cpu$jscomp$28$$.is_32[0] = 1;
      $cpu$jscomp$28$$.stack_size_32[0] = 1;
      for ($i$jscomp$102_multiboot_data$$ = 0; 6 > $i$jscomp$102_multiboot_data$$; $i$jscomp$102_multiboot_data$$++) {
        $cpu$jscomp$28$$.segment_is_null[$i$jscomp$102_multiboot_data$$] = 0, $cpu$jscomp$28$$.segment_offsets[$i$jscomp$102_multiboot_data$$] = 0, $cpu$jscomp$28$$.segment_limits[$i$jscomp$102_multiboot_data$$] = 4294967295, $cpu$jscomp$28$$.sreg[$i$jscomp$102_multiboot_data$$] = 45058;
      }
      $cpu$jscomp$28$$.instruction_pointer[0] = $cpu$jscomp$28$$.get_seg_cs() + $entry_addr_entrypoint_info$jscomp$1_program_headers$jscomp$inline_417$$ | 0;
      $cpu$jscomp$28$$.update_state_flags();
      $dbg_log$$module$src$log$$("Starting multiboot kernel at:", 2);
      $cpu$jscomp$28$$.debug.dump_state();
      $cpu$jscomp$28$$.debug.dump_regs();
      return 732803074;
    });
    this.io.register_write_consecutive(244, this, function($value$jscomp$197$$) {
      console.log("Test exited with code " + $h$$module$src$lib$$($value$jscomp$197$$, 2));
      throw "HALT";
    }, function() {
    }, function() {
    }, function() {
    });
    for (let $i$jscomp$103$$ = 0; 15 >= $i$jscomp$103$$; $i$jscomp$103$$++) {
      function $handle_write$$($value$jscomp$198$$) {
        $dbg_log$$module$src$log$$("kvm-unit-test: Set irq " + $h$$module$src$lib$$($i$jscomp$103$$) + " to " + $h$$module$src$lib$$($value$jscomp$198$$, 2));
        $value$jscomp$198$$ ? this.device_raise_irq($i$jscomp$103$$) : this.device_lower_irq($i$jscomp$103$$);
      }
      this.io.register_write(8192 + $i$jscomp$103$$, this, $handle_write$$, $handle_write$$, $handle_write$$);
    }
    const $data8$jscomp$1$$ = new Uint8Array(512);
    (new Uint16Array($data8$jscomp$1$$.buffer))[0] = 43605;
    $data8$jscomp$1$$[2] = 1;
    var $checksum_index$jscomp$1_i$jscomp$101$$ = 3;
    $data8$jscomp$1$$[$checksum_index$jscomp$1_i$jscomp$101$$++] = 102;
    $data8$jscomp$1$$[$checksum_index$jscomp$1_i$jscomp$101$$++] = 229;
    $data8$jscomp$1$$[$checksum_index$jscomp$1_i$jscomp$101$$++] = 244;
    $dbg_assert$$module$src$log$$(512 > $checksum_index$jscomp$1_i$jscomp$101$$);
    let $rom_checksum$$ = $data8$jscomp$1$$[$checksum_index$jscomp$1_i$jscomp$101$$] = 0;
    for (let $i$jscomp$104$$ = 0; $i$jscomp$104$$ < $data8$jscomp$1$$.length; $i$jscomp$104$$++) {
      $rom_checksum$$ += $data8$jscomp$1$$[$i$jscomp$104$$];
    }
    $data8$jscomp$1$$[$checksum_index$jscomp$1_i$jscomp$101$$] = -$rom_checksum$$;
    return {name:"genroms/multiboot.bin", data:$data8$jscomp$1$$};
  }
  $dbg_log$$module$src$log$$("Multiboot header not found", 2);
};
$CPU$$module$src$cpu$$.prototype.fill_cmos = function($rtc$jscomp$1$$, $settings$jscomp$3$$) {
  var $boot_order$jscomp$1_memory_above_16m_memory_above_1m$$ = $settings$jscomp$3$$.boot_order || 291;
  $rtc$jscomp$1$$.cmos_write(56, 1 | $boot_order$jscomp$1_memory_above_16m_memory_above_1m$$ >> 4 & 240);
  $rtc$jscomp$1$$.cmos_write(61, $boot_order$jscomp$1_memory_above_16m_memory_above_1m$$ & 255);
  $rtc$jscomp$1$$.cmos_write(21, 128);
  $rtc$jscomp$1$$.cmos_write(22, 2);
  $boot_order$jscomp$1_memory_above_16m_memory_above_1m$$ = 0;
  1048576 <= this.memory_size[0] && ($boot_order$jscomp$1_memory_above_16m_memory_above_1m$$ = this.memory_size[0] - 1048576 >> 10, $boot_order$jscomp$1_memory_above_16m_memory_above_1m$$ = Math.min($boot_order$jscomp$1_memory_above_16m_memory_above_1m$$, 65535));
  $rtc$jscomp$1$$.cmos_write(23, $boot_order$jscomp$1_memory_above_16m_memory_above_1m$$ & 255);
  $rtc$jscomp$1$$.cmos_write(24, $boot_order$jscomp$1_memory_above_16m_memory_above_1m$$ >> 8 & 255);
  $rtc$jscomp$1$$.cmos_write(48, $boot_order$jscomp$1_memory_above_16m_memory_above_1m$$ & 255);
  $rtc$jscomp$1$$.cmos_write(49, $boot_order$jscomp$1_memory_above_16m_memory_above_1m$$ >> 8 & 255);
  $boot_order$jscomp$1_memory_above_16m_memory_above_1m$$ = 0;
  16777216 <= this.memory_size[0] && ($boot_order$jscomp$1_memory_above_16m_memory_above_1m$$ = this.memory_size[0] - 16777216 >> 16, $boot_order$jscomp$1_memory_above_16m_memory_above_1m$$ = Math.min($boot_order$jscomp$1_memory_above_16m_memory_above_1m$$, 65535));
  $rtc$jscomp$1$$.cmos_write(52, $boot_order$jscomp$1_memory_above_16m_memory_above_1m$$ & 255);
  $rtc$jscomp$1$$.cmos_write(53, $boot_order$jscomp$1_memory_above_16m_memory_above_1m$$ >> 8 & 255);
  $rtc$jscomp$1$$.cmos_write(91, 0);
  $rtc$jscomp$1$$.cmos_write(92, 0);
  $rtc$jscomp$1$$.cmos_write(93, 0);
  $rtc$jscomp$1$$.cmos_write(20, 47);
  $rtc$jscomp$1$$.cmos_write(95, 0);
  $settings$jscomp$3$$.fastboot && $rtc$jscomp$1$$.cmos_write(63, 1);
};
$CPU$$module$src$cpu$$.prototype.load_bios = function() {
  var $bios$$ = this.bios.main, $vga_bios$$ = this.bios.vga;
  if ($bios$$) {
    $dbg_assert$$module$src$log$$($bios$$ instanceof ArrayBuffer);
    var $data$jscomp$221$$ = new Uint8Array($bios$$);
    this.write_blob($data$jscomp$221$$, 1048576 - $bios$$.byteLength);
    if ($vga_bios$$) {
      $dbg_assert$$module$src$log$$($vga_bios$$ instanceof ArrayBuffer);
      var $vga_bios8$$ = new Uint8Array($vga_bios$$);
      this.write_blob($vga_bios8$$, 786432);
      this.io.mmap_register(4272947200, 1048576, function($addr$jscomp$59$$) {
        $addr$jscomp$59$$ = $addr$jscomp$59$$ - 4272947200 | 0;
        return $addr$jscomp$59$$ < $vga_bios8$$.length ? $vga_bios8$$[$addr$jscomp$59$$] : 0;
      }, function() {
        $dbg_assert$$module$src$log$$(!1, "Unexpected write to VGA rom");
      });
    } else {
      $dbg_log$$module$src$log$$("Warning: No VGA BIOS");
    }
    this.io.mmap_register(4293918720, 1048576, function($addr$jscomp$61$$) {
      return this.mem8[$addr$jscomp$61$$ & 1048575];
    }.bind(this), function($addr$jscomp$62$$, $value$jscomp$200$$) {
      this.mem8[$addr$jscomp$62$$ & 1048575] = $value$jscomp$200$$;
    }.bind(this));
  } else {
    $dbg_log$$module$src$log$$("Warning: No BIOS");
  }
};
$CPU$$module$src$cpu$$.prototype.codegen_finalize = function($wasm_table_index$jscomp$2$$, $start$jscomp$44$$, $state_flags$jscomp$1$$, $ptr$jscomp$7$$, $len$jscomp$28$$) {
  $ptr$jscomp$7$$ >>>= 0;
  $len$jscomp$28$$ >>>= 0;
  $dbg_assert$$module$src$log$$(0 <= $wasm_table_index$jscomp$2$$ && 900 > $wasm_table_index$jscomp$2$$);
  const $code$jscomp$9$$ = new Uint8Array(this.wasm_memory.buffer, $ptr$jscomp$7$$, $len$jscomp$28$$);
  this.seen_code[$start$jscomp$44$$] = (this.seen_code[$start$jscomp$44$$] || 0) + 1;
  this.test_hook_did_generate_wasm && this.test_hook_did_generate_wasm($code$jscomp$9$$);
  WebAssembly.instantiate($code$jscomp$9$$, {e:this.jit_imports}).then($result$jscomp$24$$ => {
    this.wm.wasm_table.set($wasm_table_index$jscomp$2$$ + 1024, $result$jscomp$24$$.instance.exports.f);
    this.codegen_finalize_finished($wasm_table_index$jscomp$2$$, $start$jscomp$44$$, $state_flags$jscomp$1$$);
    this.test_hook_did_finalize_wasm && this.test_hook_did_finalize_wasm($code$jscomp$9$$);
  }).catch($e$jscomp$47$$ => {
    console.log($e$jscomp$47$$);
    debugger;
    throw $e$jscomp$47$$;
  });
};
$CPU$$module$src$cpu$$.prototype.log_uncompiled_code = function() {
};
$CPU$$module$src$cpu$$.prototype.dump_function_code = function() {
};
$CPU$$module$src$cpu$$.prototype.run_hardware_timers = function($acpi_enabled$$, $now$jscomp$15$$) {
  const $pit_time$$ = this.devices.pit.timer($now$jscomp$15$$, !1), $rtc_time$$ = this.devices.rtc.timer($now$jscomp$15$$, !1);
  let $acpi_time$$ = 100, $apic_time$$ = 100;
  $acpi_enabled$$ && ($acpi_time$$ = this.devices.acpi.timer($now$jscomp$15$$), $apic_time$$ = this.devices.apic.timer($now$jscomp$15$$));
  return Math.min($pit_time$$, $rtc_time$$, $acpi_time$$, $apic_time$$);
};
$CPU$$module$src$cpu$$.prototype.device_raise_irq = function($i$jscomp$109$$) {
  $dbg_assert$$module$src$log$$(1 === arguments.length);
  this.pic_set_irq($i$jscomp$109$$);
  this.devices.ioapic && this.devices.ioapic.set_irq($i$jscomp$109$$);
};
$CPU$$module$src$cpu$$.prototype.device_lower_irq = function($i$jscomp$110$$) {
  this.pic_clear_irq($i$jscomp$110$$);
  this.devices.ioapic && this.devices.ioapic.clear_irq($i$jscomp$110$$);
};
$CPU$$module$src$cpu$$.prototype.debug_init = function() {
  function $get_state$$($where$jscomp$2$$) {
    for (var $mode$jscomp$24$$ = $cpu$jscomp$29$$.protected_mode[0] ? "prot" : "real", $flags$jscomp$17$$ = $cpu$jscomp$29$$.get_eflags(), $iopl$$ = $cpu$jscomp$29$$.getiopl(), $cpl$$ = $cpu$jscomp$29$$.cpl[0], $cs_eip$$ = $h$$module$src$lib$$($cpu$jscomp$29$$.sreg[1], 4) + ":" + $h$$module$src$lib$$($cpu$jscomp$29$$.get_real_eip() >>> 0, 8), $ss_esp$$ = $h$$module$src$lib$$($cpu$jscomp$29$$.sreg[2], 4) + ":" + $h$$module$src$lib$$($cpu$jscomp$29$$.reg32[0] >>> 0, 8), $op_size$$ = $cpu$jscomp$29$$.is_32[0] ? 
    "32" : "16", $if_$$ = $cpu$jscomp$29$$.flags[0] & 512 ? 1 : 0, $flag_names$$ = {[1]:"c", [4]:"p", [16]:"a", [64]:"z", [128]:"s", [256]:"t", [512]:"i", [1024]:"d", [2048]:"o", }, $flag_string$$ = "", $i$jscomp$112$$ = 0; 16 > $i$jscomp$112$$; $i$jscomp$112$$++) {
      $flag_names$$[1 << $i$jscomp$112$$] && ($flag_string$$ = $flags$jscomp$17$$ & 1 << $i$jscomp$112$$ ? $flag_string$$ + $flag_names$$[1 << $i$jscomp$112$$] : $flag_string$$ + " ");
    }
    return "mode=" + $mode$jscomp$24$$ + "/" + $op_size$$ + " paging=" + +(0 !== ($cpu$jscomp$29$$.cr[0] & -2147483648)) + " pae=" + +(0 !== ($cpu$jscomp$29$$.cr[4] & 32)) + " iopl=" + $iopl$$ + " cpl=" + $cpl$$ + " if=" + $if_$$ + " cs:eip=" + $cs_eip$$ + " cs_off=" + $h$$module$src$lib$$($cpu$jscomp$29$$.get_seg_cs() >>> 0, 8) + " flgs=" + $h$$module$src$lib$$($cpu$jscomp$29$$.get_eflags() >>> 0, 6) + " (" + $flag_string$$ + ") ss:esp=" + $ss_esp$$ + " ssize=" + +$cpu$jscomp$29$$.stack_size_32[0] + 
    ($where$jscomp$2$$ ? " in " + $where$jscomp$2$$ : "");
  }
  function $get_regs_short$$() {
    for (var $r32$jscomp$2$$ = {eax:0, ecx:1, edx:2, ebx:3, esp:4, ebp:5, esi:6, edi:7}, $r32_names$$ = "eax ecx edx ebx esp ebp esi edi".split(" "), $line1$$ = "", $line2$$ = "", $i$jscomp$113$$ = 0; 4 > $i$jscomp$113$$; $i$jscomp$113$$++) {
      $line1$$ += $r32_names$$[$i$jscomp$113$$] + "=" + $h$$module$src$lib$$($cpu$jscomp$29$$.reg32[$r32$jscomp$2$$[$r32_names$$[$i$jscomp$113$$]]] >>> 0, 8) + " ", $line2$$ += $r32_names$$[$i$jscomp$113$$ + 4] + "=" + $h$$module$src$lib$$($cpu$jscomp$29$$.reg32[$r32$jscomp$2$$[$r32_names$$[$i$jscomp$113$$ + 4]]] >>> 0, 8) + " ";
    }
    $line1$$ += "  ds=" + $h$$module$src$lib$$($cpu$jscomp$29$$.sreg[3], 4) + " es=" + $h$$module$src$lib$$($cpu$jscomp$29$$.sreg[0], 4) + " fs=" + $h$$module$src$lib$$($cpu$jscomp$29$$.sreg[4], 4);
    $line2$$ += "  gs=" + $h$$module$src$lib$$($cpu$jscomp$29$$.sreg[5], 4) + " cs=" + $h$$module$src$lib$$($cpu$jscomp$29$$.sreg[1], 4) + " ss=" + $h$$module$src$lib$$($cpu$jscomp$29$$.sreg[2], 4);
    return [$line1$$, $line2$$];
  }
  function $load_page_entry$$($dword_entry$$, $pae$$, $is_directory$$) {
    if (!($dword_entry$$ & 1)) {
      return !1;
    }
    var $size$jscomp$42$$ = 128 === ($dword_entry$$ & 128);
    return {size:$size$jscomp$42$$, global:256 === ($dword_entry$$ & 256), accessed:32 === ($dword_entry$$ & 32), dirty:64 === ($dword_entry$$ & 64), cache_disable:16 === ($dword_entry$$ & 16), user:4 === ($dword_entry$$ & 4), read_write:2 === ($dword_entry$$ & 2), address:($size$jscomp$42$$ && !$is_directory$$ ? $dword_entry$$ & ($pae$$ ? 4292870144 : 4290772992) : $dword_entry$$ & 4294963200) >>> 0};
  }
  function $dump_page_directory$$($pd_addr$$, $pae$jscomp$2$$, $start$jscomp$48$$) {
    for (var $n$jscomp$15$$ = $pae$jscomp$2$$ ? 512 : 1024, $entry_size$$ = $pae$jscomp$2$$ ? 8 : 4, $pd_shift$$ = $pae$jscomp$2$$ ? 21 : 22, $i$jscomp$117$$ = 0; $i$jscomp$117$$ < $n$jscomp$15$$; $i$jscomp$117$$++) {
      var $dword$jscomp$4_flags$jscomp$19$$ = $cpu$jscomp$29$$.read32s($pd_addr$$ + $i$jscomp$117$$ * $entry_size$$), $entry$jscomp$13$$ = $load_page_entry$$($dword$jscomp$4_flags$jscomp$19$$, $pae$jscomp$2$$, !0);
      if ($entry$jscomp$13$$) {
        if ($dword$jscomp$4_flags$jscomp$19$$ = "", $dword$jscomp$4_flags$jscomp$19$$ += $entry$jscomp$13$$.size ? "S " : "  ", $dword$jscomp$4_flags$jscomp$19$$ += $entry$jscomp$13$$.accessed ? "A " : "  ", $dword$jscomp$4_flags$jscomp$19$$ += $entry$jscomp$13$$.cache_disable ? "Cd " : "  ", $dword$jscomp$4_flags$jscomp$19$$ += $entry$jscomp$13$$.user ? "U " : "  ", $dword$jscomp$4_flags$jscomp$19$$ += $entry$jscomp$13$$.read_write ? "Rw " : "   ", $entry$jscomp$13$$.size) {
          $dbg_log$$module$src$log$$("=== " + $h$$module$src$lib$$($start$jscomp$48$$ + ($i$jscomp$117$$ << $pd_shift$$) >>> 0, 8) + " -> " + $h$$module$src$lib$$($entry$jscomp$13$$.address >>> 0, 8) + " | " + $dword$jscomp$4_flags$jscomp$19$$);
        } else {
          $dbg_log$$module$src$log$$("=== " + $h$$module$src$lib$$($start$jscomp$48$$ + ($i$jscomp$117$$ << $pd_shift$$) >>> 0, 8) + " | " + $dword$jscomp$4_flags$jscomp$19$$);
          for (var $j$jscomp$11$$ = 0; $j$jscomp$11$$ < $n$jscomp$15$$; $j$jscomp$11$$++) {
            var $sub_addr$$ = $entry$jscomp$13$$.address + $j$jscomp$11$$ * $entry_size$$;
            $dword$jscomp$4_flags$jscomp$19$$ = $cpu$jscomp$29$$.read32s($sub_addr$$);
            var $subentry$$ = $load_page_entry$$($dword$jscomp$4_flags$jscomp$19$$, $pae$jscomp$2$$, !1);
            $subentry$$ && ($dword$jscomp$4_flags$jscomp$19$$ = "", $dword$jscomp$4_flags$jscomp$19$$ += $subentry$$.cache_disable ? "Cd " : "   ", $dword$jscomp$4_flags$jscomp$19$$ += $subentry$$.user ? "U " : "  ", $dword$jscomp$4_flags$jscomp$19$$ += $subentry$$.read_write ? "Rw " : "   ", $dword$jscomp$4_flags$jscomp$19$$ += $subentry$$.global ? "G " : "  ", $dword$jscomp$4_flags$jscomp$19$$ += $subentry$$.accessed ? "A " : "  ", $dword$jscomp$4_flags$jscomp$19$$ += $subentry$$.dirty ? "Di " : 
            "   ", $dbg_log$$module$src$log$$("# " + $h$$module$src$lib$$($start$jscomp$48$$ + ($i$jscomp$117$$ << $pd_shift$$ | $j$jscomp$11$$ << 12) >>> 0, 8) + " -> " + $h$$module$src$lib$$($subentry$$.address, 8) + " | " + $dword$jscomp$4_flags$jscomp$19$$ + "        (at " + $h$$module$src$lib$$($sub_addr$$, 8) + ")"));
          }
        }
      }
    }
  }
  var $cpu$jscomp$29$$ = this, $debug$$ = {};
  this.debug = $debug$$;
  $debug$$.init = function() {
    function $handle$jscomp$13$$($out_byte$jscomp$17$$) {
      10 === $out_byte$jscomp$17$$ ? ($dbg_log$$module$src$log$$($seabios_debug$$, 4096), $seabios_debug$$ = "") : $seabios_debug$$ += String.fromCharCode($out_byte$jscomp$17$$);
    }
    if ($cpu$jscomp$29$$.io) {
      var $seabios_debug$$ = "";
      $cpu$jscomp$29$$.io.register_write(1026, this, $handle$jscomp$13$$);
      $cpu$jscomp$29$$.io.register_write(1280, this, $handle$jscomp$13$$);
    }
  };
  $debug$$.get_regs_short = $get_regs_short$$;
  $debug$$.dump_regs = function() {
    var $lines$jscomp$1$$ = $get_regs_short$$();
    $dbg_log$$module$src$log$$($lines$jscomp$1$$[0], 2);
    $dbg_log$$module$src$log$$($lines$jscomp$1$$[1], 2);
  };
  $debug$$.get_state = $get_state$$;
  $debug$$.dump_state = function($where$jscomp$3$$) {
    $dbg_log$$module$src$log$$($get_state$$($where$jscomp$3$$), 2);
  };
  $debug$$.dump_stack = function($i$jscomp$111_start$jscomp$47$$, $end$jscomp$26$$) {
    var $esp$$ = $cpu$jscomp$29$$.reg32[4];
    $dbg_log$$module$src$log$$("========= STACK ==========");
    if ($end$jscomp$26$$ >= $i$jscomp$111_start$jscomp$47$$ || void 0 === $end$jscomp$26$$) {
      $i$jscomp$111_start$jscomp$47$$ = 5, $end$jscomp$26$$ = -5;
    }
    for (; $i$jscomp$111_start$jscomp$47$$ > $end$jscomp$26$$; $i$jscomp$111_start$jscomp$47$$--) {
      var $line$jscomp$8$$ = "    ";
      $i$jscomp$111_start$jscomp$47$$ || ($line$jscomp$8$$ = "=>  ");
      $line$jscomp$8$$ += $h$$module$src$lib$$($i$jscomp$111_start$jscomp$47$$, 2) + " | ";
      $dbg_log$$module$src$log$$($line$jscomp$8$$ + $h$$module$src$lib$$($esp$$ + 4 * $i$jscomp$111_start$jscomp$47$$, 8) + " | " + $h$$module$src$lib$$($cpu$jscomp$29$$.read32s($esp$$ + 4 * $i$jscomp$111_start$jscomp$47$$) >>> 0));
    }
  };
  $debug$$.dump_page_structures = function() {
    if ($cpu$jscomp$29$$.cr[4] & 32) {
      $dbg_log$$module$src$log$$("PAE enabled");
      for (var $i$jscomp$116$$ = 0; 4 > $i$jscomp$116$$; $i$jscomp$116$$++) {
        var $dword$jscomp$3$$ = $cpu$jscomp$29$$.read32s($cpu$jscomp$29$$.cr[3] + 8 * $i$jscomp$116$$);
        $dword$jscomp$3$$ & 1 && $dump_page_directory$$($dword$jscomp$3$$ & 4294963200, !0, $i$jscomp$116$$ << 30);
      }
    } else {
      $dbg_log$$module$src$log$$("PAE disabled"), $dump_page_directory$$($cpu$jscomp$29$$.cr[3], !1, 0);
    }
  };
  $debug$$.dump_gdt_ldt = function() {
    function $dump_table$$($addr$jscomp$63$$, $size$jscomp$41$$) {
      for (var $i$jscomp$114$$ = 0; $i$jscomp$114$$ < $size$jscomp$41$$; $i$jscomp$114$$ += 8, $addr$jscomp$63$$ += 8) {
        var $base$jscomp$4$$ = $cpu$jscomp$29$$.read16($addr$jscomp$63$$ + 2) | $cpu$jscomp$29$$.read8($addr$jscomp$63$$ + 4) << 16 | $cpu$jscomp$29$$.read8($addr$jscomp$63$$ + 7) << 24, $limit$$ = $cpu$jscomp$29$$.read16($addr$jscomp$63$$) | ($cpu$jscomp$29$$.read8($addr$jscomp$63$$ + 6) & 15) << 16, $access$jscomp$1$$ = $cpu$jscomp$29$$.read8($addr$jscomp$63$$ + 5), $flags$jscomp$18$$ = $cpu$jscomp$29$$.read8($addr$jscomp$63$$ + 6) >> 4, $flags_str$$ = "", $dpl$$ = $access$jscomp$1$$ >> 5 & 3;
        $flags_str$$ = $access$jscomp$1$$ & 128 ? $flags_str$$ + " P " : $flags_str$$ + "NP ";
        $access$jscomp$1$$ & 16 ? ($flags_str$$ = $flags$jscomp$18$$ & 4 ? $flags_str$$ + "32b " : $flags_str$$ + "16b ", $access$jscomp$1$$ & 8 ? ($flags_str$$ += "X ", $access$jscomp$1$$ & 4 && ($flags_str$$ += "C ")) : $flags_str$$ += "R ", $flags_str$$ += "RW ") : $flags_str$$ += "sys: " + $h$$module$src$lib$$($access$jscomp$1$$ & 15);
        $flags$jscomp$18$$ & 8 && ($limit$$ = $limit$$ << 12 | 4095);
        $dbg_log$$module$src$log$$($h$$module$src$lib$$($i$jscomp$114$$ & -8, 4) + " " + $h$$module$src$lib$$($base$jscomp$4$$ >>> 0, 8) + " (" + $h$$module$src$lib$$($limit$$ >>> 0, 8) + " bytes) " + $flags_str$$ + ";  dpl = " + $dpl$$ + ", a = " + $access$jscomp$1$$.toString(2) + ", f = " + $flags$jscomp$18$$.toString(2));
      }
    }
    $dbg_log$$module$src$log$$("gdt: (len = " + $h$$module$src$lib$$($cpu$jscomp$29$$.gdtr_size[0]) + ")");
    $dump_table$$($cpu$jscomp$29$$.translate_address_system_read($cpu$jscomp$29$$.gdtr_offset[0]), $cpu$jscomp$29$$.gdtr_size[0]);
    $dbg_log$$module$src$log$$("\nldt: (len = " + $h$$module$src$lib$$($cpu$jscomp$29$$.segment_limits[7]) + ")");
    $dump_table$$($cpu$jscomp$29$$.translate_address_system_read($cpu$jscomp$29$$.segment_offsets[7]), $cpu$jscomp$29$$.segment_limits[7]);
  };
  $debug$$.dump_idt = function() {
    for (var $i$jscomp$115$$ = 0; $i$jscomp$115$$ < $cpu$jscomp$29$$.idtr_size[0]; $i$jscomp$115$$ += 8) {
      var $addr$jscomp$64_type$jscomp$156$$ = $cpu$jscomp$29$$.translate_address_system_read($cpu$jscomp$29$$.idtr_offset[0] + $i$jscomp$115$$), $base$jscomp$5$$ = $cpu$jscomp$29$$.read16($addr$jscomp$64_type$jscomp$156$$) | $cpu$jscomp$29$$.read16($addr$jscomp$64_type$jscomp$156$$ + 6) << 16, $selector$jscomp$1$$ = $cpu$jscomp$29$$.read16($addr$jscomp$64_type$jscomp$156$$ + 2);
      $addr$jscomp$64_type$jscomp$156$$ = $cpu$jscomp$29$$.read8($addr$jscomp$64_type$jscomp$156$$ + 5);
      var $dpl$jscomp$1$$ = $addr$jscomp$64_type$jscomp$156$$ >> 5 & 3;
      var $line$jscomp$9$$ = 5 === ($addr$jscomp$64_type$jscomp$156$$ & 31) ? "task gate " : 14 === ($addr$jscomp$64_type$jscomp$156$$ & 31) ? "intr gate " : 15 === ($addr$jscomp$64_type$jscomp$156$$ & 31) ? "trap gate " : "invalid   ";
      $line$jscomp$9$$ = $addr$jscomp$64_type$jscomp$156$$ & 128 ? $line$jscomp$9$$ + " P" : $line$jscomp$9$$ + "NP";
      $dbg_log$$module$src$log$$($h$$module$src$lib$$($i$jscomp$115$$ >> 3, 4) + " " + $h$$module$src$lib$$($base$jscomp$5$$ >>> 0, 8) + ", " + $h$$module$src$lib$$($selector$jscomp$1$$, 4) + "; " + $line$jscomp$9$$ + ";  dpl = " + $dpl$jscomp$1$$ + ", t = " + $addr$jscomp$64_type$jscomp$156$$.toString(2));
    }
  };
  $debug$$.get_memory_dump = function($start$jscomp$49$$, $count$jscomp$70$$) {
    void 0 === $start$jscomp$49$$ ? ($start$jscomp$49$$ = 0, $count$jscomp$70$$ = $cpu$jscomp$29$$.memory_size[0]) : void 0 === $count$jscomp$70$$ && ($count$jscomp$70$$ = $start$jscomp$49$$, $start$jscomp$49$$ = 0);
    return $cpu$jscomp$29$$.mem8.slice($start$jscomp$49$$, $start$jscomp$49$$ + $count$jscomp$70$$).buffer;
  };
  $debug$$.memory_hex_dump = function($addr$jscomp$67$$, $length$jscomp$33$$) {
    $length$jscomp$33$$ = $length$jscomp$33$$ || 64;
    for (var $line$jscomp$10$$, $byt$$, $i$jscomp$118$$ = 0; $i$jscomp$118$$ < $length$jscomp$33$$ >> 4; $i$jscomp$118$$++) {
      $line$jscomp$10$$ = $h$$module$src$lib$$($addr$jscomp$67$$ + ($i$jscomp$118$$ << 4), 5) + "   ";
      for (var $j$jscomp$12$$ = 0; 16 > $j$jscomp$12$$; $j$jscomp$12$$++) {
        $byt$$ = $cpu$jscomp$29$$.read8($addr$jscomp$67$$ + ($i$jscomp$118$$ << 4) + $j$jscomp$12$$), $line$jscomp$10$$ += $h$$module$src$lib$$($byt$$, 2) + " ";
      }
      $line$jscomp$10$$ += "  ";
      for ($j$jscomp$12$$ = 0; 16 > $j$jscomp$12$$; $j$jscomp$12$$++) {
        $byt$$ = $cpu$jscomp$29$$.read8($addr$jscomp$67$$ + ($i$jscomp$118$$ << 4) + $j$jscomp$12$$), $line$jscomp$10$$ += 33 > $byt$$ || 126 < $byt$$ ? "." : String.fromCharCode($byt$$);
      }
      $dbg_log$$module$src$log$$($line$jscomp$10$$);
    }
  };
  $debug$$.used_memory_dump = function() {
    for (var $block_size$$ = $cpu$jscomp$29$$.memory_size[0] / 128 / 16 | 0, $row$jscomp$12$$, $i$jscomp$119$$ = 0; 16 > $i$jscomp$119$$; $i$jscomp$119$$++) {
      $row$jscomp$12$$ = $h$$module$src$lib$$(128 * $i$jscomp$119$$ * $block_size$$, 8) + " | ";
      for (var $j$jscomp$13$$ = 0; 128 > $j$jscomp$13$$; $j$jscomp$13$$++) {
        $row$jscomp$12$$ += 0 < $cpu$jscomp$29$$.mem32s[(128 * $i$jscomp$119$$ + $j$jscomp$13$$) * $block_size$$] ? "X" : " ";
      }
      $dbg_log$$module$src$log$$($row$jscomp$12$$);
    }
  };
  $debug$$.debug_interrupt = function() {
  };
  let $cs$jscomp$1$$, $capstone_decoder$$;
  $debug$$.dump_code = function($is_32$jscomp$1$$, $buffer$jscomp$62$$, $start$jscomp$50$$) {
    if (!$capstone_decoder$$) {
      if (void 0 === $cs$jscomp$1$$ && ($cs$jscomp$1$$ = "function" === typeof require ? require("./capstone-x86.min.js") : window.cs, void 0 === $cs$jscomp$1$$)) {
        $dbg_log$$module$src$log$$("Warning: Missing capstone library, disassembly not available");
        return;
      }
      $capstone_decoder$$ = [new $cs$jscomp$1$$.Capstone($cs$jscomp$1$$.ARCH_X86, $cs$jscomp$1$$.MODE_16), new $cs$jscomp$1$$.Capstone($cs$jscomp$1$$.ARCH_X86, $cs$jscomp$1$$.MODE_32), ];
    }
    try {
      $capstone_decoder$$[$is_32$jscomp$1$$].disasm($buffer$jscomp$62$$, $start$jscomp$50$$).forEach(function($instr$$) {
        $dbg_log$$module$src$log$$($h$$module$src$lib$$($instr$$.address >>> 0) + ": " + $pads$$module$src$lib$$($instr$$.bytes.map($x$jscomp$124$$ => $h$$module$src$lib$$($x$jscomp$124$$, 2).slice(-2)).join(" "), 20) + " " + $instr$$.mnemonic + " " + $instr$$.op_str);
      }), $dbg_log$$module$src$log$$("");
    } catch ($e$jscomp$48$$) {
      $dbg_log$$module$src$log$$("Could not disassemble: " + Array.from($buffer$jscomp$62$$).map($x$jscomp$125$$ => $h$$module$src$lib$$($x$jscomp$125$$, 2)).join(" "));
    }
  };
  let $wabt$$;
  $debug$$.dump_wasm = function($buffer$jscomp$63$$) {
    if (void 0 === $wabt$$ && ($wabt$$ = "function" === typeof require ? require("./libwabt.cjs") : new window.WabtModule, void 0 === $wabt$$)) {
      $dbg_log$$module$src$log$$("Warning: Missing libwabt, wasm dump not available");
      return;
    }
    $buffer$jscomp$63$$ = $buffer$jscomp$63$$.slice();
    try {
      var $module$jscomp$2$$ = $wabt$$.readWasm($buffer$jscomp$63$$, {readDebugNames:!1});
      $module$jscomp$2$$.generateNames();
      $module$jscomp$2$$.applyNames();
      const $result$jscomp$25$$ = $module$jscomp$2$$.toText({foldExprs:!0, inlineExport:!0});
      $dbg_log$$module$src$log$$($result$jscomp$25$$);
    } catch ($e$jscomp$49$$) {
      var $blob$jscomp$inline_170$$ = new Blob([$buffer$jscomp$63$$]), $a$jscomp$inline_171$$ = document.createElement("a");
      $a$jscomp$inline_171$$.download = "failed.wasm";
      $a$jscomp$inline_171$$.href = window.URL.createObjectURL($blob$jscomp$inline_170$$);
      $a$jscomp$inline_171$$.dataset.downloadurl = ["application/octet-stream", $a$jscomp$inline_171$$.download, $a$jscomp$inline_171$$.href].join(":");
      $a$jscomp$inline_171$$.click();
      window.URL.revokeObjectURL($a$jscomp$inline_171$$.src);
      console.log($e$jscomp$49$$.toString());
    } finally {
      $module$jscomp$2$$ && $module$jscomp$2$$.destroy();
    }
  };
};
function $VirtIO$$module$src$virtio$$($cpu$jscomp$30$$, $options$jscomp$42$$) {
  this.cpu = $cpu$jscomp$30$$;
  this.pci = $cpu$jscomp$30$$.devices.pci;
  this.device_id = $options$jscomp$42$$.device_id;
  this.pci_space = [244, 26, $options$jscomp$42$$.device_id & 255, $options$jscomp$42$$.device_id >> 8, 7, 5, 16, 0, 1, 0, 2, 0, 0, 0, 0, 0, 1, 168, 0, 0, 0, 16, 191, 254, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 244, 26, $options$jscomp$42$$.subsystem_device_id & 255, $options$jscomp$42$$.subsystem_device_id >> 8, 0, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, ];
  this.pci_space = this.pci_space.concat(Array(256 - this.pci_space.length).fill(0));
  this.pci_id = $options$jscomp$42$$.pci_id;
  this.pci_bars = [];
  this.name = $options$jscomp$42$$.name;
  this.driver_feature_select = this.device_feature_select = 0;
  this.device_feature = new Uint32Array(4);
  this.driver_feature = new Uint32Array(4);
  for ($f$jscomp$7_offsets$$ of $options$jscomp$42$$.common.features) {
    $dbg_assert$$module$src$log$$(0 <= $f$jscomp$7_offsets$$, "VirtIO device<" + this.name + "> feature bit numbers must be non-negative"), $dbg_assert$$module$src$log$$(128 > $f$jscomp$7_offsets$$, "VirtIO device<" + this.name + "> feature bit numbers assumed less than 128 in implementation"), this.device_feature[$f$jscomp$7_offsets$$ >>> 5] |= 1 << ($f$jscomp$7_offsets$$ & 31), this.driver_feature[$f$jscomp$7_offsets$$ >>> 5] |= 1 << ($f$jscomp$7_offsets$$ & 31);
  }
  $dbg_assert$$module$src$log$$($options$jscomp$42$$.common.features.includes(32), "VirtIO device<" + this.name + "> only non-transitional devices are supported");
  this.features_ok = !0;
  this.device_status = 0;
  this.config_has_changed = !1;
  this.config_generation = 0;
  this.queues = [];
  for (var $effective_offset_queue_options$$ of $options$jscomp$42$$.common.queues) {
    this.queues.push(new $VirtQueue$$module$src$virtio$$($cpu$jscomp$30$$, this, $effective_offset_queue_options$$));
  }
  this.queue_select = 0;
  this.queue_selected = this.queues[0];
  this.isr_status = 0;
  var $f$jscomp$7_offsets$$ = new Set;
  for ($capabilities_offset$jscomp$82$$ of this.queues.map($q$jscomp$2$$ => $q$jscomp$2$$.notify_offset)) {
    $effective_offset_queue_options$$ = $options$jscomp$42$$.notification.single_handler ? 0 : $capabilities_offset$jscomp$82$$, $f$jscomp$7_offsets$$.add($effective_offset_queue_options$$), $dbg_assert$$module$src$log$$($options$jscomp$42$$.notification.handlers[$effective_offset_queue_options$$], "VirtIO device<" + this.name + "> every queue's notifier must exist");
  }
  for (const [$index$jscomp$92$$, $handler$jscomp$14$$] of $options$jscomp$42$$.notification.handlers.entries()) {
    $dbg_assert$$module$src$log$$(!$handler$jscomp$14$$ || $f$jscomp$7_offsets$$.has($index$jscomp$92$$), "VirtIO device<" + this.name + "> no defined notify handler should be unused");
  }
  var $capabilities_offset$jscomp$82$$ = [];
  $capabilities_offset$jscomp$82$$.push(this.create_common_capability($options$jscomp$42$$.common));
  $capabilities_offset$jscomp$82$$.push(this.create_notification_capability($options$jscomp$42$$.notification));
  $capabilities_offset$jscomp$82$$.push(this.create_isr_capability($options$jscomp$42$$.isr_status));
  $options$jscomp$42$$.device_specific && $capabilities_offset$jscomp$82$$.push(this.create_device_specific_capability($options$jscomp$42$$.device_specific));
  this.init_capabilities($capabilities_offset$jscomp$82$$);
  $cpu$jscomp$30$$.devices.pci.register_device(this);
  this.reset();
}
$VirtIO$$module$src$virtio$$.prototype.create_common_capability = function($options$jscomp$43$$) {
  return {type:1, bar:0, port:$options$jscomp$43$$.initial_port, use_mmio:!1, offset:0, extra:new Uint8Array(0), struct:[{bytes:4, name:"device_feature_select", read:() => this.device_feature_select, write:$data$jscomp$222$$ => {
    this.device_feature_select = $data$jscomp$222$$;
  }, }, {bytes:4, name:"device_feature", read:() => this.device_feature[this.device_feature_select] || 0, write:() => {
  }, }, {bytes:4, name:"driver_feature_select", read:() => this.driver_feature_select, write:$data$jscomp$224$$ => {
    this.driver_feature_select = $data$jscomp$224$$;
  }, }, {bytes:4, name:"driver_feature", read:() => this.driver_feature[this.driver_feature_select] || 0, write:$data$jscomp$225$$ => {
    const $supported_feature$$ = this.device_feature[this.driver_feature_select];
    this.driver_feature_select < this.driver_feature.length && (this.driver_feature[this.driver_feature_select] = $data$jscomp$225$$ & $supported_feature$$);
    this.features_ok = this.features_ok && !($data$jscomp$225$$ & ~$supported_feature$$);
  }, }, {bytes:2, name:"msix_config", read:() => {
    $dbg_log$$module$src$log$$("No msi-x capability supported.", 2097152);
    return 65535;
  }, write:() => {
    $dbg_log$$module$src$log$$("No msi-x capability supported.", 2097152);
  }, }, {bytes:2, name:"num_queues", read:() => this.queues.length, write:() => {
  }, }, {bytes:1, name:"device_status", read:() => this.device_status, write:$data$jscomp$228$$ => {
    0 === $data$jscomp$228$$ ? ($dbg_log$$module$src$log$$("Reset device<" + this.name + ">", 2097152), this.reset()) : $data$jscomp$228$$ & 128 ? $dbg_log$$module$src$log$$("Warning: Device<" + this.name + "> status failed", 2097152) : $dbg_log$$module$src$log$$("Device<" + this.name + "> status: " + ($data$jscomp$228$$ & 1 ? "ACKNOWLEDGE " : "") + ($data$jscomp$228$$ & 2 ? "DRIVER " : "") + ($data$jscomp$228$$ & 4 ? "DRIVER_OK" : "") + ($data$jscomp$228$$ & 8 ? "FEATURES_OK " : "") + ($data$jscomp$228$$ & 
    64 ? "DEVICE_NEEDS_RESET" : ""), 2097152);
    $data$jscomp$228$$ & ~this.device_status & 4 && this.device_status & 64 && this.notify_config_changes();
    this.features_ok || ($data$jscomp$228$$ & 8 && $dbg_log$$module$src$log$$("Removing FEATURES_OK", 2097152), $data$jscomp$228$$ &= -9);
    this.device_status = $data$jscomp$228$$;
    if ($data$jscomp$228$$ & ~this.device_status & 4) {
      $options$jscomp$43$$.on_driver_ok();
    }
  }, }, {bytes:1, name:"config_generation", read:() => this.config_generation, write:() => {
  }, }, {bytes:2, name:"queue_select", read:() => this.queue_select, write:$data$jscomp$230$$ => {
    this.queue_select = $data$jscomp$230$$;
    this.queue_selected = this.queue_select < this.queues.length ? this.queues[this.queue_select] : null;
  }, }, {bytes:2, name:"queue_size", read:() => this.queue_selected ? this.queue_selected.size : 0, write:$data$jscomp$231$$ => {
    this.queue_selected && ($data$jscomp$231$$ & $data$jscomp$231$$ - 1 && ($dbg_log$$module$src$log$$("Warning: dev<" + this.name + "> Given queue size was not a power of 2. Rounding up to next power of 2.", 2097152), $data$jscomp$231$$ = 1 << $int_log2$$module$src$lib$$($data$jscomp$231$$ - 1) + 1), $data$jscomp$231$$ > this.queue_selected.size_supported && ($dbg_log$$module$src$log$$("Warning: dev<" + this.name + "> Trying to set queue size greater than supported. Clamping to supported size.", 
    2097152), $data$jscomp$231$$ = this.queue_selected.size_supported), this.queue_selected.set_size($data$jscomp$231$$));
  }, }, {bytes:2, name:"queue_msix_vector", read:() => {
    $dbg_log$$module$src$log$$("No msi-x capability supported.", 2097152);
    return 65535;
  }, write:() => {
    $dbg_log$$module$src$log$$("No msi-x capability supported.", 2097152);
  }, }, {bytes:2, name:"queue_enable", read:() => this.queue_selected ? this.queue_selected.enabled | 0 : 0, write:$data$jscomp$233$$ => {
    this.queue_selected && (1 === $data$jscomp$233$$ ? this.queue_selected.is_configured() ? this.queue_selected.enable() : $dbg_log$$module$src$log$$("Driver bug: tried enabling unconfigured queue", 2097152) : 0 === $data$jscomp$233$$ && $dbg_log$$module$src$log$$("Driver bug: tried writing 0 to queue_enable", 2097152));
  }, }, {bytes:2, name:"queue_notify_off", read:() => this.queue_selected ? this.queue_selected.notify_offset : 0, write:() => {
  }, }, {bytes:4, name:"queue_desc (low dword)", read:() => this.queue_selected ? this.queue_selected.desc_addr : 0, write:$data$jscomp$235$$ => {
    this.queue_selected && (this.queue_selected.desc_addr = $data$jscomp$235$$);
  }, }, {bytes:4, name:"queue_desc (high dword)", read:() => 0, write:$data$jscomp$236$$ => {
    0 !== $data$jscomp$236$$ && $dbg_log$$module$src$log$$("Warning: High dword of 64 bit queue_desc ignored:" + $data$jscomp$236$$, 2097152);
  }, }, {bytes:4, name:"queue_avail (low dword)", read:() => this.queue_selected ? this.queue_selected.avail_addr : 0, write:$data$jscomp$237$$ => {
    this.queue_selected && (this.queue_selected.avail_addr = $data$jscomp$237$$);
  }, }, {bytes:4, name:"queue_avail (high dword)", read:() => 0, write:$data$jscomp$238$$ => {
    0 !== $data$jscomp$238$$ && $dbg_log$$module$src$log$$("Warning: High dword of 64 bit queue_avail ignored:" + $data$jscomp$238$$, 2097152);
  }, }, {bytes:4, name:"queue_used (low dword)", read:() => this.queue_selected ? this.queue_selected.used_addr : 0, write:$data$jscomp$239$$ => {
    this.queue_selected && (this.queue_selected.used_addr = $data$jscomp$239$$);
  }, }, {bytes:4, name:"queue_used (high dword)", read:() => 0, write:$data$jscomp$240$$ => {
    0 !== $data$jscomp$240$$ && $dbg_log$$module$src$log$$("Warning: High dword of 64 bit queue_used ignored:" + $data$jscomp$240$$, 2097152);
  }, }, ], };
};
$VirtIO$$module$src$virtio$$.prototype.create_notification_capability = function($options$jscomp$44$$) {
  const $notify_struct$$ = [];
  let $notify_off_multiplier$$;
  $options$jscomp$44$$.single_handler ? ($dbg_assert$$module$src$log$$(1 === $options$jscomp$44$$.handlers.length, "VirtIO device<" + this.name + "> too many notify handlers specified: expected single handler"), $notify_off_multiplier$$ = 0) : $notify_off_multiplier$$ = 2;
  for (const [$i$jscomp$120$$, $handler$jscomp$15$$] of $options$jscomp$44$$.handlers.entries()) {
    $notify_struct$$.push({bytes:2, name:"notify" + $i$jscomp$120$$, read:() => 65535, write:$handler$jscomp$15$$ || (() => {
    }), });
  }
  return {type:2, bar:1, port:$options$jscomp$44$$.initial_port, use_mmio:!1, offset:0, extra:new Uint8Array([$notify_off_multiplier$$ & 255, $notify_off_multiplier$$ >> 8 & 255, $notify_off_multiplier$$ >> 16 & 255, $notify_off_multiplier$$ >> 24, ]), struct:$notify_struct$$, };
};
$VirtIO$$module$src$virtio$$.prototype.create_isr_capability = function($options$jscomp$45$$) {
  return {type:3, bar:2, port:$options$jscomp$45$$.initial_port, use_mmio:!1, offset:0, extra:new Uint8Array(0), struct:[{bytes:1, name:"isr_status", read:() => {
    const $isr_status$$ = this.isr_status;
    this.lower_irq();
    return $isr_status$$;
  }, write:() => {
  }, }, ], };
};
$VirtIO$$module$src$virtio$$.prototype.create_device_specific_capability = function($options$jscomp$46$$) {
  $dbg_assert$$module$src$log$$(~$options$jscomp$46$$.offset & 3, "VirtIO device<" + this.name + "> device specific cap offset must be 4-byte aligned");
  return {type:4, bar:3, port:$options$jscomp$46$$.initial_port, use_mmio:!1, offset:0, extra:new Uint8Array(0), struct:$options$jscomp$46$$.struct, };
};
$VirtIO$$module$src$virtio$$.prototype.init_capabilities = function($cap_len$jscomp$1_capabilities$jscomp$1_write$$) {
  let $cap_next$$ = this.pci_space[52] = 64;
  var $bar_offset_cap_ptr_port$jscomp$10$$ = $cap_next$$;
  for (const $cap$jscomp$2$$ of $cap_len$jscomp$1_capabilities$jscomp$1_write$$) {
    $cap_len$jscomp$1_capabilities$jscomp$1_write$$ = 16 + $cap$jscomp$2$$.extra.length;
    $bar_offset_cap_ptr_port$jscomp$10$$ = $cap_next$$;
    $cap_next$$ = $bar_offset_cap_ptr_port$jscomp$10$$ + $cap_len$jscomp$1_capabilities$jscomp$1_write$$;
    $dbg_assert$$module$src$log$$(256 >= $cap_next$$, "VirtIO device<" + this.name + "> can't fit all capabilities into 256byte configspace");
    $dbg_assert$$module$src$log$$(0 <= $cap$jscomp$2$$.bar && 6 > $cap$jscomp$2$$.bar, "VirtIO device<" + this.name + "> capability invalid bar number");
    var $bar_size_shim_read8_on_16$$ = $cap$jscomp$2$$.struct.reduce(($bytes$jscomp$6$$, $field$$) => $bytes$jscomp$6$$ + $field$$.bytes, 0);
    $bar_size_shim_read8_on_16$$ += $cap$jscomp$2$$.offset;
    $bar_size_shim_read8_on_16$$ = 16 > $bar_size_shim_read8_on_16$$ ? 16 : 1 << $int_log2$$module$src$lib$$($bar_size_shim_read8_on_16$$ - 1) + 1;
    $dbg_assert$$module$src$log$$(0 === ($cap$jscomp$2$$.port & $bar_size_shim_read8_on_16$$ - 1), "VirtIO device<" + this.name + "> capability port should be aligned to pci bar size");
    this.pci_bars[$cap$jscomp$2$$.bar] = {size:$bar_size_shim_read8_on_16$$, };
    this.pci_space[$bar_offset_cap_ptr_port$jscomp$10$$] = 9;
    this.pci_space[$bar_offset_cap_ptr_port$jscomp$10$$ + 1] = $cap_next$$;
    this.pci_space[$bar_offset_cap_ptr_port$jscomp$10$$ + 2] = $cap_len$jscomp$1_capabilities$jscomp$1_write$$;
    this.pci_space[$bar_offset_cap_ptr_port$jscomp$10$$ + 3] = $cap$jscomp$2$$.type;
    this.pci_space[$bar_offset_cap_ptr_port$jscomp$10$$ + 4] = $cap$jscomp$2$$.bar;
    this.pci_space[$bar_offset_cap_ptr_port$jscomp$10$$ + 5] = 0;
    this.pci_space[$bar_offset_cap_ptr_port$jscomp$10$$ + 6] = 0;
    this.pci_space[$bar_offset_cap_ptr_port$jscomp$10$$ + 7] = 0;
    this.pci_space[$bar_offset_cap_ptr_port$jscomp$10$$ + 8] = $cap$jscomp$2$$.offset & 255;
    this.pci_space[$bar_offset_cap_ptr_port$jscomp$10$$ + 9] = $cap$jscomp$2$$.offset >>> 8 & 255;
    this.pci_space[$bar_offset_cap_ptr_port$jscomp$10$$ + 10] = $cap$jscomp$2$$.offset >>> 16 & 255;
    this.pci_space[$bar_offset_cap_ptr_port$jscomp$10$$ + 11] = $cap$jscomp$2$$.offset >>> 24;
    this.pci_space[$bar_offset_cap_ptr_port$jscomp$10$$ + 12] = $bar_size_shim_read8_on_16$$ & 255;
    this.pci_space[$bar_offset_cap_ptr_port$jscomp$10$$ + 13] = $bar_size_shim_read8_on_16$$ >>> 8 & 255;
    this.pci_space[$bar_offset_cap_ptr_port$jscomp$10$$ + 14] = $bar_size_shim_read8_on_16$$ >>> 16 & 255;
    this.pci_space[$bar_offset_cap_ptr_port$jscomp$10$$ + 15] = $bar_size_shim_read8_on_16$$ >>> 24;
    for (const [$i$jscomp$121$$, $extra_byte$$] of $cap$jscomp$2$$.extra.entries()) {
      this.pci_space[$bar_offset_cap_ptr_port$jscomp$10$$ + 16 + $i$jscomp$121$$] = $extra_byte$$;
    }
    $bar_offset_cap_ptr_port$jscomp$10$$ = 16 + 4 * $cap$jscomp$2$$.bar;
    this.pci_space[$bar_offset_cap_ptr_port$jscomp$10$$] = $cap$jscomp$2$$.port & 254 | !$cap$jscomp$2$$.use_mmio;
    this.pci_space[$bar_offset_cap_ptr_port$jscomp$10$$ + 1] = $cap$jscomp$2$$.port >>> 8 & 255;
    this.pci_space[$bar_offset_cap_ptr_port$jscomp$10$$ + 2] = $cap$jscomp$2$$.port >>> 16 & 255;
    this.pci_space[$bar_offset_cap_ptr_port$jscomp$10$$ + 3] = $cap$jscomp$2$$.port >>> 24 & 255;
    $bar_offset_cap_ptr_port$jscomp$10$$ = $cap$jscomp$2$$.port + $cap$jscomp$2$$.offset;
    for (const $field$jscomp$1$$ of $cap$jscomp$2$$.struct) {
      let $read$$ = $field$jscomp$1$$.read;
      $cap_len$jscomp$1_capabilities$jscomp$1_write$$ = $field$jscomp$1$$.write;
      $read$$ = () => {
        const $val$jscomp$1$$ = $field$jscomp$1$$.read();
        $dbg_log$$module$src$log$$("Device<" + this.name + "> cap[" + $cap$jscomp$2$$.type + "] read[" + $field$jscomp$1$$.name + "] => " + $h$$module$src$lib$$($val$jscomp$1$$, 8 * $field$jscomp$1$$.bytes), 2097152);
        return $val$jscomp$1$$;
      };
      $cap_len$jscomp$1_capabilities$jscomp$1_write$$ = $data$jscomp$243$$ => {
        $dbg_log$$module$src$log$$("Device<" + this.name + "> cap[" + $cap$jscomp$2$$.type + "] write[" + $field$jscomp$1$$.name + "] <= " + $h$$module$src$lib$$($data$jscomp$243$$, 8 * $field$jscomp$1$$.bytes), 2097152);
        $field$jscomp$1$$.write($data$jscomp$243$$);
      };
      if ($cap$jscomp$2$$.use_mmio) {
        $dbg_assert$$module$src$log$$(!1, "VirtIO device <" + this.name + "> mmio capability not implemented.");
      } else {
        $bar_size_shim_read8_on_16$$ = function($addr$jscomp$68$$) {
          $dbg_log$$module$src$log$$("Warning: 8-bit read from 16-bit virtio port", 2097152);
          return $read$$($addr$jscomp$68$$ & -2) >> (($addr$jscomp$68$$ & 1) << 3) & 255;
        };
        const $shim_read8_on_32$$ = function($addr$jscomp$69$$) {
          $dbg_log$$module$src$log$$("Warning: 8-bit read from 32-bit virtio port", 2097152);
          return $read$$($addr$jscomp$69$$ & -4) >> (($addr$jscomp$69$$ & 3) << 3) & 255;
        };
        switch($field$jscomp$1$$.bytes) {
          case 4:
            this.cpu.io.register_read($bar_offset_cap_ptr_port$jscomp$10$$, this, $shim_read8_on_32$$, void 0, $read$$);
            this.cpu.io.register_read($bar_offset_cap_ptr_port$jscomp$10$$ + 1, this, $shim_read8_on_32$$);
            this.cpu.io.register_read($bar_offset_cap_ptr_port$jscomp$10$$ + 2, this, $shim_read8_on_32$$);
            this.cpu.io.register_read($bar_offset_cap_ptr_port$jscomp$10$$ + 3, this, $shim_read8_on_32$$);
            this.cpu.io.register_write($bar_offset_cap_ptr_port$jscomp$10$$, this, void 0, void 0, $cap_len$jscomp$1_capabilities$jscomp$1_write$$);
            break;
          case 2:
            this.cpu.io.register_read($bar_offset_cap_ptr_port$jscomp$10$$, this, $bar_size_shim_read8_on_16$$, $read$$);
            this.cpu.io.register_read($bar_offset_cap_ptr_port$jscomp$10$$ + 1, this, $bar_size_shim_read8_on_16$$);
            this.cpu.io.register_write($bar_offset_cap_ptr_port$jscomp$10$$, this, void 0, $cap_len$jscomp$1_capabilities$jscomp$1_write$$);
            break;
          case 1:
            this.cpu.io.register_read($bar_offset_cap_ptr_port$jscomp$10$$, this, $read$$);
            this.cpu.io.register_write($bar_offset_cap_ptr_port$jscomp$10$$, this, $cap_len$jscomp$1_capabilities$jscomp$1_write$$);
            break;
          default:
            $dbg_assert$$module$src$log$$(!1, "VirtIO device <" + this.name + "> invalid capability field width of " + $field$jscomp$1$$.bytes + " bytes");
        }
      }
      $bar_offset_cap_ptr_port$jscomp$10$$ += $field$jscomp$1$$.bytes;
    }
  }
  $dbg_assert$$module$src$log$$(256 >= $cap_next$$ + 20, "VirtIO device<" + this.name + "> can't fit all capabilities into 256byte configspace");
  this.pci_space[$cap_next$$] = 9;
  this.pci_space[$cap_next$$ + 1] = 0;
  this.pci_space[$cap_next$$ + 2] = 20;
  this.pci_space[$cap_next$$ + 3] = 5;
  this.pci_space[$cap_next$$ + 4] = 0;
  this.pci_space[$cap_next$$ + 5] = 0;
  this.pci_space[$cap_next$$ + 6] = 0;
  this.pci_space[$cap_next$$ + 7] = 0;
  this.pci_space[$cap_next$$ + 8] = 0;
  this.pci_space[$cap_next$$ + 9] = 0;
  this.pci_space[$cap_next$$ + 10] = 0;
  this.pci_space[$cap_next$$ + 11] = 0;
  this.pci_space[$cap_next$$ + 12] = 0;
  this.pci_space[$cap_next$$ + 13] = 0;
  this.pci_space[$cap_next$$ + 14] = 0;
  this.pci_space[$cap_next$$ + 15] = 0;
  this.pci_space[$cap_next$$ + 16] = 0;
  this.pci_space[$cap_next$$ + 17] = 0;
  this.pci_space[$cap_next$$ + 18] = 0;
  this.pci_space[$cap_next$$ + 19] = 0;
};
$VirtIO$$module$src$virtio$$.prototype.get_state = function() {
  let $state$jscomp$62$$ = [];
  $state$jscomp$62$$[0] = this.device_feature_select;
  $state$jscomp$62$$[1] = this.driver_feature_select;
  $state$jscomp$62$$[2] = this.device_feature;
  $state$jscomp$62$$[3] = this.driver_feature;
  $state$jscomp$62$$[4] = this.features_ok;
  $state$jscomp$62$$[5] = this.device_status;
  $state$jscomp$62$$[6] = this.config_has_changed;
  $state$jscomp$62$$[7] = this.config_generation;
  $state$jscomp$62$$[8] = this.isr_status;
  $state$jscomp$62$$[9] = this.queue_select;
  return $state$jscomp$62$$ = $state$jscomp$62$$.concat(this.queues);
};
$VirtIO$$module$src$virtio$$.prototype.set_state = function($state$jscomp$63$$) {
  this.device_feature_select = $state$jscomp$63$$[0];
  this.driver_feature_select = $state$jscomp$63$$[1];
  this.device_feature = $state$jscomp$63$$[2];
  this.driver_feature = $state$jscomp$63$$[3];
  this.features_ok = $state$jscomp$63$$[4];
  this.device_status = $state$jscomp$63$$[5];
  this.config_has_changed = $state$jscomp$63$$[6];
  this.config_generation = $state$jscomp$63$$[7];
  this.isr_status = $state$jscomp$63$$[8];
  this.queue_select = $state$jscomp$63$$[9];
  let $i$jscomp$122$$ = 0;
  for (const $queue$jscomp$12$$ of $state$jscomp$63$$.slice(10)) {
    this.queues[$i$jscomp$122$$].set_state($queue$jscomp$12$$), $i$jscomp$122$$++;
  }
  this.queue_selected = this.queues[this.queue_select] || null;
};
$VirtIO$$module$src$virtio$$.prototype.reset = function() {
  this.driver_feature_select = this.device_feature_select = 0;
  this.driver_feature.set(this.device_feature);
  this.features_ok = !0;
  this.queue_select = this.device_status = 0;
  this.queue_selected = this.queues[0];
  for (const $queue$jscomp$13$$ of this.queues) {
    $queue$jscomp$13$$.reset();
  }
  this.config_has_changed = !1;
  this.config_generation = 0;
  this.lower_irq();
};
$VirtIO$$module$src$virtio$$.prototype.notify_config_changes = function() {
  this.config_has_changed = !0;
  this.device_status & 4 ? this.raise_irq(2) : $dbg_assert$$module$src$log$$(!1, "VirtIO device<" + this.name + "> attempted to notify driver before DRIVER_OK");
};
$VirtIO$$module$src$virtio$$.prototype.update_config_generation = function() {
  this.config_has_changed && (this.config_generation++, this.config_generation &= 255, this.config_has_changed = !1);
};
$VirtIO$$module$src$virtio$$.prototype.is_feature_negotiated = function($feature$jscomp$4$$) {
  return 0 < (this.driver_feature[$feature$jscomp$4$$ >>> 5] & 1 << ($feature$jscomp$4$$ & 31));
};
$VirtIO$$module$src$virtio$$.prototype.needs_reset = function() {
  $dbg_log$$module$src$log$$("Device<" + this.name + "> experienced error - requires reset", 2097152);
  this.device_status |= 64;
  this.device_status & 4 && this.notify_config_changes();
};
$VirtIO$$module$src$virtio$$.prototype.raise_irq = function($type$jscomp$157$$) {
  $dbg_log$$module$src$log$$("Raise irq " + $h$$module$src$lib$$($type$jscomp$157$$), 2097152);
  this.isr_status |= $type$jscomp$157$$;
  this.pci.raise_irq(this.pci_id);
};
$VirtIO$$module$src$virtio$$.prototype.lower_irq = function() {
  $dbg_log$$module$src$log$$("Lower irq ", 2097152);
  this.isr_status = 0;
  this.pci.lower_irq(this.pci_id);
};
function $VirtQueue$$module$src$virtio$$($cpu$jscomp$31$$, $virtio$$, $options$jscomp$47$$) {
  this.cpu = $cpu$jscomp$31$$;
  this.virtio = $virtio$$;
  this.size_supported = this.size = $options$jscomp$47$$.size_supported;
  this.mask = this.size - 1;
  this.enabled = !1;
  this.notify_offset = $options$jscomp$47$$.notify_offset;
  this.num_staged_replies = this.used_addr = this.avail_last_idx = this.avail_addr = this.desc_addr = 0;
  this.reset();
}
$VirtQueue$$module$src$virtio$$.prototype.get_state = function() {
  const $state$jscomp$64$$ = [];
  $state$jscomp$64$$[0] = this.size;
  $state$jscomp$64$$[1] = this.size_supported;
  $state$jscomp$64$$[2] = this.enabled;
  $state$jscomp$64$$[3] = this.notify_offset;
  $state$jscomp$64$$[4] = this.desc_addr;
  $state$jscomp$64$$[5] = this.avail_addr;
  $state$jscomp$64$$[6] = this.avail_last_idx;
  $state$jscomp$64$$[7] = this.used_addr;
  $state$jscomp$64$$[8] = this.num_staged_replies;
  $state$jscomp$64$$[9] = 1;
  return $state$jscomp$64$$;
};
$VirtQueue$$module$src$virtio$$.prototype.set_state = function($state$jscomp$65$$) {
  this.size = $state$jscomp$65$$[0];
  this.size_supported = $state$jscomp$65$$[1];
  this.enabled = $state$jscomp$65$$[2];
  this.notify_offset = $state$jscomp$65$$[3];
  this.desc_addr = $state$jscomp$65$$[4];
  this.avail_addr = $state$jscomp$65$$[5];
  this.avail_last_idx = $state$jscomp$65$$[6];
  this.used_addr = $state$jscomp$65$$[7];
  this.num_staged_replies = $state$jscomp$65$$[8];
  this.mask = this.size - 1;
  this.fix_wrapping = 1 !== $state$jscomp$65$$[9];
};
$VirtQueue$$module$src$virtio$$.prototype.reset = function() {
  this.enabled = !1;
  this.num_staged_replies = this.used_addr = this.avail_last_idx = this.avail_addr = this.desc_addr = 0;
  this.set_size(this.size_supported);
};
$VirtQueue$$module$src$virtio$$.prototype.is_configured = function() {
  return this.desc_addr && this.avail_addr && this.used_addr;
};
$VirtQueue$$module$src$virtio$$.prototype.enable = function() {
  $dbg_assert$$module$src$log$$(this.is_configured(), "VirtQueue must be configured before enabled");
  this.enabled = !0;
};
$VirtQueue$$module$src$virtio$$.prototype.set_size = function($size$jscomp$43$$) {
  $dbg_assert$$module$src$log$$(0 === ($size$jscomp$43$$ & $size$jscomp$43$$ - 1), "VirtQueue size must be power of 2 or zero");
  $dbg_assert$$module$src$log$$($size$jscomp$43$$ <= this.size_supported, "VirtQueue size must be within supported size");
  this.size = $size$jscomp$43$$;
  this.mask = $size$jscomp$43$$ - 1;
};
$VirtQueue$$module$src$virtio$$.prototype.count_requests = function() {
  $dbg_assert$$module$src$log$$(this.avail_addr, "VirtQueue addresses must be configured before use");
  this.fix_wrapping && (this.fix_wrapping = !1, this.avail_last_idx = (this.avail_get_idx() & ~this.mask) + (this.avail_last_idx & this.mask));
  return this.avail_get_idx() - this.avail_last_idx & 65535;
};
$VirtQueue$$module$src$virtio$$.prototype.has_request = function() {
  $dbg_assert$$module$src$log$$(this.avail_addr, "VirtQueue addresses must be configured before use");
  return 0 !== this.count_requests();
};
$VirtQueue$$module$src$virtio$$.prototype.pop_request = function() {
  $dbg_assert$$module$src$log$$(this.avail_addr, "VirtQueue addresses must be configured before use");
  $dbg_assert$$module$src$log$$(this.has_request(), "VirtQueue must not pop nonexistent request");
  var $bufchain$jscomp$17_desc_idx$$ = this.avail_get_entry(this.avail_last_idx);
  $dbg_log$$module$src$log$$("Pop request: avail_last_idx=" + this.avail_last_idx + " desc_idx=" + $bufchain$jscomp$17_desc_idx$$, 2097152);
  $bufchain$jscomp$17_desc_idx$$ = new $VirtQueueBufferChain$$module$src$virtio$$(this, $bufchain$jscomp$17_desc_idx$$);
  this.avail_last_idx = this.avail_last_idx + 1 & 65535;
  return $bufchain$jscomp$17_desc_idx$$;
};
$VirtQueue$$module$src$virtio$$.prototype.push_reply = function($bufchain$jscomp$18$$) {
  $dbg_assert$$module$src$log$$(this.used_addr, "VirtQueue addresses must be configured before use");
  $dbg_assert$$module$src$log$$(this.num_staged_replies < this.size, "VirtQueue replies must not exceed queue size");
  const $used_idx$$ = this.used_get_idx() + this.num_staged_replies & this.mask;
  $dbg_log$$module$src$log$$("Push reply: used_idx=" + $used_idx$$ + " desc_idx=" + $bufchain$jscomp$18$$.head_idx, 2097152);
  this.used_set_entry($used_idx$$, $bufchain$jscomp$18$$.head_idx, $bufchain$jscomp$18$$.length_written);
  this.num_staged_replies++;
};
$VirtQueue$$module$src$virtio$$.prototype.flush_replies = function() {
  $dbg_assert$$module$src$log$$(this.used_addr, "VirtQueue addresses must be configured before use");
  if (0 === this.num_staged_replies) {
    $dbg_log$$module$src$log$$("flush_replies: Nothing to flush", 2097152);
  } else {
    $dbg_log$$module$src$log$$("Flushing " + this.num_staged_replies + " replies", 2097152);
    var $new_idx$$ = this.used_get_idx() + this.num_staged_replies & 65535;
    this.used_set_idx($new_idx$$);
    this.num_staged_replies = 0;
    this.virtio.is_feature_negotiated(29) ? (this.avail_get_used_event(), this.virtio.raise_irq(1)) : ~this.avail_get_flags() & 1 && this.virtio.raise_irq(1);
  }
};
$VirtQueue$$module$src$virtio$$.prototype.notify_me_after = function($avail_event_num_skipped_requests$$) {
  $dbg_assert$$module$src$log$$(0 <= $avail_event_num_skipped_requests$$, "Must skip a non-negative number of requests");
  $avail_event_num_skipped_requests$$ = this.avail_get_idx() + $avail_event_num_skipped_requests$$ & 65535;
  this.used_set_avail_event($avail_event_num_skipped_requests$$);
};
$VirtQueue$$module$src$virtio$$.prototype.get_descriptor = function($table_address$$, $i$jscomp$123$$) {
  return {addr_low:this.cpu.read32s($table_address$$ + 16 * $i$jscomp$123$$), addr_high:this.cpu.read32s($table_address$$ + 16 * $i$jscomp$123$$ + 4), len:this.cpu.read32s($table_address$$ + 16 * $i$jscomp$123$$ + 8), flags:this.cpu.read16($table_address$$ + 16 * $i$jscomp$123$$ + 12), next:this.cpu.read16($table_address$$ + 16 * $i$jscomp$123$$ + 14), };
};
$VirtQueue$$module$src$virtio$$.prototype.avail_get_flags = function() {
  return this.cpu.read16(this.avail_addr);
};
$VirtQueue$$module$src$virtio$$.prototype.avail_get_idx = function() {
  return this.cpu.read16(this.avail_addr + 2);
};
$VirtQueue$$module$src$virtio$$.prototype.avail_get_entry = function($i$jscomp$124$$) {
  return this.cpu.read16(this.avail_addr + 4 + 2 * ($i$jscomp$124$$ & this.mask));
};
$VirtQueue$$module$src$virtio$$.prototype.avail_get_used_event = function() {
  return this.cpu.read16(this.avail_addr + 4 + 2 * this.size);
};
$VirtQueue$$module$src$virtio$$.prototype.used_get_flags = function() {
  return this.cpu.read16(this.used_addr);
};
$VirtQueue$$module$src$virtio$$.prototype.used_set_flags = function($value$jscomp$201$$) {
  this.cpu.write16(this.used_addr, $value$jscomp$201$$);
};
$VirtQueue$$module$src$virtio$$.prototype.used_get_idx = function() {
  return this.cpu.read16(this.used_addr + 2);
};
$VirtQueue$$module$src$virtio$$.prototype.used_set_idx = function($value$jscomp$202$$) {
  this.cpu.write16(this.used_addr + 2, $value$jscomp$202$$);
};
$VirtQueue$$module$src$virtio$$.prototype.used_set_entry = function($i$jscomp$125$$, $desc_idx$jscomp$1$$, $length_written$$) {
  this.cpu.write32(this.used_addr + 4 + 8 * $i$jscomp$125$$, $desc_idx$jscomp$1$$);
  this.cpu.write32(this.used_addr + 8 + 8 * $i$jscomp$125$$, $length_written$$);
};
$VirtQueue$$module$src$virtio$$.prototype.used_set_avail_event = function($value$jscomp$203$$) {
  this.cpu.write16(this.used_addr + 4 + 8 * this.size, $value$jscomp$203$$);
};
function $VirtQueueBufferChain$$module$src$virtio$$($virtqueue$$, $desc_idx$jscomp$2_head_idx$$) {
  this.cpu = $virtqueue$$.cpu;
  this.virtio = $virtqueue$$.virtio;
  this.head_idx = $desc_idx$jscomp$2_head_idx$$;
  this.read_buffers = [];
  this.length_readable = this.read_buffer_offset = this.read_buffer_idx = 0;
  this.write_buffers = [];
  this.length_writable = this.length_written = this.write_buffer_offset = this.write_buffer_idx = 0;
  let $table_address$jscomp$1$$ = $virtqueue$$.desc_addr, $chain_length$$ = 0, $chain_max$$ = $virtqueue$$.size, $writable_region$$ = !1;
  const $has_indirect_feature$$ = this.virtio.is_feature_negotiated(28);
  $dbg_log$$module$src$log$$("<<< Descriptor chain start", 2097152);
  do {
    const $desc$$ = $virtqueue$$.get_descriptor($table_address$jscomp$1$$, $desc_idx$jscomp$2_head_idx$$);
    $dbg_log$$module$src$log$$("descriptor: idx=" + $desc_idx$jscomp$2_head_idx$$ + " addr=" + $h$$module$src$lib$$($desc$$.addr_high, 8) + ":" + $h$$module$src$lib$$($desc$$.addr_low, 8) + " len=" + $h$$module$src$lib$$($desc$$.len, 8) + " flags=" + $h$$module$src$lib$$($desc$$.flags, 4) + " next=" + $h$$module$src$lib$$($desc$$.next, 4), 2097152);
    if ($has_indirect_feature$$ && $desc$$.flags & 4) {
      $desc$$.flags & 1 && $dbg_log$$module$src$log$$("Driver bug: has set VIRTQ_DESC_F_NEXT flag in an indirect table descriptor", 2097152), $table_address$jscomp$1$$ = $desc$$.addr_low, $chain_length$$ = $desc_idx$jscomp$2_head_idx$$ = 0, $chain_max$$ = $desc$$.len / 16, $dbg_log$$module$src$log$$("start indirect", 2097152);
    } else {
      if ($desc$$.flags & 2) {
        $writable_region$$ = !0, this.write_buffers.push($desc$$), this.length_writable += $desc$$.len;
      } else {
        if ($writable_region$$) {
          $dbg_log$$module$src$log$$("Driver bug: readonly buffer after writeonly buffer within chain", 2097152);
          break;
        }
        this.read_buffers.push($desc$$);
        this.length_readable += $desc$$.len;
      }
      $chain_length$$++;
      if ($chain_length$$ > $chain_max$$) {
        $dbg_log$$module$src$log$$("Driver bug: descriptor chain cycle detected", 2097152);
        break;
      }
      if ($desc$$.flags & 1) {
        $desc_idx$jscomp$2_head_idx$$ = $desc$$.next;
      } else {
        break;
      }
    }
  } while (1);
  $dbg_log$$module$src$log$$("Descriptor chain end >>>", 2097152);
}
$VirtQueueBufferChain$$module$src$virtio$$.prototype.get_next_blob = function($dest_buffer$$) {
  let $dest_offset$$ = 0, $remaining$jscomp$2$$ = $dest_buffer$$.length;
  for (; $remaining$jscomp$2$$;) {
    if (this.read_buffer_idx === this.read_buffers.length) {
      $dbg_log$$module$src$log$$("Device<" + this.virtio.name + "> Read more than device-readable buffers has", 2097152);
      break;
    }
    var $buf$jscomp$4_read_length$$ = this.read_buffers[this.read_buffer_idx];
    const $read_address$$ = $buf$jscomp$4_read_length$$.addr_low + this.read_buffer_offset;
    $buf$jscomp$4_read_length$$ = $buf$jscomp$4_read_length$$.len - this.read_buffer_offset;
    $buf$jscomp$4_read_length$$ > $remaining$jscomp$2$$ ? ($buf$jscomp$4_read_length$$ = $remaining$jscomp$2$$, this.read_buffer_offset += $remaining$jscomp$2$$) : (this.read_buffer_idx++, this.read_buffer_offset = 0);
    $dest_buffer$$.set(this.cpu.read_blob($read_address$$, $buf$jscomp$4_read_length$$), $dest_offset$$);
    $dest_offset$$ += $buf$jscomp$4_read_length$$;
    $remaining$jscomp$2$$ -= $buf$jscomp$4_read_length$$;
  }
  return $dest_offset$$;
};
$VirtQueueBufferChain$$module$src$virtio$$.prototype.set_next_blob = function($src_buffer$$) {
  let $src_offset$$ = 0, $remaining$jscomp$3$$ = $src_buffer$$.length;
  for (; $remaining$jscomp$3$$;) {
    if (this.write_buffer_idx === this.write_buffers.length) {
      $dbg_log$$module$src$log$$("Device<" + this.virtio.name + "> Write more than device-writable capacity", 2097152);
      break;
    }
    var $buf$jscomp$5_write_length$$ = this.write_buffers[this.write_buffer_idx];
    const $write_address$$ = $buf$jscomp$5_write_length$$.addr_low + this.write_buffer_offset;
    $buf$jscomp$5_write_length$$ = $buf$jscomp$5_write_length$$.len - this.write_buffer_offset;
    $buf$jscomp$5_write_length$$ > $remaining$jscomp$3$$ ? ($buf$jscomp$5_write_length$$ = $remaining$jscomp$3$$, this.write_buffer_offset += $remaining$jscomp$3$$) : (this.write_buffer_idx++, this.write_buffer_offset = 0);
    this.cpu.write_blob($src_buffer$$.subarray($src_offset$$, $src_offset$$ + $buf$jscomp$5_write_length$$), $write_address$$);
    $src_offset$$ += $buf$jscomp$5_write_length$$;
    $remaining$jscomp$3$$ -= $buf$jscomp$5_write_length$$;
  }
  this.length_written += $src_offset$$;
  return $src_offset$$;
};
const $P9_LOCK_TYPES$$module$lib$9p$$ = ["shared", "exclusive", "unlock"];
function $Virtio9p$$module$lib$9p$$($filesystem$jscomp$2$$, $cpu$jscomp$32$$, $bus$jscomp$27$$) {
  this.fs = $filesystem$jscomp$2$$;
  this.bus = $bus$jscomp$27$$;
  this.configspace_tagname = [104, 111, 115, 116, 57, 112];
  this.configspace_taglen = this.configspace_tagname.length;
  this.VERSION = "9P2000.L";
  this.msize = this.BLOCKSIZE = 8192;
  this.replybuffer = new Uint8Array(2 * this.msize);
  this.replybuffersize = 0;
  this.fids = [];
  this.virtio = new $VirtIO$$module$src$virtio$$($cpu$jscomp$32$$, {name:"virtio-9p", pci_id:48, device_id:4169, subsystem_device_id:9, common:{initial_port:43008, queues:[{size_supported:32, notify_offset:0, }, ], features:[0, 32, 29, 28, ], on_driver_ok:() => {
  }, }, notification:{initial_port:43264, single_handler:!1, handlers:[$bufchain$jscomp$19_queue_id$jscomp$15$$ => {
    if (0 !== $bufchain$jscomp$19_queue_id$jscomp$15$$) {
      $dbg_assert$$module$src$log$$(!1, "Virtio9P Notified for non-existent queue: " + $bufchain$jscomp$19_queue_id$jscomp$15$$ + " (expected queue_id of 0)");
    } else {
      for (; this.virtqueue.has_request();) {
        $bufchain$jscomp$19_queue_id$jscomp$15$$ = this.virtqueue.pop_request(), this.ReceiveRequest($bufchain$jscomp$19_queue_id$jscomp$15$$);
      }
      this.virtqueue.notify_me_after(0);
    }
  }, ], }, isr_status:{initial_port:42752, }, device_specific:{initial_port:42496, struct:[{bytes:2, name:"mount tag length", read:() => this.configspace_taglen, write:() => {
  }, }, ].concat(Array.from(Array(254).keys()).map($index$jscomp$93$$ => ({bytes:1, name:"mount tag name " + $index$jscomp$93$$, read:() => this.configspace_tagname[$index$jscomp$93$$] || 0, write:() => {
  }, }))), }, });
  this.virtqueue = this.virtio.queues[0];
}
$Virtio9p$$module$lib$9p$$.prototype.get_state = function() {
  var $state$jscomp$66$$ = [];
  $state$jscomp$66$$[0] = this.configspace_tagname;
  $state$jscomp$66$$[1] = this.configspace_taglen;
  $state$jscomp$66$$[2] = this.virtio;
  $state$jscomp$66$$[3] = this.VERSION;
  $state$jscomp$66$$[4] = this.BLOCKSIZE;
  $state$jscomp$66$$[5] = this.msize;
  $state$jscomp$66$$[6] = this.replybuffer;
  $state$jscomp$66$$[7] = this.replybuffersize;
  $state$jscomp$66$$[8] = this.fids.map(function($f$jscomp$8$$) {
    return [$f$jscomp$8$$.inodeid, $f$jscomp$8$$.type, $f$jscomp$8$$.uid, $f$jscomp$8$$.dbg_name];
  });
  $state$jscomp$66$$[9] = this.fs;
  return $state$jscomp$66$$;
};
$Virtio9p$$module$lib$9p$$.prototype.set_state = function($state$jscomp$67$$) {
  this.configspace_tagname = $state$jscomp$67$$[0];
  this.configspace_taglen = $state$jscomp$67$$[1];
  this.virtio.set_state($state$jscomp$67$$[2]);
  this.virtqueue = this.virtio.queues[0];
  this.VERSION = $state$jscomp$67$$[3];
  this.BLOCKSIZE = $state$jscomp$67$$[4];
  this.msize = $state$jscomp$67$$[5];
  this.replybuffer = $state$jscomp$67$$[6];
  this.replybuffersize = $state$jscomp$67$$[7];
  this.fids = $state$jscomp$67$$[8].map(function($f$jscomp$9$$) {
    return {inodeid:$f$jscomp$9$$[0], type:$f$jscomp$9$$[1], uid:$f$jscomp$9$$[2], dbg_name:$f$jscomp$9$$[3]};
  });
  this.fs.set_state($state$jscomp$67$$[9]);
};
$Virtio9p$$module$lib$9p$$.prototype.Createfid = function($inodeid$jscomp$1$$, $type$jscomp$158$$, $uid$$, $dbg_name$$) {
  return {inodeid:$inodeid$jscomp$1$$, type:$type$jscomp$158$$, uid:$uid$$, dbg_name:$dbg_name$$};
};
$Virtio9p$$module$lib$9p$$.prototype.update_dbg_name = function($idx$jscomp$22$$, $newname$jscomp$1$$) {
  for (const $fid$$ of this.fids) {
    $fid$$.inodeid === $idx$jscomp$22$$ && ($fid$$.dbg_name = $newname$jscomp$1$$);
  }
};
$Virtio9p$$module$lib$9p$$.prototype.reset = function() {
  this.fids = [];
  this.virtio.reset();
};
$Virtio9p$$module$lib$9p$$.prototype.BuildReply = function($id$jscomp$28$$, $tag$jscomp$1$$, $payloadsize$$) {
  $dbg_assert$$module$src$log$$(0 <= $payloadsize$$, "9P: Negative payload size");
  $Marshall$$module$lib$marshall$$(["w", "b", "h"], [$payloadsize$$ + 7, $id$jscomp$28$$ + 1, $tag$jscomp$1$$], this.replybuffer, 0);
  $payloadsize$$ + 7 >= this.replybuffer.length && $dbg_log$$module$src$log$$("Error in 9p: payloadsize exceeds maximum length", 4194304);
  this.replybuffersize = $payloadsize$$ + 7;
};
$Virtio9p$$module$lib$9p$$.prototype.SendError = function($tag$jscomp$2$$, $errormsg_size$jscomp$45$$, $errorcode$$) {
  $errormsg_size$jscomp$45$$ = $Marshall$$module$lib$marshall$$(["w"], [$errorcode$$], this.replybuffer, 7);
  this.BuildReply(6, $tag$jscomp$2$$, $errormsg_size$jscomp$45$$);
};
$Virtio9p$$module$lib$9p$$.prototype.SendReply = function($bufchain$jscomp$20$$) {
  $dbg_assert$$module$src$log$$(0 <= this.replybuffersize, "9P: Negative replybuffersize");
  $bufchain$jscomp$20$$.set_next_blob(this.replybuffer.subarray(0, this.replybuffersize));
  this.virtqueue.push_reply($bufchain$jscomp$20$$);
  this.virtqueue.flush_replies();
};
$Virtio9p$$module$lib$9p$$.prototype.ReceiveRequest = async function($bufchain$jscomp$21$$) {
  var $buffer$jscomp$64_dfid_flags$jscomp$20_idx$jscomp$23_major$jscomp$1_oldname$jscomp$1_space$jscomp$7_symgt$$ = new Uint8Array($bufchain$jscomp$21$$.length_readable);
  $bufchain$jscomp$21$$.get_next_blob($buffer$jscomp$64_dfid_flags$jscomp$20_idx$jscomp$23_major$jscomp$1_oldname$jscomp$1_space$jscomp$7_symgt$$);
  var $attr_size_dirfd_mode$jscomp$25_newdirfid_state$jscomp$68_walk$jscomp$1$$ = {offset:0}, $data$jscomp$246_filename$jscomp$13_gid_header$jscomp$6_i$jscomp$126_inodeid$jscomp$2_newname$jscomp$2_req_ret$jscomp$11_version$jscomp$6$$ = $Unmarshall$$module$lib$marshall$$(["w", "b", "h"], $buffer$jscomp$64_dfid_flags$jscomp$20_idx$jscomp$23_major$jscomp$1_oldname$jscomp$1_space$jscomp$7_symgt$$, $attr_size_dirfd_mode$jscomp$25_newdirfid_state$jscomp$68_walk$jscomp$1$$), $error_message_error_message$jscomp$1_error_message$jscomp$2_lock_length_lock_request_name$jscomp$109_offset$jscomp$83_olddirfid_size$jscomp$46_uid$jscomp$1_wnames$$ = 
  $data$jscomp$246_filename$jscomp$13_gid_header$jscomp$6_i$jscomp$126_inodeid$jscomp$2_newname$jscomp$2_req_ret$jscomp$11_version$jscomp$6$$[0], $id$jscomp$29$$ = $data$jscomp$246_filename$jscomp$13_gid_header$jscomp$6_i$jscomp$126_inodeid$jscomp$2_newname$jscomp$2_req_ret$jscomp$11_version$jscomp$6$$[1], $tag$jscomp$3$$ = $data$jscomp$246_filename$jscomp$13_gid_header$jscomp$6_i$jscomp$126_inodeid$jscomp$2_newname$jscomp$2_req_ret$jscomp$11_version$jscomp$6$$[2];
  switch($id$jscomp$29$$) {
    case 8:
      $error_message_error_message$jscomp$1_error_message$jscomp$2_lock_length_lock_request_name$jscomp$109_offset$jscomp$83_olddirfid_size$jscomp$46_uid$jscomp$1_wnames$$ = this.fs.GetTotalSize();
      $buffer$jscomp$64_dfid_flags$jscomp$20_idx$jscomp$23_major$jscomp$1_oldname$jscomp$1_space$jscomp$7_symgt$$ = this.fs.GetSpace();
      $data$jscomp$246_filename$jscomp$13_gid_header$jscomp$6_i$jscomp$126_inodeid$jscomp$2_newname$jscomp$2_req_ret$jscomp$11_version$jscomp$6$$ = [16914839];
      $data$jscomp$246_filename$jscomp$13_gid_header$jscomp$6_i$jscomp$126_inodeid$jscomp$2_newname$jscomp$2_req_ret$jscomp$11_version$jscomp$6$$[1] = this.BLOCKSIZE;
      $data$jscomp$246_filename$jscomp$13_gid_header$jscomp$6_i$jscomp$126_inodeid$jscomp$2_newname$jscomp$2_req_ret$jscomp$11_version$jscomp$6$$[2] = Math.floor($buffer$jscomp$64_dfid_flags$jscomp$20_idx$jscomp$23_major$jscomp$1_oldname$jscomp$1_space$jscomp$7_symgt$$ / $data$jscomp$246_filename$jscomp$13_gid_header$jscomp$6_i$jscomp$126_inodeid$jscomp$2_newname$jscomp$2_req_ret$jscomp$11_version$jscomp$6$$[1]);
      $data$jscomp$246_filename$jscomp$13_gid_header$jscomp$6_i$jscomp$126_inodeid$jscomp$2_newname$jscomp$2_req_ret$jscomp$11_version$jscomp$6$$[3] = $data$jscomp$246_filename$jscomp$13_gid_header$jscomp$6_i$jscomp$126_inodeid$jscomp$2_newname$jscomp$2_req_ret$jscomp$11_version$jscomp$6$$[2] - Math.floor($error_message_error_message$jscomp$1_error_message$jscomp$2_lock_length_lock_request_name$jscomp$109_offset$jscomp$83_olddirfid_size$jscomp$46_uid$jscomp$1_wnames$$ / $data$jscomp$246_filename$jscomp$13_gid_header$jscomp$6_i$jscomp$126_inodeid$jscomp$2_newname$jscomp$2_req_ret$jscomp$11_version$jscomp$6$$[1]);
      $data$jscomp$246_filename$jscomp$13_gid_header$jscomp$6_i$jscomp$126_inodeid$jscomp$2_newname$jscomp$2_req_ret$jscomp$11_version$jscomp$6$$[4] = $data$jscomp$246_filename$jscomp$13_gid_header$jscomp$6_i$jscomp$126_inodeid$jscomp$2_newname$jscomp$2_req_ret$jscomp$11_version$jscomp$6$$[2] - Math.floor($error_message_error_message$jscomp$1_error_message$jscomp$2_lock_length_lock_request_name$jscomp$109_offset$jscomp$83_olddirfid_size$jscomp$46_uid$jscomp$1_wnames$$ / $data$jscomp$246_filename$jscomp$13_gid_header$jscomp$6_i$jscomp$126_inodeid$jscomp$2_newname$jscomp$2_req_ret$jscomp$11_version$jscomp$6$$[1]);
      $data$jscomp$246_filename$jscomp$13_gid_header$jscomp$6_i$jscomp$126_inodeid$jscomp$2_newname$jscomp$2_req_ret$jscomp$11_version$jscomp$6$$[5] = this.fs.CountUsedInodes();
      $data$jscomp$246_filename$jscomp$13_gid_header$jscomp$6_i$jscomp$126_inodeid$jscomp$2_newname$jscomp$2_req_ret$jscomp$11_version$jscomp$6$$[6] = this.fs.CountFreeInodes();
      $data$jscomp$246_filename$jscomp$13_gid_header$jscomp$6_i$jscomp$126_inodeid$jscomp$2_newname$jscomp$2_req_ret$jscomp$11_version$jscomp$6$$[7] = 0;
      $data$jscomp$246_filename$jscomp$13_gid_header$jscomp$6_i$jscomp$126_inodeid$jscomp$2_newname$jscomp$2_req_ret$jscomp$11_version$jscomp$6$$[8] = 256;
      $error_message_error_message$jscomp$1_error_message$jscomp$2_lock_length_lock_request_name$jscomp$109_offset$jscomp$83_olddirfid_size$jscomp$46_uid$jscomp$1_wnames$$ = $Marshall$$module$lib$marshall$$("wwddddddw".split(""), $data$jscomp$246_filename$jscomp$13_gid_header$jscomp$6_i$jscomp$126_inodeid$jscomp$2_newname$jscomp$2_req_ret$jscomp$11_version$jscomp$6$$, this.replybuffer, 7);
      this.BuildReply($id$jscomp$29$$, $tag$jscomp$3$$, $error_message_error_message$jscomp$1_error_message$jscomp$2_lock_length_lock_request_name$jscomp$109_offset$jscomp$83_olddirfid_size$jscomp$46_uid$jscomp$1_wnames$$);
      this.SendReply($bufchain$jscomp$21$$);
      break;
    case 112:
    case 12:
      $data$jscomp$246_filename$jscomp$13_gid_header$jscomp$6_i$jscomp$126_inodeid$jscomp$2_newname$jscomp$2_req_ret$jscomp$11_version$jscomp$6$$ = $Unmarshall$$module$lib$marshall$$(["w", "w"], $buffer$jscomp$64_dfid_flags$jscomp$20_idx$jscomp$23_major$jscomp$1_oldname$jscomp$1_space$jscomp$7_symgt$$, $attr_size_dirfd_mode$jscomp$25_newdirfid_state$jscomp$68_walk$jscomp$1$$);
      var $fid$jscomp$1$$ = $data$jscomp$246_filename$jscomp$13_gid_header$jscomp$6_i$jscomp$126_inodeid$jscomp$2_newname$jscomp$2_req_ret$jscomp$11_version$jscomp$6$$[0];
      $attr_size_dirfd_mode$jscomp$25_newdirfid_state$jscomp$68_walk$jscomp$1$$ = $data$jscomp$246_filename$jscomp$13_gid_header$jscomp$6_i$jscomp$126_inodeid$jscomp$2_newname$jscomp$2_req_ret$jscomp$11_version$jscomp$6$$[1];
      $dbg_log$$module$src$log$$("[open] fid=" + $fid$jscomp$1$$ + ", mode=" + $attr_size_dirfd_mode$jscomp$25_newdirfid_state$jscomp$68_walk$jscomp$1$$, 4194304);
      $buffer$jscomp$64_dfid_flags$jscomp$20_idx$jscomp$23_major$jscomp$1_oldname$jscomp$1_space$jscomp$7_symgt$$ = this.fids[$fid$jscomp$1$$].inodeid;
      var $inode$jscomp$37$$ = this.fs.GetInode($buffer$jscomp$64_dfid_flags$jscomp$20_idx$jscomp$23_major$jscomp$1_oldname$jscomp$1_space$jscomp$7_symgt$$);
      $dbg_log$$module$src$log$$("file open " + this.fids[$fid$jscomp$1$$].dbg_name, 4194304);
      $data$jscomp$246_filename$jscomp$13_gid_header$jscomp$6_i$jscomp$126_inodeid$jscomp$2_newname$jscomp$2_req_ret$jscomp$11_version$jscomp$6$$ = this.fs.OpenInode($buffer$jscomp$64_dfid_flags$jscomp$20_idx$jscomp$23_major$jscomp$1_oldname$jscomp$1_space$jscomp$7_symgt$$, $attr_size_dirfd_mode$jscomp$25_newdirfid_state$jscomp$68_walk$jscomp$1$$);
      this.fs.AddEvent(this.fids[$fid$jscomp$1$$].inodeid, function() {
        $dbg_log$$module$src$log$$("file opened " + this.fids[$fid$jscomp$1$$].dbg_name + " tag:" + $tag$jscomp$3$$, 4194304);
        var $req$jscomp$1$$ = [];
        $req$jscomp$1$$[0] = $inode$jscomp$37$$.qid;
        $req$jscomp$1$$[1] = this.msize - 24;
        $Marshall$$module$lib$marshall$$(["Q", "w"], $req$jscomp$1$$, this.replybuffer, 7);
        this.BuildReply($id$jscomp$29$$, $tag$jscomp$3$$, 17);
        this.SendReply($bufchain$jscomp$21$$);
      }.bind(this));
      break;
    case 70:
      $data$jscomp$246_filename$jscomp$13_gid_header$jscomp$6_i$jscomp$126_inodeid$jscomp$2_newname$jscomp$2_req_ret$jscomp$11_version$jscomp$6$$ = $Unmarshall$$module$lib$marshall$$(["w", "w", "s"], $buffer$jscomp$64_dfid_flags$jscomp$20_idx$jscomp$23_major$jscomp$1_oldname$jscomp$1_space$jscomp$7_symgt$$, $attr_size_dirfd_mode$jscomp$25_newdirfid_state$jscomp$68_walk$jscomp$1$$);
      $buffer$jscomp$64_dfid_flags$jscomp$20_idx$jscomp$23_major$jscomp$1_oldname$jscomp$1_space$jscomp$7_symgt$$ = $data$jscomp$246_filename$jscomp$13_gid_header$jscomp$6_i$jscomp$126_inodeid$jscomp$2_newname$jscomp$2_req_ret$jscomp$11_version$jscomp$6$$[0];
      $fid$jscomp$1$$ = $data$jscomp$246_filename$jscomp$13_gid_header$jscomp$6_i$jscomp$126_inodeid$jscomp$2_newname$jscomp$2_req_ret$jscomp$11_version$jscomp$6$$[1];
      $error_message_error_message$jscomp$1_error_message$jscomp$2_lock_length_lock_request_name$jscomp$109_offset$jscomp$83_olddirfid_size$jscomp$46_uid$jscomp$1_wnames$$ = $data$jscomp$246_filename$jscomp$13_gid_header$jscomp$6_i$jscomp$126_inodeid$jscomp$2_newname$jscomp$2_req_ret$jscomp$11_version$jscomp$6$$[2];
      $dbg_log$$module$src$log$$("[link] dfid=" + $buffer$jscomp$64_dfid_flags$jscomp$20_idx$jscomp$23_major$jscomp$1_oldname$jscomp$1_space$jscomp$7_symgt$$ + ", name=" + $error_message_error_message$jscomp$1_error_message$jscomp$2_lock_length_lock_request_name$jscomp$109_offset$jscomp$83_olddirfid_size$jscomp$46_uid$jscomp$1_wnames$$, 4194304);
      $data$jscomp$246_filename$jscomp$13_gid_header$jscomp$6_i$jscomp$126_inodeid$jscomp$2_newname$jscomp$2_req_ret$jscomp$11_version$jscomp$6$$ = this.fs.Link(this.fids[$buffer$jscomp$64_dfid_flags$jscomp$20_idx$jscomp$23_major$jscomp$1_oldname$jscomp$1_space$jscomp$7_symgt$$].inodeid, this.fids[$fid$jscomp$1$$].inodeid, $error_message_error_message$jscomp$1_error_message$jscomp$2_lock_length_lock_request_name$jscomp$109_offset$jscomp$83_olddirfid_size$jscomp$46_uid$jscomp$1_wnames$$);
      if (0 > $data$jscomp$246_filename$jscomp$13_gid_header$jscomp$6_i$jscomp$126_inodeid$jscomp$2_newname$jscomp$2_req_ret$jscomp$11_version$jscomp$6$$) {
        $error_message_error_message$jscomp$1_error_message$jscomp$2_lock_length_lock_request_name$jscomp$109_offset$jscomp$83_olddirfid_size$jscomp$46_uid$jscomp$1_wnames$$ = "";
        -1 === $data$jscomp$246_filename$jscomp$13_gid_header$jscomp$6_i$jscomp$126_inodeid$jscomp$2_newname$jscomp$2_req_ret$jscomp$11_version$jscomp$6$$ ? $error_message_error_message$jscomp$1_error_message$jscomp$2_lock_length_lock_request_name$jscomp$109_offset$jscomp$83_olddirfid_size$jscomp$46_uid$jscomp$1_wnames$$ = "Operation not permitted" : ($error_message_error_message$jscomp$1_error_message$jscomp$2_lock_length_lock_request_name$jscomp$109_offset$jscomp$83_olddirfid_size$jscomp$46_uid$jscomp$1_wnames$$ = 
        "Unknown error: " + -$data$jscomp$246_filename$jscomp$13_gid_header$jscomp$6_i$jscomp$126_inodeid$jscomp$2_newname$jscomp$2_req_ret$jscomp$11_version$jscomp$6$$, $dbg_assert$$module$src$log$$(!1, "[link]: Unexpected error code: " + -$data$jscomp$246_filename$jscomp$13_gid_header$jscomp$6_i$jscomp$126_inodeid$jscomp$2_newname$jscomp$2_req_ret$jscomp$11_version$jscomp$6$$));
        this.SendError($tag$jscomp$3$$, $error_message_error_message$jscomp$1_error_message$jscomp$2_lock_length_lock_request_name$jscomp$109_offset$jscomp$83_olddirfid_size$jscomp$46_uid$jscomp$1_wnames$$, -$data$jscomp$246_filename$jscomp$13_gid_header$jscomp$6_i$jscomp$126_inodeid$jscomp$2_newname$jscomp$2_req_ret$jscomp$11_version$jscomp$6$$);
        this.SendReply($bufchain$jscomp$21$$);
        break;
      }
      this.BuildReply($id$jscomp$29$$, $tag$jscomp$3$$, 0);
      this.SendReply($bufchain$jscomp$21$$);
      break;
    case 16:
      $data$jscomp$246_filename$jscomp$13_gid_header$jscomp$6_i$jscomp$126_inodeid$jscomp$2_newname$jscomp$2_req_ret$jscomp$11_version$jscomp$6$$ = $Unmarshall$$module$lib$marshall$$(["w", "s", "s", "w"], $buffer$jscomp$64_dfid_flags$jscomp$20_idx$jscomp$23_major$jscomp$1_oldname$jscomp$1_space$jscomp$7_symgt$$, $attr_size_dirfd_mode$jscomp$25_newdirfid_state$jscomp$68_walk$jscomp$1$$);
      $fid$jscomp$1$$ = $data$jscomp$246_filename$jscomp$13_gid_header$jscomp$6_i$jscomp$126_inodeid$jscomp$2_newname$jscomp$2_req_ret$jscomp$11_version$jscomp$6$$[0];
      $error_message_error_message$jscomp$1_error_message$jscomp$2_lock_length_lock_request_name$jscomp$109_offset$jscomp$83_olddirfid_size$jscomp$46_uid$jscomp$1_wnames$$ = $data$jscomp$246_filename$jscomp$13_gid_header$jscomp$6_i$jscomp$126_inodeid$jscomp$2_newname$jscomp$2_req_ret$jscomp$11_version$jscomp$6$$[1];
      $buffer$jscomp$64_dfid_flags$jscomp$20_idx$jscomp$23_major$jscomp$1_oldname$jscomp$1_space$jscomp$7_symgt$$ = $data$jscomp$246_filename$jscomp$13_gid_header$jscomp$6_i$jscomp$126_inodeid$jscomp$2_newname$jscomp$2_req_ret$jscomp$11_version$jscomp$6$$[2];
      $data$jscomp$246_filename$jscomp$13_gid_header$jscomp$6_i$jscomp$126_inodeid$jscomp$2_newname$jscomp$2_req_ret$jscomp$11_version$jscomp$6$$ = $data$jscomp$246_filename$jscomp$13_gid_header$jscomp$6_i$jscomp$126_inodeid$jscomp$2_newname$jscomp$2_req_ret$jscomp$11_version$jscomp$6$$[3];
      $dbg_log$$module$src$log$$("[symlink] fid=" + $fid$jscomp$1$$ + ", name=" + $error_message_error_message$jscomp$1_error_message$jscomp$2_lock_length_lock_request_name$jscomp$109_offset$jscomp$83_olddirfid_size$jscomp$46_uid$jscomp$1_wnames$$ + ", symgt=" + $buffer$jscomp$64_dfid_flags$jscomp$20_idx$jscomp$23_major$jscomp$1_oldname$jscomp$1_space$jscomp$7_symgt$$ + ", gid=" + $data$jscomp$246_filename$jscomp$13_gid_header$jscomp$6_i$jscomp$126_inodeid$jscomp$2_newname$jscomp$2_req_ret$jscomp$11_version$jscomp$6$$, 
      4194304);
      $buffer$jscomp$64_dfid_flags$jscomp$20_idx$jscomp$23_major$jscomp$1_oldname$jscomp$1_space$jscomp$7_symgt$$ = this.fs.CreateSymlink($error_message_error_message$jscomp$1_error_message$jscomp$2_lock_length_lock_request_name$jscomp$109_offset$jscomp$83_olddirfid_size$jscomp$46_uid$jscomp$1_wnames$$, this.fids[$fid$jscomp$1$$].inodeid, $buffer$jscomp$64_dfid_flags$jscomp$20_idx$jscomp$23_major$jscomp$1_oldname$jscomp$1_space$jscomp$7_symgt$$);
      $inode$jscomp$37$$ = this.fs.GetInode($buffer$jscomp$64_dfid_flags$jscomp$20_idx$jscomp$23_major$jscomp$1_oldname$jscomp$1_space$jscomp$7_symgt$$);
      $inode$jscomp$37$$.uid = this.fids[$fid$jscomp$1$$].uid;
      $inode$jscomp$37$$.gid = $data$jscomp$246_filename$jscomp$13_gid_header$jscomp$6_i$jscomp$126_inodeid$jscomp$2_newname$jscomp$2_req_ret$jscomp$11_version$jscomp$6$$;
      $Marshall$$module$lib$marshall$$(["Q"], [$inode$jscomp$37$$.qid], this.replybuffer, 7);
      this.BuildReply($id$jscomp$29$$, $tag$jscomp$3$$, 13);
      this.SendReply($bufchain$jscomp$21$$);
      break;
    case 18:
      $data$jscomp$246_filename$jscomp$13_gid_header$jscomp$6_i$jscomp$126_inodeid$jscomp$2_newname$jscomp$2_req_ret$jscomp$11_version$jscomp$6$$ = $Unmarshall$$module$lib$marshall$$("wswwww".split(""), $buffer$jscomp$64_dfid_flags$jscomp$20_idx$jscomp$23_major$jscomp$1_oldname$jscomp$1_space$jscomp$7_symgt$$, $attr_size_dirfd_mode$jscomp$25_newdirfid_state$jscomp$68_walk$jscomp$1$$);
      $fid$jscomp$1$$ = $data$jscomp$246_filename$jscomp$13_gid_header$jscomp$6_i$jscomp$126_inodeid$jscomp$2_newname$jscomp$2_req_ret$jscomp$11_version$jscomp$6$$[0];
      $error_message_error_message$jscomp$1_error_message$jscomp$2_lock_length_lock_request_name$jscomp$109_offset$jscomp$83_olddirfid_size$jscomp$46_uid$jscomp$1_wnames$$ = $data$jscomp$246_filename$jscomp$13_gid_header$jscomp$6_i$jscomp$126_inodeid$jscomp$2_newname$jscomp$2_req_ret$jscomp$11_version$jscomp$6$$[1];
      $attr_size_dirfd_mode$jscomp$25_newdirfid_state$jscomp$68_walk$jscomp$1$$ = $data$jscomp$246_filename$jscomp$13_gid_header$jscomp$6_i$jscomp$126_inodeid$jscomp$2_newname$jscomp$2_req_ret$jscomp$11_version$jscomp$6$$[2];
      $buffer$jscomp$64_dfid_flags$jscomp$20_idx$jscomp$23_major$jscomp$1_oldname$jscomp$1_space$jscomp$7_symgt$$ = $data$jscomp$246_filename$jscomp$13_gid_header$jscomp$6_i$jscomp$126_inodeid$jscomp$2_newname$jscomp$2_req_ret$jscomp$11_version$jscomp$6$$[3];
      var $count$jscomp$71_minor$jscomp$1_nwfid$$ = $data$jscomp$246_filename$jscomp$13_gid_header$jscomp$6_i$jscomp$126_inodeid$jscomp$2_newname$jscomp$2_req_ret$jscomp$11_version$jscomp$6$$[4];
      $data$jscomp$246_filename$jscomp$13_gid_header$jscomp$6_i$jscomp$126_inodeid$jscomp$2_newname$jscomp$2_req_ret$jscomp$11_version$jscomp$6$$ = $data$jscomp$246_filename$jscomp$13_gid_header$jscomp$6_i$jscomp$126_inodeid$jscomp$2_newname$jscomp$2_req_ret$jscomp$11_version$jscomp$6$$[5];
      $dbg_log$$module$src$log$$("[mknod] fid=" + $fid$jscomp$1$$ + ", name=" + $error_message_error_message$jscomp$1_error_message$jscomp$2_lock_length_lock_request_name$jscomp$109_offset$jscomp$83_olddirfid_size$jscomp$46_uid$jscomp$1_wnames$$ + ", major=" + $buffer$jscomp$64_dfid_flags$jscomp$20_idx$jscomp$23_major$jscomp$1_oldname$jscomp$1_space$jscomp$7_symgt$$ + ", minor=" + $count$jscomp$71_minor$jscomp$1_nwfid$$, 4194304);
      $buffer$jscomp$64_dfid_flags$jscomp$20_idx$jscomp$23_major$jscomp$1_oldname$jscomp$1_space$jscomp$7_symgt$$ = this.fs.CreateNode($error_message_error_message$jscomp$1_error_message$jscomp$2_lock_length_lock_request_name$jscomp$109_offset$jscomp$83_olddirfid_size$jscomp$46_uid$jscomp$1_wnames$$, this.fids[$fid$jscomp$1$$].inodeid, $buffer$jscomp$64_dfid_flags$jscomp$20_idx$jscomp$23_major$jscomp$1_oldname$jscomp$1_space$jscomp$7_symgt$$, $count$jscomp$71_minor$jscomp$1_nwfid$$);
      $inode$jscomp$37$$ = this.fs.GetInode($buffer$jscomp$64_dfid_flags$jscomp$20_idx$jscomp$23_major$jscomp$1_oldname$jscomp$1_space$jscomp$7_symgt$$);
      $inode$jscomp$37$$.mode = $attr_size_dirfd_mode$jscomp$25_newdirfid_state$jscomp$68_walk$jscomp$1$$;
      $inode$jscomp$37$$.uid = this.fids[$fid$jscomp$1$$].uid;
      $inode$jscomp$37$$.gid = $data$jscomp$246_filename$jscomp$13_gid_header$jscomp$6_i$jscomp$126_inodeid$jscomp$2_newname$jscomp$2_req_ret$jscomp$11_version$jscomp$6$$;
      $Marshall$$module$lib$marshall$$(["Q"], [$inode$jscomp$37$$.qid], this.replybuffer, 7);
      this.BuildReply($id$jscomp$29$$, $tag$jscomp$3$$, 13);
      this.SendReply($bufchain$jscomp$21$$);
      break;
    case 22:
      $data$jscomp$246_filename$jscomp$13_gid_header$jscomp$6_i$jscomp$126_inodeid$jscomp$2_newname$jscomp$2_req_ret$jscomp$11_version$jscomp$6$$ = $Unmarshall$$module$lib$marshall$$(["w"], $buffer$jscomp$64_dfid_flags$jscomp$20_idx$jscomp$23_major$jscomp$1_oldname$jscomp$1_space$jscomp$7_symgt$$, $attr_size_dirfd_mode$jscomp$25_newdirfid_state$jscomp$68_walk$jscomp$1$$);
      $fid$jscomp$1$$ = $data$jscomp$246_filename$jscomp$13_gid_header$jscomp$6_i$jscomp$126_inodeid$jscomp$2_newname$jscomp$2_req_ret$jscomp$11_version$jscomp$6$$[0];
      $inode$jscomp$37$$ = this.fs.GetInode(this.fids[$fid$jscomp$1$$].inodeid);
      $dbg_log$$module$src$log$$("[readlink] fid=" + $fid$jscomp$1$$ + " name=" + this.fids[$fid$jscomp$1$$].dbg_name + " target=" + $inode$jscomp$37$$.symlink, 4194304);
      $error_message_error_message$jscomp$1_error_message$jscomp$2_lock_length_lock_request_name$jscomp$109_offset$jscomp$83_olddirfid_size$jscomp$46_uid$jscomp$1_wnames$$ = $Marshall$$module$lib$marshall$$(["s"], [$inode$jscomp$37$$.symlink], this.replybuffer, 7);
      this.BuildReply($id$jscomp$29$$, $tag$jscomp$3$$, $error_message_error_message$jscomp$1_error_message$jscomp$2_lock_length_lock_request_name$jscomp$109_offset$jscomp$83_olddirfid_size$jscomp$46_uid$jscomp$1_wnames$$);
      this.SendReply($bufchain$jscomp$21$$);
      break;
    case 72:
      $data$jscomp$246_filename$jscomp$13_gid_header$jscomp$6_i$jscomp$126_inodeid$jscomp$2_newname$jscomp$2_req_ret$jscomp$11_version$jscomp$6$$ = $Unmarshall$$module$lib$marshall$$(["w", "s", "w", "w"], $buffer$jscomp$64_dfid_flags$jscomp$20_idx$jscomp$23_major$jscomp$1_oldname$jscomp$1_space$jscomp$7_symgt$$, $attr_size_dirfd_mode$jscomp$25_newdirfid_state$jscomp$68_walk$jscomp$1$$);
      $fid$jscomp$1$$ = $data$jscomp$246_filename$jscomp$13_gid_header$jscomp$6_i$jscomp$126_inodeid$jscomp$2_newname$jscomp$2_req_ret$jscomp$11_version$jscomp$6$$[0];
      $error_message_error_message$jscomp$1_error_message$jscomp$2_lock_length_lock_request_name$jscomp$109_offset$jscomp$83_olddirfid_size$jscomp$46_uid$jscomp$1_wnames$$ = $data$jscomp$246_filename$jscomp$13_gid_header$jscomp$6_i$jscomp$126_inodeid$jscomp$2_newname$jscomp$2_req_ret$jscomp$11_version$jscomp$6$$[1];
      $attr_size_dirfd_mode$jscomp$25_newdirfid_state$jscomp$68_walk$jscomp$1$$ = $data$jscomp$246_filename$jscomp$13_gid_header$jscomp$6_i$jscomp$126_inodeid$jscomp$2_newname$jscomp$2_req_ret$jscomp$11_version$jscomp$6$$[2];
      $data$jscomp$246_filename$jscomp$13_gid_header$jscomp$6_i$jscomp$126_inodeid$jscomp$2_newname$jscomp$2_req_ret$jscomp$11_version$jscomp$6$$ = $data$jscomp$246_filename$jscomp$13_gid_header$jscomp$6_i$jscomp$126_inodeid$jscomp$2_newname$jscomp$2_req_ret$jscomp$11_version$jscomp$6$$[3];
      $dbg_log$$module$src$log$$("[mkdir] fid=" + $fid$jscomp$1$$ + ", name=" + $error_message_error_message$jscomp$1_error_message$jscomp$2_lock_length_lock_request_name$jscomp$109_offset$jscomp$83_olddirfid_size$jscomp$46_uid$jscomp$1_wnames$$ + ", mode=" + $attr_size_dirfd_mode$jscomp$25_newdirfid_state$jscomp$68_walk$jscomp$1$$ + ", gid=" + $data$jscomp$246_filename$jscomp$13_gid_header$jscomp$6_i$jscomp$126_inodeid$jscomp$2_newname$jscomp$2_req_ret$jscomp$11_version$jscomp$6$$, 4194304);
      $buffer$jscomp$64_dfid_flags$jscomp$20_idx$jscomp$23_major$jscomp$1_oldname$jscomp$1_space$jscomp$7_symgt$$ = this.fs.CreateDirectory($error_message_error_message$jscomp$1_error_message$jscomp$2_lock_length_lock_request_name$jscomp$109_offset$jscomp$83_olddirfid_size$jscomp$46_uid$jscomp$1_wnames$$, this.fids[$fid$jscomp$1$$].inodeid);
      $inode$jscomp$37$$ = this.fs.GetInode($buffer$jscomp$64_dfid_flags$jscomp$20_idx$jscomp$23_major$jscomp$1_oldname$jscomp$1_space$jscomp$7_symgt$$);
      $inode$jscomp$37$$.mode = $attr_size_dirfd_mode$jscomp$25_newdirfid_state$jscomp$68_walk$jscomp$1$$ | 16384;
      $inode$jscomp$37$$.uid = this.fids[$fid$jscomp$1$$].uid;
      $inode$jscomp$37$$.gid = $data$jscomp$246_filename$jscomp$13_gid_header$jscomp$6_i$jscomp$126_inodeid$jscomp$2_newname$jscomp$2_req_ret$jscomp$11_version$jscomp$6$$;
      $Marshall$$module$lib$marshall$$(["Q"], [$inode$jscomp$37$$.qid], this.replybuffer, 7);
      this.BuildReply($id$jscomp$29$$, $tag$jscomp$3$$, 13);
      this.SendReply($bufchain$jscomp$21$$);
      break;
    case 14:
      $data$jscomp$246_filename$jscomp$13_gid_header$jscomp$6_i$jscomp$126_inodeid$jscomp$2_newname$jscomp$2_req_ret$jscomp$11_version$jscomp$6$$ = $Unmarshall$$module$lib$marshall$$(["w", "s", "w", "w", "w"], $buffer$jscomp$64_dfid_flags$jscomp$20_idx$jscomp$23_major$jscomp$1_oldname$jscomp$1_space$jscomp$7_symgt$$, $attr_size_dirfd_mode$jscomp$25_newdirfid_state$jscomp$68_walk$jscomp$1$$);
      $fid$jscomp$1$$ = $data$jscomp$246_filename$jscomp$13_gid_header$jscomp$6_i$jscomp$126_inodeid$jscomp$2_newname$jscomp$2_req_ret$jscomp$11_version$jscomp$6$$[0];
      $error_message_error_message$jscomp$1_error_message$jscomp$2_lock_length_lock_request_name$jscomp$109_offset$jscomp$83_olddirfid_size$jscomp$46_uid$jscomp$1_wnames$$ = $data$jscomp$246_filename$jscomp$13_gid_header$jscomp$6_i$jscomp$126_inodeid$jscomp$2_newname$jscomp$2_req_ret$jscomp$11_version$jscomp$6$$[1];
      $buffer$jscomp$64_dfid_flags$jscomp$20_idx$jscomp$23_major$jscomp$1_oldname$jscomp$1_space$jscomp$7_symgt$$ = $data$jscomp$246_filename$jscomp$13_gid_header$jscomp$6_i$jscomp$126_inodeid$jscomp$2_newname$jscomp$2_req_ret$jscomp$11_version$jscomp$6$$[2];
      $attr_size_dirfd_mode$jscomp$25_newdirfid_state$jscomp$68_walk$jscomp$1$$ = $data$jscomp$246_filename$jscomp$13_gid_header$jscomp$6_i$jscomp$126_inodeid$jscomp$2_newname$jscomp$2_req_ret$jscomp$11_version$jscomp$6$$[3];
      $data$jscomp$246_filename$jscomp$13_gid_header$jscomp$6_i$jscomp$126_inodeid$jscomp$2_newname$jscomp$2_req_ret$jscomp$11_version$jscomp$6$$ = $data$jscomp$246_filename$jscomp$13_gid_header$jscomp$6_i$jscomp$126_inodeid$jscomp$2_newname$jscomp$2_req_ret$jscomp$11_version$jscomp$6$$[4];
      this.bus.send("9p-create", [$error_message_error_message$jscomp$1_error_message$jscomp$2_lock_length_lock_request_name$jscomp$109_offset$jscomp$83_olddirfid_size$jscomp$46_uid$jscomp$1_wnames$$, this.fids[$fid$jscomp$1$$].inodeid]);
      $dbg_log$$module$src$log$$("[create] fid=" + $fid$jscomp$1$$ + ", name=" + $error_message_error_message$jscomp$1_error_message$jscomp$2_lock_length_lock_request_name$jscomp$109_offset$jscomp$83_olddirfid_size$jscomp$46_uid$jscomp$1_wnames$$ + ", flags=" + $buffer$jscomp$64_dfid_flags$jscomp$20_idx$jscomp$23_major$jscomp$1_oldname$jscomp$1_space$jscomp$7_symgt$$ + ", mode=" + $attr_size_dirfd_mode$jscomp$25_newdirfid_state$jscomp$68_walk$jscomp$1$$ + ", gid=" + $data$jscomp$246_filename$jscomp$13_gid_header$jscomp$6_i$jscomp$126_inodeid$jscomp$2_newname$jscomp$2_req_ret$jscomp$11_version$jscomp$6$$, 
      4194304);
      $buffer$jscomp$64_dfid_flags$jscomp$20_idx$jscomp$23_major$jscomp$1_oldname$jscomp$1_space$jscomp$7_symgt$$ = this.fs.CreateFile($error_message_error_message$jscomp$1_error_message$jscomp$2_lock_length_lock_request_name$jscomp$109_offset$jscomp$83_olddirfid_size$jscomp$46_uid$jscomp$1_wnames$$, this.fids[$fid$jscomp$1$$].inodeid);
      this.fids[$fid$jscomp$1$$].inodeid = $buffer$jscomp$64_dfid_flags$jscomp$20_idx$jscomp$23_major$jscomp$1_oldname$jscomp$1_space$jscomp$7_symgt$$;
      this.fids[$fid$jscomp$1$$].type = 1;
      this.fids[$fid$jscomp$1$$].dbg_name = $error_message_error_message$jscomp$1_error_message$jscomp$2_lock_length_lock_request_name$jscomp$109_offset$jscomp$83_olddirfid_size$jscomp$46_uid$jscomp$1_wnames$$;
      $inode$jscomp$37$$ = this.fs.GetInode($buffer$jscomp$64_dfid_flags$jscomp$20_idx$jscomp$23_major$jscomp$1_oldname$jscomp$1_space$jscomp$7_symgt$$);
      $inode$jscomp$37$$.uid = this.fids[$fid$jscomp$1$$].uid;
      $inode$jscomp$37$$.gid = $data$jscomp$246_filename$jscomp$13_gid_header$jscomp$6_i$jscomp$126_inodeid$jscomp$2_newname$jscomp$2_req_ret$jscomp$11_version$jscomp$6$$;
      $inode$jscomp$37$$.mode = $attr_size_dirfd_mode$jscomp$25_newdirfid_state$jscomp$68_walk$jscomp$1$$ | 32768;
      $Marshall$$module$lib$marshall$$(["Q", "w"], [$inode$jscomp$37$$.qid, this.msize - 24], this.replybuffer, 7);
      this.BuildReply($id$jscomp$29$$, $tag$jscomp$3$$, 17);
      this.SendReply($bufchain$jscomp$21$$);
      break;
    case 52:
      $data$jscomp$246_filename$jscomp$13_gid_header$jscomp$6_i$jscomp$126_inodeid$jscomp$2_newname$jscomp$2_req_ret$jscomp$11_version$jscomp$6$$ = $Unmarshall$$module$lib$marshall$$("wbwddws".split(""), $buffer$jscomp$64_dfid_flags$jscomp$20_idx$jscomp$23_major$jscomp$1_oldname$jscomp$1_space$jscomp$7_symgt$$, $attr_size_dirfd_mode$jscomp$25_newdirfid_state$jscomp$68_walk$jscomp$1$$);
      $fid$jscomp$1$$ = $data$jscomp$246_filename$jscomp$13_gid_header$jscomp$6_i$jscomp$126_inodeid$jscomp$2_newname$jscomp$2_req_ret$jscomp$11_version$jscomp$6$$[0];
      $buffer$jscomp$64_dfid_flags$jscomp$20_idx$jscomp$23_major$jscomp$1_oldname$jscomp$1_space$jscomp$7_symgt$$ = $data$jscomp$246_filename$jscomp$13_gid_header$jscomp$6_i$jscomp$126_inodeid$jscomp$2_newname$jscomp$2_req_ret$jscomp$11_version$jscomp$6$$[2];
      $error_message_error_message$jscomp$1_error_message$jscomp$2_lock_length_lock_request_name$jscomp$109_offset$jscomp$83_olddirfid_size$jscomp$46_uid$jscomp$1_wnames$$ = 0 === $data$jscomp$246_filename$jscomp$13_gid_header$jscomp$6_i$jscomp$126_inodeid$jscomp$2_newname$jscomp$2_req_ret$jscomp$11_version$jscomp$6$$[4] ? Infinity : $data$jscomp$246_filename$jscomp$13_gid_header$jscomp$6_i$jscomp$126_inodeid$jscomp$2_newname$jscomp$2_req_ret$jscomp$11_version$jscomp$6$$[4];
      $error_message_error_message$jscomp$1_error_message$jscomp$2_lock_length_lock_request_name$jscomp$109_offset$jscomp$83_olddirfid_size$jscomp$46_uid$jscomp$1_wnames$$ = this.fs.DescribeLock($data$jscomp$246_filename$jscomp$13_gid_header$jscomp$6_i$jscomp$126_inodeid$jscomp$2_newname$jscomp$2_req_ret$jscomp$11_version$jscomp$6$$[1], $data$jscomp$246_filename$jscomp$13_gid_header$jscomp$6_i$jscomp$126_inodeid$jscomp$2_newname$jscomp$2_req_ret$jscomp$11_version$jscomp$6$$[3], $error_message_error_message$jscomp$1_error_message$jscomp$2_lock_length_lock_request_name$jscomp$109_offset$jscomp$83_olddirfid_size$jscomp$46_uid$jscomp$1_wnames$$, 
      $data$jscomp$246_filename$jscomp$13_gid_header$jscomp$6_i$jscomp$126_inodeid$jscomp$2_newname$jscomp$2_req_ret$jscomp$11_version$jscomp$6$$[5], $data$jscomp$246_filename$jscomp$13_gid_header$jscomp$6_i$jscomp$126_inodeid$jscomp$2_newname$jscomp$2_req_ret$jscomp$11_version$jscomp$6$$[6]);
      $dbg_log$$module$src$log$$("[lock] fid=" + $fid$jscomp$1$$ + ", type=" + $P9_LOCK_TYPES$$module$lib$9p$$[$error_message_error_message$jscomp$1_error_message$jscomp$2_lock_length_lock_request_name$jscomp$109_offset$jscomp$83_olddirfid_size$jscomp$46_uid$jscomp$1_wnames$$.type] + ", start=" + $error_message_error_message$jscomp$1_error_message$jscomp$2_lock_length_lock_request_name$jscomp$109_offset$jscomp$83_olddirfid_size$jscomp$46_uid$jscomp$1_wnames$$.start + ", length=" + $error_message_error_message$jscomp$1_error_message$jscomp$2_lock_length_lock_request_name$jscomp$109_offset$jscomp$83_olddirfid_size$jscomp$46_uid$jscomp$1_wnames$$.length + 
      ", proc_id=" + $error_message_error_message$jscomp$1_error_message$jscomp$2_lock_length_lock_request_name$jscomp$109_offset$jscomp$83_olddirfid_size$jscomp$46_uid$jscomp$1_wnames$$.proc_id);
      $data$jscomp$246_filename$jscomp$13_gid_header$jscomp$6_i$jscomp$126_inodeid$jscomp$2_newname$jscomp$2_req_ret$jscomp$11_version$jscomp$6$$ = this.fs.Lock(this.fids[$fid$jscomp$1$$].inodeid, $error_message_error_message$jscomp$1_error_message$jscomp$2_lock_length_lock_request_name$jscomp$109_offset$jscomp$83_olddirfid_size$jscomp$46_uid$jscomp$1_wnames$$, $buffer$jscomp$64_dfid_flags$jscomp$20_idx$jscomp$23_major$jscomp$1_oldname$jscomp$1_space$jscomp$7_symgt$$);
      $Marshall$$module$lib$marshall$$(["b"], [$data$jscomp$246_filename$jscomp$13_gid_header$jscomp$6_i$jscomp$126_inodeid$jscomp$2_newname$jscomp$2_req_ret$jscomp$11_version$jscomp$6$$], this.replybuffer, 7);
      this.BuildReply($id$jscomp$29$$, $tag$jscomp$3$$, 1);
      this.SendReply($bufchain$jscomp$21$$);
      break;
    case 54:
      $data$jscomp$246_filename$jscomp$13_gid_header$jscomp$6_i$jscomp$126_inodeid$jscomp$2_newname$jscomp$2_req_ret$jscomp$11_version$jscomp$6$$ = $Unmarshall$$module$lib$marshall$$("wbddws".split(""), $buffer$jscomp$64_dfid_flags$jscomp$20_idx$jscomp$23_major$jscomp$1_oldname$jscomp$1_space$jscomp$7_symgt$$, $attr_size_dirfd_mode$jscomp$25_newdirfid_state$jscomp$68_walk$jscomp$1$$);
      $fid$jscomp$1$$ = $data$jscomp$246_filename$jscomp$13_gid_header$jscomp$6_i$jscomp$126_inodeid$jscomp$2_newname$jscomp$2_req_ret$jscomp$11_version$jscomp$6$$[0];
      $error_message_error_message$jscomp$1_error_message$jscomp$2_lock_length_lock_request_name$jscomp$109_offset$jscomp$83_olddirfid_size$jscomp$46_uid$jscomp$1_wnames$$ = 0 === $data$jscomp$246_filename$jscomp$13_gid_header$jscomp$6_i$jscomp$126_inodeid$jscomp$2_newname$jscomp$2_req_ret$jscomp$11_version$jscomp$6$$[3] ? Infinity : $data$jscomp$246_filename$jscomp$13_gid_header$jscomp$6_i$jscomp$126_inodeid$jscomp$2_newname$jscomp$2_req_ret$jscomp$11_version$jscomp$6$$[3];
      $error_message_error_message$jscomp$1_error_message$jscomp$2_lock_length_lock_request_name$jscomp$109_offset$jscomp$83_olddirfid_size$jscomp$46_uid$jscomp$1_wnames$$ = this.fs.DescribeLock($data$jscomp$246_filename$jscomp$13_gid_header$jscomp$6_i$jscomp$126_inodeid$jscomp$2_newname$jscomp$2_req_ret$jscomp$11_version$jscomp$6$$[1], $data$jscomp$246_filename$jscomp$13_gid_header$jscomp$6_i$jscomp$126_inodeid$jscomp$2_newname$jscomp$2_req_ret$jscomp$11_version$jscomp$6$$[2], $error_message_error_message$jscomp$1_error_message$jscomp$2_lock_length_lock_request_name$jscomp$109_offset$jscomp$83_olddirfid_size$jscomp$46_uid$jscomp$1_wnames$$, 
      $data$jscomp$246_filename$jscomp$13_gid_header$jscomp$6_i$jscomp$126_inodeid$jscomp$2_newname$jscomp$2_req_ret$jscomp$11_version$jscomp$6$$[4], $data$jscomp$246_filename$jscomp$13_gid_header$jscomp$6_i$jscomp$126_inodeid$jscomp$2_newname$jscomp$2_req_ret$jscomp$11_version$jscomp$6$$[5]);
      $dbg_log$$module$src$log$$("[getlock] fid=" + $fid$jscomp$1$$ + ", type=" + $P9_LOCK_TYPES$$module$lib$9p$$[$error_message_error_message$jscomp$1_error_message$jscomp$2_lock_length_lock_request_name$jscomp$109_offset$jscomp$83_olddirfid_size$jscomp$46_uid$jscomp$1_wnames$$.type] + ", start=" + $error_message_error_message$jscomp$1_error_message$jscomp$2_lock_length_lock_request_name$jscomp$109_offset$jscomp$83_olddirfid_size$jscomp$46_uid$jscomp$1_wnames$$.start + ", length=" + $error_message_error_message$jscomp$1_error_message$jscomp$2_lock_length_lock_request_name$jscomp$109_offset$jscomp$83_olddirfid_size$jscomp$46_uid$jscomp$1_wnames$$.length + 
      ", proc_id=" + $error_message_error_message$jscomp$1_error_message$jscomp$2_lock_length_lock_request_name$jscomp$109_offset$jscomp$83_olddirfid_size$jscomp$46_uid$jscomp$1_wnames$$.proc_id);
      $data$jscomp$246_filename$jscomp$13_gid_header$jscomp$6_i$jscomp$126_inodeid$jscomp$2_newname$jscomp$2_req_ret$jscomp$11_version$jscomp$6$$ = this.fs.GetLock(this.fids[$fid$jscomp$1$$].inodeid, $error_message_error_message$jscomp$1_error_message$jscomp$2_lock_length_lock_request_name$jscomp$109_offset$jscomp$83_olddirfid_size$jscomp$46_uid$jscomp$1_wnames$$);
      $data$jscomp$246_filename$jscomp$13_gid_header$jscomp$6_i$jscomp$126_inodeid$jscomp$2_newname$jscomp$2_req_ret$jscomp$11_version$jscomp$6$$ || ($data$jscomp$246_filename$jscomp$13_gid_header$jscomp$6_i$jscomp$126_inodeid$jscomp$2_newname$jscomp$2_req_ret$jscomp$11_version$jscomp$6$$ = $error_message_error_message$jscomp$1_error_message$jscomp$2_lock_length_lock_request_name$jscomp$109_offset$jscomp$83_olddirfid_size$jscomp$46_uid$jscomp$1_wnames$$, $data$jscomp$246_filename$jscomp$13_gid_header$jscomp$6_i$jscomp$126_inodeid$jscomp$2_newname$jscomp$2_req_ret$jscomp$11_version$jscomp$6$$.type = 
      2);
      $error_message_error_message$jscomp$1_error_message$jscomp$2_lock_length_lock_request_name$jscomp$109_offset$jscomp$83_olddirfid_size$jscomp$46_uid$jscomp$1_wnames$$ = $Marshall$$module$lib$marshall$$(["b", "d", "d", "w", "s"], [$data$jscomp$246_filename$jscomp$13_gid_header$jscomp$6_i$jscomp$126_inodeid$jscomp$2_newname$jscomp$2_req_ret$jscomp$11_version$jscomp$6$$.type, $data$jscomp$246_filename$jscomp$13_gid_header$jscomp$6_i$jscomp$126_inodeid$jscomp$2_newname$jscomp$2_req_ret$jscomp$11_version$jscomp$6$$.start, 
      Infinity === $data$jscomp$246_filename$jscomp$13_gid_header$jscomp$6_i$jscomp$126_inodeid$jscomp$2_newname$jscomp$2_req_ret$jscomp$11_version$jscomp$6$$.length ? 0 : $data$jscomp$246_filename$jscomp$13_gid_header$jscomp$6_i$jscomp$126_inodeid$jscomp$2_newname$jscomp$2_req_ret$jscomp$11_version$jscomp$6$$.length, $data$jscomp$246_filename$jscomp$13_gid_header$jscomp$6_i$jscomp$126_inodeid$jscomp$2_newname$jscomp$2_req_ret$jscomp$11_version$jscomp$6$$.proc_id, $data$jscomp$246_filename$jscomp$13_gid_header$jscomp$6_i$jscomp$126_inodeid$jscomp$2_newname$jscomp$2_req_ret$jscomp$11_version$jscomp$6$$.client_id], 
      this.replybuffer, 7);
      this.BuildReply($id$jscomp$29$$, $tag$jscomp$3$$, $error_message_error_message$jscomp$1_error_message$jscomp$2_lock_length_lock_request_name$jscomp$109_offset$jscomp$83_olddirfid_size$jscomp$46_uid$jscomp$1_wnames$$);
      this.SendReply($bufchain$jscomp$21$$);
      break;
    case 24:
      $data$jscomp$246_filename$jscomp$13_gid_header$jscomp$6_i$jscomp$126_inodeid$jscomp$2_newname$jscomp$2_req_ret$jscomp$11_version$jscomp$6$$ = $Unmarshall$$module$lib$marshall$$(["w", "d"], $buffer$jscomp$64_dfid_flags$jscomp$20_idx$jscomp$23_major$jscomp$1_oldname$jscomp$1_space$jscomp$7_symgt$$, $attr_size_dirfd_mode$jscomp$25_newdirfid_state$jscomp$68_walk$jscomp$1$$);
      $fid$jscomp$1$$ = $data$jscomp$246_filename$jscomp$13_gid_header$jscomp$6_i$jscomp$126_inodeid$jscomp$2_newname$jscomp$2_req_ret$jscomp$11_version$jscomp$6$$[0];
      $inode$jscomp$37$$ = this.fs.GetInode(this.fids[$fid$jscomp$1$$].inodeid);
      $dbg_log$$module$src$log$$("[getattr]: fid=" + $fid$jscomp$1$$ + " name=" + this.fids[$fid$jscomp$1$$].dbg_name + " request mask=" + $data$jscomp$246_filename$jscomp$13_gid_header$jscomp$6_i$jscomp$126_inodeid$jscomp$2_newname$jscomp$2_req_ret$jscomp$11_version$jscomp$6$$[1], 4194304);
      if (!$inode$jscomp$37$$ || 4 === $inode$jscomp$37$$.status) {
        $dbg_log$$module$src$log$$("getattr: unlinked", 4194304);
        this.SendError($tag$jscomp$3$$, "No such file or directory", 2);
        this.SendReply($bufchain$jscomp$21$$);
        break;
      }
      $data$jscomp$246_filename$jscomp$13_gid_header$jscomp$6_i$jscomp$126_inodeid$jscomp$2_newname$jscomp$2_req_ret$jscomp$11_version$jscomp$6$$[0] = $data$jscomp$246_filename$jscomp$13_gid_header$jscomp$6_i$jscomp$126_inodeid$jscomp$2_newname$jscomp$2_req_ret$jscomp$11_version$jscomp$6$$[1];
      $data$jscomp$246_filename$jscomp$13_gid_header$jscomp$6_i$jscomp$126_inodeid$jscomp$2_newname$jscomp$2_req_ret$jscomp$11_version$jscomp$6$$[1] = $inode$jscomp$37$$.qid;
      $data$jscomp$246_filename$jscomp$13_gid_header$jscomp$6_i$jscomp$126_inodeid$jscomp$2_newname$jscomp$2_req_ret$jscomp$11_version$jscomp$6$$[2] = $inode$jscomp$37$$.mode;
      $data$jscomp$246_filename$jscomp$13_gid_header$jscomp$6_i$jscomp$126_inodeid$jscomp$2_newname$jscomp$2_req_ret$jscomp$11_version$jscomp$6$$[3] = $inode$jscomp$37$$.uid;
      $data$jscomp$246_filename$jscomp$13_gid_header$jscomp$6_i$jscomp$126_inodeid$jscomp$2_newname$jscomp$2_req_ret$jscomp$11_version$jscomp$6$$[4] = $inode$jscomp$37$$.gid;
      $data$jscomp$246_filename$jscomp$13_gid_header$jscomp$6_i$jscomp$126_inodeid$jscomp$2_newname$jscomp$2_req_ret$jscomp$11_version$jscomp$6$$[5] = $inode$jscomp$37$$.nlinks;
      $data$jscomp$246_filename$jscomp$13_gid_header$jscomp$6_i$jscomp$126_inodeid$jscomp$2_newname$jscomp$2_req_ret$jscomp$11_version$jscomp$6$$[6] = $inode$jscomp$37$$.major << 8 | $inode$jscomp$37$$.minor;
      $data$jscomp$246_filename$jscomp$13_gid_header$jscomp$6_i$jscomp$126_inodeid$jscomp$2_newname$jscomp$2_req_ret$jscomp$11_version$jscomp$6$$[7] = $inode$jscomp$37$$.size;
      $data$jscomp$246_filename$jscomp$13_gid_header$jscomp$6_i$jscomp$126_inodeid$jscomp$2_newname$jscomp$2_req_ret$jscomp$11_version$jscomp$6$$[8] = this.BLOCKSIZE;
      $data$jscomp$246_filename$jscomp$13_gid_header$jscomp$6_i$jscomp$126_inodeid$jscomp$2_newname$jscomp$2_req_ret$jscomp$11_version$jscomp$6$$[9] = Math.floor($inode$jscomp$37$$.size / 512 + 1);
      $data$jscomp$246_filename$jscomp$13_gid_header$jscomp$6_i$jscomp$126_inodeid$jscomp$2_newname$jscomp$2_req_ret$jscomp$11_version$jscomp$6$$[10] = $inode$jscomp$37$$.atime;
      $data$jscomp$246_filename$jscomp$13_gid_header$jscomp$6_i$jscomp$126_inodeid$jscomp$2_newname$jscomp$2_req_ret$jscomp$11_version$jscomp$6$$[11] = 0;
      $data$jscomp$246_filename$jscomp$13_gid_header$jscomp$6_i$jscomp$126_inodeid$jscomp$2_newname$jscomp$2_req_ret$jscomp$11_version$jscomp$6$$[12] = $inode$jscomp$37$$.mtime;
      $data$jscomp$246_filename$jscomp$13_gid_header$jscomp$6_i$jscomp$126_inodeid$jscomp$2_newname$jscomp$2_req_ret$jscomp$11_version$jscomp$6$$[13] = 0;
      $data$jscomp$246_filename$jscomp$13_gid_header$jscomp$6_i$jscomp$126_inodeid$jscomp$2_newname$jscomp$2_req_ret$jscomp$11_version$jscomp$6$$[14] = $inode$jscomp$37$$.ctime;
      $data$jscomp$246_filename$jscomp$13_gid_header$jscomp$6_i$jscomp$126_inodeid$jscomp$2_newname$jscomp$2_req_ret$jscomp$11_version$jscomp$6$$[15] = 0;
      $data$jscomp$246_filename$jscomp$13_gid_header$jscomp$6_i$jscomp$126_inodeid$jscomp$2_newname$jscomp$2_req_ret$jscomp$11_version$jscomp$6$$[16] = 0;
      $data$jscomp$246_filename$jscomp$13_gid_header$jscomp$6_i$jscomp$126_inodeid$jscomp$2_newname$jscomp$2_req_ret$jscomp$11_version$jscomp$6$$[17] = 0;
      $data$jscomp$246_filename$jscomp$13_gid_header$jscomp$6_i$jscomp$126_inodeid$jscomp$2_newname$jscomp$2_req_ret$jscomp$11_version$jscomp$6$$[18] = 0;
      $data$jscomp$246_filename$jscomp$13_gid_header$jscomp$6_i$jscomp$126_inodeid$jscomp$2_newname$jscomp$2_req_ret$jscomp$11_version$jscomp$6$$[19] = 0;
      $Marshall$$module$lib$marshall$$("dQwwwddddddddddddddd".split(""), $data$jscomp$246_filename$jscomp$13_gid_header$jscomp$6_i$jscomp$126_inodeid$jscomp$2_newname$jscomp$2_req_ret$jscomp$11_version$jscomp$6$$, this.replybuffer, 7);
      this.BuildReply($id$jscomp$29$$, $tag$jscomp$3$$, 153);
      this.SendReply($bufchain$jscomp$21$$);
      break;
    case 26:
      $data$jscomp$246_filename$jscomp$13_gid_header$jscomp$6_i$jscomp$126_inodeid$jscomp$2_newname$jscomp$2_req_ret$jscomp$11_version$jscomp$6$$ = $Unmarshall$$module$lib$marshall$$("wwwwwddddd".split(""), $buffer$jscomp$64_dfid_flags$jscomp$20_idx$jscomp$23_major$jscomp$1_oldname$jscomp$1_space$jscomp$7_symgt$$, $attr_size_dirfd_mode$jscomp$25_newdirfid_state$jscomp$68_walk$jscomp$1$$);
      $fid$jscomp$1$$ = $data$jscomp$246_filename$jscomp$13_gid_header$jscomp$6_i$jscomp$126_inodeid$jscomp$2_newname$jscomp$2_req_ret$jscomp$11_version$jscomp$6$$[0];
      $inode$jscomp$37$$ = this.fs.GetInode(this.fids[$fid$jscomp$1$$].inodeid);
      $dbg_log$$module$src$log$$("[setattr]: fid=" + $fid$jscomp$1$$ + " request mask=" + $data$jscomp$246_filename$jscomp$13_gid_header$jscomp$6_i$jscomp$126_inodeid$jscomp$2_newname$jscomp$2_req_ret$jscomp$11_version$jscomp$6$$[1] + " name=" + this.fids[$fid$jscomp$1$$].dbg_name, 4194304);
      $data$jscomp$246_filename$jscomp$13_gid_header$jscomp$6_i$jscomp$126_inodeid$jscomp$2_newname$jscomp$2_req_ret$jscomp$11_version$jscomp$6$$[1] & 1 && ($inode$jscomp$37$$.mode = $data$jscomp$246_filename$jscomp$13_gid_header$jscomp$6_i$jscomp$126_inodeid$jscomp$2_newname$jscomp$2_req_ret$jscomp$11_version$jscomp$6$$[2]);
      $data$jscomp$246_filename$jscomp$13_gid_header$jscomp$6_i$jscomp$126_inodeid$jscomp$2_newname$jscomp$2_req_ret$jscomp$11_version$jscomp$6$$[1] & 2 && ($inode$jscomp$37$$.uid = $data$jscomp$246_filename$jscomp$13_gid_header$jscomp$6_i$jscomp$126_inodeid$jscomp$2_newname$jscomp$2_req_ret$jscomp$11_version$jscomp$6$$[3]);
      $data$jscomp$246_filename$jscomp$13_gid_header$jscomp$6_i$jscomp$126_inodeid$jscomp$2_newname$jscomp$2_req_ret$jscomp$11_version$jscomp$6$$[1] & 4 && ($inode$jscomp$37$$.gid = $data$jscomp$246_filename$jscomp$13_gid_header$jscomp$6_i$jscomp$126_inodeid$jscomp$2_newname$jscomp$2_req_ret$jscomp$11_version$jscomp$6$$[4]);
      $data$jscomp$246_filename$jscomp$13_gid_header$jscomp$6_i$jscomp$126_inodeid$jscomp$2_newname$jscomp$2_req_ret$jscomp$11_version$jscomp$6$$[1] & 16 && ($inode$jscomp$37$$.atime = Math.floor((new Date).getTime() / 1000));
      $data$jscomp$246_filename$jscomp$13_gid_header$jscomp$6_i$jscomp$126_inodeid$jscomp$2_newname$jscomp$2_req_ret$jscomp$11_version$jscomp$6$$[1] & 32 && ($inode$jscomp$37$$.mtime = Math.floor((new Date).getTime() / 1000));
      $data$jscomp$246_filename$jscomp$13_gid_header$jscomp$6_i$jscomp$126_inodeid$jscomp$2_newname$jscomp$2_req_ret$jscomp$11_version$jscomp$6$$[1] & 64 && ($inode$jscomp$37$$.ctime = Math.floor((new Date).getTime() / 1000));
      $data$jscomp$246_filename$jscomp$13_gid_header$jscomp$6_i$jscomp$126_inodeid$jscomp$2_newname$jscomp$2_req_ret$jscomp$11_version$jscomp$6$$[1] & 128 && ($inode$jscomp$37$$.atime = $data$jscomp$246_filename$jscomp$13_gid_header$jscomp$6_i$jscomp$126_inodeid$jscomp$2_newname$jscomp$2_req_ret$jscomp$11_version$jscomp$6$$[6]);
      $data$jscomp$246_filename$jscomp$13_gid_header$jscomp$6_i$jscomp$126_inodeid$jscomp$2_newname$jscomp$2_req_ret$jscomp$11_version$jscomp$6$$[1] & 256 && ($inode$jscomp$37$$.mtime = $data$jscomp$246_filename$jscomp$13_gid_header$jscomp$6_i$jscomp$126_inodeid$jscomp$2_newname$jscomp$2_req_ret$jscomp$11_version$jscomp$6$$[8]);
      $data$jscomp$246_filename$jscomp$13_gid_header$jscomp$6_i$jscomp$126_inodeid$jscomp$2_newname$jscomp$2_req_ret$jscomp$11_version$jscomp$6$$[1] & 8 && await this.fs.ChangeSize(this.fids[$fid$jscomp$1$$].inodeid, $data$jscomp$246_filename$jscomp$13_gid_header$jscomp$6_i$jscomp$126_inodeid$jscomp$2_newname$jscomp$2_req_ret$jscomp$11_version$jscomp$6$$[5]);
      this.BuildReply($id$jscomp$29$$, $tag$jscomp$3$$, 0);
      this.SendReply($bufchain$jscomp$21$$);
      break;
    case 50:
      $data$jscomp$246_filename$jscomp$13_gid_header$jscomp$6_i$jscomp$126_inodeid$jscomp$2_newname$jscomp$2_req_ret$jscomp$11_version$jscomp$6$$ = $Unmarshall$$module$lib$marshall$$(["w", "d"], $buffer$jscomp$64_dfid_flags$jscomp$20_idx$jscomp$23_major$jscomp$1_oldname$jscomp$1_space$jscomp$7_symgt$$, $attr_size_dirfd_mode$jscomp$25_newdirfid_state$jscomp$68_walk$jscomp$1$$);
      $fid$jscomp$1$$ = $data$jscomp$246_filename$jscomp$13_gid_header$jscomp$6_i$jscomp$126_inodeid$jscomp$2_newname$jscomp$2_req_ret$jscomp$11_version$jscomp$6$$[0];
      this.BuildReply($id$jscomp$29$$, $tag$jscomp$3$$, 0);
      this.SendReply($bufchain$jscomp$21$$);
      break;
    case 40:
    case 116:
      $data$jscomp$246_filename$jscomp$13_gid_header$jscomp$6_i$jscomp$126_inodeid$jscomp$2_newname$jscomp$2_req_ret$jscomp$11_version$jscomp$6$$ = $Unmarshall$$module$lib$marshall$$(["w", "d", "w"], $buffer$jscomp$64_dfid_flags$jscomp$20_idx$jscomp$23_major$jscomp$1_oldname$jscomp$1_space$jscomp$7_symgt$$, $attr_size_dirfd_mode$jscomp$25_newdirfid_state$jscomp$68_walk$jscomp$1$$);
      $fid$jscomp$1$$ = $data$jscomp$246_filename$jscomp$13_gid_header$jscomp$6_i$jscomp$126_inodeid$jscomp$2_newname$jscomp$2_req_ret$jscomp$11_version$jscomp$6$$[0];
      $error_message_error_message$jscomp$1_error_message$jscomp$2_lock_length_lock_request_name$jscomp$109_offset$jscomp$83_olddirfid_size$jscomp$46_uid$jscomp$1_wnames$$ = $data$jscomp$246_filename$jscomp$13_gid_header$jscomp$6_i$jscomp$126_inodeid$jscomp$2_newname$jscomp$2_req_ret$jscomp$11_version$jscomp$6$$[1];
      $count$jscomp$71_minor$jscomp$1_nwfid$$ = $data$jscomp$246_filename$jscomp$13_gid_header$jscomp$6_i$jscomp$126_inodeid$jscomp$2_newname$jscomp$2_req_ret$jscomp$11_version$jscomp$6$$[2];
      $inode$jscomp$37$$ = this.fs.GetInode(this.fids[$fid$jscomp$1$$].inodeid);
      40 === $id$jscomp$29$$ && $dbg_log$$module$src$log$$("[treaddir]: fid=" + $fid$jscomp$1$$ + " offset=" + $error_message_error_message$jscomp$1_error_message$jscomp$2_lock_length_lock_request_name$jscomp$109_offset$jscomp$83_olddirfid_size$jscomp$46_uid$jscomp$1_wnames$$ + " count=" + $count$jscomp$71_minor$jscomp$1_nwfid$$, 4194304);
      116 === $id$jscomp$29$$ && $dbg_log$$module$src$log$$("[read]: fid=" + $fid$jscomp$1$$ + " (" + this.fids[$fid$jscomp$1$$].dbg_name + ") offset=" + $error_message_error_message$jscomp$1_error_message$jscomp$2_lock_length_lock_request_name$jscomp$109_offset$jscomp$83_olddirfid_size$jscomp$46_uid$jscomp$1_wnames$$ + " count=" + $count$jscomp$71_minor$jscomp$1_nwfid$$ + " fidtype=" + this.fids[$fid$jscomp$1$$].type, 4194304);
      if (!$inode$jscomp$37$$ || 4 === $inode$jscomp$37$$.status) {
        $dbg_log$$module$src$log$$("read/treaddir: unlinked", 4194304);
        this.SendError($tag$jscomp$3$$, "No such file or directory", 2);
        this.SendReply($bufchain$jscomp$21$$);
        break;
      }
      if (2 === this.fids[$fid$jscomp$1$$].type) {
        for ($inode$jscomp$37$$.caps.length < $error_message_error_message$jscomp$1_error_message$jscomp$2_lock_length_lock_request_name$jscomp$109_offset$jscomp$83_olddirfid_size$jscomp$46_uid$jscomp$1_wnames$$ + $count$jscomp$71_minor$jscomp$1_nwfid$$ && ($count$jscomp$71_minor$jscomp$1_nwfid$$ = $inode$jscomp$37$$.caps.length - $error_message_error_message$jscomp$1_error_message$jscomp$2_lock_length_lock_request_name$jscomp$109_offset$jscomp$83_olddirfid_size$jscomp$46_uid$jscomp$1_wnames$$), 
        $data$jscomp$246_filename$jscomp$13_gid_header$jscomp$6_i$jscomp$126_inodeid$jscomp$2_newname$jscomp$2_req_ret$jscomp$11_version$jscomp$6$$ = 0; $data$jscomp$246_filename$jscomp$13_gid_header$jscomp$6_i$jscomp$126_inodeid$jscomp$2_newname$jscomp$2_req_ret$jscomp$11_version$jscomp$6$$ < $count$jscomp$71_minor$jscomp$1_nwfid$$; $data$jscomp$246_filename$jscomp$13_gid_header$jscomp$6_i$jscomp$126_inodeid$jscomp$2_newname$jscomp$2_req_ret$jscomp$11_version$jscomp$6$$++) {
          this.replybuffer[11 + $data$jscomp$246_filename$jscomp$13_gid_header$jscomp$6_i$jscomp$126_inodeid$jscomp$2_newname$jscomp$2_req_ret$jscomp$11_version$jscomp$6$$] = $inode$jscomp$37$$.caps[$error_message_error_message$jscomp$1_error_message$jscomp$2_lock_length_lock_request_name$jscomp$109_offset$jscomp$83_olddirfid_size$jscomp$46_uid$jscomp$1_wnames$$ + $data$jscomp$246_filename$jscomp$13_gid_header$jscomp$6_i$jscomp$126_inodeid$jscomp$2_newname$jscomp$2_req_ret$jscomp$11_version$jscomp$6$$];
        }
      } else {
        this.fs.OpenInode(this.fids[$fid$jscomp$1$$].inodeid, void 0), $data$jscomp$246_filename$jscomp$13_gid_header$jscomp$6_i$jscomp$126_inodeid$jscomp$2_newname$jscomp$2_req_ret$jscomp$11_version$jscomp$6$$ = this.fids[$fid$jscomp$1$$].inodeid, $count$jscomp$71_minor$jscomp$1_nwfid$$ = Math.min($count$jscomp$71_minor$jscomp$1_nwfid$$, this.replybuffer.length - 11), $inode$jscomp$37$$.size < $error_message_error_message$jscomp$1_error_message$jscomp$2_lock_length_lock_request_name$jscomp$109_offset$jscomp$83_olddirfid_size$jscomp$46_uid$jscomp$1_wnames$$ + 
        $count$jscomp$71_minor$jscomp$1_nwfid$$ ? $count$jscomp$71_minor$jscomp$1_nwfid$$ = $inode$jscomp$37$$.size - $error_message_error_message$jscomp$1_error_message$jscomp$2_lock_length_lock_request_name$jscomp$109_offset$jscomp$83_olddirfid_size$jscomp$46_uid$jscomp$1_wnames$$ : 40 === $id$jscomp$29$$ && ($count$jscomp$71_minor$jscomp$1_nwfid$$ = this.fs.RoundToDirentry($data$jscomp$246_filename$jscomp$13_gid_header$jscomp$6_i$jscomp$126_inodeid$jscomp$2_newname$jscomp$2_req_ret$jscomp$11_version$jscomp$6$$, 
        $error_message_error_message$jscomp$1_error_message$jscomp$2_lock_length_lock_request_name$jscomp$109_offset$jscomp$83_olddirfid_size$jscomp$46_uid$jscomp$1_wnames$$ + $count$jscomp$71_minor$jscomp$1_nwfid$$) - $error_message_error_message$jscomp$1_error_message$jscomp$2_lock_length_lock_request_name$jscomp$109_offset$jscomp$83_olddirfid_size$jscomp$46_uid$jscomp$1_wnames$$), $error_message_error_message$jscomp$1_error_message$jscomp$2_lock_length_lock_request_name$jscomp$109_offset$jscomp$83_olddirfid_size$jscomp$46_uid$jscomp$1_wnames$$ > 
        $inode$jscomp$37$$.size && ($count$jscomp$71_minor$jscomp$1_nwfid$$ = 0), this.bus.send("9p-read-start", [this.fids[$fid$jscomp$1$$].dbg_name]), $data$jscomp$246_filename$jscomp$13_gid_header$jscomp$6_i$jscomp$126_inodeid$jscomp$2_newname$jscomp$2_req_ret$jscomp$11_version$jscomp$6$$ = await this.fs.Read($data$jscomp$246_filename$jscomp$13_gid_header$jscomp$6_i$jscomp$126_inodeid$jscomp$2_newname$jscomp$2_req_ret$jscomp$11_version$jscomp$6$$, $error_message_error_message$jscomp$1_error_message$jscomp$2_lock_length_lock_request_name$jscomp$109_offset$jscomp$83_olddirfid_size$jscomp$46_uid$jscomp$1_wnames$$, 
        $count$jscomp$71_minor$jscomp$1_nwfid$$), this.bus.send("9p-read-end", [this.fids[$fid$jscomp$1$$].dbg_name, $count$jscomp$71_minor$jscomp$1_nwfid$$]), $data$jscomp$246_filename$jscomp$13_gid_header$jscomp$6_i$jscomp$126_inodeid$jscomp$2_newname$jscomp$2_req_ret$jscomp$11_version$jscomp$6$$ && this.replybuffer.set($data$jscomp$246_filename$jscomp$13_gid_header$jscomp$6_i$jscomp$126_inodeid$jscomp$2_newname$jscomp$2_req_ret$jscomp$11_version$jscomp$6$$, 11);
      }
      $Marshall$$module$lib$marshall$$(["w"], [$count$jscomp$71_minor$jscomp$1_nwfid$$], this.replybuffer, 7);
      this.BuildReply($id$jscomp$29$$, $tag$jscomp$3$$, 4 + $count$jscomp$71_minor$jscomp$1_nwfid$$);
      this.SendReply($bufchain$jscomp$21$$);
      break;
    case 118:
      $data$jscomp$246_filename$jscomp$13_gid_header$jscomp$6_i$jscomp$126_inodeid$jscomp$2_newname$jscomp$2_req_ret$jscomp$11_version$jscomp$6$$ = $Unmarshall$$module$lib$marshall$$(["w", "d", "w"], $buffer$jscomp$64_dfid_flags$jscomp$20_idx$jscomp$23_major$jscomp$1_oldname$jscomp$1_space$jscomp$7_symgt$$, $attr_size_dirfd_mode$jscomp$25_newdirfid_state$jscomp$68_walk$jscomp$1$$);
      $fid$jscomp$1$$ = $data$jscomp$246_filename$jscomp$13_gid_header$jscomp$6_i$jscomp$126_inodeid$jscomp$2_newname$jscomp$2_req_ret$jscomp$11_version$jscomp$6$$[0];
      $error_message_error_message$jscomp$1_error_message$jscomp$2_lock_length_lock_request_name$jscomp$109_offset$jscomp$83_olddirfid_size$jscomp$46_uid$jscomp$1_wnames$$ = $data$jscomp$246_filename$jscomp$13_gid_header$jscomp$6_i$jscomp$126_inodeid$jscomp$2_newname$jscomp$2_req_ret$jscomp$11_version$jscomp$6$$[1];
      $count$jscomp$71_minor$jscomp$1_nwfid$$ = $data$jscomp$246_filename$jscomp$13_gid_header$jscomp$6_i$jscomp$126_inodeid$jscomp$2_newname$jscomp$2_req_ret$jscomp$11_version$jscomp$6$$[2];
      $data$jscomp$246_filename$jscomp$13_gid_header$jscomp$6_i$jscomp$126_inodeid$jscomp$2_newname$jscomp$2_req_ret$jscomp$11_version$jscomp$6$$ = this.fids[$fid$jscomp$1$$].dbg_name;
      $dbg_log$$module$src$log$$("[write]: fid=" + $fid$jscomp$1$$ + " (" + $data$jscomp$246_filename$jscomp$13_gid_header$jscomp$6_i$jscomp$126_inodeid$jscomp$2_newname$jscomp$2_req_ret$jscomp$11_version$jscomp$6$$ + ") offset=" + $error_message_error_message$jscomp$1_error_message$jscomp$2_lock_length_lock_request_name$jscomp$109_offset$jscomp$83_olddirfid_size$jscomp$46_uid$jscomp$1_wnames$$ + " count=" + $count$jscomp$71_minor$jscomp$1_nwfid$$ + " fidtype=" + this.fids[$fid$jscomp$1$$].type, 
      4194304);
      if (2 === this.fids[$fid$jscomp$1$$].type) {
        this.SendError($tag$jscomp$3$$, "Setxattr not supported", 95);
        this.SendReply($bufchain$jscomp$21$$);
        break;
      } else {
        await this.fs.Write(this.fids[$fid$jscomp$1$$].inodeid, $error_message_error_message$jscomp$1_error_message$jscomp$2_lock_length_lock_request_name$jscomp$109_offset$jscomp$83_olddirfid_size$jscomp$46_uid$jscomp$1_wnames$$, $count$jscomp$71_minor$jscomp$1_nwfid$$, $buffer$jscomp$64_dfid_flags$jscomp$20_idx$jscomp$23_major$jscomp$1_oldname$jscomp$1_space$jscomp$7_symgt$$.subarray($attr_size_dirfd_mode$jscomp$25_newdirfid_state$jscomp$68_walk$jscomp$1$$.offset));
      }
      this.bus.send("9p-write-end", [$data$jscomp$246_filename$jscomp$13_gid_header$jscomp$6_i$jscomp$126_inodeid$jscomp$2_newname$jscomp$2_req_ret$jscomp$11_version$jscomp$6$$, $count$jscomp$71_minor$jscomp$1_nwfid$$]);
      $Marshall$$module$lib$marshall$$(["w"], [$count$jscomp$71_minor$jscomp$1_nwfid$$], this.replybuffer, 7);
      this.BuildReply($id$jscomp$29$$, $tag$jscomp$3$$, 4);
      this.SendReply($bufchain$jscomp$21$$);
      break;
    case 74:
      $data$jscomp$246_filename$jscomp$13_gid_header$jscomp$6_i$jscomp$126_inodeid$jscomp$2_newname$jscomp$2_req_ret$jscomp$11_version$jscomp$6$$ = $Unmarshall$$module$lib$marshall$$(["w", "s", "w", "s"], $buffer$jscomp$64_dfid_flags$jscomp$20_idx$jscomp$23_major$jscomp$1_oldname$jscomp$1_space$jscomp$7_symgt$$, $attr_size_dirfd_mode$jscomp$25_newdirfid_state$jscomp$68_walk$jscomp$1$$);
      $error_message_error_message$jscomp$1_error_message$jscomp$2_lock_length_lock_request_name$jscomp$109_offset$jscomp$83_olddirfid_size$jscomp$46_uid$jscomp$1_wnames$$ = $data$jscomp$246_filename$jscomp$13_gid_header$jscomp$6_i$jscomp$126_inodeid$jscomp$2_newname$jscomp$2_req_ret$jscomp$11_version$jscomp$6$$[0];
      $buffer$jscomp$64_dfid_flags$jscomp$20_idx$jscomp$23_major$jscomp$1_oldname$jscomp$1_space$jscomp$7_symgt$$ = $data$jscomp$246_filename$jscomp$13_gid_header$jscomp$6_i$jscomp$126_inodeid$jscomp$2_newname$jscomp$2_req_ret$jscomp$11_version$jscomp$6$$[1];
      $attr_size_dirfd_mode$jscomp$25_newdirfid_state$jscomp$68_walk$jscomp$1$$ = $data$jscomp$246_filename$jscomp$13_gid_header$jscomp$6_i$jscomp$126_inodeid$jscomp$2_newname$jscomp$2_req_ret$jscomp$11_version$jscomp$6$$[2];
      $data$jscomp$246_filename$jscomp$13_gid_header$jscomp$6_i$jscomp$126_inodeid$jscomp$2_newname$jscomp$2_req_ret$jscomp$11_version$jscomp$6$$ = $data$jscomp$246_filename$jscomp$13_gid_header$jscomp$6_i$jscomp$126_inodeid$jscomp$2_newname$jscomp$2_req_ret$jscomp$11_version$jscomp$6$$[3];
      $dbg_log$$module$src$log$$("[renameat]: oldname=" + $buffer$jscomp$64_dfid_flags$jscomp$20_idx$jscomp$23_major$jscomp$1_oldname$jscomp$1_space$jscomp$7_symgt$$ + " newname=" + $data$jscomp$246_filename$jscomp$13_gid_header$jscomp$6_i$jscomp$126_inodeid$jscomp$2_newname$jscomp$2_req_ret$jscomp$11_version$jscomp$6$$, 4194304);
      $data$jscomp$246_filename$jscomp$13_gid_header$jscomp$6_i$jscomp$126_inodeid$jscomp$2_newname$jscomp$2_req_ret$jscomp$11_version$jscomp$6$$ = await this.fs.Rename(this.fids[$error_message_error_message$jscomp$1_error_message$jscomp$2_lock_length_lock_request_name$jscomp$109_offset$jscomp$83_olddirfid_size$jscomp$46_uid$jscomp$1_wnames$$].inodeid, $buffer$jscomp$64_dfid_flags$jscomp$20_idx$jscomp$23_major$jscomp$1_oldname$jscomp$1_space$jscomp$7_symgt$$, this.fids[$attr_size_dirfd_mode$jscomp$25_newdirfid_state$jscomp$68_walk$jscomp$1$$].inodeid, 
      $data$jscomp$246_filename$jscomp$13_gid_header$jscomp$6_i$jscomp$126_inodeid$jscomp$2_newname$jscomp$2_req_ret$jscomp$11_version$jscomp$6$$);
      if (0 > $data$jscomp$246_filename$jscomp$13_gid_header$jscomp$6_i$jscomp$126_inodeid$jscomp$2_newname$jscomp$2_req_ret$jscomp$11_version$jscomp$6$$) {
        $error_message_error_message$jscomp$1_error_message$jscomp$2_lock_length_lock_request_name$jscomp$109_offset$jscomp$83_olddirfid_size$jscomp$46_uid$jscomp$1_wnames$$ = "";
        -2 === $data$jscomp$246_filename$jscomp$13_gid_header$jscomp$6_i$jscomp$126_inodeid$jscomp$2_newname$jscomp$2_req_ret$jscomp$11_version$jscomp$6$$ ? $error_message_error_message$jscomp$1_error_message$jscomp$2_lock_length_lock_request_name$jscomp$109_offset$jscomp$83_olddirfid_size$jscomp$46_uid$jscomp$1_wnames$$ = "No such file or directory" : -1 === $data$jscomp$246_filename$jscomp$13_gid_header$jscomp$6_i$jscomp$126_inodeid$jscomp$2_newname$jscomp$2_req_ret$jscomp$11_version$jscomp$6$$ ? 
        $error_message_error_message$jscomp$1_error_message$jscomp$2_lock_length_lock_request_name$jscomp$109_offset$jscomp$83_olddirfid_size$jscomp$46_uid$jscomp$1_wnames$$ = "Operation not permitted" : -39 === $data$jscomp$246_filename$jscomp$13_gid_header$jscomp$6_i$jscomp$126_inodeid$jscomp$2_newname$jscomp$2_req_ret$jscomp$11_version$jscomp$6$$ ? $error_message_error_message$jscomp$1_error_message$jscomp$2_lock_length_lock_request_name$jscomp$109_offset$jscomp$83_olddirfid_size$jscomp$46_uid$jscomp$1_wnames$$ = 
        "Directory not empty" : ($error_message_error_message$jscomp$1_error_message$jscomp$2_lock_length_lock_request_name$jscomp$109_offset$jscomp$83_olddirfid_size$jscomp$46_uid$jscomp$1_wnames$$ = "Unknown error: " + -$data$jscomp$246_filename$jscomp$13_gid_header$jscomp$6_i$jscomp$126_inodeid$jscomp$2_newname$jscomp$2_req_ret$jscomp$11_version$jscomp$6$$, $dbg_assert$$module$src$log$$(!1, "[renameat]: Unexpected error code: " + -$data$jscomp$246_filename$jscomp$13_gid_header$jscomp$6_i$jscomp$126_inodeid$jscomp$2_newname$jscomp$2_req_ret$jscomp$11_version$jscomp$6$$));
        this.SendError($tag$jscomp$3$$, $error_message_error_message$jscomp$1_error_message$jscomp$2_lock_length_lock_request_name$jscomp$109_offset$jscomp$83_olddirfid_size$jscomp$46_uid$jscomp$1_wnames$$, -$data$jscomp$246_filename$jscomp$13_gid_header$jscomp$6_i$jscomp$126_inodeid$jscomp$2_newname$jscomp$2_req_ret$jscomp$11_version$jscomp$6$$);
        this.SendReply($bufchain$jscomp$21$$);
        break;
      }
      this.BuildReply($id$jscomp$29$$, $tag$jscomp$3$$, 0);
      this.SendReply($bufchain$jscomp$21$$);
      break;
    case 76:
      $data$jscomp$246_filename$jscomp$13_gid_header$jscomp$6_i$jscomp$126_inodeid$jscomp$2_newname$jscomp$2_req_ret$jscomp$11_version$jscomp$6$$ = $Unmarshall$$module$lib$marshall$$(["w", "s", "w"], $buffer$jscomp$64_dfid_flags$jscomp$20_idx$jscomp$23_major$jscomp$1_oldname$jscomp$1_space$jscomp$7_symgt$$, $attr_size_dirfd_mode$jscomp$25_newdirfid_state$jscomp$68_walk$jscomp$1$$);
      $attr_size_dirfd_mode$jscomp$25_newdirfid_state$jscomp$68_walk$jscomp$1$$ = $data$jscomp$246_filename$jscomp$13_gid_header$jscomp$6_i$jscomp$126_inodeid$jscomp$2_newname$jscomp$2_req_ret$jscomp$11_version$jscomp$6$$[0];
      $error_message_error_message$jscomp$1_error_message$jscomp$2_lock_length_lock_request_name$jscomp$109_offset$jscomp$83_olddirfid_size$jscomp$46_uid$jscomp$1_wnames$$ = $data$jscomp$246_filename$jscomp$13_gid_header$jscomp$6_i$jscomp$126_inodeid$jscomp$2_newname$jscomp$2_req_ret$jscomp$11_version$jscomp$6$$[1];
      $buffer$jscomp$64_dfid_flags$jscomp$20_idx$jscomp$23_major$jscomp$1_oldname$jscomp$1_space$jscomp$7_symgt$$ = $data$jscomp$246_filename$jscomp$13_gid_header$jscomp$6_i$jscomp$126_inodeid$jscomp$2_newname$jscomp$2_req_ret$jscomp$11_version$jscomp$6$$[2];
      $dbg_log$$module$src$log$$("[unlink]: dirfd=" + $attr_size_dirfd_mode$jscomp$25_newdirfid_state$jscomp$68_walk$jscomp$1$$ + " name=" + $error_message_error_message$jscomp$1_error_message$jscomp$2_lock_length_lock_request_name$jscomp$109_offset$jscomp$83_olddirfid_size$jscomp$46_uid$jscomp$1_wnames$$ + " flags=" + $buffer$jscomp$64_dfid_flags$jscomp$20_idx$jscomp$23_major$jscomp$1_oldname$jscomp$1_space$jscomp$7_symgt$$, 4194304);
      $fid$jscomp$1$$ = this.fs.Search(this.fids[$attr_size_dirfd_mode$jscomp$25_newdirfid_state$jscomp$68_walk$jscomp$1$$].inodeid, $error_message_error_message$jscomp$1_error_message$jscomp$2_lock_length_lock_request_name$jscomp$109_offset$jscomp$83_olddirfid_size$jscomp$46_uid$jscomp$1_wnames$$);
      if (-1 === $fid$jscomp$1$$) {
        this.SendError($tag$jscomp$3$$, "No such file or directory", 2);
        this.SendReply($bufchain$jscomp$21$$);
        break;
      }
      $data$jscomp$246_filename$jscomp$13_gid_header$jscomp$6_i$jscomp$126_inodeid$jscomp$2_newname$jscomp$2_req_ret$jscomp$11_version$jscomp$6$$ = this.fs.Unlink(this.fids[$attr_size_dirfd_mode$jscomp$25_newdirfid_state$jscomp$68_walk$jscomp$1$$].inodeid, $error_message_error_message$jscomp$1_error_message$jscomp$2_lock_length_lock_request_name$jscomp$109_offset$jscomp$83_olddirfid_size$jscomp$46_uid$jscomp$1_wnames$$);
      if (0 > $data$jscomp$246_filename$jscomp$13_gid_header$jscomp$6_i$jscomp$126_inodeid$jscomp$2_newname$jscomp$2_req_ret$jscomp$11_version$jscomp$6$$) {
        $error_message_error_message$jscomp$1_error_message$jscomp$2_lock_length_lock_request_name$jscomp$109_offset$jscomp$83_olddirfid_size$jscomp$46_uid$jscomp$1_wnames$$ = "";
        -39 === $data$jscomp$246_filename$jscomp$13_gid_header$jscomp$6_i$jscomp$126_inodeid$jscomp$2_newname$jscomp$2_req_ret$jscomp$11_version$jscomp$6$$ ? $error_message_error_message$jscomp$1_error_message$jscomp$2_lock_length_lock_request_name$jscomp$109_offset$jscomp$83_olddirfid_size$jscomp$46_uid$jscomp$1_wnames$$ = "Directory not empty" : -1 === $data$jscomp$246_filename$jscomp$13_gid_header$jscomp$6_i$jscomp$126_inodeid$jscomp$2_newname$jscomp$2_req_ret$jscomp$11_version$jscomp$6$$ ? $error_message_error_message$jscomp$1_error_message$jscomp$2_lock_length_lock_request_name$jscomp$109_offset$jscomp$83_olddirfid_size$jscomp$46_uid$jscomp$1_wnames$$ = 
        "Operation not permitted" : ($error_message_error_message$jscomp$1_error_message$jscomp$2_lock_length_lock_request_name$jscomp$109_offset$jscomp$83_olddirfid_size$jscomp$46_uid$jscomp$1_wnames$$ = "Unknown error: " + -$data$jscomp$246_filename$jscomp$13_gid_header$jscomp$6_i$jscomp$126_inodeid$jscomp$2_newname$jscomp$2_req_ret$jscomp$11_version$jscomp$6$$, $dbg_assert$$module$src$log$$(!1, "[unlink]: Unexpected error code: " + -$data$jscomp$246_filename$jscomp$13_gid_header$jscomp$6_i$jscomp$126_inodeid$jscomp$2_newname$jscomp$2_req_ret$jscomp$11_version$jscomp$6$$));
        this.SendError($tag$jscomp$3$$, $error_message_error_message$jscomp$1_error_message$jscomp$2_lock_length_lock_request_name$jscomp$109_offset$jscomp$83_olddirfid_size$jscomp$46_uid$jscomp$1_wnames$$, -$data$jscomp$246_filename$jscomp$13_gid_header$jscomp$6_i$jscomp$126_inodeid$jscomp$2_newname$jscomp$2_req_ret$jscomp$11_version$jscomp$6$$);
        this.SendReply($bufchain$jscomp$21$$);
        break;
      }
      this.BuildReply($id$jscomp$29$$, $tag$jscomp$3$$, 0);
      this.SendReply($bufchain$jscomp$21$$);
      break;
    case 100:
      $data$jscomp$246_filename$jscomp$13_gid_header$jscomp$6_i$jscomp$126_inodeid$jscomp$2_newname$jscomp$2_req_ret$jscomp$11_version$jscomp$6$$ = $Unmarshall$$module$lib$marshall$$(["w", "s"], $buffer$jscomp$64_dfid_flags$jscomp$20_idx$jscomp$23_major$jscomp$1_oldname$jscomp$1_space$jscomp$7_symgt$$, $attr_size_dirfd_mode$jscomp$25_newdirfid_state$jscomp$68_walk$jscomp$1$$);
      $dbg_log$$module$src$log$$("[version]: msize=" + $data$jscomp$246_filename$jscomp$13_gid_header$jscomp$6_i$jscomp$126_inodeid$jscomp$2_newname$jscomp$2_req_ret$jscomp$11_version$jscomp$6$$[0] + " version=" + $data$jscomp$246_filename$jscomp$13_gid_header$jscomp$6_i$jscomp$126_inodeid$jscomp$2_newname$jscomp$2_req_ret$jscomp$11_version$jscomp$6$$[1], 4194304);
      this.msize !== $data$jscomp$246_filename$jscomp$13_gid_header$jscomp$6_i$jscomp$126_inodeid$jscomp$2_newname$jscomp$2_req_ret$jscomp$11_version$jscomp$6$$[0] && (this.msize = $data$jscomp$246_filename$jscomp$13_gid_header$jscomp$6_i$jscomp$126_inodeid$jscomp$2_newname$jscomp$2_req_ret$jscomp$11_version$jscomp$6$$[0], this.replybuffer = new Uint8Array(Math.min(16777216, 2 * this.msize)));
      $error_message_error_message$jscomp$1_error_message$jscomp$2_lock_length_lock_request_name$jscomp$109_offset$jscomp$83_olddirfid_size$jscomp$46_uid$jscomp$1_wnames$$ = $Marshall$$module$lib$marshall$$(["w", "s"], [this.msize, this.VERSION], this.replybuffer, 7);
      this.BuildReply($id$jscomp$29$$, $tag$jscomp$3$$, $error_message_error_message$jscomp$1_error_message$jscomp$2_lock_length_lock_request_name$jscomp$109_offset$jscomp$83_olddirfid_size$jscomp$46_uid$jscomp$1_wnames$$);
      this.SendReply($bufchain$jscomp$21$$);
      break;
    case 104:
      $data$jscomp$246_filename$jscomp$13_gid_header$jscomp$6_i$jscomp$126_inodeid$jscomp$2_newname$jscomp$2_req_ret$jscomp$11_version$jscomp$6$$ = $Unmarshall$$module$lib$marshall$$(["w", "w", "s", "s", "w"], $buffer$jscomp$64_dfid_flags$jscomp$20_idx$jscomp$23_major$jscomp$1_oldname$jscomp$1_space$jscomp$7_symgt$$, $attr_size_dirfd_mode$jscomp$25_newdirfid_state$jscomp$68_walk$jscomp$1$$);
      $fid$jscomp$1$$ = $data$jscomp$246_filename$jscomp$13_gid_header$jscomp$6_i$jscomp$126_inodeid$jscomp$2_newname$jscomp$2_req_ret$jscomp$11_version$jscomp$6$$[0];
      $error_message_error_message$jscomp$1_error_message$jscomp$2_lock_length_lock_request_name$jscomp$109_offset$jscomp$83_olddirfid_size$jscomp$46_uid$jscomp$1_wnames$$ = $data$jscomp$246_filename$jscomp$13_gid_header$jscomp$6_i$jscomp$126_inodeid$jscomp$2_newname$jscomp$2_req_ret$jscomp$11_version$jscomp$6$$[4];
      $dbg_log$$module$src$log$$("[attach]: fid=" + $fid$jscomp$1$$ + " afid=" + $h$$module$src$lib$$($data$jscomp$246_filename$jscomp$13_gid_header$jscomp$6_i$jscomp$126_inodeid$jscomp$2_newname$jscomp$2_req_ret$jscomp$11_version$jscomp$6$$[1]) + " uname=" + $data$jscomp$246_filename$jscomp$13_gid_header$jscomp$6_i$jscomp$126_inodeid$jscomp$2_newname$jscomp$2_req_ret$jscomp$11_version$jscomp$6$$[2] + " aname=" + $data$jscomp$246_filename$jscomp$13_gid_header$jscomp$6_i$jscomp$126_inodeid$jscomp$2_newname$jscomp$2_req_ret$jscomp$11_version$jscomp$6$$[3], 
      4194304);
      this.fids[$fid$jscomp$1$$] = this.Createfid(0, 1, $error_message_error_message$jscomp$1_error_message$jscomp$2_lock_length_lock_request_name$jscomp$109_offset$jscomp$83_olddirfid_size$jscomp$46_uid$jscomp$1_wnames$$, "");
      $inode$jscomp$37$$ = this.fs.GetInode(this.fids[$fid$jscomp$1$$].inodeid);
      $Marshall$$module$lib$marshall$$(["Q"], [$inode$jscomp$37$$.qid], this.replybuffer, 7);
      this.BuildReply($id$jscomp$29$$, $tag$jscomp$3$$, 13);
      this.SendReply($bufchain$jscomp$21$$);
      this.bus.send("9p-attach");
      break;
    case 108:
      $data$jscomp$246_filename$jscomp$13_gid_header$jscomp$6_i$jscomp$126_inodeid$jscomp$2_newname$jscomp$2_req_ret$jscomp$11_version$jscomp$6$$ = $Unmarshall$$module$lib$marshall$$(["h"], $buffer$jscomp$64_dfid_flags$jscomp$20_idx$jscomp$23_major$jscomp$1_oldname$jscomp$1_space$jscomp$7_symgt$$, $attr_size_dirfd_mode$jscomp$25_newdirfid_state$jscomp$68_walk$jscomp$1$$);
      $dbg_log$$module$src$log$$("[flush] " + $tag$jscomp$3$$, 4194304);
      this.BuildReply($id$jscomp$29$$, $tag$jscomp$3$$, 0);
      this.SendReply($bufchain$jscomp$21$$);
      break;
    case 110:
      $data$jscomp$246_filename$jscomp$13_gid_header$jscomp$6_i$jscomp$126_inodeid$jscomp$2_newname$jscomp$2_req_ret$jscomp$11_version$jscomp$6$$ = $Unmarshall$$module$lib$marshall$$(["w", "w", "h"], $buffer$jscomp$64_dfid_flags$jscomp$20_idx$jscomp$23_major$jscomp$1_oldname$jscomp$1_space$jscomp$7_symgt$$, $attr_size_dirfd_mode$jscomp$25_newdirfid_state$jscomp$68_walk$jscomp$1$$);
      $fid$jscomp$1$$ = $data$jscomp$246_filename$jscomp$13_gid_header$jscomp$6_i$jscomp$126_inodeid$jscomp$2_newname$jscomp$2_req_ret$jscomp$11_version$jscomp$6$$[0];
      $count$jscomp$71_minor$jscomp$1_nwfid$$ = $data$jscomp$246_filename$jscomp$13_gid_header$jscomp$6_i$jscomp$126_inodeid$jscomp$2_newname$jscomp$2_req_ret$jscomp$11_version$jscomp$6$$[1];
      var $nwname$$ = $data$jscomp$246_filename$jscomp$13_gid_header$jscomp$6_i$jscomp$126_inodeid$jscomp$2_newname$jscomp$2_req_ret$jscomp$11_version$jscomp$6$$[2];
      $dbg_log$$module$src$log$$("[walk]: fid=" + $data$jscomp$246_filename$jscomp$13_gid_header$jscomp$6_i$jscomp$126_inodeid$jscomp$2_newname$jscomp$2_req_ret$jscomp$11_version$jscomp$6$$[0] + " nwfid=" + $data$jscomp$246_filename$jscomp$13_gid_header$jscomp$6_i$jscomp$126_inodeid$jscomp$2_newname$jscomp$2_req_ret$jscomp$11_version$jscomp$6$$[1] + " nwname=" + $nwname$$, 4194304);
      if (0 === $nwname$$) {
        this.fids[$count$jscomp$71_minor$jscomp$1_nwfid$$] = this.Createfid(this.fids[$fid$jscomp$1$$].inodeid, 1, this.fids[$fid$jscomp$1$$].uid, this.fids[$fid$jscomp$1$$].dbg_name);
        $Marshall$$module$lib$marshall$$(["h"], [0], this.replybuffer, 7);
        this.BuildReply($id$jscomp$29$$, $tag$jscomp$3$$, 2);
        this.SendReply($bufchain$jscomp$21$$);
        break;
      }
      $error_message_error_message$jscomp$1_error_message$jscomp$2_lock_length_lock_request_name$jscomp$109_offset$jscomp$83_olddirfid_size$jscomp$46_uid$jscomp$1_wnames$$ = [];
      for ($data$jscomp$246_filename$jscomp$13_gid_header$jscomp$6_i$jscomp$126_inodeid$jscomp$2_newname$jscomp$2_req_ret$jscomp$11_version$jscomp$6$$ = 0; $data$jscomp$246_filename$jscomp$13_gid_header$jscomp$6_i$jscomp$126_inodeid$jscomp$2_newname$jscomp$2_req_ret$jscomp$11_version$jscomp$6$$ < $nwname$$; $data$jscomp$246_filename$jscomp$13_gid_header$jscomp$6_i$jscomp$126_inodeid$jscomp$2_newname$jscomp$2_req_ret$jscomp$11_version$jscomp$6$$++) {
        $error_message_error_message$jscomp$1_error_message$jscomp$2_lock_length_lock_request_name$jscomp$109_offset$jscomp$83_olddirfid_size$jscomp$46_uid$jscomp$1_wnames$$.push("s");
      }
      $attr_size_dirfd_mode$jscomp$25_newdirfid_state$jscomp$68_walk$jscomp$1$$ = $Unmarshall$$module$lib$marshall$$($error_message_error_message$jscomp$1_error_message$jscomp$2_lock_length_lock_request_name$jscomp$109_offset$jscomp$83_olddirfid_size$jscomp$46_uid$jscomp$1_wnames$$, $buffer$jscomp$64_dfid_flags$jscomp$20_idx$jscomp$23_major$jscomp$1_oldname$jscomp$1_space$jscomp$7_symgt$$, $attr_size_dirfd_mode$jscomp$25_newdirfid_state$jscomp$68_walk$jscomp$1$$);
      $buffer$jscomp$64_dfid_flags$jscomp$20_idx$jscomp$23_major$jscomp$1_oldname$jscomp$1_space$jscomp$7_symgt$$ = this.fids[$fid$jscomp$1$$].inodeid;
      $error_message_error_message$jscomp$1_error_message$jscomp$2_lock_length_lock_request_name$jscomp$109_offset$jscomp$83_olddirfid_size$jscomp$46_uid$jscomp$1_wnames$$ = 9;
      var $nwidx$$ = 0;
      $dbg_log$$module$src$log$$("walk in dir " + this.fids[$fid$jscomp$1$$].dbg_name + " to: " + $attr_size_dirfd_mode$jscomp$25_newdirfid_state$jscomp$68_walk$jscomp$1$$.toString(), 4194304);
      for ($data$jscomp$246_filename$jscomp$13_gid_header$jscomp$6_i$jscomp$126_inodeid$jscomp$2_newname$jscomp$2_req_ret$jscomp$11_version$jscomp$6$$ = 0; $data$jscomp$246_filename$jscomp$13_gid_header$jscomp$6_i$jscomp$126_inodeid$jscomp$2_newname$jscomp$2_req_ret$jscomp$11_version$jscomp$6$$ < $nwname$$; $data$jscomp$246_filename$jscomp$13_gid_header$jscomp$6_i$jscomp$126_inodeid$jscomp$2_newname$jscomp$2_req_ret$jscomp$11_version$jscomp$6$$++) {
        $buffer$jscomp$64_dfid_flags$jscomp$20_idx$jscomp$23_major$jscomp$1_oldname$jscomp$1_space$jscomp$7_symgt$$ = this.fs.Search($buffer$jscomp$64_dfid_flags$jscomp$20_idx$jscomp$23_major$jscomp$1_oldname$jscomp$1_space$jscomp$7_symgt$$, $attr_size_dirfd_mode$jscomp$25_newdirfid_state$jscomp$68_walk$jscomp$1$$[$data$jscomp$246_filename$jscomp$13_gid_header$jscomp$6_i$jscomp$126_inodeid$jscomp$2_newname$jscomp$2_req_ret$jscomp$11_version$jscomp$6$$]);
        if (-1 === $buffer$jscomp$64_dfid_flags$jscomp$20_idx$jscomp$23_major$jscomp$1_oldname$jscomp$1_space$jscomp$7_symgt$$) {
          $dbg_log$$module$src$log$$("Could not find: " + $attr_size_dirfd_mode$jscomp$25_newdirfid_state$jscomp$68_walk$jscomp$1$$[$data$jscomp$246_filename$jscomp$13_gid_header$jscomp$6_i$jscomp$126_inodeid$jscomp$2_newname$jscomp$2_req_ret$jscomp$11_version$jscomp$6$$], 4194304);
          break;
        }
        $error_message_error_message$jscomp$1_error_message$jscomp$2_lock_length_lock_request_name$jscomp$109_offset$jscomp$83_olddirfid_size$jscomp$46_uid$jscomp$1_wnames$$ += $Marshall$$module$lib$marshall$$(["Q"], [this.fs.GetInode($buffer$jscomp$64_dfid_flags$jscomp$20_idx$jscomp$23_major$jscomp$1_oldname$jscomp$1_space$jscomp$7_symgt$$).qid], this.replybuffer, $error_message_error_message$jscomp$1_error_message$jscomp$2_lock_length_lock_request_name$jscomp$109_offset$jscomp$83_olddirfid_size$jscomp$46_uid$jscomp$1_wnames$$);
        $nwidx$$++;
        this.fids[$count$jscomp$71_minor$jscomp$1_nwfid$$] = this.Createfid($buffer$jscomp$64_dfid_flags$jscomp$20_idx$jscomp$23_major$jscomp$1_oldname$jscomp$1_space$jscomp$7_symgt$$, 1, this.fids[$fid$jscomp$1$$].uid, $attr_size_dirfd_mode$jscomp$25_newdirfid_state$jscomp$68_walk$jscomp$1$$[$data$jscomp$246_filename$jscomp$13_gid_header$jscomp$6_i$jscomp$126_inodeid$jscomp$2_newname$jscomp$2_req_ret$jscomp$11_version$jscomp$6$$]);
      }
      $Marshall$$module$lib$marshall$$(["h"], [$nwidx$$], this.replybuffer, 7);
      this.BuildReply($id$jscomp$29$$, $tag$jscomp$3$$, $error_message_error_message$jscomp$1_error_message$jscomp$2_lock_length_lock_request_name$jscomp$109_offset$jscomp$83_olddirfid_size$jscomp$46_uid$jscomp$1_wnames$$ - 7);
      this.SendReply($bufchain$jscomp$21$$);
      break;
    case 120:
      $data$jscomp$246_filename$jscomp$13_gid_header$jscomp$6_i$jscomp$126_inodeid$jscomp$2_newname$jscomp$2_req_ret$jscomp$11_version$jscomp$6$$ = $Unmarshall$$module$lib$marshall$$(["w"], $buffer$jscomp$64_dfid_flags$jscomp$20_idx$jscomp$23_major$jscomp$1_oldname$jscomp$1_space$jscomp$7_symgt$$, $attr_size_dirfd_mode$jscomp$25_newdirfid_state$jscomp$68_walk$jscomp$1$$);
      $dbg_log$$module$src$log$$("[clunk]: fid=" + $data$jscomp$246_filename$jscomp$13_gid_header$jscomp$6_i$jscomp$126_inodeid$jscomp$2_newname$jscomp$2_req_ret$jscomp$11_version$jscomp$6$$[0], 4194304);
      this.fids[$data$jscomp$246_filename$jscomp$13_gid_header$jscomp$6_i$jscomp$126_inodeid$jscomp$2_newname$jscomp$2_req_ret$jscomp$11_version$jscomp$6$$[0]] && 0 <= this.fids[$data$jscomp$246_filename$jscomp$13_gid_header$jscomp$6_i$jscomp$126_inodeid$jscomp$2_newname$jscomp$2_req_ret$jscomp$11_version$jscomp$6$$[0]].inodeid && (await this.fs.CloseInode(this.fids[$data$jscomp$246_filename$jscomp$13_gid_header$jscomp$6_i$jscomp$126_inodeid$jscomp$2_newname$jscomp$2_req_ret$jscomp$11_version$jscomp$6$$[0]].inodeid), 
      this.fids[$data$jscomp$246_filename$jscomp$13_gid_header$jscomp$6_i$jscomp$126_inodeid$jscomp$2_newname$jscomp$2_req_ret$jscomp$11_version$jscomp$6$$[0]].inodeid = -1, this.fids[$data$jscomp$246_filename$jscomp$13_gid_header$jscomp$6_i$jscomp$126_inodeid$jscomp$2_newname$jscomp$2_req_ret$jscomp$11_version$jscomp$6$$[0]].type = -1);
      this.BuildReply($id$jscomp$29$$, $tag$jscomp$3$$, 0);
      this.SendReply($bufchain$jscomp$21$$);
      break;
    case 32:
      $data$jscomp$246_filename$jscomp$13_gid_header$jscomp$6_i$jscomp$126_inodeid$jscomp$2_newname$jscomp$2_req_ret$jscomp$11_version$jscomp$6$$ = $Unmarshall$$module$lib$marshall$$(["w", "s", "d", "w"], $buffer$jscomp$64_dfid_flags$jscomp$20_idx$jscomp$23_major$jscomp$1_oldname$jscomp$1_space$jscomp$7_symgt$$, $attr_size_dirfd_mode$jscomp$25_newdirfid_state$jscomp$68_walk$jscomp$1$$);
      $fid$jscomp$1$$ = $data$jscomp$246_filename$jscomp$13_gid_header$jscomp$6_i$jscomp$126_inodeid$jscomp$2_newname$jscomp$2_req_ret$jscomp$11_version$jscomp$6$$[0];
      $error_message_error_message$jscomp$1_error_message$jscomp$2_lock_length_lock_request_name$jscomp$109_offset$jscomp$83_olddirfid_size$jscomp$46_uid$jscomp$1_wnames$$ = $data$jscomp$246_filename$jscomp$13_gid_header$jscomp$6_i$jscomp$126_inodeid$jscomp$2_newname$jscomp$2_req_ret$jscomp$11_version$jscomp$6$$[1];
      $attr_size_dirfd_mode$jscomp$25_newdirfid_state$jscomp$68_walk$jscomp$1$$ = $data$jscomp$246_filename$jscomp$13_gid_header$jscomp$6_i$jscomp$126_inodeid$jscomp$2_newname$jscomp$2_req_ret$jscomp$11_version$jscomp$6$$[2];
      $buffer$jscomp$64_dfid_flags$jscomp$20_idx$jscomp$23_major$jscomp$1_oldname$jscomp$1_space$jscomp$7_symgt$$ = $data$jscomp$246_filename$jscomp$13_gid_header$jscomp$6_i$jscomp$126_inodeid$jscomp$2_newname$jscomp$2_req_ret$jscomp$11_version$jscomp$6$$[3];
      $dbg_log$$module$src$log$$("[txattrcreate]: fid=" + $fid$jscomp$1$$ + " name=" + $error_message_error_message$jscomp$1_error_message$jscomp$2_lock_length_lock_request_name$jscomp$109_offset$jscomp$83_olddirfid_size$jscomp$46_uid$jscomp$1_wnames$$ + " attr_size=" + $attr_size_dirfd_mode$jscomp$25_newdirfid_state$jscomp$68_walk$jscomp$1$$ + " flags=" + $buffer$jscomp$64_dfid_flags$jscomp$20_idx$jscomp$23_major$jscomp$1_oldname$jscomp$1_space$jscomp$7_symgt$$, 4194304);
      this.fids[$fid$jscomp$1$$].type = 2;
      this.BuildReply($id$jscomp$29$$, $tag$jscomp$3$$, 0);
      this.SendReply($bufchain$jscomp$21$$);
      break;
    case 30:
      $data$jscomp$246_filename$jscomp$13_gid_header$jscomp$6_i$jscomp$126_inodeid$jscomp$2_newname$jscomp$2_req_ret$jscomp$11_version$jscomp$6$$ = $Unmarshall$$module$lib$marshall$$(["w", "w", "s"], $buffer$jscomp$64_dfid_flags$jscomp$20_idx$jscomp$23_major$jscomp$1_oldname$jscomp$1_space$jscomp$7_symgt$$, $attr_size_dirfd_mode$jscomp$25_newdirfid_state$jscomp$68_walk$jscomp$1$$);
      $fid$jscomp$1$$ = $data$jscomp$246_filename$jscomp$13_gid_header$jscomp$6_i$jscomp$126_inodeid$jscomp$2_newname$jscomp$2_req_ret$jscomp$11_version$jscomp$6$$[0];
      $error_message_error_message$jscomp$1_error_message$jscomp$2_lock_length_lock_request_name$jscomp$109_offset$jscomp$83_olddirfid_size$jscomp$46_uid$jscomp$1_wnames$$ = $data$jscomp$246_filename$jscomp$13_gid_header$jscomp$6_i$jscomp$126_inodeid$jscomp$2_newname$jscomp$2_req_ret$jscomp$11_version$jscomp$6$$[2];
      $dbg_log$$module$src$log$$("[xattrwalk]: fid=" + $data$jscomp$246_filename$jscomp$13_gid_header$jscomp$6_i$jscomp$126_inodeid$jscomp$2_newname$jscomp$2_req_ret$jscomp$11_version$jscomp$6$$[0] + " newfid=" + $data$jscomp$246_filename$jscomp$13_gid_header$jscomp$6_i$jscomp$126_inodeid$jscomp$2_newname$jscomp$2_req_ret$jscomp$11_version$jscomp$6$$[1] + " name=" + $data$jscomp$246_filename$jscomp$13_gid_header$jscomp$6_i$jscomp$126_inodeid$jscomp$2_newname$jscomp$2_req_ret$jscomp$11_version$jscomp$6$$[2], 
      4194304);
      this.SendError($tag$jscomp$3$$, "Setxattr not supported", 95);
      this.SendReply($bufchain$jscomp$21$$);
      break;
    default:
      $dbg_log$$module$src$log$$("Error in Virtio9p: Unknown id " + $id$jscomp$29$$ + " received", 4194304), $dbg_assert$$module$src$log$$(!1);
  }
};
}).call(this);
